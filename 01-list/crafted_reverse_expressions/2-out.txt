+++ SPECIFICATION --- bidirectional branch, version 0.99
+++ Parameters:
    ===========
+++ input       = 2-in.txt
+++ output      = 2-out.txt
+++ trace       = 3
+++ direction   = first-to-last
+++ drop        = yes
+++ verbose     = 3
+++ split       = 4
+++ loop limit  = 10
+++ stdlib      = /usr/local/lib/indy/stdlib/
-----------------------------------------------------------------------

+++ specification listFunctions from 2-in.txt successfully parsed
+++ Listing
         1: specification listFunctions
         2: sorts
         3:      lst nat
         4: constructors
         5:      0: -> nat
         6:      cons: nat lst -> lst
         7:      nil: -> lst
         8:      s: nat -> nat
         9: defined functions
        10:      app: lst lst -> lst
        11:      rev: lst -> lst
        12: precedence
        13:      rev > app > cons > nil > s > 0
        14: axioms
        15:      rev(nil) = nil;
        16:      app(nil, x) = x;
        17:      app(cons(x, y), z) = cons(x, app(y, z));
        18:      rev(cons(x, y)) = app(rev(y), cons(x, nil));
        19: conjectures
        20:      rev(app(x, app(x, x))) = rev(app(app(x, x), x));
        21: end
+++ finitary sorts: <empty>
+++ Rewrite System 
	rev(nil) -> nil
	app(nil, x) -> x
	app(cons(x, y), z) -> cons(x, app(y, z))
	rev(cons(x, y)) -> app(rev(y), cons(x, nil))
+++ inductive positions:
... for app: 0
... for rev: 0
+++ maximal depths of left-hand sides:
... for app: 2
... for rev: 2
+++ general maximal depth = 2
+++ sort dependence: nat < lst
+++ test sets for defined functions and sorts:
... for rev
... ... lst
		nil
		cons(x, y)
... for app
... ... lst
		nil
		cons(x, y)

+++ conjecture(s)
	rev(app(x, app(x, x))) = rev(app(app(x, x), x))

+++ inference system initiated
+++ treating clause
	rev(app(x, app(x, x))) = rev(app(app(x, x), x))
+++ inductive narrowing on conjecture
	rev(app(x, app(x, x))) = rev(app(app(x, x), x))
... induction variables of
	rev(app(x, app(x, x))) = rev(app(app(x, x), x))
... are:
	x:lst
+++ perform INDUCTIVE NARROWING on conjecture 
	rev(app(x, app(x, x))) = rev(app(app(x, x), x))
... with variable x
+++ creating new conjecture
	rev(app(nil, app(nil, nil))) = rev(app(app(nil, nil), nil))
+++ creating new conjecture
	rev(app(cons(xts, yts), app(cons(xts, yts), cons(xts, yts)))) = rev(app(app(cons(xts, yts), cons(xts, yts)), cons(xts, yts)))
--- clause
	rev(app(nil, app(nil, nil))) = rev(app(app(nil, nil), nil))
... reduced to tautology
	nil = nil
--- clause
	rev(app(cons(xts, yts), app(cons(xts, yts), cons(xts, yts)))) = rev(app(app(cons(xts, yts), cons(xts, yts)), cons(xts, yts)))
... reduced in 6 steps to
	app(rev(app(yts, cons(xts, app(yts, cons(xts, yts))))), cons(xts, nil)) = app(rev(app(app(yts, cons(xts, yts)), cons(xts, yts))), cons(xts, nil))
+++ inductive narrowing succeeded
--- clause
	rev(app(x, app(x, x))) = rev(app(app(x, x), x))
... oriented to rule
	rev(app(app(x, x), x)) -> rev(app(x, app(x, x)))
+++ added new clause(s)
	app(rev(app(yts, cons(xts, app(yts, cons(xts, yts))))), cons(xts, nil)) = app(rev(app(app(yts, cons(xts, yts)), cons(xts, yts))), cons(xts, nil))
... to conjectures

+++ Status of the Inference System
--- Conjectures:
	app(rev(app(yts, cons(xts, app(yts, cons(xts, yts))))), cons(xts, nil)) = app(rev(app(app(yts, cons(xts, yts)), cons(xts, yts))), cons(xts, nil))
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	rev(app(app(x, x), x)) -> rev(app(x, app(x, x)))
--- Primal Grammar:
	<empty>

+++ treating clause
	app(rev(app(yts, cons(xts, app(yts, cons(xts, yts))))), cons(xts, nil)) = app(rev(app(app(yts, cons(xts, yts)), cons(xts, yts))), cons(xts, nil))
+++ inductive narrowing on conjecture
	app(rev(app(yts, cons(xts, app(yts, cons(xts, yts))))), cons(xts, nil)) = app(rev(app(app(yts, cons(xts, yts)), cons(xts, yts))), cons(xts, nil))
... induction variables of
	app(rev(app(yts, cons(xts, app(yts, cons(xts, yts))))), cons(xts, nil)) = app(rev(app(app(yts, cons(xts, yts)), cons(xts, yts))), cons(xts, nil))
... are:
	yts:lst
+++ perform INDUCTIVE NARROWING on conjecture 
	app(rev(app(yts, cons(xts, app(yts, cons(xts, yts))))), cons(xts, nil)) = app(rev(app(app(yts, cons(xts, yts)), cons(xts, yts))), cons(xts, nil))
... with variable yts
+++ creating new conjecture
	app(rev(app(nil, cons(xts, app(nil, cons(xts, nil))))), cons(xts, nil)) = app(rev(app(app(nil, cons(xts, nil)), cons(xts, nil))), cons(xts, nil))
+++ creating new conjecture
	app(rev(app(cons(xts2, yts), cons(xts1, app(cons(xts2, yts), cons(xts1, cons(xts2, yts)))))), cons(xts1, nil)) = app(rev(app(app(cons(xts2, yts), cons(xts1, cons(xts2, yts))), cons(xts1, cons(xts2, yts)))), cons(xts1, nil))
--- clause
	app(rev(app(nil, cons(xts, app(nil, cons(xts, nil))))), cons(xts, nil)) = app(rev(app(app(nil, cons(xts, nil)), cons(xts, nil))), cons(xts, nil))
... reduced to tautology
	cons(xts, cons(xts, cons(xts, nil))) = cons(xts, cons(xts, cons(xts, nil)))
--- clause
	app(rev(app(cons(xts2, yts), cons(xts1, app(cons(xts2, yts), cons(xts1, cons(xts2, yts)))))), cons(xts1, nil)) = app(rev(app(app(cons(xts2, yts), cons(xts1, cons(xts2, yts))), cons(xts1, cons(xts2, yts)))), cons(xts1, nil))
... reduced in 6 steps to
	app(app(rev(app(yts, cons(xts2, cons(xts1, app(yts, cons(xts2, cons(xts1, yts))))))), cons(xts1, nil)), cons(xts2, nil)) = app(app(rev(app(app(yts, cons(xts2, cons(xts1, yts))), cons(xts2, cons(xts1, yts)))), cons(xts1, nil)), cons(xts2, nil))
+++ inductive narrowing succeeded
--- clause
	app(rev(app(yts, cons(xts, app(yts, cons(xts, yts))))), cons(xts, nil)) = app(rev(app(app(yts, cons(xts, yts)), cons(xts, yts))), cons(xts, nil))
... oriented to rule
	app(rev(app(yts, cons(xts, app(yts, cons(xts, yts))))), cons(xts, nil)) -> app(rev(app(app(yts, cons(xts, yts)), cons(xts, yts))), cons(xts, nil))
+++ added new clause(s)
	app(app(rev(app(yts, cons(xts2, cons(xts1, app(yts, cons(xts2, cons(xts1, yts))))))), cons(xts1, nil)), cons(xts2, nil)) = app(app(rev(app(app(yts, cons(xts2, cons(xts1, yts))), cons(xts2, cons(xts1, yts)))), cons(xts1, nil)), cons(xts2, nil))
... to conjectures

+++ Status of the Inference System
--- Conjectures:
	app(app(rev(app(yts, cons(xts2, cons(xts1, app(yts, cons(xts2, cons(xts1, yts))))))), cons(xts1, nil)), cons(xts2, nil)) = app(app(rev(app(app(yts, cons(xts2, cons(xts1, yts))), cons(xts2, cons(xts1, yts)))), cons(xts1, nil)), cons(xts2, nil))
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	rev(app(app(x, x), x)) -> rev(app(x, app(x, x)))
	app(rev(app(yts, cons(xts, app(yts, cons(xts, yts))))), cons(xts, nil)) -> app(rev(app(app(yts, cons(xts, yts)), cons(xts, yts))), cons(xts, nil))
--- Primal Grammar:
	<empty>

+++ treating clause
	app(app(rev(app(yts, cons(xts2, cons(xts1, app(yts, cons(xts2, cons(xts1, yts))))))), cons(xts1, nil)), cons(xts2, nil)) = app(app(rev(app(app(yts, cons(xts2, cons(xts1, yts))), cons(xts2, cons(xts1, yts)))), cons(xts1, nil)), cons(xts2, nil))
+++ inductive narrowing on conjecture
	app(app(rev(app(yts, cons(xts2, cons(xts1, app(yts, cons(xts2, cons(xts1, yts))))))), cons(xts1, nil)), cons(xts2, nil)) = app(app(rev(app(app(yts, cons(xts2, cons(xts1, yts))), cons(xts2, cons(xts1, yts)))), cons(xts1, nil)), cons(xts2, nil))
... induction variables of
	app(app(rev(app(yts, cons(xts2, cons(xts1, app(yts, cons(xts2, cons(xts1, yts))))))), cons(xts1, nil)), cons(xts2, nil)) = app(app(rev(app(app(yts, cons(xts2, cons(xts1, yts))), cons(xts2, cons(xts1, yts)))), cons(xts1, nil)), cons(xts2, nil))
... are:
	yts:lst
+++ perform INDUCTIVE NARROWING on conjecture 
	app(app(rev(app(yts, cons(xts2, cons(xts1, app(yts, cons(xts2, cons(xts1, yts))))))), cons(xts1, nil)), cons(xts2, nil)) = app(app(rev(app(app(yts, cons(xts2, cons(xts1, yts))), cons(xts2, cons(xts1, yts)))), cons(xts1, nil)), cons(xts2, nil))
... with variable yts
+++ creating new conjecture
	app(app(rev(app(nil, cons(xts2, cons(xts1, app(nil, cons(xts2, cons(xts1, nil))))))), cons(xts1, nil)), cons(xts2, nil)) = app(app(rev(app(app(nil, cons(xts2, cons(xts1, nil))), cons(xts2, cons(xts1, nil)))), cons(xts1, nil)), cons(xts2, nil))
+++ creating new conjecture
	app(app(rev(app(cons(xts3, yts), cons(xts2, cons(xts1, app(cons(xts3, yts), cons(xts2, cons(xts1, cons(xts3, yts)))))))), cons(xts1, nil)), cons(xts2, nil)) = app(app(rev(app(app(cons(xts3, yts), cons(xts2, cons(xts1, cons(xts3, yts)))), cons(xts2, cons(xts1, cons(xts3, yts))))), cons(xts1, nil)), cons(xts2, nil))
--- clause
	app(app(rev(app(nil, cons(xts2, cons(xts1, app(nil, cons(xts2, cons(xts1, nil))))))), cons(xts1, nil)), cons(xts2, nil)) = app(app(rev(app(app(nil, cons(xts2, cons(xts1, nil))), cons(xts2, cons(xts1, nil)))), cons(xts1, nil)), cons(xts2, nil))
... reduced to tautology
	cons(xts2, cons(xts1, cons(xts2, cons(xts1, cons(xts2, cons(xts1, nil)))))) = cons(xts2, cons(xts1, cons(xts2, cons(xts1, cons(xts2, cons(xts1, nil))))))
--- clause
	app(app(rev(app(cons(xts3, yts), cons(xts2, cons(xts1, app(cons(xts3, yts), cons(xts2, cons(xts1, cons(xts3, yts)))))))), cons(xts1, nil)), cons(xts2, nil)) = app(app(rev(app(app(cons(xts3, yts), cons(xts2, cons(xts1, cons(xts3, yts)))), cons(xts2, cons(xts1, cons(xts3, yts))))), cons(xts1, nil)), cons(xts2, nil))
... reduced in 6 steps to
	app(app(app(rev(app(yts, cons(xts3, cons(xts2, cons(xts1, app(yts, cons(xts3, cons(xts2, cons(xts1, yts))))))))), cons(xts1, nil)), cons(xts2, nil)), cons(xts3, nil)) = app(app(app(rev(app(app(yts, cons(xts3, cons(xts2, cons(xts1, yts)))), cons(xts3, cons(xts2, cons(xts1, yts))))), cons(xts1, nil)), cons(xts2, nil)), cons(xts3, nil))
+++ inductive narrowing succeeded
--- clause
	app(app(rev(app(yts, cons(xts2, cons(xts1, app(yts, cons(xts2, cons(xts1, yts))))))), cons(xts1, nil)), cons(xts2, nil)) = app(app(rev(app(app(yts, cons(xts2, cons(xts1, yts))), cons(xts2, cons(xts1, yts)))), cons(xts1, nil)), cons(xts2, nil))
... oriented to rule
	app(app(rev(app(yts, cons(xts2, cons(xts1, app(yts, cons(xts2, cons(xts1, yts))))))), cons(xts1, nil)), cons(xts2, nil)) -> app(app(rev(app(app(yts, cons(xts2, cons(xts1, yts))), cons(xts2, cons(xts1, yts)))), cons(xts1, nil)), cons(xts2, nil))
+++ added new clause(s)
	app(app(app(rev(app(yts, cons(xts3, cons(xts2, cons(xts1, app(yts, cons(xts3, cons(xts2, cons(xts1, yts))))))))), cons(xts1, nil)), cons(xts2, nil)), cons(xts3, nil)) = app(app(app(rev(app(app(yts, cons(xts3, cons(xts2, cons(xts1, yts)))), cons(xts3, cons(xts2, cons(xts1, yts))))), cons(xts1, nil)), cons(xts2, nil)), cons(xts3, nil))
... to conjectures

+++ Status of the Inference System
--- Conjectures:
	app(app(app(rev(app(yts, cons(xts3, cons(xts2, cons(xts1, app(yts, cons(xts3, cons(xts2, cons(xts1, yts))))))))), cons(xts1, nil)), cons(xts2, nil)), cons(xts3, nil)) = app(app(app(rev(app(app(yts, cons(xts3, cons(xts2, cons(xts1, yts)))), cons(xts3, cons(xts2, cons(xts1, yts))))), cons(xts1, nil)), cons(xts2, nil)), cons(xts3, nil))
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	rev(app(app(x, x), x)) -> rev(app(x, app(x, x)))
	app(rev(app(yts, cons(xts, app(yts, cons(xts, yts))))), cons(xts, nil)) -> app(rev(app(app(yts, cons(xts, yts)), cons(xts, yts))), cons(xts, nil))
	app(app(rev(app(yts, cons(xts2, cons(xts1, app(yts, cons(xts2, cons(xts1, yts))))))), cons(xts1, nil)), cons(xts2, nil)) -> app(app(rev(app(app(yts, cons(xts2, cons(xts1, yts))), cons(xts2, cons(xts1, yts)))), cons(xts1, nil)), cons(xts2, nil))
--- Primal Grammar:
	<empty>

+++ treating clause
	app(app(app(rev(app(yts, cons(xts3, cons(xts2, cons(xts1, app(yts, cons(xts3, cons(xts2, cons(xts1, yts))))))))), cons(xts1, nil)), cons(xts2, nil)), cons(xts3, nil)) = app(app(app(rev(app(app(yts, cons(xts3, cons(xts2, cons(xts1, yts)))), cons(xts3, cons(xts2, cons(xts1, yts))))), cons(xts1, nil)), cons(xts2, nil)), cons(xts3, nil))
+++ inductive narrowing on conjecture
	app(app(app(rev(app(yts, cons(xts3, cons(xts2, cons(xts1, app(yts, cons(xts3, cons(xts2, cons(xts1, yts))))))))), cons(xts1, nil)), cons(xts2, nil)), cons(xts3, nil)) = app(app(app(rev(app(app(yts, cons(xts3, cons(xts2, cons(xts1, yts)))), cons(xts3, cons(xts2, cons(xts1, yts))))), cons(xts1, nil)), cons(xts2, nil)), cons(xts3, nil))
... induction variables of
	app(app(app(rev(app(yts, cons(xts3, cons(xts2, cons(xts1, app(yts, cons(xts3, cons(xts2, cons(xts1, yts))))))))), cons(xts1, nil)), cons(xts2, nil)), cons(xts3, nil)) = app(app(app(rev(app(app(yts, cons(xts3, cons(xts2, cons(xts1, yts)))), cons(xts3, cons(xts2, cons(xts1, yts))))), cons(xts1, nil)), cons(xts2, nil)), cons(xts3, nil))
... are:
	yts:lst
+++ perform INDUCTIVE NARROWING on conjecture 
	app(app(app(rev(app(yts, cons(xts3, cons(xts2, cons(xts1, app(yts, cons(xts3, cons(xts2, cons(xts1, yts))))))))), cons(xts1, nil)), cons(xts2, nil)), cons(xts3, nil)) = app(app(app(rev(app(app(yts, cons(xts3, cons(xts2, cons(xts1, yts)))), cons(xts3, cons(xts2, cons(xts1, yts))))), cons(xts1, nil)), cons(xts2, nil)), cons(xts3, nil))
... with variable yts
+++ creating new conjecture
	app(app(app(rev(app(nil, cons(xts3, cons(xts2, cons(xts1, app(nil, cons(xts3, cons(xts2, cons(xts1, nil))))))))), cons(xts1, nil)), cons(xts2, nil)), cons(xts3, nil)) = app(app(app(rev(app(app(nil, cons(xts3, cons(xts2, cons(xts1, nil)))), cons(xts3, cons(xts2, cons(xts1, nil))))), cons(xts1, nil)), cons(xts2, nil)), cons(xts3, nil))
+++ creating new conjecture
	app(app(app(rev(app(cons(xts4, yts), cons(xts3, cons(xts2, cons(xts1, app(cons(xts4, yts), cons(xts3, cons(xts2, cons(xts1, cons(xts4, yts)))))))))), cons(xts1, nil)), cons(xts2, nil)), cons(xts3, nil)) = app(app(app(rev(app(app(cons(xts4, yts), cons(xts3, cons(xts2, cons(xts1, cons(xts4, yts))))), cons(xts3, cons(xts2, cons(xts1, cons(xts4, yts)))))), cons(xts1, nil)), cons(xts2, nil)), cons(xts3, nil))
--- clause
	app(app(app(rev(app(nil, cons(xts3, cons(xts2, cons(xts1, app(nil, cons(xts3, cons(xts2, cons(xts1, nil))))))))), cons(xts1, nil)), cons(xts2, nil)), cons(xts3, nil)) = app(app(app(rev(app(app(nil, cons(xts3, cons(xts2, cons(xts1, nil)))), cons(xts3, cons(xts2, cons(xts1, nil))))), cons(xts1, nil)), cons(xts2, nil)), cons(xts3, nil))
... reduced to tautology
	cons(xts3, cons(xts2, cons(xts1, cons(xts3, cons(xts2, cons(xts1, cons(xts3, cons(xts2, cons(xts1, nil))))))))) = cons(xts3, cons(xts2, cons(xts1, cons(xts3, cons(xts2, cons(xts1, cons(xts3, cons(xts2, cons(xts1, nil)))))))))
--- clause
	app(app(app(rev(app(cons(xts4, yts), cons(xts3, cons(xts2, cons(xts1, app(cons(xts4, yts), cons(xts3, cons(xts2, cons(xts1, cons(xts4, yts)))))))))), cons(xts1, nil)), cons(xts2, nil)), cons(xts3, nil)) = app(app(app(rev(app(app(cons(xts4, yts), cons(xts3, cons(xts2, cons(xts1, cons(xts4, yts))))), cons(xts3, cons(xts2, cons(xts1, cons(xts4, yts)))))), cons(xts1, nil)), cons(xts2, nil)), cons(xts3, nil))
... reduced in 6 steps to
	app(app(app(app(rev(app(yts, cons(xts4, cons(xts3, cons(xts2, cons(xts1, app(yts, cons(xts4, cons(xts3, cons(xts2, cons(xts1, yts))))))))))), cons(xts1, nil)), cons(xts2, nil)), cons(xts3, nil)), cons(xts4, nil)) = app(app(app(app(rev(app(app(yts, cons(xts4, cons(xts3, cons(xts2, cons(xts1, yts))))), cons(xts4, cons(xts3, cons(xts2, cons(xts1, yts)))))), cons(xts1, nil)), cons(xts2, nil)), cons(xts3, nil)), cons(xts4, nil))
+++ inductive narrowing succeeded
--- clause
	app(app(app(rev(app(yts, cons(xts3, cons(xts2, cons(xts1, app(yts, cons(xts3, cons(xts2, cons(xts1, yts))))))))), cons(xts1, nil)), cons(xts2, nil)), cons(xts3, nil)) = app(app(app(rev(app(app(yts, cons(xts3, cons(xts2, cons(xts1, yts)))), cons(xts3, cons(xts2, cons(xts1, yts))))), cons(xts1, nil)), cons(xts2, nil)), cons(xts3, nil))
... oriented to rule
	app(app(app(rev(app(yts, cons(xts3, cons(xts2, cons(xts1, app(yts, cons(xts3, cons(xts2, cons(xts1, yts))))))))), cons(xts1, nil)), cons(xts2, nil)), cons(xts3, nil)) -> app(app(app(rev(app(app(yts, cons(xts3, cons(xts2, cons(xts1, yts)))), cons(xts3, cons(xts2, cons(xts1, yts))))), cons(xts1, nil)), cons(xts2, nil)), cons(xts3, nil))
+++ added new clause(s)
	app(app(app(app(rev(app(yts, cons(xts4, cons(xts3, cons(xts2, cons(xts1, app(yts, cons(xts4, cons(xts3, cons(xts2, cons(xts1, yts))))))))))), cons(xts1, nil)), cons(xts2, nil)), cons(xts3, nil)), cons(xts4, nil)) = app(app(app(app(rev(app(app(yts, cons(xts4, cons(xts3, cons(xts2, cons(xts1, yts))))), cons(xts4, cons(xts3, cons(xts2, cons(xts1, yts)))))), cons(xts1, nil)), cons(xts2, nil)), cons(xts3, nil)), cons(xts4, nil))
... to conjectures
+++ active wrap
	app(., cons(., nil)) = app(., cons(., nil))
... with sequence
	app(rev(app(yts, cons(xts, app(yts, cons(xts, yts))))), cons(xts, nil)) = app(rev(app(app(yts, cons(xts, yts)), cons(xts, yts))), cons(xts, nil))
	app(app(rev(app(yts, cons(xts2, cons(xts1, app(yts, cons(xts2, cons(xts1, yts))))))), cons(xts1, nil)), cons(xts2, nil)) = app(app(rev(app(app(yts, cons(xts2, cons(xts1, yts))), cons(xts2, cons(xts1, yts)))), cons(xts1, nil)), cons(xts2, nil))
	app(app(app(rev(app(yts, cons(xts3, cons(xts2, cons(xts1, app(yts, cons(xts3, cons(xts2, cons(xts1, yts))))))))), cons(xts1, nil)), cons(xts2, nil)), cons(xts3, nil)) = app(app(app(rev(app(app(yts, cons(xts3, cons(xts2, cons(xts1, yts)))), cons(xts3, cons(xts2, cons(xts1, yts))))), cons(xts1, nil)), cons(xts2, nil)), cons(xts3, nil))
+++ primal grammar found for head
	{app, cons, nil, rev}
... and wrap
	app(., cons(., nil)) = app(., cons(., nil))
+++ Presburger system  = {
	^f0(0; yts, xts@) -> yts
	^f0($n0 + 1; yts, xts@) -> cons(xts$n0, ^f0($n0; yts, xts@))
	^f1(0, $n0; yts, xts@) -> app(yts, cons(xts0, ^f0($n0; yts, xts@)))
	^f1($n1 + 1, $n0; yts, xts@) -> cons(xts$n1, ^f1($n1, $n0 + 1; yts, xts@))
	^f2(0, $n1; yts, xts@) -> rev(app(yts, cons(xts0, ^f1($n1, 0; yts, xts@))))
	^f2($n2 + 1, $n1; yts, xts@) -> app(^f2($n2, $n1 + 1; yts, xts@), cons(xts$n2, nil))
	^f3(0, $n0; yts, xts@) -> rev(app(app(yts, cons(xts0, ^f0($n0; yts, xts))), cons(xts0, ^f0($n0; yts, xts))))
	^f3($n3 + 1, $n0; yts, xts@) -> app(^f3($n3, $n0 + 1; yts, xts@), cons(xts$n3, nil))
+++ }
+++ Lemma(s)           = 
	app(^f2($n, 0; yts, xts@), cons(xts$n, nil)) = app(^f3($n, 0; yts, xts@), cons(xts$n, nil))
--- clause
	app(app(app(app(rev(app(yts, cons(xts4, cons(xts3, cons(xts2, cons(xts1, app(yts, cons(xts4, cons(xts3, cons(xts2, cons(xts1, yts))))))))))), cons(xts1, nil)), cons(xts2, nil)), cons(xts3, nil)), cons(xts4, nil)) = app(app(app(app(rev(app(app(yts, cons(xts4, cons(xts3, cons(xts2, cons(xts1, yts))))), cons(xts4, cons(xts3, cons(xts2, cons(xts1, yts)))))), cons(xts1, nil)), cons(xts2, nil)), cons(xts3, nil)), cons(xts4, nil))
... subsumed by lemma
	app(^f2($n, 0; yts, xts@), cons(xts$n, nil)) = app(^f3($n, 0; yts, xts@), cons(xts$n, nil))
... with substitution
	$n <- 3

+++ Status of the Inference System
--- Conjectures:
	<empty>
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	rev(app(app(x, x), x)) -> rev(app(x, app(x, x)))
	app(rev(app(yts, cons(xts, app(yts, cons(xts, yts))))), cons(xts, nil)) -> app(rev(app(app(yts, cons(xts, yts)), cons(xts, yts))), cons(xts, nil))
	app(app(rev(app(yts, cons(xts2, cons(xts1, app(yts, cons(xts2, cons(xts1, yts))))))), cons(xts1, nil)), cons(xts2, nil)) -> app(app(rev(app(app(yts, cons(xts2, cons(xts1, yts))), cons(xts2, cons(xts1, yts)))), cons(xts1, nil)), cons(xts2, nil))
	app(app(app(rev(app(yts, cons(xts3, cons(xts2, cons(xts1, app(yts, cons(xts3, cons(xts2, cons(xts1, yts))))))))), cons(xts1, nil)), cons(xts2, nil)), cons(xts3, nil)) -> app(app(app(rev(app(app(yts, cons(xts3, cons(xts2, cons(xts1, yts)))), cons(xts3, cons(xts2, cons(xts1, yts))))), cons(xts1, nil)), cons(xts2, nil)), cons(xts3, nil))
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> yts
	^f0($n0 + 1; yts, xts@) -> cons(xts$n0, ^f0($n0; yts, xts@))
	^f1(0, $n0; yts, xts@) -> app(yts, cons(xts0, ^f0($n0; yts, xts@)))
	^f1($n1 + 1, $n0; yts, xts@) -> cons(xts$n1, ^f1($n1, $n0 + 1; yts, xts@))
	^f2(0, $n1; yts, xts@) -> rev(app(yts, cons(xts0, ^f1($n1, 0; yts, xts@))))
	^f2($n2 + 1, $n1; yts, xts@) -> app(^f2($n2, $n1 + 1; yts, xts@), cons(xts$n2, nil))
	^f3(0, $n0; yts, xts@) -> rev(app(app(yts, cons(xts0, ^f0($n0; yts, xts))), cons(xts0, ^f0($n0; yts, xts))))
	^f3($n3 + 1, $n0; yts, xts@) -> app(^f3($n3, $n0 + 1; yts, xts@), cons(xts$n3, nil))
+++ }
+++ Lemma(s)           = 
	app(^f2($n, 0; yts, xts@), cons(xts$n, nil)) = app(^f3($n, 0; yts, xts@), cons(xts$n, nil))

+++ SUCCESS: all conjectures proved
+++ Statistics:
... Number of proof steps          = 4
... Number of induction steps      = 4
... Number of equational steps     = 0
... Number of case rewriting steps = 0
... Number of PG defined symbols   = 4
... Number of PG lemmas            = 1
... Elapsed time (seconds)         = 0.024
