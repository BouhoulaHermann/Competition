+++ SPECIFICATION --- bidirectional branch, version 0.99
+++ Parameters:
    ===========
+++ input       = 39-in.txt
+++ output      = 39-out.txt
+++ trace       = 3
+++ direction   = first-to-last
+++ drop        = yes
+++ verbose     = 3
+++ split       = 4
+++ loop limit  = 10
+++ stdlib      = /usr/local/lib/indy/stdlib/
-----------------------------------------------------------------------

+++ specification ListFunctions from 39-in.txt successfully parsed
+++ Listing
         1: specification ListFunctions
         2: sorts
         3:      lst nat
         4: constructors
         5:      0: -> nat
         6:      cons: nat lst -> lst
         7:      nil: -> lst
         8:      s: nat -> nat
         9: defined functions
        10:      app: lst lst -> lst
        11: precedence
        12:      app > cons > nil > s > 0
        13: axioms
        14:      app(nil, x) = x;
        15:      app(cons(u, v), w) = cons(u, app(v, w));
        16: conjectures
        17:      app(app(app(x, x), x), app(app(x, x), x)) = app(app(x, x), app(app(x, x), app(x, v)));
        18: end
+++ finitary sorts: <empty>
+++ Rewrite System 
	app(nil, x) -> x
	app(cons(u, v), w) -> cons(u, app(v, w))
+++ inductive positions:
... for app: 0
+++ maximal depths of left-hand sides:
... for app: 2
+++ general maximal depth = 2
+++ sort dependence: nat < lst
+++ test sets for defined functions and sorts:
... for app
... ... lst
		nil
		cons(x, y)

+++ conjecture(s)
	app(app(app(x, x), x), app(app(x, x), x)) = app(app(x, x), app(app(x, x), app(x, v)))

+++ inference system initiated
+++ treating clause
	app(app(app(x, x), x), app(app(x, x), x)) = app(app(x, x), app(app(x, x), app(x, v)))
+++ inductive narrowing on conjecture
	app(app(app(x, x), x), app(app(x, x), x)) = app(app(x, x), app(app(x, x), app(x, v)))
... induction variables of
	app(app(app(x, x), x), app(app(x, x), x)) = app(app(x, x), app(app(x, x), app(x, v)))
... are:
	x:lst
+++ perform INDUCTIVE NARROWING on conjecture 
	app(app(app(x, x), x), app(app(x, x), x)) = app(app(x, x), app(app(x, x), app(x, v)))
... with variable x
+++ creating new conjecture
	app(app(app(nil, nil), nil), app(app(nil, nil), nil)) = app(app(nil, nil), app(app(nil, nil), app(nil, v)))
+++ creating new conjecture
	app(app(app(cons(xts, yts), cons(xts, yts)), cons(xts, yts)), app(app(cons(xts, yts), cons(xts, yts)), cons(xts, yts))) = app(app(cons(xts, yts), cons(xts, yts)), app(app(cons(xts, yts), cons(xts, yts)), app(cons(xts, yts), v)))
--- clause
	app(app(app(nil, nil), nil), app(app(nil, nil), nil)) = app(app(nil, nil), app(app(nil, nil), app(nil, v)))
... reduced in 10 steps to
	nil = v
--- clause
	app(app(app(cons(xts, yts), cons(xts, yts)), cons(xts, yts)), app(app(cons(xts, yts), cons(xts, yts)), cons(xts, yts))) = app(app(cons(xts, yts), cons(xts, yts)), app(app(cons(xts, yts), cons(xts, yts)), app(cons(xts, yts), v)))
... reduced in 10 steps to
	cons(xts, app(app(app(yts, cons(xts, yts)), cons(xts, yts)), cons(xts, app(app(yts, cons(xts, yts)), cons(xts, yts))))) = cons(xts, app(app(yts, cons(xts, yts)), cons(xts, app(app(yts, cons(xts, yts)), cons(xts, app(yts, v))))))
... decomposed into new clause(s)
	app(app(app(yts, cons(xts, yts)), cons(xts, yts)), cons(xts, app(app(yts, cons(xts, yts)), cons(xts, yts)))) = app(app(yts, cons(xts, yts)), cons(xts, app(app(yts, cons(xts, yts)), cons(xts, app(yts, v)))))
+++ inductive narrowing succeeded
--- clause
	app(app(app(x, x), x), app(app(x, x), x)) = app(app(x, x), app(app(x, x), app(x, v)))
... oriented to rule
	app(app(x, x), app(app(x, x), app(x, v))) -> app(app(app(x, x), x), app(app(x, x), x))
+++ added new clause(s)
	app(app(app(yts, cons(xts, yts)), cons(xts, yts)), cons(xts, app(app(yts, cons(xts, yts)), cons(xts, yts)))) = app(app(yts, cons(xts, yts)), cons(xts, app(app(yts, cons(xts, yts)), cons(xts, app(yts, v)))))
... to conjectures

+++ Status of the Inference System
--- Conjectures:
	app(app(app(yts, cons(xts, yts)), cons(xts, yts)), cons(xts, app(app(yts, cons(xts, yts)), cons(xts, yts)))) = app(app(yts, cons(xts, yts)), cons(xts, app(app(yts, cons(xts, yts)), cons(xts, app(yts, v)))))
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	app(app(x, x), app(app(x, x), app(x, v))) -> app(app(app(x, x), x), app(app(x, x), x))
--- Primal Grammar:
	<empty>

+++ treating clause
	app(app(app(yts, cons(xts, yts)), cons(xts, yts)), cons(xts, app(app(yts, cons(xts, yts)), cons(xts, yts)))) = app(app(yts, cons(xts, yts)), cons(xts, app(app(yts, cons(xts, yts)), cons(xts, app(yts, v)))))
+++ inductive narrowing on conjecture
	app(app(app(yts, cons(xts, yts)), cons(xts, yts)), cons(xts, app(app(yts, cons(xts, yts)), cons(xts, yts)))) = app(app(yts, cons(xts, yts)), cons(xts, app(app(yts, cons(xts, yts)), cons(xts, app(yts, v)))))
... induction variables of
	app(app(app(yts, cons(xts, yts)), cons(xts, yts)), cons(xts, app(app(yts, cons(xts, yts)), cons(xts, yts)))) = app(app(yts, cons(xts, yts)), cons(xts, app(app(yts, cons(xts, yts)), cons(xts, app(yts, v)))))
... are:
	yts:lst
+++ perform INDUCTIVE NARROWING on conjecture 
	app(app(app(yts, cons(xts, yts)), cons(xts, yts)), cons(xts, app(app(yts, cons(xts, yts)), cons(xts, yts)))) = app(app(yts, cons(xts, yts)), cons(xts, app(app(yts, cons(xts, yts)), cons(xts, app(yts, v)))))
... with variable yts
+++ creating new conjecture
	app(app(app(nil, cons(xts, nil)), cons(xts, nil)), cons(xts, app(app(nil, cons(xts, nil)), cons(xts, nil)))) = app(app(nil, cons(xts, nil)), cons(xts, app(app(nil, cons(xts, nil)), cons(xts, app(nil, v)))))
+++ creating new conjecture
	app(app(app(cons(xts2, yts), cons(xts1, cons(xts2, yts))), cons(xts1, cons(xts2, yts))), cons(xts1, app(app(cons(xts2, yts), cons(xts1, cons(xts2, yts))), cons(xts1, cons(xts2, yts))))) = app(app(cons(xts2, yts), cons(xts1, cons(xts2, yts))), cons(xts1, app(app(cons(xts2, yts), cons(xts1, cons(xts2, yts))), cons(xts1, app(cons(xts2, yts), v)))))
--- clause
	app(app(app(nil, cons(xts, nil)), cons(xts, nil)), cons(xts, app(app(nil, cons(xts, nil)), cons(xts, nil)))) = app(app(nil, cons(xts, nil)), cons(xts, app(app(nil, cons(xts, nil)), cons(xts, app(nil, v)))))
... reduced in 16 steps to
	cons(xts, cons(xts, cons(xts, cons(xts, cons(xts, nil))))) = cons(xts, cons(xts, cons(xts, cons(xts, v))))
--- clause
	app(app(app(cons(xts2, yts), cons(xts1, cons(xts2, yts))), cons(xts1, cons(xts2, yts))), cons(xts1, app(app(cons(xts2, yts), cons(xts1, cons(xts2, yts))), cons(xts1, cons(xts2, yts))))) = app(app(cons(xts2, yts), cons(xts1, cons(xts2, yts))), cons(xts1, app(app(cons(xts2, yts), cons(xts1, cons(xts2, yts))), cons(xts1, app(cons(xts2, yts), v)))))
... reduced in 10 steps to
	cons(xts2, app(app(app(yts, cons(xts1, cons(xts2, yts))), cons(xts1, cons(xts2, yts))), cons(xts1, cons(xts2, app(app(yts, cons(xts1, cons(xts2, yts))), cons(xts1, cons(xts2, yts))))))) = cons(xts2, app(app(yts, cons(xts1, cons(xts2, yts))), cons(xts1, cons(xts2, app(app(yts, cons(xts1, cons(xts2, yts))), cons(xts1, cons(xts2, app(yts, v))))))))
... decomposed into new clause(s)
	cons(xts, nil) = v
... decomposed into new clause(s)
	app(app(app(yts, cons(xts2, cons(xts1, yts))), cons(xts2, cons(xts1, yts))), cons(xts2, cons(xts1, app(app(yts, cons(xts2, cons(xts1, yts))), cons(xts2, cons(xts1, yts)))))) = app(app(yts, cons(xts2, cons(xts1, yts))), cons(xts2, cons(xts1, app(app(yts, cons(xts2, cons(xts1, yts))), cons(xts2, cons(xts1, app(yts, v)))))))
+++ inductive narrowing succeeded
--- clause
	app(app(app(yts, cons(xts, yts)), cons(xts, yts)), cons(xts, app(app(yts, cons(xts, yts)), cons(xts, yts)))) = app(app(yts, cons(xts, yts)), cons(xts, app(app(yts, cons(xts, yts)), cons(xts, app(yts, v)))))
... oriented to rule
	app(app(yts, cons(xts, yts)), cons(xts, app(app(yts, cons(xts, yts)), cons(xts, app(yts, v))))) -> app(app(app(yts, cons(xts, yts)), cons(xts, yts)), cons(xts, app(app(yts, cons(xts, yts)), cons(xts, yts))))
+++ added new clause(s)
	app(app(app(yts, cons(xts2, cons(xts1, yts))), cons(xts2, cons(xts1, yts))), cons(xts2, cons(xts1, app(app(yts, cons(xts2, cons(xts1, yts))), cons(xts2, cons(xts1, yts)))))) = app(app(yts, cons(xts2, cons(xts1, yts))), cons(xts2, cons(xts1, app(app(yts, cons(xts2, cons(xts1, yts))), cons(xts2, cons(xts1, app(yts, v)))))))
... to conjectures

+++ Status of the Inference System
--- Conjectures:
	app(app(app(yts, cons(xts2, cons(xts1, yts))), cons(xts2, cons(xts1, yts))), cons(xts2, cons(xts1, app(app(yts, cons(xts2, cons(xts1, yts))), cons(xts2, cons(xts1, yts)))))) = app(app(yts, cons(xts2, cons(xts1, yts))), cons(xts2, cons(xts1, app(app(yts, cons(xts2, cons(xts1, yts))), cons(xts2, cons(xts1, app(yts, v)))))))
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	app(app(x, x), app(app(x, x), app(x, v))) -> app(app(app(x, x), x), app(app(x, x), x))
	app(app(yts, cons(xts, yts)), cons(xts, app(app(yts, cons(xts, yts)), cons(xts, app(yts, v))))) -> app(app(app(yts, cons(xts, yts)), cons(xts, yts)), cons(xts, app(app(yts, cons(xts, yts)), cons(xts, yts))))
--- Primal Grammar:
	<empty>

+++ treating clause
	app(app(app(yts, cons(xts2, cons(xts1, yts))), cons(xts2, cons(xts1, yts))), cons(xts2, cons(xts1, app(app(yts, cons(xts2, cons(xts1, yts))), cons(xts2, cons(xts1, yts)))))) = app(app(yts, cons(xts2, cons(xts1, yts))), cons(xts2, cons(xts1, app(app(yts, cons(xts2, cons(xts1, yts))), cons(xts2, cons(xts1, app(yts, v)))))))
+++ inductive narrowing on conjecture
	app(app(app(yts, cons(xts2, cons(xts1, yts))), cons(xts2, cons(xts1, yts))), cons(xts2, cons(xts1, app(app(yts, cons(xts2, cons(xts1, yts))), cons(xts2, cons(xts1, yts)))))) = app(app(yts, cons(xts2, cons(xts1, yts))), cons(xts2, cons(xts1, app(app(yts, cons(xts2, cons(xts1, yts))), cons(xts2, cons(xts1, app(yts, v)))))))
... induction variables of
	app(app(app(yts, cons(xts2, cons(xts1, yts))), cons(xts2, cons(xts1, yts))), cons(xts2, cons(xts1, app(app(yts, cons(xts2, cons(xts1, yts))), cons(xts2, cons(xts1, yts)))))) = app(app(yts, cons(xts2, cons(xts1, yts))), cons(xts2, cons(xts1, app(app(yts, cons(xts2, cons(xts1, yts))), cons(xts2, cons(xts1, app(yts, v)))))))
... are:
	yts:lst
+++ perform INDUCTIVE NARROWING on conjecture 
	app(app(app(yts, cons(xts2, cons(xts1, yts))), cons(xts2, cons(xts1, yts))), cons(xts2, cons(xts1, app(app(yts, cons(xts2, cons(xts1, yts))), cons(xts2, cons(xts1, yts)))))) = app(app(yts, cons(xts2, cons(xts1, yts))), cons(xts2, cons(xts1, app(app(yts, cons(xts2, cons(xts1, yts))), cons(xts2, cons(xts1, app(yts, v)))))))
... with variable yts
+++ creating new conjecture
	app(app(app(nil, cons(xts2, cons(xts1, nil))), cons(xts2, cons(xts1, nil))), cons(xts2, cons(xts1, app(app(nil, cons(xts2, cons(xts1, nil))), cons(xts2, cons(xts1, nil)))))) = app(app(nil, cons(xts2, cons(xts1, nil))), cons(xts2, cons(xts1, app(app(nil, cons(xts2, cons(xts1, nil))), cons(xts2, cons(xts1, app(nil, v)))))))
+++ creating new conjecture
	app(app(app(cons(xts3, yts), cons(xts2, cons(xts1, cons(xts3, yts)))), cons(xts2, cons(xts1, cons(xts3, yts)))), cons(xts2, cons(xts1, app(app(cons(xts3, yts), cons(xts2, cons(xts1, cons(xts3, yts)))), cons(xts2, cons(xts1, cons(xts3, yts))))))) = app(app(cons(xts3, yts), cons(xts2, cons(xts1, cons(xts3, yts)))), cons(xts2, cons(xts1, app(app(cons(xts3, yts), cons(xts2, cons(xts1, cons(xts3, yts)))), cons(xts2, cons(xts1, app(cons(xts3, yts), v)))))))
--- clause
	app(app(app(nil, cons(xts2, cons(xts1, nil))), cons(xts2, cons(xts1, nil))), cons(xts2, cons(xts1, app(app(nil, cons(xts2, cons(xts1, nil))), cons(xts2, cons(xts1, nil)))))) = app(app(nil, cons(xts2, cons(xts1, nil))), cons(xts2, cons(xts1, app(app(nil, cons(xts2, cons(xts1, nil))), cons(xts2, cons(xts1, app(nil, v)))))))
... reduced in 22 steps to
	cons(xts2, cons(xts1, cons(xts2, cons(xts1, cons(xts2, cons(xts1, cons(xts2, cons(xts1, cons(xts2, cons(xts1, nil)))))))))) = cons(xts2, cons(xts1, cons(xts2, cons(xts1, cons(xts2, cons(xts1, cons(xts2, cons(xts1, v))))))))
--- clause
	app(app(app(cons(xts3, yts), cons(xts2, cons(xts1, cons(xts3, yts)))), cons(xts2, cons(xts1, cons(xts3, yts)))), cons(xts2, cons(xts1, app(app(cons(xts3, yts), cons(xts2, cons(xts1, cons(xts3, yts)))), cons(xts2, cons(xts1, cons(xts3, yts))))))) = app(app(cons(xts3, yts), cons(xts2, cons(xts1, cons(xts3, yts)))), cons(xts2, cons(xts1, app(app(cons(xts3, yts), cons(xts2, cons(xts1, cons(xts3, yts)))), cons(xts2, cons(xts1, app(cons(xts3, yts), v)))))))
... reduced in 10 steps to
	cons(xts3, app(app(app(yts, cons(xts2, cons(xts1, cons(xts3, yts)))), cons(xts2, cons(xts1, cons(xts3, yts)))), cons(xts2, cons(xts1, cons(xts3, app(app(yts, cons(xts2, cons(xts1, cons(xts3, yts)))), cons(xts2, cons(xts1, cons(xts3, yts))))))))) = cons(xts3, app(app(yts, cons(xts2, cons(xts1, cons(xts3, yts)))), cons(xts2, cons(xts1, cons(xts3, app(app(yts, cons(xts2, cons(xts1, cons(xts3, yts)))), cons(xts2, cons(xts1, cons(xts3, app(yts, v))))))))))
... decomposed into new clause(s)
	cons(xts2, cons(xts1, nil)) = v
... decomposed into new clause(s)
	app(app(app(yts, cons(xts3, cons(xts2, cons(xts1, yts)))), cons(xts3, cons(xts2, cons(xts1, yts)))), cons(xts3, cons(xts2, cons(xts1, app(app(yts, cons(xts3, cons(xts2, cons(xts1, yts)))), cons(xts3, cons(xts2, cons(xts1, yts)))))))) = app(app(yts, cons(xts3, cons(xts2, cons(xts1, yts)))), cons(xts3, cons(xts2, cons(xts1, app(app(yts, cons(xts3, cons(xts2, cons(xts1, yts)))), cons(xts3, cons(xts2, cons(xts1, app(yts, v)))))))))
+++ inductive narrowing succeeded
--- clause
	app(app(app(yts, cons(xts2, cons(xts1, yts))), cons(xts2, cons(xts1, yts))), cons(xts2, cons(xts1, app(app(yts, cons(xts2, cons(xts1, yts))), cons(xts2, cons(xts1, yts)))))) = app(app(yts, cons(xts2, cons(xts1, yts))), cons(xts2, cons(xts1, app(app(yts, cons(xts2, cons(xts1, yts))), cons(xts2, cons(xts1, app(yts, v)))))))
... oriented to rule
	app(app(yts, cons(xts2, cons(xts1, yts))), cons(xts2, cons(xts1, app(app(yts, cons(xts2, cons(xts1, yts))), cons(xts2, cons(xts1, app(yts, v))))))) -> app(app(app(yts, cons(xts2, cons(xts1, yts))), cons(xts2, cons(xts1, yts))), cons(xts2, cons(xts1, app(app(yts, cons(xts2, cons(xts1, yts))), cons(xts2, cons(xts1, yts))))))
+++ added new clause(s)
	app(app(app(yts, cons(xts3, cons(xts2, cons(xts1, yts)))), cons(xts3, cons(xts2, cons(xts1, yts)))), cons(xts3, cons(xts2, cons(xts1, app(app(yts, cons(xts3, cons(xts2, cons(xts1, yts)))), cons(xts3, cons(xts2, cons(xts1, yts)))))))) = app(app(yts, cons(xts3, cons(xts2, cons(xts1, yts)))), cons(xts3, cons(xts2, cons(xts1, app(app(yts, cons(xts3, cons(xts2, cons(xts1, yts)))), cons(xts3, cons(xts2, cons(xts1, app(yts, v)))))))))
... to conjectures

+++ Status of the Inference System
--- Conjectures:
	app(app(app(yts, cons(xts3, cons(xts2, cons(xts1, yts)))), cons(xts3, cons(xts2, cons(xts1, yts)))), cons(xts3, cons(xts2, cons(xts1, app(app(yts, cons(xts3, cons(xts2, cons(xts1, yts)))), cons(xts3, cons(xts2, cons(xts1, yts)))))))) = app(app(yts, cons(xts3, cons(xts2, cons(xts1, yts)))), cons(xts3, cons(xts2, cons(xts1, app(app(yts, cons(xts3, cons(xts2, cons(xts1, yts)))), cons(xts3, cons(xts2, cons(xts1, app(yts, v)))))))))
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	app(app(x, x), app(app(x, x), app(x, v))) -> app(app(app(x, x), x), app(app(x, x), x))
	app(app(yts, cons(xts, yts)), cons(xts, app(app(yts, cons(xts, yts)), cons(xts, app(yts, v))))) -> app(app(app(yts, cons(xts, yts)), cons(xts, yts)), cons(xts, app(app(yts, cons(xts, yts)), cons(xts, yts))))
	app(app(yts, cons(xts2, cons(xts1, yts))), cons(xts2, cons(xts1, app(app(yts, cons(xts2, cons(xts1, yts))), cons(xts2, cons(xts1, app(yts, v))))))) -> app(app(app(yts, cons(xts2, cons(xts1, yts))), cons(xts2, cons(xts1, yts))), cons(xts2, cons(xts1, app(app(yts, cons(xts2, cons(xts1, yts))), cons(xts2, cons(xts1, yts))))))
--- Primal Grammar:
	<empty>

+++ treating clause
	app(app(app(yts, cons(xts3, cons(xts2, cons(xts1, yts)))), cons(xts3, cons(xts2, cons(xts1, yts)))), cons(xts3, cons(xts2, cons(xts1, app(app(yts, cons(xts3, cons(xts2, cons(xts1, yts)))), cons(xts3, cons(xts2, cons(xts1, yts)))))))) = app(app(yts, cons(xts3, cons(xts2, cons(xts1, yts)))), cons(xts3, cons(xts2, cons(xts1, app(app(yts, cons(xts3, cons(xts2, cons(xts1, yts)))), cons(xts3, cons(xts2, cons(xts1, app(yts, v)))))))))
+++ inductive narrowing on conjecture
	app(app(app(yts, cons(xts3, cons(xts2, cons(xts1, yts)))), cons(xts3, cons(xts2, cons(xts1, yts)))), cons(xts3, cons(xts2, cons(xts1, app(app(yts, cons(xts3, cons(xts2, cons(xts1, yts)))), cons(xts3, cons(xts2, cons(xts1, yts)))))))) = app(app(yts, cons(xts3, cons(xts2, cons(xts1, yts)))), cons(xts3, cons(xts2, cons(xts1, app(app(yts, cons(xts3, cons(xts2, cons(xts1, yts)))), cons(xts3, cons(xts2, cons(xts1, app(yts, v)))))))))
... induction variables of
	app(app(app(yts, cons(xts3, cons(xts2, cons(xts1, yts)))), cons(xts3, cons(xts2, cons(xts1, yts)))), cons(xts3, cons(xts2, cons(xts1, app(app(yts, cons(xts3, cons(xts2, cons(xts1, yts)))), cons(xts3, cons(xts2, cons(xts1, yts)))))))) = app(app(yts, cons(xts3, cons(xts2, cons(xts1, yts)))), cons(xts3, cons(xts2, cons(xts1, app(app(yts, cons(xts3, cons(xts2, cons(xts1, yts)))), cons(xts3, cons(xts2, cons(xts1, app(yts, v)))))))))
... are:
	yts:lst
+++ perform INDUCTIVE NARROWING on conjecture 
	app(app(app(yts, cons(xts3, cons(xts2, cons(xts1, yts)))), cons(xts3, cons(xts2, cons(xts1, yts)))), cons(xts3, cons(xts2, cons(xts1, app(app(yts, cons(xts3, cons(xts2, cons(xts1, yts)))), cons(xts3, cons(xts2, cons(xts1, yts)))))))) = app(app(yts, cons(xts3, cons(xts2, cons(xts1, yts)))), cons(xts3, cons(xts2, cons(xts1, app(app(yts, cons(xts3, cons(xts2, cons(xts1, yts)))), cons(xts3, cons(xts2, cons(xts1, app(yts, v)))))))))
... with variable yts
+++ creating new conjecture
	app(app(app(nil, cons(xts3, cons(xts2, cons(xts1, nil)))), cons(xts3, cons(xts2, cons(xts1, nil)))), cons(xts3, cons(xts2, cons(xts1, app(app(nil, cons(xts3, cons(xts2, cons(xts1, nil)))), cons(xts3, cons(xts2, cons(xts1, nil)))))))) = app(app(nil, cons(xts3, cons(xts2, cons(xts1, nil)))), cons(xts3, cons(xts2, cons(xts1, app(app(nil, cons(xts3, cons(xts2, cons(xts1, nil)))), cons(xts3, cons(xts2, cons(xts1, app(nil, v)))))))))
+++ creating new conjecture
	app(app(app(cons(xts4, yts), cons(xts3, cons(xts2, cons(xts1, cons(xts4, yts))))), cons(xts3, cons(xts2, cons(xts1, cons(xts4, yts))))), cons(xts3, cons(xts2, cons(xts1, app(app(cons(xts4, yts), cons(xts3, cons(xts2, cons(xts1, cons(xts4, yts))))), cons(xts3, cons(xts2, cons(xts1, cons(xts4, yts))))))))) = app(app(cons(xts4, yts), cons(xts3, cons(xts2, cons(xts1, cons(xts4, yts))))), cons(xts3, cons(xts2, cons(xts1, app(app(cons(xts4, yts), cons(xts3, cons(xts2, cons(xts1, cons(xts4, yts))))), cons(xts3, cons(xts2, cons(xts1, app(cons(xts4, yts), v)))))))))
--- clause
	app(app(app(nil, cons(xts3, cons(xts2, cons(xts1, nil)))), cons(xts3, cons(xts2, cons(xts1, nil)))), cons(xts3, cons(xts2, cons(xts1, app(app(nil, cons(xts3, cons(xts2, cons(xts1, nil)))), cons(xts3, cons(xts2, cons(xts1, nil)))))))) = app(app(nil, cons(xts3, cons(xts2, cons(xts1, nil)))), cons(xts3, cons(xts2, cons(xts1, app(app(nil, cons(xts3, cons(xts2, cons(xts1, nil)))), cons(xts3, cons(xts2, cons(xts1, app(nil, v)))))))))
... reduced in 28 steps to
	cons(xts3, cons(xts2, cons(xts1, cons(xts3, cons(xts2, cons(xts1, cons(xts3, cons(xts2, cons(xts1, cons(xts3, cons(xts2, cons(xts1, cons(xts3, cons(xts2, cons(xts1, nil))))))))))))))) = cons(xts3, cons(xts2, cons(xts1, cons(xts3, cons(xts2, cons(xts1, cons(xts3, cons(xts2, cons(xts1, cons(xts3, cons(xts2, cons(xts1, v))))))))))))
--- clause
	app(app(app(cons(xts4, yts), cons(xts3, cons(xts2, cons(xts1, cons(xts4, yts))))), cons(xts3, cons(xts2, cons(xts1, cons(xts4, yts))))), cons(xts3, cons(xts2, cons(xts1, app(app(cons(xts4, yts), cons(xts3, cons(xts2, cons(xts1, cons(xts4, yts))))), cons(xts3, cons(xts2, cons(xts1, cons(xts4, yts))))))))) = app(app(cons(xts4, yts), cons(xts3, cons(xts2, cons(xts1, cons(xts4, yts))))), cons(xts3, cons(xts2, cons(xts1, app(app(cons(xts4, yts), cons(xts3, cons(xts2, cons(xts1, cons(xts4, yts))))), cons(xts3, cons(xts2, cons(xts1, app(cons(xts4, yts), v)))))))))
... reduced in 10 steps to
	cons(xts4, app(app(app(yts, cons(xts3, cons(xts2, cons(xts1, cons(xts4, yts))))), cons(xts3, cons(xts2, cons(xts1, cons(xts4, yts))))), cons(xts3, cons(xts2, cons(xts1, cons(xts4, app(app(yts, cons(xts3, cons(xts2, cons(xts1, cons(xts4, yts))))), cons(xts3, cons(xts2, cons(xts1, cons(xts4, yts))))))))))) = cons(xts4, app(app(yts, cons(xts3, cons(xts2, cons(xts1, cons(xts4, yts))))), cons(xts3, cons(xts2, cons(xts1, cons(xts4, app(app(yts, cons(xts3, cons(xts2, cons(xts1, cons(xts4, yts))))), cons(xts3, cons(xts2, cons(xts1, cons(xts4, app(yts, v))))))))))))
... decomposed into new clause(s)
	cons(xts3, cons(xts2, cons(xts1, nil))) = v
... decomposed into new clause(s)
	app(app(app(yts, cons(xts4, cons(xts3, cons(xts2, cons(xts1, yts))))), cons(xts4, cons(xts3, cons(xts2, cons(xts1, yts))))), cons(xts4, cons(xts3, cons(xts2, cons(xts1, app(app(yts, cons(xts4, cons(xts3, cons(xts2, cons(xts1, yts))))), cons(xts4, cons(xts3, cons(xts2, cons(xts1, yts)))))))))) = app(app(yts, cons(xts4, cons(xts3, cons(xts2, cons(xts1, yts))))), cons(xts4, cons(xts3, cons(xts2, cons(xts1, app(app(yts, cons(xts4, cons(xts3, cons(xts2, cons(xts1, yts))))), cons(xts4, cons(xts3, cons(xts2, cons(xts1, app(yts, v)))))))))))
+++ inductive narrowing succeeded
--- clause
	app(app(app(yts, cons(xts3, cons(xts2, cons(xts1, yts)))), cons(xts3, cons(xts2, cons(xts1, yts)))), cons(xts3, cons(xts2, cons(xts1, app(app(yts, cons(xts3, cons(xts2, cons(xts1, yts)))), cons(xts3, cons(xts2, cons(xts1, yts)))))))) = app(app(yts, cons(xts3, cons(xts2, cons(xts1, yts)))), cons(xts3, cons(xts2, cons(xts1, app(app(yts, cons(xts3, cons(xts2, cons(xts1, yts)))), cons(xts3, cons(xts2, cons(xts1, app(yts, v)))))))))
... oriented to rule
	app(app(yts, cons(xts3, cons(xts2, cons(xts1, yts)))), cons(xts3, cons(xts2, cons(xts1, app(app(yts, cons(xts3, cons(xts2, cons(xts1, yts)))), cons(xts3, cons(xts2, cons(xts1, app(yts, v))))))))) -> app(app(app(yts, cons(xts3, cons(xts2, cons(xts1, yts)))), cons(xts3, cons(xts2, cons(xts1, yts)))), cons(xts3, cons(xts2, cons(xts1, app(app(yts, cons(xts3, cons(xts2, cons(xts1, yts)))), cons(xts3, cons(xts2, cons(xts1, yts))))))))
+++ added new clause(s)
	app(app(app(yts, cons(xts4, cons(xts3, cons(xts2, cons(xts1, yts))))), cons(xts4, cons(xts3, cons(xts2, cons(xts1, yts))))), cons(xts4, cons(xts3, cons(xts2, cons(xts1, app(app(yts, cons(xts4, cons(xts3, cons(xts2, cons(xts1, yts))))), cons(xts4, cons(xts3, cons(xts2, cons(xts1, yts)))))))))) = app(app(yts, cons(xts4, cons(xts3, cons(xts2, cons(xts1, yts))))), cons(xts4, cons(xts3, cons(xts2, cons(xts1, app(app(yts, cons(xts4, cons(xts3, cons(xts2, cons(xts1, yts))))), cons(xts4, cons(xts3, cons(xts2, cons(xts1, app(yts, v)))))))))))
... to conjectures
+++ active wrap
	app(app(app(yts, cons(., .)), cons(., .)), cons(., .)) = app(app(yts, cons(., .)), cons(., .))
... with sequence
	app(app(app(yts, cons(xts, yts)), cons(xts, yts)), cons(xts, app(app(yts, cons(xts, yts)), cons(xts, yts)))) = app(app(yts, cons(xts, yts)), cons(xts, app(app(yts, cons(xts, yts)), cons(xts, app(yts, v)))))
	app(app(app(yts, cons(xts2, cons(xts1, yts))), cons(xts2, cons(xts1, yts))), cons(xts2, cons(xts1, app(app(yts, cons(xts2, cons(xts1, yts))), cons(xts2, cons(xts1, yts)))))) = app(app(yts, cons(xts2, cons(xts1, yts))), cons(xts2, cons(xts1, app(app(yts, cons(xts2, cons(xts1, yts))), cons(xts2, cons(xts1, app(yts, v)))))))
	app(app(app(yts, cons(xts3, cons(xts2, cons(xts1, yts)))), cons(xts3, cons(xts2, cons(xts1, yts)))), cons(xts3, cons(xts2, cons(xts1, app(app(yts, cons(xts3, cons(xts2, cons(xts1, yts)))), cons(xts3, cons(xts2, cons(xts1, yts)))))))) = app(app(yts, cons(xts3, cons(xts2, cons(xts1, yts)))), cons(xts3, cons(xts2, cons(xts1, app(app(yts, cons(xts3, cons(xts2, cons(xts1, yts)))), cons(xts3, cons(xts2, cons(xts1, app(yts, v)))))))))
+++ primal grammar found for head
	{app, cons}
... and wrap
	app(app(app(yts, cons(., .)), cons(., .)), cons(., .)) = app(app(yts, cons(., .)), cons(., .))
+++ Presburger system  = {
	^f0(0; yts, xts@) -> yts
	^f0($n0 + 1; yts, xts@) -> cons(xts$n0, ^f0($n0; yts, xts@))
	^f1(0, $n0; yts, xts@) -> app(app(yts, cons(xts0, ^f0($n0; yts, xts))), cons(xts0, ^f0($n0; yts, xts)))
	^f1($n1 + 1, $n0; yts, xts@) -> cons(xts$n1, ^f1($n1, $n0 + 1; yts, xts@))
	^f2(0; v, yts, xts@) -> app(yts, v)
	^f2($n2 + 1; v, yts, xts@) -> cons(xts$n2, ^f2($n2; v, yts, xts@))
	^f3(0, $n2; v, yts, xts@) -> app(app(yts, cons(xts0, ^f0($n0; yts, xts))), cons(xts0, ^f2($n2; v, yts, xts@)))
	^f3($n3 + 1, $n2; v, yts, xts@) -> cons(xts$n3, ^f3($n3, $n2 + 1; v, yts, xts@))
+++ }
+++ Lemma(s)           = 
	app(app(app(yts, cons(xts$n, ^f0($n; yts, xts@))), cons(xts$n, ^f0($n; yts, xts))), cons(xts$n, ^f1($n, 0; yts, xts@))) = app(app(yts, cons(xts$n, ^f0($n; yts, xts))), cons(xts$n, ^f3($n, 0; v, yts, xts@)))
--- clause
	app(app(app(yts, cons(xts4, cons(xts3, cons(xts2, cons(xts1, yts))))), cons(xts4, cons(xts3, cons(xts2, cons(xts1, yts))))), cons(xts4, cons(xts3, cons(xts2, cons(xts1, app(app(yts, cons(xts4, cons(xts3, cons(xts2, cons(xts1, yts))))), cons(xts4, cons(xts3, cons(xts2, cons(xts1, yts)))))))))) = app(app(yts, cons(xts4, cons(xts3, cons(xts2, cons(xts1, yts))))), cons(xts4, cons(xts3, cons(xts2, cons(xts1, app(app(yts, cons(xts4, cons(xts3, cons(xts2, cons(xts1, yts))))), cons(xts4, cons(xts3, cons(xts2, cons(xts1, app(yts, v)))))))))))
... subsumed by lemma
	app(app(app(yts, cons(xts$n, ^f0($n; yts, xts@))), cons(xts$n, ^f0($n; yts, xts))), cons(xts$n, ^f1($n, 0; yts, xts@))) = app(app(yts, cons(xts$n, ^f0($n; yts, xts))), cons(xts$n, ^f3($n, 0; v, yts, xts@)))
... with substitution
	$n <- 3

+++ Status of the Inference System
--- Conjectures:
	<empty>
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	app(app(x, x), app(app(x, x), app(x, v))) -> app(app(app(x, x), x), app(app(x, x), x))
	app(app(yts, cons(xts, yts)), cons(xts, app(app(yts, cons(xts, yts)), cons(xts, app(yts, v))))) -> app(app(app(yts, cons(xts, yts)), cons(xts, yts)), cons(xts, app(app(yts, cons(xts, yts)), cons(xts, yts))))
	app(app(yts, cons(xts2, cons(xts1, yts))), cons(xts2, cons(xts1, app(app(yts, cons(xts2, cons(xts1, yts))), cons(xts2, cons(xts1, app(yts, v))))))) -> app(app(app(yts, cons(xts2, cons(xts1, yts))), cons(xts2, cons(xts1, yts))), cons(xts2, cons(xts1, app(app(yts, cons(xts2, cons(xts1, yts))), cons(xts2, cons(xts1, yts))))))
	app(app(yts, cons(xts3, cons(xts2, cons(xts1, yts)))), cons(xts3, cons(xts2, cons(xts1, app(app(yts, cons(xts3, cons(xts2, cons(xts1, yts)))), cons(xts3, cons(xts2, cons(xts1, app(yts, v))))))))) -> app(app(app(yts, cons(xts3, cons(xts2, cons(xts1, yts)))), cons(xts3, cons(xts2, cons(xts1, yts)))), cons(xts3, cons(xts2, cons(xts1, app(app(yts, cons(xts3, cons(xts2, cons(xts1, yts)))), cons(xts3, cons(xts2, cons(xts1, yts))))))))
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> yts
	^f0($n0 + 1; yts, xts@) -> cons(xts$n0, ^f0($n0; yts, xts@))
	^f1(0, $n0; yts, xts@) -> app(app(yts, cons(xts0, ^f0($n0; yts, xts))), cons(xts0, ^f0($n0; yts, xts)))
	^f1($n1 + 1, $n0; yts, xts@) -> cons(xts$n1, ^f1($n1, $n0 + 1; yts, xts@))
	^f2(0; v, yts, xts@) -> app(yts, v)
	^f2($n2 + 1; v, yts, xts@) -> cons(xts$n2, ^f2($n2; v, yts, xts@))
	^f3(0, $n2; v, yts, xts@) -> app(app(yts, cons(xts0, ^f0($n0; yts, xts))), cons(xts0, ^f2($n2; v, yts, xts@)))
	^f3($n3 + 1, $n2; v, yts, xts@) -> cons(xts$n3, ^f3($n3, $n2 + 1; v, yts, xts@))
+++ }
+++ Lemma(s)           = 
	app(app(app(yts, cons(xts$n, ^f0($n; yts, xts@))), cons(xts$n, ^f0($n; yts, xts))), cons(xts$n, ^f1($n, 0; yts, xts@))) = app(app(yts, cons(xts$n, ^f0($n; yts, xts))), cons(xts$n, ^f3($n, 0; v, yts, xts@)))

+++ SUCCESS: all conjectures proved
+++ Statistics:
... Number of proof steps          = 4
... Number of induction steps      = 4
... Number of equational steps     = 0
... Number of case rewriting steps = 0
... Number of PG defined symbols   = 4
... Number of PG lemmas            = 1
... Elapsed time (seconds)         = 0.024
