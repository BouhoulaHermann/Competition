+++ SPECIFICATION --- bidirectional branch, version 0.99
+++ Parameters:
    ===========
+++ input       = 4-in.txt
+++ output      = 4-out.txt
+++ trace       = 3
+++ direction   = first-to-last
+++ drop        = yes
+++ verbose     = 3
+++ split       = 4
+++ loop limit  = 10
+++ stdlib      = /usr/local/lib/indy/stdlib/
-----------------------------------------------------------------------

+++ specification NAT from nat successfully parsed
+++ specification ADD from add successfully parsed
+++ specification LIST from list successfully parsed
+++ specification BOOL from bool successfully parsed
+++ specification EQ from eq successfully parsed
+++ specification COUNT from count successfully parsed
+++ specification ListCount from 4-in.txt successfully parsed
+++ Listing
         1: specification ListCount
         2: sorts
         3:      bool list nat
         4: constructors
         5:      0: -> nat
         6:      cons: nat list -> list
         7:      false: -> bool
         8:      nil: -> list
         9:      s: nat -> nat
        10:      true: -> bool
        11: defined functions
        12:      +: nat nat -> nat
        13:      ==: nat nat -> bool
        14:      count: nat list -> nat
        15: precedence
        16:      count > == > + > cons > nil > s > 0 > false = true
        17: axioms
        18:      x + 0 = x;
        19:      0 == 0 = true;
        20:      0 == s(x) = false;
        21:      count(x, nil) = 0;
        22:      s(x) == 0 = false;
        23:      x + s(y) = s(x + y);
        24:      s(x) == s(y) = x == y;
        25:      x == y = false => count(x, cons(y, ys)) = count(x, ys);
        26:      x == y = true => count(x, cons(y, ys)) = s(count(x, ys));
        27: conjectures
        28:      count(y + (y + y), x) = count((y + y) + y, x);
        29: end
+++ finitary sorts: bool
+++ Rewrite System 
	x + 0 -> x
	0 == 0 -> true
	0 == s(x) -> false
	count(x, nil) -> 0
	s(x) == 0 -> false
	x + s(y) -> s(x + y)
	s(x) == s(y) -> x == y
	x == y = false => count(x, cons(y, ys)) -> count(x, ys)
	x == y = true => count(x, cons(y, ys)) -> s(count(x, ys))
+++ inductive positions:
... for +: 1
... for ==: 0 1
... for count: 1
+++ maximal depths of left-hand sides:
... for count: 2
... for ==: 2
... for +: 2
+++ general maximal depth = 2
+++ sort dependence: nat < list
+++ test sets for defined functions and sorts:
... for count
... ... list
		nil
		cons(x, y)
... for ==
... ... nat
		0
		s(x)
... for +
... ... nat
		0
		s(x)

+++ conjecture(s)
	count(y + (y + y), x) = count((y + y) + y, x)

+++ inference system initiated
+++ treating clause
	count(y + (y + y), x) = count((y + y) + y, x)
+++ inductive narrowing on conjecture
	count(y + (y + y), x) = count((y + y) + y, x)
... induction variables of
	count(y + (y + y), x) = count((y + y) + y, x)
... are:
	y:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	count(y + (y + y), x) = count((y + y) + y, x)
... with variable y
+++ creating new conjecture
	count(0 + (0 + 0), x) = count((0 + 0) + 0, x)
+++ creating new conjecture
	count(s(xts) + (s(xts) + s(xts)), x) = count((s(xts) + s(xts)) + s(xts), x)
--- clause
	count(0 + (0 + 0), x) = count((0 + 0) + 0, x)
... reduced to tautology
	count(0, x) = count(0, x)
--- clause
	count(s(xts) + (s(xts) + s(xts)), x) = count((s(xts) + s(xts)) + s(xts), x)
... reduced in 4 steps to
	count(s(s(xts) + (s(xts) + xts)), x) = count(s(s(s(xts) + xts) + xts), x)
+++ inductive narrowing succeeded
--- clause
	count(y + (y + y), x) = count((y + y) + y, x)
... oriented to rule
	count((y + y) + y, x) -> count(y + (y + y), x)
+++ added new clause(s)
	count(s(s(xts) + (s(xts) + xts)), x) = count(s(s(s(xts) + xts) + xts), x)
... to conjectures

+++ Status of the Inference System
--- Conjectures:
	count(s(s(xts) + (s(xts) + xts)), x) = count(s(s(s(xts) + xts) + xts), x)
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	count((y + y) + y, x) -> count(y + (y + y), x)
--- Primal Grammar:
	<empty>

+++ treating clause
	count(s(s(xts) + (s(xts) + xts)), x) = count(s(s(s(xts) + xts) + xts), x)
+++ inductive narrowing on conjecture
	count(s(s(xts) + (s(xts) + xts)), x) = count(s(s(s(xts) + xts) + xts), x)
... induction variables of
	count(s(s(xts) + (s(xts) + xts)), x) = count(s(s(s(xts) + xts) + xts), x)
... are:
	xts:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	count(s(s(xts) + (s(xts) + xts)), x) = count(s(s(s(xts) + xts) + xts), x)
... with variable xts
+++ creating new conjecture
	count(s(s(0) + (s(0) + 0)), x) = count(s(s(s(0) + 0) + 0), x)
+++ creating new conjecture
	count(s(s(s(xts)) + (s(s(xts)) + s(xts))), x) = count(s(s(s(s(xts)) + s(xts)) + s(xts)), x)
--- clause
	count(s(s(0) + (s(0) + 0)), x) = count(s(s(s(0) + 0) + 0), x)
... reduced to tautology
	count(s(s(s(0))), x) = count(s(s(s(0))), x)
--- clause
	count(s(s(s(xts)) + (s(s(xts)) + s(xts))), x) = count(s(s(s(s(xts)) + s(xts)) + s(xts)), x)
... reduced in 4 steps to
	count(s(s(s(s(xts)) + (s(s(xts)) + xts))), x) = count(s(s(s(s(s(s(xts)) + xts)) + xts)), x)
+++ inductive narrowing succeeded
--- clause
	count(s(s(xts) + (s(xts) + xts)), x) = count(s(s(s(xts) + xts) + xts), x)
... oriented to rule
	count(s(s(s(xts) + xts) + xts), x) -> count(s(s(xts) + (s(xts) + xts)), x)
+++ added new clause(s)
	count(s(s(s(s(xts)) + (s(s(xts)) + xts))), x) = count(s(s(s(s(s(s(xts)) + xts)) + xts)), x)
... to conjectures

+++ Status of the Inference System
--- Conjectures:
	count(s(s(s(s(xts)) + (s(s(xts)) + xts))), x) = count(s(s(s(s(s(s(xts)) + xts)) + xts)), x)
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	count((y + y) + y, x) -> count(y + (y + y), x)
	count(s(s(s(xts) + xts) + xts), x) -> count(s(s(xts) + (s(xts) + xts)), x)
--- Primal Grammar:
	<empty>

+++ treating clause
	count(s(s(s(s(xts)) + (s(s(xts)) + xts))), x) = count(s(s(s(s(s(s(xts)) + xts)) + xts)), x)
+++ inductive narrowing on conjecture
	count(s(s(s(s(xts)) + (s(s(xts)) + xts))), x) = count(s(s(s(s(s(s(xts)) + xts)) + xts)), x)
... induction variables of
	count(s(s(s(s(xts)) + (s(s(xts)) + xts))), x) = count(s(s(s(s(s(s(xts)) + xts)) + xts)), x)
... are:
	xts:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	count(s(s(s(s(xts)) + (s(s(xts)) + xts))), x) = count(s(s(s(s(s(s(xts)) + xts)) + xts)), x)
... with variable xts
+++ creating new conjecture
	count(s(s(s(s(0)) + (s(s(0)) + 0))), x) = count(s(s(s(s(s(s(0)) + 0)) + 0)), x)
+++ creating new conjecture
	count(s(s(s(s(s(xts))) + (s(s(s(xts))) + s(xts)))), x) = count(s(s(s(s(s(s(s(xts))) + s(xts))) + s(xts))), x)
--- clause
	count(s(s(s(s(0)) + (s(s(0)) + 0))), x) = count(s(s(s(s(s(s(0)) + 0)) + 0)), x)
... reduced to tautology
	count(s(s(s(s(s(s(0)))))), x) = count(s(s(s(s(s(s(0)))))), x)
--- clause
	count(s(s(s(s(s(xts))) + (s(s(s(xts))) + s(xts)))), x) = count(s(s(s(s(s(s(s(xts))) + s(xts))) + s(xts))), x)
... reduced in 4 steps to
	count(s(s(s(s(s(s(xts))) + (s(s(s(xts))) + xts)))), x) = count(s(s(s(s(s(s(s(s(s(xts))) + xts))) + xts))), x)
+++ inductive narrowing succeeded
--- clause
	count(s(s(s(s(xts)) + (s(s(xts)) + xts))), x) = count(s(s(s(s(s(s(xts)) + xts)) + xts)), x)
... oriented to rule
	count(s(s(s(s(s(s(xts)) + xts)) + xts)), x) -> count(s(s(s(s(xts)) + (s(s(xts)) + xts))), x)
+++ added new clause(s)
	count(s(s(s(s(s(s(xts))) + (s(s(s(xts))) + xts)))), x) = count(s(s(s(s(s(s(s(s(s(xts))) + xts))) + xts))), x)
... to conjectures

+++ Status of the Inference System
--- Conjectures:
	count(s(s(s(s(s(s(xts))) + (s(s(s(xts))) + xts)))), x) = count(s(s(s(s(s(s(s(s(s(xts))) + xts))) + xts))), x)
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	count((y + y) + y, x) -> count(y + (y + y), x)
	count(s(s(s(xts) + xts) + xts), x) -> count(s(s(xts) + (s(xts) + xts)), x)
	count(s(s(s(s(s(s(xts)) + xts)) + xts)), x) -> count(s(s(s(s(xts)) + (s(s(xts)) + xts))), x)
--- Primal Grammar:
	<empty>

+++ treating clause
	count(s(s(s(s(s(s(xts))) + (s(s(s(xts))) + xts)))), x) = count(s(s(s(s(s(s(s(s(s(xts))) + xts))) + xts))), x)
+++ inductive narrowing on conjecture
	count(s(s(s(s(s(s(xts))) + (s(s(s(xts))) + xts)))), x) = count(s(s(s(s(s(s(s(s(s(xts))) + xts))) + xts))), x)
... induction variables of
	count(s(s(s(s(s(s(xts))) + (s(s(s(xts))) + xts)))), x) = count(s(s(s(s(s(s(s(s(s(xts))) + xts))) + xts))), x)
... are:
	xts:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	count(s(s(s(s(s(s(xts))) + (s(s(s(xts))) + xts)))), x) = count(s(s(s(s(s(s(s(s(s(xts))) + xts))) + xts))), x)
... with variable xts
+++ creating new conjecture
	count(s(s(s(s(s(s(0))) + (s(s(s(0))) + 0)))), x) = count(s(s(s(s(s(s(s(s(s(0))) + 0))) + 0))), x)
+++ creating new conjecture
	count(s(s(s(s(s(s(s(xts)))) + (s(s(s(s(xts)))) + s(xts))))), x) = count(s(s(s(s(s(s(s(s(s(s(xts)))) + s(xts)))) + s(xts)))), x)
--- clause
	count(s(s(s(s(s(s(0))) + (s(s(s(0))) + 0)))), x) = count(s(s(s(s(s(s(s(s(s(0))) + 0))) + 0))), x)
... reduced to tautology
	count(s(s(s(s(s(s(s(s(s(0))))))))), x) = count(s(s(s(s(s(s(s(s(s(0))))))))), x)
--- clause
	count(s(s(s(s(s(s(s(xts)))) + (s(s(s(s(xts)))) + s(xts))))), x) = count(s(s(s(s(s(s(s(s(s(s(xts)))) + s(xts)))) + s(xts)))), x)
... reduced in 4 steps to
	count(s(s(s(s(s(s(s(s(xts)))) + (s(s(s(s(xts)))) + xts))))), x) = count(s(s(s(s(s(s(s(s(s(s(s(s(xts)))) + xts)))) + xts)))), x)
+++ inductive narrowing succeeded
--- clause
	count(s(s(s(s(s(s(xts))) + (s(s(s(xts))) + xts)))), x) = count(s(s(s(s(s(s(s(s(s(xts))) + xts))) + xts))), x)
... oriented to rule
	count(s(s(s(s(s(s(s(s(s(xts))) + xts))) + xts))), x) -> count(s(s(s(s(s(s(xts))) + (s(s(s(xts))) + xts)))), x)
+++ added new clause(s)
	count(s(s(s(s(s(s(s(s(xts)))) + (s(s(s(s(xts)))) + xts))))), x) = count(s(s(s(s(s(s(s(s(s(s(s(s(xts)))) + xts)))) + xts)))), x)
... to conjectures
+++ active wrap
	count(s(.), x) = count(s(.), x)
... with sequence
	count(s(s(xts) + (s(xts) + xts)), x) = count(s(s(s(xts) + xts) + xts), x)
	count(s(s(s(s(xts)) + (s(s(xts)) + xts))), x) = count(s(s(s(s(s(s(xts)) + xts)) + xts)), x)
	count(s(s(s(s(s(s(xts))) + (s(s(s(xts))) + xts)))), x) = count(s(s(s(s(s(s(s(s(s(xts))) + xts))) + xts))), x)
+++ primal grammar found for head
	{+, count, s}
... and wrap
	count(s(.), x) = count(s(.), x)
+++ Presburger system  = {
	^f0(0; xts) -> xts
	^f0($n0 + 1; xts) -> s(^f0($n0; xts))
	^f1(0, $n0; xts) -> s(^f0($n0; xts)) + (s(^f0($n0; xts)) + xts)
	^f1($n1 + 1, $n0; xts) -> s(^f1($n1, $n0 + 1; xts))
	^f2(0, $n0; xts) -> s(^f0($n0; xts)) + xts
	^f2($n2 + 1, $n0; xts) -> s(^f2($n2, $n0 + 1; xts))
	^f3(0, $n2; xts) -> s(^f2($n2, 0; xts)) + xts
	^f3($n3 + 1, $n2; xts) -> s(^f3($n3, $n2 + 1; xts))
+++ }
+++ Lemma(s)           = 
	count(s(^f1($n, 0; xts)), x) = count(s(^f3($n, 0; xts)), x)
--- clause
	count(s(s(s(s(s(s(s(s(xts)))) + (s(s(s(s(xts)))) + xts))))), x) = count(s(s(s(s(s(s(s(s(s(s(s(s(xts)))) + xts)))) + xts)))), x)
... subsumed by lemma
	count(s(^f1($n, 0; xts)), x) = count(s(^f3($n, 0; xts)), x)
... with substitution
	$n <- 3

+++ Status of the Inference System
--- Conjectures:
	<empty>
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	count((y + y) + y, x) -> count(y + (y + y), x)
	count(s(s(s(xts) + xts) + xts), x) -> count(s(s(xts) + (s(xts) + xts)), x)
	count(s(s(s(s(s(s(xts)) + xts)) + xts)), x) -> count(s(s(s(s(xts)) + (s(s(xts)) + xts))), x)
	count(s(s(s(s(s(s(s(s(s(xts))) + xts))) + xts))), x) -> count(s(s(s(s(s(s(xts))) + (s(s(s(xts))) + xts)))), x)
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; xts) -> xts
	^f0($n0 + 1; xts) -> s(^f0($n0; xts))
	^f1(0, $n0; xts) -> s(^f0($n0; xts)) + (s(^f0($n0; xts)) + xts)
	^f1($n1 + 1, $n0; xts) -> s(^f1($n1, $n0 + 1; xts))
	^f2(0, $n0; xts) -> s(^f0($n0; xts)) + xts
	^f2($n2 + 1, $n0; xts) -> s(^f2($n2, $n0 + 1; xts))
	^f3(0, $n2; xts) -> s(^f2($n2, 0; xts)) + xts
	^f3($n3 + 1, $n2; xts) -> s(^f3($n3, $n2 + 1; xts))
+++ }
+++ Lemma(s)           = 
	count(s(^f1($n, 0; xts)), x) = count(s(^f3($n, 0; xts)), x)

+++ SUCCESS: all conjectures proved
+++ Statistics:
... Number of proof steps          = 4
... Number of induction steps      = 4
... Number of equational steps     = 0
... Number of case rewriting steps = 0
... Number of PG defined symbols   = 4
... Number of PG lemmas            = 1
... Elapsed time (seconds)         = 0.01
