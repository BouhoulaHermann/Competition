+++ SPECIFICATION --- bidirectional branch, version 0.99
+++ Parameters:
    ===========
+++ input       = 5-in.txt
+++ output      = 5-out.txt
+++ trace       = 3
+++ direction   = last-to-first
+++ drop        = yes
+++ verbose     = 3
+++ split       = 4
+++ loop limit  = 10
+++ stdlib      = /usr/local/lib/indy/stdlib/
-----------------------------------------------------------------------

+++ specification NAT from nat successfully parsed
+++ specification LIST from list successfully parsed
+++ specification APPEND from append successfully parsed
+++ specification BOOL from bool successfully parsed
+++ specification AND from and successfully parsed
+++ specification EQ from eq successfully parsed
+++ specification PREFIX from prefix successfully parsed
+++ specification COUNT from count successfully parsed
+++ specification LEQ from leq successfully parsed
+++ specification LEQid from leqid successfully parsed
+++ specification ANDalt from andalt successfully parsed
+++ specification ListCount from 5-in.txt successfully parsed
+++ Listing
         1: specification ListCount
         2: sorts
         3:      bool list nat
         4: constructors
         5:      0: -> nat
         6:      cons: nat list -> list
         7:      false: -> bool
         8:      nil: -> list
         9:      s: nat -> nat
        10:      true: -> bool
        11: defined functions
        12:      &&: bool bool -> bool
        13:      <=: nat nat -> bool
        14:      ==: nat nat -> bool
        15:      app: list list -> list
        16:      count: nat list -> nat
        17:      pref: list list -> bool
        18: precedence
        19:      count > <= = == > && > pref > app > cons > nil > s > 0 > false = true
        20: axioms
        21:      0 <= x = true;
        22:      0 == 0 = true;
        23:      true && x = x;
        24:      x && true = x;
        25:      x <= x = true;
        26:      app(nil, y) = y;
        27:      0 == s(x) = false;
        28:      count(x, nil) = 0;
        29:      s(x) <= 0 = false;
        30:      s(x) == 0 = false;
        31:      false && x = false;
        32:      x && false = false;
        33:      pref(nil, x) = true;
        34:      true && true = true;
        35:      false && true = false;
        36:      s(x) <= s(y) = x <= y;
        37:      s(x) == s(y) = x == y;
        38:      true && false = false;
        39:      false && false = false;
        40:      pref(cons(u, x), nil) = false;
        41:      app(cons(x, y), z) = cons(x, app(y, z));
        42:      pref(cons(u, x), cons(v, y)) = (u == v) && pref(x, y);
        43:      x == y = false => count(x, cons(y, ys)) = count(x, ys);
        44:      x == y = true => count(x, cons(y, ys)) = s(count(x, ys));
        45: conjectures
        46:      pref(x, y) = true => count(z, x) <= count(z, y) = true;
        47: end
+++ finitary sorts: bool
+++ Rewrite System 
	0 <= x -> true
	0 == 0 -> true
	true && x -> x
	x && true -> x
	x <= x -> true
	app(nil, y) -> y
	0 == s(x) -> false
	count(x, nil) -> 0
	s(x) <= 0 -> false
	s(x) == 0 -> false
	false && x -> false
	x && false -> false
	pref(nil, x) -> true
	true && true -> true
	false && true -> false
	s(x) <= s(y) -> x <= y
	s(x) == s(y) -> x == y
	true && false -> false
	false && false -> false
	pref(cons(u, x), nil) -> false
	app(cons(x, y), z) -> cons(x, app(y, z))
	(u == v) && pref(x, y) -> pref(cons(u, x), cons(v, y))
	x == y = false => count(x, cons(y, ys)) -> count(x, ys)
	x == y = true => count(x, cons(y, ys)) -> s(count(x, ys))
+++ inductive positions:
... for &&: 0 1
... for <=: 0 1
... for ==: 0 1
... for app: 0
... for count: 1
... for pref: 0 1
+++ maximal depths of left-hand sides:
... for pref: 2
... for count: 2
... for app: 2
... for &&: 2
... for ==: 2
... for <=: 2
+++ general maximal depth = 2
+++ sort dependence: nat < list
+++ test sets for defined functions and sorts:
... for pref
... ... list
		nil
		cons(x, y)
... for ==
... ... nat
		0
		s(x)
... for <=
... ... nat
		0
		s(x)
... for count
... ... list
		nil
		cons(x, y)
... for app
... ... list
		nil
		cons(x, y)
... for &&
... ... bool
		true
		false

+++ conjecture(s)
	pref(x, y) = true => count(z, x) <= count(z, y) = true

+++ inference system initiated
+++ treating clause
	pref(x, y) = true => count(z, x) <= count(z, y) = true
+++ inductive narrowing on conjecture
	pref(x, y) = true => count(z, x) <= count(z, y) = true
... induction variables of
	pref(x, y) = true => count(z, x) <= count(z, y) = true
... are:
	y:list
	x:list
+++ perform INDUCTIVE NARROWING on conjecture 
	pref(x, y) = true => count(z, x) <= count(z, y) = true
... with variable y
+++ creating new conjecture
	pref(x, nil) = true => count(z, x) <= count(z, nil) = true
+++ creating new conjecture
	pref(x, cons(xts, yts)) = true => count(z, x) <= count(z, cons(xts, yts)) = true
--- clause
	pref(x, nil) = true => count(z, x) <= count(z, nil) = true
... reduced in 1 step to
	pref(x, nil) = true => count(z, x) <= 0 = true
+++ inductive narrowing succeeded
--- clause
	pref(x, y) = true => count(z, x) <= count(z, y) = true
... oriented to rule
	pref(x, y) = true => count(z, x) <= count(z, y) -> true
+++ added new clause(s)
	pref(x, nil) = true => count(z, x) <= 0 = true
	pref(x, cons(xts, yts)) = true => count(z, x) <= count(z, cons(xts, yts)) = true
... to conjectures

+++ Status of the Inference System
--- Conjectures:
	pref(x, nil) = true => count(z, x) <= 0 = true
	pref(x, cons(xts, yts)) = true => count(z, x) <= count(z, cons(xts, yts)) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	pref(x, y) = true => count(z, x) <= count(z, y) -> true
--- Primal Grammar:
	<empty>

+++ treating clause
	pref(x, nil) = true => count(z, x) <= 0 = true
+++ inductive narrowing on conjecture
	pref(x, nil) = true => count(z, x) <= 0 = true
... induction variables of
	pref(x, nil) = true => count(z, x) <= 0 = true
... are:
	x:list
+++ perform INDUCTIVE NARROWING on conjecture 
	pref(x, nil) = true => count(z, x) <= 0 = true
... with variable x
+++ creating new conjecture
	pref(nil, nil) = true => count(z, nil) <= 0 = true
+++ creating new conjecture
	pref(cons(xts, yts), nil) = true => count(z, cons(xts, yts)) <= 0 = true
--- clause
	pref(nil, nil) = true => count(z, nil) <= 0 = true
... reduced to tautology
	true = true
--- clause
	pref(cons(xts, yts), nil) = true => count(z, cons(xts, yts)) <= 0 = true
... reduced in 1 step to
	false = true => count(z, cons(xts, yts)) <= 0 = true
--- clause
	false = true => count(z, cons(xts, yts)) <= 0 = true
... contains a ground negative condition
	false = true
... and is therefore discarded (false => t is always true)
+++ inductive narrowing succeeded
--- clause
	pref(x, nil) = true => count(z, x) <= 0 = true
... oriented to rule
	pref(x, nil) = true => count(z, x) <= 0 -> true

+++ Status of the Inference System
--- Conjectures:
	pref(x, cons(xts, yts)) = true => count(z, x) <= count(z, cons(xts, yts)) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	pref(x, nil) = true => count(z, x) <= 0 -> true
	pref(x, y) = true => count(z, x) <= count(z, y) -> true
--- Primal Grammar:
	<empty>

+++ treating clause
	pref(x, cons(xts, yts)) = true => count(z, x) <= count(z, cons(xts, yts)) = true
+++ inductive narrowing on conjecture
	pref(x, cons(xts, yts)) = true => count(z, x) <= count(z, cons(xts, yts)) = true
... induction variables of
	pref(x, cons(xts, yts)) = true => count(z, x) <= count(z, cons(xts, yts)) = true
... are:
	x:list
+++ perform INDUCTIVE NARROWING on conjecture 
	pref(x, cons(xts, yts)) = true => count(z, x) <= count(z, cons(xts, yts)) = true
... with variable x
+++ creating new conjecture
	pref(nil, cons(xts, yts)) = true => count(z, nil) <= count(z, cons(xts, yts)) = true
+++ creating new conjecture
	pref(cons(xts2, yts2), cons(xts1, yts1)) = true => count(z, cons(xts2, yts2)) <= count(z, cons(xts1, yts1)) = true
--- clause
	pref(nil, cons(xts, yts)) = true => count(z, nil) <= count(z, cons(xts, yts)) = true
... reduced to tautology
	true = true
+++ inductive narrowing succeeded
--- clause
	pref(x, cons(xts, yts)) = true => count(z, x) <= count(z, cons(xts, yts)) = true
... oriented to rule
	pref(x, cons(xts, yts)) = true => count(z, x) <= count(z, cons(xts, yts)) -> true
+++ added new clause(s)
	pref(cons(xts2, yts2), cons(xts1, yts1)) = true => count(z, cons(xts2, yts2)) <= count(z, cons(xts1, yts1)) = true
... to conjectures

+++ Status of the Inference System
--- Conjectures:
	pref(cons(xts2, yts2), cons(xts1, yts1)) = true => count(z, cons(xts2, yts2)) <= count(z, cons(xts1, yts1)) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	pref(x, nil) = true => count(z, x) <= 0 -> true
	pref(x, y) = true => count(z, x) <= count(z, y) -> true
	pref(x, cons(xts, yts)) = true => count(z, x) <= count(z, cons(xts, yts)) -> true
--- Primal Grammar:
	<empty>

+++ treating clause
	pref(cons(xts2, yts2), cons(xts1, yts1)) = true => count(z, cons(xts2, yts2)) <= count(z, cons(xts1, yts1)) = true
--- no new clauses created
+++ attempting case rewriting
--- case rewriting generated new conjectures
	(z == xts2 = false) & (pref(cons(xts2, yts2), cons(xts1, yts1)) = true) => count(z, yts2) <= count(z, cons(xts1, yts1)) = true
	(z == xts2 = true) & (pref(cons(xts2, yts2), cons(xts1, yts1)) = true) => s(count(z, yts2)) <= count(z, cons(xts1, yts1)) = true
+++ added new clause(s)
	(z == xts2 = false) & (pref(cons(xts2, yts2), cons(xts1, yts1)) = true) => count(z, yts2) <= count(z, cons(xts1, yts1)) = true
	(z == xts2 = true) & (pref(cons(xts2, yts2), cons(xts1, yts1)) = true) => s(count(z, yts2)) <= count(z, cons(xts1, yts1)) = true
... to conjectures

+++ Status of the Inference System
--- Conjectures:
	(z == xts2 = false) & (pref(cons(xts2, yts2), cons(xts1, yts1)) = true) => count(z, yts2) <= count(z, cons(xts1, yts1)) = true
	(z == xts2 = true) & (pref(cons(xts2, yts2), cons(xts1, yts1)) = true) => s(count(z, yts2)) <= count(z, cons(xts1, yts1)) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	pref(x, nil) = true => count(z, x) <= 0 -> true
	pref(x, y) = true => count(z, x) <= count(z, y) -> true
	pref(x, cons(xts, yts)) = true => count(z, x) <= count(z, cons(xts, yts)) -> true
--- Primal Grammar:
	<empty>

+++ treating clause
	(z == xts2 = false) & (pref(cons(xts2, yts2), cons(xts1, yts1)) = true) => count(z, yts2) <= count(z, cons(xts1, yts1)) = true
+++ inductive narrowing on conjecture
	(z == xts2 = false) & (pref(cons(xts2, yts2), cons(xts1, yts1)) = true) => count(z, yts2) <= count(z, cons(xts1, yts1)) = true
... induction variables of
	(z == xts2 = false) & (pref(cons(xts2, yts2), cons(xts1, yts1)) = true) => count(z, yts2) <= count(z, cons(xts1, yts1)) = true
... are:
	z:nat
	yts2:list
	xts2:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	(z == xts2 = false) & (pref(cons(xts2, yts2), cons(xts1, yts1)) = true) => count(z, yts2) <= count(z, cons(xts1, yts1)) = true
... with variable z
+++ creating new conjecture
	(0 == xts2 = false) & (pref(cons(xts2, yts2), cons(xts1, yts1)) = true) => count(0, yts2) <= count(0, cons(xts1, yts1)) = true
+++ creating new conjecture
	(s(xts3) == xts2 = false) & (pref(cons(xts2, yts2), cons(xts1, yts1)) = true) => count(s(xts3), yts2) <= count(s(xts3), cons(xts1, yts1)) = true
+++ non-reduced clause(s)
	(0 == xts2 = false) & (pref(cons(xts2, yts2), cons(xts1, yts1)) = true) => count(0, yts2) <= count(0, cons(xts1, yts1)) = true
... need recursive treatment for next inductive variable
+++ perform INDUCTIVE NARROWING on conjecture 
	(0 == xts2 = false) & (pref(cons(xts2, yts2), cons(xts1, yts1)) = true) => count(0, yts2) <= count(0, cons(xts1, yts1)) = true
... with variable yts2
+++ creating new conjecture
	(0 == xts2 = false) & (pref(cons(xts2, nil), cons(xts1, yts)) = true) => count(0, nil) <= count(0, cons(xts1, yts)) = true
+++ creating new conjecture
	(0 == xts3 = false) & (pref(cons(xts3, cons(xts2, yts2)), cons(xts1, yts1)) = true) => count(0, cons(xts2, yts2)) <= count(0, cons(xts1, yts1)) = true
--- clause
	(0 == xts2 = false) & (pref(cons(xts2, nil), cons(xts1, yts)) = true) => count(0, nil) <= count(0, cons(xts1, yts)) = true
... reduced to tautology
	(0 == xts2 = false) & (pref(cons(xts2, nil), cons(xts1, yts)) = true) => true = true
+++ inductive narrowing succeeded
--- clause
	(0 == xts2 = false) & (pref(cons(xts2, yts2), cons(xts1, yts1)) = true) => count(0, yts2) <= count(0, cons(xts1, yts1)) = true
... oriented to rule
	pref(cons(xts2, yts2), cons(xts1, yts1)) = true & 0 == xts = false => count(0, yts2) <= count(0, cons(xts, yts1)) -> true
+++ added new clause(s)
	(s(xts3) == xts2 = false) & (pref(cons(xts2, yts2), cons(xts1, yts1)) = true) => count(s(xts3), yts2) <= count(s(xts3), cons(xts1, yts1)) = true
	(0 == xts3 = false) & (pref(cons(xts3, cons(xts2, yts2)), cons(xts1, yts1)) = true) => count(0, cons(xts2, yts2)) <= count(0, cons(xts1, yts1)) = true
... to conjectures

+++ Status of the Inference System
--- Conjectures:
	(z == xts2 = true) & (pref(cons(xts2, yts2), cons(xts1, yts1)) = true) => s(count(z, yts2)) <= count(z, cons(xts1, yts1)) = true
	(s(xts3) == xts2 = false) & (pref(cons(xts2, yts2), cons(xts1, yts1)) = true) => count(s(xts3), yts2) <= count(s(xts3), cons(xts1, yts1)) = true
	(0 == xts3 = false) & (pref(cons(xts3, cons(xts2, yts2)), cons(xts1, yts1)) = true) => count(0, cons(xts2, yts2)) <= count(0, cons(xts1, yts1)) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	pref(x, nil) = true => count(z, x) <= 0 -> true
	pref(x, y) = true => count(z, x) <= count(z, y) -> true
	pref(x, cons(xts, yts)) = true => count(z, x) <= count(z, cons(xts, yts)) -> true
	pref(cons(xts2, yts2), cons(xts1, yts1)) = true & 0 == xts = false => count(0, yts2) <= count(0, cons(xts, yts1)) -> true
--- Primal Grammar:
	<empty>

+++ treating clause
	(z == xts2 = true) & (pref(cons(xts2, yts2), cons(xts1, yts1)) = true) => s(count(z, yts2)) <= count(z, cons(xts1, yts1)) = true
+++ inductive narrowing on conjecture
	(z == xts2 = true) & (pref(cons(xts2, yts2), cons(xts1, yts1)) = true) => s(count(z, yts2)) <= count(z, cons(xts1, yts1)) = true
... induction variables of
	(z == xts2 = true) & (pref(cons(xts2, yts2), cons(xts1, yts1)) = true) => s(count(z, yts2)) <= count(z, cons(xts1, yts1)) = true
... are:
	z:nat
	yts2:list
	xts2:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	(z == xts2 = true) & (pref(cons(xts2, yts2), cons(xts1, yts1)) = true) => s(count(z, yts2)) <= count(z, cons(xts1, yts1)) = true
... with variable z
+++ creating new conjecture
	(0 == xts2 = true) & (pref(cons(xts2, yts2), cons(xts1, yts1)) = true) => s(count(0, yts2)) <= count(0, cons(xts1, yts1)) = true
+++ creating new conjecture
	(s(xts3) == xts2 = true) & (pref(cons(xts2, yts2), cons(xts1, yts1)) = true) => s(count(s(xts3), yts2)) <= count(s(xts3), cons(xts1, yts1)) = true
+++ non-reduced clause(s)
	(0 == xts2 = true) & (pref(cons(xts2, yts2), cons(xts1, yts1)) = true) => s(count(0, yts2)) <= count(0, cons(xts1, yts1)) = true
... need recursive treatment for next inductive variable
+++ perform INDUCTIVE NARROWING on conjecture 
	(0 == xts2 = true) & (pref(cons(xts2, yts2), cons(xts1, yts1)) = true) => s(count(0, yts2)) <= count(0, cons(xts1, yts1)) = true
... with variable yts2
+++ creating new conjecture
	(0 == xts2 = true) & (pref(cons(xts2, nil), cons(xts1, yts)) = true) => s(count(0, nil)) <= count(0, cons(xts1, yts)) = true
+++ creating new conjecture
	(0 == xts3 = true) & (pref(cons(xts3, cons(xts2, yts2)), cons(xts1, yts1)) = true) => s(count(0, cons(xts2, yts2))) <= count(0, cons(xts1, yts1)) = true
--- clause
	(0 == xts2 = true) & (pref(cons(xts2, nil), cons(xts1, yts)) = true) => s(count(0, nil)) <= count(0, cons(xts1, yts)) = true
... reduced in 1 step to
	(0 == xts2 = true) & (pref(cons(xts2, nil), cons(xts1, yts)) = true) => s(0) <= count(0, cons(xts1, yts)) = true
+++ inductive narrowing succeeded
--- clause
	(0 == xts2 = true) & (pref(cons(xts2, yts2), cons(xts1, yts1)) = true) => s(count(0, yts2)) <= count(0, cons(xts1, yts1)) = true
... oriented to rule
	pref(cons(xts2, yts2), cons(xts1, yts1)) = true & 0 == xts = true => s(count(0, yts2)) <= count(0, cons(xts, yts1)) -> true
+++ added new clause(s)
	(s(xts3) == xts2 = true) & (pref(cons(xts2, yts2), cons(xts1, yts1)) = true) => s(count(s(xts3), yts2)) <= count(s(xts3), cons(xts1, yts1)) = true
	(0 == xts2 = true) & (pref(cons(xts2, nil), cons(xts1, yts)) = true) => s(0) <= count(0, cons(xts1, yts)) = true
	(0 == xts3 = true) & (pref(cons(xts3, cons(xts2, yts2)), cons(xts1, yts1)) = true) => s(count(0, cons(xts2, yts2))) <= count(0, cons(xts1, yts1)) = true
... to conjectures

+++ Status of the Inference System
--- Conjectures:
	(s(xts3) == xts2 = false) & (pref(cons(xts2, yts2), cons(xts1, yts1)) = true) => count(s(xts3), yts2) <= count(s(xts3), cons(xts1, yts1)) = true
	(0 == xts3 = false) & (pref(cons(xts3, cons(xts2, yts2)), cons(xts1, yts1)) = true) => count(0, cons(xts2, yts2)) <= count(0, cons(xts1, yts1)) = true
	(s(xts3) == xts2 = true) & (pref(cons(xts2, yts2), cons(xts1, yts1)) = true) => s(count(s(xts3), yts2)) <= count(s(xts3), cons(xts1, yts1)) = true
	(0 == xts2 = true) & (pref(cons(xts2, nil), cons(xts1, yts)) = true) => s(0) <= count(0, cons(xts1, yts)) = true
	(0 == xts3 = true) & (pref(cons(xts3, cons(xts2, yts2)), cons(xts1, yts1)) = true) => s(count(0, cons(xts2, yts2))) <= count(0, cons(xts1, yts1)) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	pref(x, nil) = true => count(z, x) <= 0 -> true
	pref(x, y) = true => count(z, x) <= count(z, y) -> true
	pref(x, cons(xts, yts)) = true => count(z, x) <= count(z, cons(xts, yts)) -> true
	pref(cons(xts2, yts2), cons(xts1, yts1)) = true & 0 == xts = false => count(0, yts2) <= count(0, cons(xts, yts1)) -> true
	pref(cons(xts2, yts2), cons(xts1, yts1)) = true & 0 == xts = true => s(count(0, yts2)) <= count(0, cons(xts, yts1)) -> true
--- Primal Grammar:
	<empty>

+++ treating clause
	(s(xts3) == xts2 = false) & (pref(cons(xts2, yts2), cons(xts1, yts1)) = true) => count(s(xts3), yts2) <= count(s(xts3), cons(xts1, yts1)) = true
+++ inductive narrowing on conjecture
	(s(xts3) == xts2 = false) & (pref(cons(xts2, yts2), cons(xts1, yts1)) = true) => count(s(xts3), yts2) <= count(s(xts3), cons(xts1, yts1)) = true
... induction variables of
	(s(xts3) == xts2 = false) & (pref(cons(xts2, yts2), cons(xts1, yts1)) = true) => count(s(xts3), yts2) <= count(s(xts3), cons(xts1, yts1)) = true
... are:
	yts2:list
	xts2:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	(s(xts3) == xts2 = false) & (pref(cons(xts2, yts2), cons(xts1, yts1)) = true) => count(s(xts3), yts2) <= count(s(xts3), cons(xts1, yts1)) = true
... with variable yts2
+++ creating new conjecture
	(s(xts3) == xts2 = false) & (pref(cons(xts2, nil), cons(xts1, yts)) = true) => count(s(xts3), nil) <= count(s(xts3), cons(xts1, yts)) = true
+++ creating new conjecture
	(s(xts4) == xts3 = false) & (pref(cons(xts3, cons(xts2, yts2)), cons(xts1, yts1)) = true) => count(s(xts4), cons(xts2, yts2)) <= count(s(xts4), cons(xts1, yts1)) = true
--- clause
	(s(xts3) == xts2 = false) & (pref(cons(xts2, nil), cons(xts1, yts)) = true) => count(s(xts3), nil) <= count(s(xts3), cons(xts1, yts)) = true
... reduced to tautology
	(s(xts3) == xts2 = false) & (pref(cons(xts2, nil), cons(xts1, yts)) = true) => true = true
+++ inductive narrowing succeeded
--- clause
	(s(xts3) == xts2 = false) & (pref(cons(xts2, yts2), cons(xts1, yts1)) = true) => count(s(xts3), yts2) <= count(s(xts3), cons(xts1, yts1)) = true
... oriented to rule
	pref(cons(xts2, yts2), cons(xts1, yts1)) = true & s(xts2) == xts1 = false => count(s(xts2), yts2) <= count(s(xts2), cons(xts1, yts1)) -> true
+++ added new clause(s)
	(s(xts4) == xts3 = false) & (pref(cons(xts3, cons(xts2, yts2)), cons(xts1, yts1)) = true) => count(s(xts4), cons(xts2, yts2)) <= count(s(xts4), cons(xts1, yts1)) = true
... to conjectures

+++ Status of the Inference System
--- Conjectures:
	(0 == xts3 = false) & (pref(cons(xts3, cons(xts2, yts2)), cons(xts1, yts1)) = true) => count(0, cons(xts2, yts2)) <= count(0, cons(xts1, yts1)) = true
	(s(xts3) == xts2 = true) & (pref(cons(xts2, yts2), cons(xts1, yts1)) = true) => s(count(s(xts3), yts2)) <= count(s(xts3), cons(xts1, yts1)) = true
	(0 == xts2 = true) & (pref(cons(xts2, nil), cons(xts1, yts)) = true) => s(0) <= count(0, cons(xts1, yts)) = true
	(0 == xts3 = true) & (pref(cons(xts3, cons(xts2, yts2)), cons(xts1, yts1)) = true) => s(count(0, cons(xts2, yts2))) <= count(0, cons(xts1, yts1)) = true
	(s(xts4) == xts3 = false) & (pref(cons(xts3, cons(xts2, yts2)), cons(xts1, yts1)) = true) => count(s(xts4), cons(xts2, yts2)) <= count(s(xts4), cons(xts1, yts1)) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	pref(x, nil) = true => count(z, x) <= 0 -> true
	pref(x, y) = true => count(z, x) <= count(z, y) -> true
	pref(x, cons(xts, yts)) = true => count(z, x) <= count(z, cons(xts, yts)) -> true
	pref(cons(xts2, yts2), cons(xts1, yts1)) = true & 0 == xts = false => count(0, yts2) <= count(0, cons(xts, yts1)) -> true
	pref(cons(xts2, yts2), cons(xts1, yts1)) = true & 0 == xts = true => s(count(0, yts2)) <= count(0, cons(xts, yts1)) -> true
	pref(cons(xts2, yts2), cons(xts1, yts1)) = true & s(xts2) == xts1 = false => count(s(xts2), yts2) <= count(s(xts2), cons(xts1, yts1)) -> true
--- Primal Grammar:
	<empty>

+++ treating clause
	(0 == xts3 = false) & (pref(cons(xts3, cons(xts2, yts2)), cons(xts1, yts1)) = true) => count(0, cons(xts2, yts2)) <= count(0, cons(xts1, yts1)) = true
+++ inductive narrowing on conjecture
	(0 == xts3 = false) & (pref(cons(xts3, cons(xts2, yts2)), cons(xts1, yts1)) = true) => count(0, cons(xts2, yts2)) <= count(0, cons(xts1, yts1)) = true
... induction variables of
	(0 == xts3 = false) & (pref(cons(xts3, cons(xts2, yts2)), cons(xts1, yts1)) = true) => count(0, cons(xts2, yts2)) <= count(0, cons(xts1, yts1)) = true
... are:
	xts3:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	(0 == xts3 = false) & (pref(cons(xts3, cons(xts2, yts2)), cons(xts1, yts1)) = true) => count(0, cons(xts2, yts2)) <= count(0, cons(xts1, yts1)) = true
... with variable xts3
+++ creating new conjecture
	(0 == 0 = false) & (pref(cons(0, cons(xts2, yts2)), cons(xts1, yts1)) = true) => count(0, cons(xts2, yts2)) <= count(0, cons(xts1, yts1)) = true
+++ creating new conjecture
	(0 == s(xts3) = false) & (pref(cons(s(xts3), cons(xts2, yts2)), cons(xts1, yts1)) = true) => count(0, cons(xts2, yts2)) <= count(0, cons(xts1, yts1)) = true
--- clause
	(0 == 0 = false) & (pref(cons(0, cons(xts2, yts2)), cons(xts1, yts1)) = true) => count(0, cons(xts2, yts2)) <= count(0, cons(xts1, yts1)) = true
... reduced in 1 step to
	(true = false) & (pref(cons(0, cons(xts2, yts2)), cons(xts1, yts1)) = true) => count(0, cons(xts2, yts2)) <= count(0, cons(xts1, yts1)) = true
--- clause
	(true = false) & (pref(cons(0, cons(xts2, yts2)), cons(xts1, yts1)) = true) => count(0, cons(xts2, yts2)) <= count(0, cons(xts1, yts1)) = true
... contains a ground negative condition
	true = false
... and is therefore discarded (false => t is always true)
--- clause
	(0 == s(xts3) = false) & (pref(cons(s(xts3), cons(xts2, yts2)), cons(xts1, yts1)) = true) => count(0, cons(xts2, yts2)) <= count(0, cons(xts1, yts1)) = true
... reduced in 1 step to
	pref(cons(s(xts3), cons(xts2, yts2)), cons(xts1, yts1)) = true => count(0, cons(xts2, yts2)) <= count(0, cons(xts1, yts1)) = true
+++ inductive narrowing succeeded
--- clause
	(0 == xts3 = false) & (pref(cons(xts3, cons(xts2, yts2)), cons(xts1, yts1)) = true) => count(0, cons(xts2, yts2)) <= count(0, cons(xts1, yts1)) = true
... oriented to rule
	pref(cons(xts3, cons(xts2, yts2)), cons(xts1, yts1)) = true & 0 == xts = false => count(0, cons(xts2, yts2)) <= count(0, cons(xts1, yts1)) -> true
+++ added new clause(s)
	pref(cons(s(xts3), cons(xts2, yts2)), cons(xts1, yts1)) = true => count(0, cons(xts2, yts2)) <= count(0, cons(xts1, yts1)) = true
... to conjectures

+++ Status of the Inference System
--- Conjectures:
	(s(xts3) == xts2 = true) & (pref(cons(xts2, yts2), cons(xts1, yts1)) = true) => s(count(s(xts3), yts2)) <= count(s(xts3), cons(xts1, yts1)) = true
	(0 == xts2 = true) & (pref(cons(xts2, nil), cons(xts1, yts)) = true) => s(0) <= count(0, cons(xts1, yts)) = true
	(0 == xts3 = true) & (pref(cons(xts3, cons(xts2, yts2)), cons(xts1, yts1)) = true) => s(count(0, cons(xts2, yts2))) <= count(0, cons(xts1, yts1)) = true
	(s(xts4) == xts3 = false) & (pref(cons(xts3, cons(xts2, yts2)), cons(xts1, yts1)) = true) => count(s(xts4), cons(xts2, yts2)) <= count(s(xts4), cons(xts1, yts1)) = true
	pref(cons(s(xts3), cons(xts2, yts2)), cons(xts1, yts1)) = true => count(0, cons(xts2, yts2)) <= count(0, cons(xts1, yts1)) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	pref(x, nil) = true => count(z, x) <= 0 -> true
	pref(x, y) = true => count(z, x) <= count(z, y) -> true
	pref(x, cons(xts, yts)) = true => count(z, x) <= count(z, cons(xts, yts)) -> true
	pref(cons(xts2, yts2), cons(xts1, yts1)) = true & 0 == xts = false => count(0, yts2) <= count(0, cons(xts, yts1)) -> true
	pref(cons(xts2, yts2), cons(xts1, yts1)) = true & 0 == xts = true => s(count(0, yts2)) <= count(0, cons(xts, yts1)) -> true
	pref(cons(xts2, yts2), cons(xts1, yts1)) = true & s(xts2) == xts1 = false => count(s(xts2), yts2) <= count(s(xts2), cons(xts1, yts1)) -> true
	pref(cons(xts3, cons(xts2, yts2)), cons(xts1, yts1)) = true & 0 == xts = false => count(0, cons(xts2, yts2)) <= count(0, cons(xts1, yts1)) -> true
--- Primal Grammar:
	<empty>

+++ treating clause
	(s(xts3) == xts2 = true) & (pref(cons(xts2, yts2), cons(xts1, yts1)) = true) => s(count(s(xts3), yts2)) <= count(s(xts3), cons(xts1, yts1)) = true
+++ inductive narrowing on conjecture
	(s(xts3) == xts2 = true) & (pref(cons(xts2, yts2), cons(xts1, yts1)) = true) => s(count(s(xts3), yts2)) <= count(s(xts3), cons(xts1, yts1)) = true
... induction variables of
	(s(xts3) == xts2 = true) & (pref(cons(xts2, yts2), cons(xts1, yts1)) = true) => s(count(s(xts3), yts2)) <= count(s(xts3), cons(xts1, yts1)) = true
... are:
	yts2:list
	xts2:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	(s(xts3) == xts2 = true) & (pref(cons(xts2, yts2), cons(xts1, yts1)) = true) => s(count(s(xts3), yts2)) <= count(s(xts3), cons(xts1, yts1)) = true
... with variable yts2
+++ creating new conjecture
	(s(xts3) == xts2 = true) & (pref(cons(xts2, nil), cons(xts1, yts)) = true) => s(count(s(xts3), nil)) <= count(s(xts3), cons(xts1, yts)) = true
+++ creating new conjecture
	(s(xts4) == xts3 = true) & (pref(cons(xts3, cons(xts2, yts2)), cons(xts1, yts1)) = true) => s(count(s(xts4), cons(xts2, yts2))) <= count(s(xts4), cons(xts1, yts1)) = true
--- clause
	(s(xts3) == xts2 = true) & (pref(cons(xts2, nil), cons(xts1, yts)) = true) => s(count(s(xts3), nil)) <= count(s(xts3), cons(xts1, yts)) = true
... reduced in 1 step to
	(s(xts3) == xts2 = true) & (pref(cons(xts2, nil), cons(xts1, yts)) = true) => s(0) <= count(s(xts3), cons(xts1, yts)) = true
+++ inductive narrowing succeeded
--- clause
	(s(xts3) == xts2 = true) & (pref(cons(xts2, yts2), cons(xts1, yts1)) = true) => s(count(s(xts3), yts2)) <= count(s(xts3), cons(xts1, yts1)) = true
... oriented to rule
	pref(cons(xts2, yts2), cons(xts1, yts1)) = true & s(xts2) == xts1 = true => s(count(s(xts2), yts2)) <= count(s(xts2), cons(xts1, yts1)) -> true
+++ added new clause(s)
	(s(xts3) == xts2 = true) & (pref(cons(xts2, nil), cons(xts1, yts)) = true) => s(0) <= count(s(xts3), cons(xts1, yts)) = true
	(s(xts4) == xts3 = true) & (pref(cons(xts3, cons(xts2, yts2)), cons(xts1, yts1)) = true) => s(count(s(xts4), cons(xts2, yts2))) <= count(s(xts4), cons(xts1, yts1)) = true
... to conjectures

+++ Status of the Inference System
--- Conjectures:
	(0 == xts2 = true) & (pref(cons(xts2, nil), cons(xts1, yts)) = true) => s(0) <= count(0, cons(xts1, yts)) = true
	(0 == xts3 = true) & (pref(cons(xts3, cons(xts2, yts2)), cons(xts1, yts1)) = true) => s(count(0, cons(xts2, yts2))) <= count(0, cons(xts1, yts1)) = true
	(s(xts4) == xts3 = false) & (pref(cons(xts3, cons(xts2, yts2)), cons(xts1, yts1)) = true) => count(s(xts4), cons(xts2, yts2)) <= count(s(xts4), cons(xts1, yts1)) = true
	pref(cons(s(xts3), cons(xts2, yts2)), cons(xts1, yts1)) = true => count(0, cons(xts2, yts2)) <= count(0, cons(xts1, yts1)) = true
	(s(xts3) == xts2 = true) & (pref(cons(xts2, nil), cons(xts1, yts)) = true) => s(0) <= count(s(xts3), cons(xts1, yts)) = true
	(s(xts4) == xts3 = true) & (pref(cons(xts3, cons(xts2, yts2)), cons(xts1, yts1)) = true) => s(count(s(xts4), cons(xts2, yts2))) <= count(s(xts4), cons(xts1, yts1)) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	pref(x, nil) = true => count(z, x) <= 0 -> true
	pref(x, y) = true => count(z, x) <= count(z, y) -> true
	pref(x, cons(xts, yts)) = true => count(z, x) <= count(z, cons(xts, yts)) -> true
	pref(cons(xts2, yts2), cons(xts1, yts1)) = true & 0 == xts = false => count(0, yts2) <= count(0, cons(xts, yts1)) -> true
	pref(cons(xts2, yts2), cons(xts1, yts1)) = true & 0 == xts = true => s(count(0, yts2)) <= count(0, cons(xts, yts1)) -> true
	pref(cons(xts2, yts2), cons(xts1, yts1)) = true & s(xts2) == xts1 = false => count(s(xts2), yts2) <= count(s(xts2), cons(xts1, yts1)) -> true
	pref(cons(xts2, yts2), cons(xts1, yts1)) = true & s(xts2) == xts1 = true => s(count(s(xts2), yts2)) <= count(s(xts2), cons(xts1, yts1)) -> true
	pref(cons(xts3, cons(xts2, yts2)), cons(xts1, yts1)) = true & 0 == xts = false => count(0, cons(xts2, yts2)) <= count(0, cons(xts1, yts1)) -> true
--- Primal Grammar:
	<empty>

+++ treating clause
	(0 == xts2 = true) & (pref(cons(xts2, nil), cons(xts1, yts)) = true) => s(0) <= count(0, cons(xts1, yts)) = true
+++ inductive narrowing on conjecture
	(0 == xts2 = true) & (pref(cons(xts2, nil), cons(xts1, yts)) = true) => s(0) <= count(0, cons(xts1, yts)) = true
... induction variables of
	(0 == xts2 = true) & (pref(cons(xts2, nil), cons(xts1, yts)) = true) => s(0) <= count(0, cons(xts1, yts)) = true
... are:
	xts2:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	(0 == xts2 = true) & (pref(cons(xts2, nil), cons(xts1, yts)) = true) => s(0) <= count(0, cons(xts1, yts)) = true
... with variable xts2
+++ creating new conjecture
	(0 == 0 = true) & (pref(cons(0, nil), cons(xts, yts)) = true) => s(0) <= count(0, cons(xts, yts)) = true
+++ creating new conjecture
	(0 == s(xts2) = true) & (pref(cons(s(xts2), nil), cons(xts1, yts)) = true) => s(0) <= count(0, cons(xts1, yts)) = true
--- clause
	(0 == 0 = true) & (pref(cons(0, nil), cons(xts, yts)) = true) => s(0) <= count(0, cons(xts, yts)) = true
... reduced in 1 step to
	pref(cons(0, nil), cons(xts, yts)) = true => s(0) <= count(0, cons(xts, yts)) = true
--- clause
	(0 == s(xts2) = true) & (pref(cons(s(xts2), nil), cons(xts1, yts)) = true) => s(0) <= count(0, cons(xts1, yts)) = true
... reduced in 1 step to
	(false = true) & (pref(cons(s(xts2), nil), cons(xts1, yts)) = true) => s(0) <= count(0, cons(xts1, yts)) = true
--- clause
	(false = true) & (pref(cons(s(xts2), nil), cons(xts1, yts)) = true) => s(0) <= count(0, cons(xts1, yts)) = true
... contains a ground negative condition
	false = true
... and is therefore discarded (false => t is always true)
+++ inductive narrowing succeeded
--- clause
	(0 == xts2 = true) & (pref(cons(xts2, nil), cons(xts1, yts)) = true) => s(0) <= count(0, cons(xts1, yts)) = true
... oriented to rule
	pref(cons(xts2, nil), cons(xts1, yts)) = true & 0 == xts = true => s(0) <= count(0, cons(xts, yts)) -> true
+++ added new clause(s)
	pref(cons(0, nil), cons(xts, yts)) = true => s(0) <= count(0, cons(xts, yts)) = true
... to conjectures

+++ Status of the Inference System
--- Conjectures:
	(0 == xts3 = true) & (pref(cons(xts3, cons(xts2, yts2)), cons(xts1, yts1)) = true) => s(count(0, cons(xts2, yts2))) <= count(0, cons(xts1, yts1)) = true
	(s(xts4) == xts3 = false) & (pref(cons(xts3, cons(xts2, yts2)), cons(xts1, yts1)) = true) => count(s(xts4), cons(xts2, yts2)) <= count(s(xts4), cons(xts1, yts1)) = true
	pref(cons(s(xts3), cons(xts2, yts2)), cons(xts1, yts1)) = true => count(0, cons(xts2, yts2)) <= count(0, cons(xts1, yts1)) = true
	(s(xts3) == xts2 = true) & (pref(cons(xts2, nil), cons(xts1, yts)) = true) => s(0) <= count(s(xts3), cons(xts1, yts)) = true
	(s(xts4) == xts3 = true) & (pref(cons(xts3, cons(xts2, yts2)), cons(xts1, yts1)) = true) => s(count(s(xts4), cons(xts2, yts2))) <= count(s(xts4), cons(xts1, yts1)) = true
	pref(cons(0, nil), cons(xts, yts)) = true => s(0) <= count(0, cons(xts, yts)) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	pref(x, nil) = true => count(z, x) <= 0 -> true
	pref(x, y) = true => count(z, x) <= count(z, y) -> true
	pref(x, cons(xts, yts)) = true => count(z, x) <= count(z, cons(xts, yts)) -> true
	pref(cons(xts2, nil), cons(xts1, yts)) = true & 0 == xts = true => s(0) <= count(0, cons(xts, yts)) -> true
	pref(cons(xts2, yts2), cons(xts1, yts1)) = true & 0 == xts = false => count(0, yts2) <= count(0, cons(xts, yts1)) -> true
	pref(cons(xts2, yts2), cons(xts1, yts1)) = true & 0 == xts = true => s(count(0, yts2)) <= count(0, cons(xts, yts1)) -> true
	pref(cons(xts2, yts2), cons(xts1, yts1)) = true & s(xts2) == xts1 = false => count(s(xts2), yts2) <= count(s(xts2), cons(xts1, yts1)) -> true
	pref(cons(xts2, yts2), cons(xts1, yts1)) = true & s(xts2) == xts1 = true => s(count(s(xts2), yts2)) <= count(s(xts2), cons(xts1, yts1)) -> true
	pref(cons(xts3, cons(xts2, yts2)), cons(xts1, yts1)) = true & 0 == xts = false => count(0, cons(xts2, yts2)) <= count(0, cons(xts1, yts1)) -> true
--- Primal Grammar:
	<empty>

+++ loop limit reached
+++ Statistics:
... Number of proof steps          = 10
... Number of induction steps      = 11
... Number of equational steps     = 0
... Number of case rewriting steps = 1
... Elapsed time (seconds)         = 0.041
