+++ SPECIFICATION --- bidirectional branch, version 0.99
+++ Parameters:
    ===========
+++ input       = example22-in.txt
+++ output      = example22-out.txt
+++ trace       = 3
+++ direction   = last-to-first
+++ drop        = yes
+++ verbose     = 3
+++ split       = 4
+++ loop limit  = 25
+++ stdlib      = /usr/local/lib/indy/stdlib/
-----------------------------------------------------------------------

+++ specification example22 from example22-in.txt successfully parsed
+++ Listing
         1: specification example22
         2: sorts
         3:      nat
         4: constructors
         5:      0: -> nat
         6:      s: nat -> nat
         7: defined functions
         8:      *: nat nat -> nat
         9:      +: nat nat -> nat
        10: precedence
        11:      * > + > s > 0
        12: axioms
        13:      x * 0 = 0;
        14:      x + 0 = x;
        15:      x + s(y) = s(x + y);
        16:      x * s(y) = (x * y) + x;
        17: conjectures
        18:      x * s(y) = s(y) * x;
        19: end
+++ finitary sorts: <empty>
+++ Rewrite System 
	x * 0 -> 0
	x + 0 -> x
	x + s(y) -> s(x + y)
	x * s(y) -> (x * y) + x
+++ inductive positions:
... for *: 1
... for +: 1
+++ maximal depths of left-hand sides:
... for +: 2
... for *: 2
+++ general maximal depth = 2
+++ sort dependence: <empty>
+++ test sets for defined functions and sorts:
... for +
... ... nat
		0
		s(x)
... for *
... ... nat
		0
		s(x)

+++ conjecture(s)
	x * s(y) = s(y) * x

+++ inference system initiated
--- clause
	x * s(y) = s(y) * x
... reduced in 1 step to
	(x * y) + x = s(y) * x
+++ treating clause
	(x * y) + x = s(y) * x
+++ inductive narrowing on conjecture
	(x * y) + x = s(y) * x
... induction variables of
	(x * y) + x = s(y) * x
... are:
	y:nat
	x:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	(x * y) + x = s(y) * x
... with variable y
+++ creating new conjecture
	(x * 0) + x = s(0) * x
+++ creating new conjecture
	(x * s(xts)) + x = s(s(xts)) * x
--- clause
	(x * 0) + x = s(0) * x
... reduced in 1 step to
	0 + x = s(0) * x
--- clause
	(x * s(xts)) + x = s(s(xts)) * x
... reduced in 1 step to
	((x * xts) + x) + x = s(s(xts)) * x
+++ inductive narrowing succeeded
--- clause
	(x * y) + x = s(y) * x
... oriented to rule
	s(y) * x -> (x * y) + x
+++ added new clause(s)
	0 + x = s(0) * x
	((x * xts) + x) + x = s(s(xts)) * x
... to conjectures
--- clause
	0 + x = s(0) * x
... reduced in 1 step to
	0 + x = (x * 0) + x
--- clause
	((x * xts) + x) + x = s(s(xts)) * x
... reduced in 1 step to
	((x * xts) + x) + x = (x * s(xts)) + x

+++ Status of the Inference System
--- Conjectures:
	0 + x = (x * 0) + x
	((x * xts) + x) + x = (x * s(xts)) + x
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	s(y) * x -> (x * y) + x
--- Primal Grammar:
	<empty>

--- clause
	0 + x = (x * 0) + x
... reduced to tautology
	0 + x = 0 + x
--- clause
	((x * xts) + x) + x = (x * s(xts)) + x
... reduced to tautology
	((x * xts) + x) + x = ((x * xts) + x) + x

+++ Status of the Inference System
--- Conjectures:
	<empty>
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	s(y) * x -> (x * y) + x
--- Primal Grammar:
	<empty>

+++ SUCCESS: all conjectures proved
+++ Statistics:
... Number of proof steps          = 2
... Number of induction steps      = 1
... Number of equational steps     = 0
... Number of case rewriting steps = 0
... Elapsed time (seconds)         = 0
