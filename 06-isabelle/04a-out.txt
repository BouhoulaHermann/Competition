+++ SPECIFICATION --- bidirectional branch, version 0.99
+++ Parameters:
    ===========
+++ input       = 04a-in.txt
+++ output      = 04a-out.txt
+++ trace       = 3
+++ direction   = first-to-last
+++ drop        = yes
+++ verbose     = 3
+++ split       = 4
+++ loop limit  = 191
+++ stdlib      = /usr/local/lib/indy/stdlib/
-----------------------------------------------------------------------

+++ specification BOOL from bool successfully parsed
+++ specification NAT from nat successfully parsed
+++ specification EQ from eq successfully parsed
+++ specification LEQ from leq successfully parsed
+++ specification LISTsymb from listsymb successfully parsed
+++ specification LENGTHsymb from lengthsymb successfully parsed
+++ specification COUNTsymb from countsymb successfully parsed
+++ specification LenghtCount from 04a-in.txt successfully parsed
+++ Listing
         1: specification LenghtCount
         2: sorts
         3:      bool list nat
         4: constructors
         5:      ..: nat list -> list
         6:      0: -> nat
         7:      :: nat list -> list
         8:      false: -> bool
         9:      nil: -> list
        10:      s: nat -> nat
        11:      true: -> bool
        12: defined functions
        13:      <=: nat nat -> bool
        14:      ==: nat nat -> bool
        15:      count: nat list -> nat
        16:      len: list -> nat
        17: precedence
        18:      count > len > <= > == > .. > nil > s > 0 > false = true
        19: axioms
        20:      len(nil) = 0;
        21:      0 <= x = true;
        22:      0 == 0 = true;
        23:      0 == s(x) = false;
        24:      count(x, nil) = 0;
        25:      s(x) <= 0 = false;
        26:      s(x) == 0 = false;
        27:      s(x) <= s(y) = x <= y;
        28:      s(x) == s(y) = x == y;
        29:      len(x .. y) = s(len(y));
        30:      x == y = false => count(x, y .. ys) = count(x, ys);
        31:      x == y = true => count(x, y .. ys) = s(count(x, ys));
        32: conjectures
        33:      count(x, xs) <= len(xs) = true;
        34: end
+++ finitary sorts: bool
+++ Rewrite System 
	len(nil) -> 0
	0 <= x -> true
	0 == 0 -> true
	0 == s(x) -> false
	count(x, nil) -> 0
	s(x) <= 0 -> false
	s(x) == 0 -> false
	s(x) <= s(y) -> x <= y
	s(x) == s(y) -> x == y
	len(x .. y) -> s(len(y))
	x == y = false => count(x, y .. ys) -> count(x, ys)
	x == y = true => count(x, y .. ys) -> s(count(x, ys))
+++ inductive positions:
... for <=: 0 1
... for ==: 0 1
... for count: 1
... for len: 0
+++ maximal depths of left-hand sides:
... for count: 2
... for <=: 2
... for ==: 2
... for len: 2
+++ general maximal depth = 2
+++ sort dependence: nat < list
+++ test sets for defined functions and sorts:
... for count
... ... list
		nil
		x : y
		x .. y
... for len
... ... list
		nil
		x : y
		x .. y
... for ==
... ... nat
		0
		s(x)
... for <=
... ... nat
		0
		s(x)

+++ conjecture(s)
	count(x, xs) <= len(xs) = true

+++ inference system initiated
+++ treating clause
	count(x, xs) <= len(xs) = true
+++ inductive narrowing on conjecture
	count(x, xs) <= len(xs) = true
... induction variables of
	count(x, xs) <= len(xs) = true
... are:
	xs:list
+++ perform INDUCTIVE NARROWING on conjecture 
	count(x, xs) <= len(xs) = true
... with variable xs
+++ creating new conjecture
	count(x, nil) <= len(nil) = true
+++ creating new conjecture
	count(x, xts : yts) <= len(xts : yts) = true
+++ creating new conjecture
	count(x, xts .. yts) <= len(xts .. yts) = true
--- clause
	count(x, nil) <= len(nil) = true
... reduced to tautology
	true = true
--- clause
	count(x, xts .. yts) <= len(xts .. yts) = true
... reduced in 1 step to
	count(x, xts .. yts) <= s(len(yts)) = true
+++ inductive narrowing succeeded
--- clause
	count(x, xs) <= len(xs) = true
... oriented to rule
	count(x, xs) <= len(xs) -> true
+++ added new clause(s)
	count(x, xts : yts) <= len(xts : yts) = true
	count(x, xts .. yts) <= s(len(yts)) = true
... to conjectures
--- clause
	count(x, xts : yts) <= len(xts : yts) = true
... reduced to tautology
	true = true

+++ Status of the Inference System
--- Conjectures:
	count(x, xts .. yts) <= s(len(yts)) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	count(x, xs) <= len(xs) -> true
--- Primal Grammar:
	<empty>

+++ treating clause
	count(x, xts .. yts) <= s(len(yts)) = true
+++ inductive narrowing on conjecture
	count(x, xts .. yts) <= s(len(yts)) = true
... induction variables of
	count(x, xts .. yts) <= s(len(yts)) = true
... are:
	yts:list
+++ perform INDUCTIVE NARROWING on conjecture 
	count(x, xts .. yts) <= s(len(yts)) = true
... with variable yts
+++ creating new conjecture
	count(x, xts .. nil) <= s(len(nil)) = true
+++ creating new conjecture
	count(x, xts2 .. xts1 : yts) <= s(len(xts1 : yts)) = true
+++ creating new conjecture
	count(x, xts2 .. xts1 .. yts) <= s(len(xts1 .. yts)) = true
--- clause
	count(x, xts .. nil) <= s(len(nil)) = true
... reduced in 1 step to
	count(x, xts .. nil) <= s(0) = true
--- clause
	count(x, xts2 .. xts1 .. yts) <= s(len(xts1 .. yts)) = true
... reduced in 1 step to
	count(x, xts2 .. xts1 .. yts) <= s(s(len(yts))) = true
+++ inductive narrowing succeeded
--- clause
	count(x, xts .. yts) <= s(len(yts)) = true
... oriented to rule
	count(x, xts .. yts) <= s(len(yts)) -> true
+++ added new clause(s)
	count(x, xts .. nil) <= s(0) = true
	count(x, xts2 .. xts1 : yts) <= s(len(xts1 : yts)) = true
	count(x, xts2 .. xts1 .. yts) <= s(s(len(yts))) = true
... to conjectures
--- clause
	count(x, xts2 .. xts1 : yts) <= s(len(xts1 : yts)) = true
... reduced to tautology
	true = true

+++ Status of the Inference System
--- Conjectures:
	count(x, xts .. nil) <= s(0) = true
	count(x, xts2 .. xts1 .. yts) <= s(s(len(yts))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	count(x, xs) <= len(xs) -> true
	count(x, xts .. yts) <= s(len(yts)) -> true
--- Primal Grammar:
	<empty>

+++ treating clause
	count(x, xts .. nil) <= s(0) = true
--- no new clauses created
+++ attempting case rewriting
--- case rewriting generated new conjectures
	x == xts = true => s(0) <= s(0) = true
	x == xts = false => 0 <= s(0) = true
+++ added new clause(s)
	x == xts = true => s(0) <= s(0) = true
	x == xts = false => 0 <= s(0) = true
... to conjectures
--- clause
	x == xts = true => s(0) <= s(0) = true
... reduced to tautology
	x == xts = true => true = true
--- clause
	x == xts = false => 0 <= s(0) = true
... reduced to tautology
	x == xts = false => true = true

+++ Status of the Inference System
--- Conjectures:
	count(x, xts2 .. xts1 .. yts) <= s(s(len(yts))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	count(x, xs) <= len(xs) -> true
	count(x, xts .. yts) <= s(len(yts)) -> true
--- Primal Grammar:
	<empty>

+++ treating clause
	count(x, xts2 .. xts1 .. yts) <= s(s(len(yts))) = true
+++ inductive narrowing on conjecture
	count(x, xts2 .. xts1 .. yts) <= s(s(len(yts))) = true
... induction variables of
	count(x, xts2 .. xts1 .. yts) <= s(s(len(yts))) = true
... are:
	yts:list
+++ perform INDUCTIVE NARROWING on conjecture 
	count(x, xts2 .. xts1 .. yts) <= s(s(len(yts))) = true
... with variable yts
+++ creating new conjecture
	count(x, xts2 .. xts1 .. nil) <= s(s(len(nil))) = true
+++ creating new conjecture
	count(x, xts3 .. xts2 .. xts1 : yts) <= s(s(len(xts1 : yts))) = true
+++ creating new conjecture
	count(x, xts3 .. xts2 .. xts1 .. yts) <= s(s(len(xts1 .. yts))) = true
--- clause
	count(x, xts2 .. xts1 .. nil) <= s(s(len(nil))) = true
... reduced in 1 step to
	count(x, xts2 .. xts1 .. nil) <= s(s(0)) = true
--- clause
	count(x, xts3 .. xts2 .. xts1 .. yts) <= s(s(len(xts1 .. yts))) = true
... reduced in 1 step to
	count(x, xts3 .. xts2 .. xts1 .. yts) <= s(s(s(len(yts)))) = true
+++ inductive narrowing succeeded
--- clause
	count(x, xts2 .. xts1 .. yts) <= s(s(len(yts))) = true
... oriented to rule
	count(x, xts2 .. xts1 .. yts) <= s(s(len(yts))) -> true
+++ added new clause(s)
	count(x, xts2 .. xts1 .. nil) <= s(s(0)) = true
	count(x, xts3 .. xts2 .. xts1 : yts) <= s(s(len(xts1 : yts))) = true
	count(x, xts3 .. xts2 .. xts1 .. yts) <= s(s(s(len(yts)))) = true
... to conjectures
--- clause
	count(x, xts3 .. xts2 .. xts1 : yts) <= s(s(len(xts1 : yts))) = true
... reduced to tautology
	true = true

+++ Status of the Inference System
--- Conjectures:
	count(x, xts2 .. xts1 .. nil) <= s(s(0)) = true
	count(x, xts3 .. xts2 .. xts1 .. yts) <= s(s(s(len(yts)))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	count(x, xs) <= len(xs) -> true
	count(x, xts .. yts) <= s(len(yts)) -> true
	count(x, xts2 .. xts1 .. yts) <= s(s(len(yts))) -> true
--- Primal Grammar:
	<empty>

+++ treating clause
	count(x, xts2 .. xts1 .. nil) <= s(s(0)) = true
--- no new clauses created
+++ attempting case rewriting
--- case rewriting generated new conjectures
	x == xts2 = true => s(count(x, xts1 .. nil)) <= s(s(0)) = true
	x == xts2 = false => count(x, xts1 .. nil) <= s(s(0)) = true
+++ added new clause(s)
	x == xts2 = true => s(count(x, xts1 .. nil)) <= s(s(0)) = true
	x == xts2 = false => count(x, xts1 .. nil) <= s(s(0)) = true
... to conjectures
--- clause
	x == xts2 = true => s(count(x, xts1 .. nil)) <= s(s(0)) = true
... reduced in 1 step to
	x == xts2 = true => count(x, xts1 .. nil) <= s(0) = true

+++ Status of the Inference System
--- Conjectures:
	count(x, xts3 .. xts2 .. xts1 .. yts) <= s(s(s(len(yts)))) = true
	x == xts2 = true => count(x, xts1 .. nil) <= s(0) = true
	x == xts2 = false => count(x, xts1 .. nil) <= s(s(0)) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	count(x, xs) <= len(xs) -> true
	count(x, xts .. yts) <= s(len(yts)) -> true
	count(x, xts2 .. xts1 .. yts) <= s(s(len(yts))) -> true
--- Primal Grammar:
	<empty>

+++ treating clause
	count(x, xts3 .. xts2 .. xts1 .. yts) <= s(s(s(len(yts)))) = true
+++ inductive narrowing on conjecture
	count(x, xts3 .. xts2 .. xts1 .. yts) <= s(s(s(len(yts)))) = true
... induction variables of
	count(x, xts3 .. xts2 .. xts1 .. yts) <= s(s(s(len(yts)))) = true
... are:
	yts:list
+++ perform INDUCTIVE NARROWING on conjecture 
	count(x, xts3 .. xts2 .. xts1 .. yts) <= s(s(s(len(yts)))) = true
... with variable yts
+++ creating new conjecture
	count(x, xts3 .. xts2 .. xts1 .. nil) <= s(s(s(len(nil)))) = true
+++ creating new conjecture
	count(x, xts4 .. xts3 .. xts2 .. xts1 : yts) <= s(s(s(len(xts1 : yts)))) = true
+++ creating new conjecture
	count(x, xts4 .. xts3 .. xts2 .. xts1 .. yts) <= s(s(s(len(xts1 .. yts)))) = true
--- clause
	count(x, xts3 .. xts2 .. xts1 .. nil) <= s(s(s(len(nil)))) = true
... reduced in 1 step to
	count(x, xts3 .. xts2 .. xts1 .. nil) <= s(s(s(0))) = true
--- clause
	count(x, xts4 .. xts3 .. xts2 .. xts1 .. yts) <= s(s(s(len(xts1 .. yts)))) = true
... reduced in 1 step to
	count(x, xts4 .. xts3 .. xts2 .. xts1 .. yts) <= s(s(s(s(len(yts))))) = true
+++ inductive narrowing succeeded
--- clause
	count(x, xts3 .. xts2 .. xts1 .. yts) <= s(s(s(len(yts)))) = true
... oriented to rule
	count(x, xts3 .. xts2 .. xts1 .. yts) <= s(s(s(len(yts)))) -> true
+++ added new clause(s)
	count(x, xts3 .. xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	count(x, xts4 .. xts3 .. xts2 .. xts1 : yts) <= s(s(s(len(xts1 : yts)))) = true
	count(x, xts4 .. xts3 .. xts2 .. xts1 .. yts) <= s(s(s(s(len(yts))))) = true
... to conjectures
--- clause
	count(x, xts4 .. xts3 .. xts2 .. xts1 : yts) <= s(s(s(len(xts1 : yts)))) = true
... reduced to tautology
	true = true
+++ active wrap
	count(x, . .. .) <= s(.) = true
... with sequence
	count(x, xts .. yts) <= s(len(yts)) = true
	count(x, xts2 .. xts1 .. yts) <= s(s(len(yts))) = true
	count(x, xts3 .. xts2 .. xts1 .. yts) <= s(s(s(len(yts)))) = true
+++ primal grammar found for head
	{.., <=, count, len, s, true}
... and wrap
	count(x, . .. .) <= s(.) = true
+++ Presburger system  = {
	^f0(0; yts, xts@) -> yts
	^f0($n0 + 1; yts, xts@) -> xts$n0 .. ^f0($n0; yts, xts@)
	^f1(0; yts) -> len(yts)
	^f1($n1 + 1; yts) -> s(^f1($n1; yts))
+++ }
+++ Lemma(s)           = 
	count(x, xts$n .. ^f0($n; yts, xts@)) <= s(^f1($n; yts)) = true
--- clause
	count(x, xts4 .. xts3 .. xts2 .. xts1 .. yts) <= s(s(s(s(len(yts))))) = true
... subsumed by lemma
	count(x, xts$n .. ^f0($n; yts, xts@)) <= s(^f1($n; yts)) = true
... with substitution
	$n <- 3

+++ Status of the Inference System
--- Conjectures:
	x == xts2 = true => count(x, xts1 .. nil) <= s(0) = true
	x == xts2 = false => count(x, xts1 .. nil) <= s(s(0)) = true
	count(x, xts3 .. xts2 .. xts1 .. nil) <= s(s(s(0))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	count(x, xs) <= len(xs) -> true
	count(x, xts .. yts) <= s(len(yts)) -> true
	count(x, xts2 .. xts1 .. yts) <= s(s(len(yts))) -> true
	count(x, xts3 .. xts2 .. xts1 .. yts) <= s(s(s(len(yts)))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> yts
	^f0($n0 + 1; yts, xts@) -> xts$n0 .. ^f0($n0; yts, xts@)
	^f1(0; yts) -> len(yts)
	^f1($n1 + 1; yts) -> s(^f1($n1; yts))
+++ }
+++ Lemma(s)           = 
	count(x, xts$n .. ^f0($n; yts, xts@)) <= s(^f1($n; yts)) = true

+++ treating clause
	x == xts2 = true => count(x, xts1 .. nil) <= s(0) = true
+++ inductive narrowing on conjecture
	x == xts2 = true => count(x, xts1 .. nil) <= s(0) = true
... induction variables of
	x == xts2 = true => count(x, xts1 .. nil) <= s(0) = true
... are:
	x:nat
	xts2:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	x == xts2 = true => count(x, xts1 .. nil) <= s(0) = true
... with variable x
+++ creating new conjecture
	0 == xts2 = true => count(0, xts1 .. nil) <= s(0) = true
+++ creating new conjecture
	s(xts3) == xts2 = true => count(s(xts3), xts1 .. nil) <= s(0) = true
+++ non-reduced clause(s)
	0 == xts2 = true => count(0, xts1 .. nil) <= s(0) = true
... need recursive treatment for next inductive variable
+++ perform INDUCTIVE NARROWING on conjecture 
	0 == xts2 = true => count(0, xts1 .. nil) <= s(0) = true
... with variable xts2
+++ creating new conjecture
	0 == 0 = true => count(0, xts .. nil) <= s(0) = true
+++ creating new conjecture
	0 == s(xts2) = true => count(0, xts1 .. nil) <= s(0) = true
--- clause
	0 == 0 = true => count(0, xts .. nil) <= s(0) = true
... reduced in 1 step to
	count(0, xts .. nil) <= s(0) = true
--- clause
	0 == s(xts2) = true => count(0, xts1 .. nil) <= s(0) = true
... reduced in 1 step to
	false = true => count(0, xts .. nil) <= s(0) = true
--- clause
	false = true => count(0, xts .. nil) <= s(0) = true
... contains a ground negative condition
	false = true
... and is therefore discarded (false => t is always true)
+++ inductive narrowing succeeded
--- clause
	0 == xts2 = true => count(0, xts1 .. nil) <= s(0) = true
... oriented to rule
	0 == xts = true => count(0, xts .. nil) <= s(0) -> true
+++ added new clause(s)
	s(xts3) == xts2 = true => count(s(xts3), xts1 .. nil) <= s(0) = true
	count(0, xts .. nil) <= s(0) = true
... to conjectures

+++ Status of the Inference System
--- Conjectures:
	x == xts2 = false => count(x, xts1 .. nil) <= s(s(0)) = true
	count(x, xts3 .. xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	s(xts3) == xts2 = true => count(s(xts3), xts1 .. nil) <= s(0) = true
	count(0, xts .. nil) <= s(0) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	count(x, xs) <= len(xs) -> true
	count(x, xts .. yts) <= s(len(yts)) -> true
	0 == xts = true => count(0, xts .. nil) <= s(0) -> true
	count(x, xts2 .. xts1 .. yts) <= s(s(len(yts))) -> true
	count(x, xts3 .. xts2 .. xts1 .. yts) <= s(s(s(len(yts)))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> yts
	^f0($n0 + 1; yts, xts@) -> xts$n0 .. ^f0($n0; yts, xts@)
	^f1(0; yts) -> len(yts)
	^f1($n1 + 1; yts) -> s(^f1($n1; yts))
+++ }
+++ Lemma(s)           = 
	count(x, xts$n .. ^f0($n; yts, xts@)) <= s(^f1($n; yts)) = true

+++ treating clause
	x == xts2 = false => count(x, xts1 .. nil) <= s(s(0)) = true
+++ inductive narrowing on conjecture
	x == xts2 = false => count(x, xts1 .. nil) <= s(s(0)) = true
... induction variables of
	x == xts2 = false => count(x, xts1 .. nil) <= s(s(0)) = true
... are:
	x:nat
	xts2:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	x == xts2 = false => count(x, xts1 .. nil) <= s(s(0)) = true
... with variable x
+++ creating new conjecture
	0 == xts2 = false => count(0, xts1 .. nil) <= s(s(0)) = true
+++ creating new conjecture
	s(xts3) == xts2 = false => count(s(xts3), xts1 .. nil) <= s(s(0)) = true
+++ non-reduced clause(s)
	0 == xts2 = false => count(0, xts1 .. nil) <= s(s(0)) = true
... need recursive treatment for next inductive variable
+++ perform INDUCTIVE NARROWING on conjecture 
	0 == xts2 = false => count(0, xts1 .. nil) <= s(s(0)) = true
... with variable xts2
+++ creating new conjecture
	0 == 0 = false => count(0, xts .. nil) <= s(s(0)) = true
+++ creating new conjecture
	0 == s(xts2) = false => count(0, xts1 .. nil) <= s(s(0)) = true
--- clause
	0 == 0 = false => count(0, xts .. nil) <= s(s(0)) = true
... reduced in 1 step to
	true = false => count(0, xts .. nil) <= s(s(0)) = true
--- clause
	true = false => count(0, xts .. nil) <= s(s(0)) = true
... contains a ground negative condition
	true = false
... and is therefore discarded (false => t is always true)
--- clause
	0 == s(xts2) = false => count(0, xts1 .. nil) <= s(s(0)) = true
... reduced in 1 step to
	count(0, xts .. nil) <= s(s(0)) = true
+++ inductive narrowing succeeded
--- clause
	0 == xts2 = false => count(0, xts1 .. nil) <= s(s(0)) = true
... oriented to rule
	0 == xts = false => count(0, xts .. nil) <= s(s(0)) -> true
+++ added new clause(s)
	s(xts3) == xts2 = false => count(s(xts3), xts1 .. nil) <= s(s(0)) = true
	count(0, xts .. nil) <= s(s(0)) = true
... to conjectures

+++ Status of the Inference System
--- Conjectures:
	count(x, xts3 .. xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	s(xts3) == xts2 = true => count(s(xts3), xts1 .. nil) <= s(0) = true
	count(0, xts .. nil) <= s(0) = true
	s(xts3) == xts2 = false => count(s(xts3), xts1 .. nil) <= s(s(0)) = true
	count(0, xts .. nil) <= s(s(0)) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	count(x, xs) <= len(xs) -> true
	count(x, xts .. yts) <= s(len(yts)) -> true
	0 == xts = true => count(0, xts .. nil) <= s(0) -> true
	count(x, xts2 .. xts1 .. yts) <= s(s(len(yts))) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(0)) -> true
	count(x, xts3 .. xts2 .. xts1 .. yts) <= s(s(s(len(yts)))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> yts
	^f0($n0 + 1; yts, xts@) -> xts$n0 .. ^f0($n0; yts, xts@)
	^f1(0; yts) -> len(yts)
	^f1($n1 + 1; yts) -> s(^f1($n1; yts))
+++ }
+++ Lemma(s)           = 
	count(x, xts$n .. ^f0($n; yts, xts@)) <= s(^f1($n; yts)) = true

+++ treating clause
	count(x, xts3 .. xts2 .. xts1 .. nil) <= s(s(s(0))) = true
--- no new clauses created
+++ attempting case rewriting
--- case rewriting generated new conjectures
	x == xts3 = true => s(count(x, xts2 .. xts1 .. nil)) <= s(s(s(0))) = true
	x == xts3 = false => count(x, xts2 .. xts1 .. nil) <= s(s(s(0))) = true
+++ added new clause(s)
	x == xts3 = true => s(count(x, xts2 .. xts1 .. nil)) <= s(s(s(0))) = true
	x == xts3 = false => count(x, xts2 .. xts1 .. nil) <= s(s(s(0))) = true
... to conjectures
--- clause
	x == xts3 = true => s(count(x, xts2 .. xts1 .. nil)) <= s(s(s(0))) = true
... reduced in 1 step to
	x == xts3 = true => count(x, xts2 .. xts1 .. nil) <= s(s(0)) = true

+++ Status of the Inference System
--- Conjectures:
	s(xts3) == xts2 = true => count(s(xts3), xts1 .. nil) <= s(0) = true
	count(0, xts .. nil) <= s(0) = true
	s(xts3) == xts2 = false => count(s(xts3), xts1 .. nil) <= s(s(0)) = true
	count(0, xts .. nil) <= s(s(0)) = true
	x == xts3 = true => count(x, xts2 .. xts1 .. nil) <= s(s(0)) = true
	x == xts3 = false => count(x, xts2 .. xts1 .. nil) <= s(s(s(0))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	count(x, xs) <= len(xs) -> true
	count(x, xts .. yts) <= s(len(yts)) -> true
	0 == xts = true => count(0, xts .. nil) <= s(0) -> true
	count(x, xts2 .. xts1 .. yts) <= s(s(len(yts))) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(0)) -> true
	count(x, xts3 .. xts2 .. xts1 .. yts) <= s(s(s(len(yts)))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> yts
	^f0($n0 + 1; yts, xts@) -> xts$n0 .. ^f0($n0; yts, xts@)
	^f1(0; yts) -> len(yts)
	^f1($n1 + 1; yts) -> s(^f1($n1; yts))
+++ }
+++ Lemma(s)           = 
	count(x, xts$n .. ^f0($n; yts, xts@)) <= s(^f1($n; yts)) = true

+++ treating clause
	s(xts3) == xts2 = true => count(s(xts3), xts1 .. nil) <= s(0) = true
+++ inductive narrowing on conjecture
	s(xts3) == xts2 = true => count(s(xts3), xts1 .. nil) <= s(0) = true
... induction variables of
	s(xts3) == xts2 = true => count(s(xts3), xts1 .. nil) <= s(0) = true
... are:
	xts2:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	s(xts3) == xts2 = true => count(s(xts3), xts1 .. nil) <= s(0) = true
... with variable xts2
+++ creating new conjecture
	s(xts2) == 0 = true => count(s(xts2), xts1 .. nil) <= s(0) = true
+++ creating new conjecture
	s(xts3) == s(xts2) = true => count(s(xts3), xts1 .. nil) <= s(0) = true
--- clause
	s(xts2) == 0 = true => count(s(xts2), xts1 .. nil) <= s(0) = true
... reduced in 1 step to
	false = true => count(s(xts2), xts1 .. nil) <= s(0) = true
--- clause
	false = true => count(s(xts2), xts1 .. nil) <= s(0) = true
... contains a ground negative condition
	false = true
... and is therefore discarded (false => t is always true)
--- clause
	s(xts3) == s(xts2) = true => count(s(xts3), xts1 .. nil) <= s(0) = true
... reduced in 1 step to
	xts3 == xts2 = true => count(s(xts3), xts1 .. nil) <= s(0) = true
+++ inductive narrowing succeeded
--- clause
	s(xts3) == xts2 = true => count(s(xts3), xts1 .. nil) <= s(0) = true
... oriented to rule
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
+++ added new clause(s)
	xts3 == xts2 = true => count(s(xts3), xts1 .. nil) <= s(0) = true
... to conjectures

+++ Status of the Inference System
--- Conjectures:
	count(0, xts .. nil) <= s(0) = true
	s(xts3) == xts2 = false => count(s(xts3), xts1 .. nil) <= s(s(0)) = true
	count(0, xts .. nil) <= s(s(0)) = true
	x == xts3 = true => count(x, xts2 .. xts1 .. nil) <= s(s(0)) = true
	x == xts3 = false => count(x, xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts3 == xts2 = true => count(s(xts3), xts1 .. nil) <= s(0) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	count(x, xs) <= len(xs) -> true
	count(x, xts .. yts) <= s(len(yts)) -> true
	0 == xts = true => count(0, xts .. nil) <= s(0) -> true
	count(x, xts2 .. xts1 .. yts) <= s(s(len(yts))) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(0)) -> true
	count(x, xts3 .. xts2 .. xts1 .. yts) <= s(s(s(len(yts)))) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> yts
	^f0($n0 + 1; yts, xts@) -> xts$n0 .. ^f0($n0; yts, xts@)
	^f1(0; yts) -> len(yts)
	^f1($n1 + 1; yts) -> s(^f1($n1; yts))
+++ }
+++ Lemma(s)           = 
	count(x, xts$n .. ^f0($n; yts, xts@)) <= s(^f1($n; yts)) = true

+++ treating clause
	count(0, xts .. nil) <= s(0) = true
--- no new clauses created
+++ attempting case rewriting
--- case rewriting generated new conjectures
	0 == xts = true => s(0) <= s(0) = true
	0 == xts = false => 0 <= s(0) = true
+++ added new clause(s)
	0 == xts = true => s(0) <= s(0) = true
	0 == xts = false => 0 <= s(0) = true
... to conjectures
--- clause
	0 == xts = true => s(0) <= s(0) = true
... reduced to tautology
	0 == xts = true => true = true
--- clause
	0 == xts = false => 0 <= s(0) = true
... reduced to tautology
	0 == xts = false => true = true

+++ Status of the Inference System
--- Conjectures:
	s(xts3) == xts2 = false => count(s(xts3), xts1 .. nil) <= s(s(0)) = true
	count(0, xts .. nil) <= s(s(0)) = true
	x == xts3 = true => count(x, xts2 .. xts1 .. nil) <= s(s(0)) = true
	x == xts3 = false => count(x, xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts3 == xts2 = true => count(s(xts3), xts1 .. nil) <= s(0) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	count(x, xs) <= len(xs) -> true
	count(x, xts .. yts) <= s(len(yts)) -> true
	0 == xts = true => count(0, xts .. nil) <= s(0) -> true
	count(x, xts2 .. xts1 .. yts) <= s(s(len(yts))) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(0)) -> true
	count(x, xts3 .. xts2 .. xts1 .. yts) <= s(s(s(len(yts)))) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> yts
	^f0($n0 + 1; yts, xts@) -> xts$n0 .. ^f0($n0; yts, xts@)
	^f1(0; yts) -> len(yts)
	^f1($n1 + 1; yts) -> s(^f1($n1; yts))
+++ }
+++ Lemma(s)           = 
	count(x, xts$n .. ^f0($n; yts, xts@)) <= s(^f1($n; yts)) = true

+++ treating clause
	s(xts3) == xts2 = false => count(s(xts3), xts1 .. nil) <= s(s(0)) = true
+++ inductive narrowing on conjecture
	s(xts3) == xts2 = false => count(s(xts3), xts1 .. nil) <= s(s(0)) = true
... induction variables of
	s(xts3) == xts2 = false => count(s(xts3), xts1 .. nil) <= s(s(0)) = true
... are:
	xts2:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	s(xts3) == xts2 = false => count(s(xts3), xts1 .. nil) <= s(s(0)) = true
... with variable xts2
+++ creating new conjecture
	s(xts2) == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) = true
+++ creating new conjecture
	s(xts3) == s(xts2) = false => count(s(xts3), xts1 .. nil) <= s(s(0)) = true
--- clause
	s(xts2) == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) = true
... reduced in 1 step to
	count(s(xts2), xts1 .. nil) <= s(s(0)) = true
--- clause
	s(xts3) == s(xts2) = false => count(s(xts3), xts1 .. nil) <= s(s(0)) = true
... reduced in 1 step to
	xts3 == xts2 = false => count(s(xts3), xts1 .. nil) <= s(s(0)) = true
+++ inductive narrowing succeeded
--- clause
	s(xts3) == xts2 = false => count(s(xts3), xts1 .. nil) <= s(s(0)) = true
... oriented to rule
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
+++ added new clause(s)
	count(s(xts2), xts1 .. nil) <= s(s(0)) = true
	xts3 == xts2 = false => count(s(xts3), xts1 .. nil) <= s(s(0)) = true
... to conjectures

+++ Status of the Inference System
--- Conjectures:
	count(0, xts .. nil) <= s(s(0)) = true
	x == xts3 = true => count(x, xts2 .. xts1 .. nil) <= s(s(0)) = true
	x == xts3 = false => count(x, xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts3 == xts2 = true => count(s(xts3), xts1 .. nil) <= s(0) = true
	count(s(xts2), xts1 .. nil) <= s(s(0)) = true
	xts3 == xts2 = false => count(s(xts3), xts1 .. nil) <= s(s(0)) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	count(x, xs) <= len(xs) -> true
	count(x, xts .. yts) <= s(len(yts)) -> true
	0 == xts = true => count(0, xts .. nil) <= s(0) -> true
	count(x, xts2 .. xts1 .. yts) <= s(s(len(yts))) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(0)) -> true
	count(x, xts3 .. xts2 .. xts1 .. yts) <= s(s(s(len(yts)))) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> yts
	^f0($n0 + 1; yts, xts@) -> xts$n0 .. ^f0($n0; yts, xts@)
	^f1(0; yts) -> len(yts)
	^f1($n1 + 1; yts) -> s(^f1($n1; yts))
+++ }
+++ Lemma(s)           = 
	count(x, xts$n .. ^f0($n; yts, xts@)) <= s(^f1($n; yts)) = true

+++ treating clause
	count(0, xts .. nil) <= s(s(0)) = true
--- no new clauses created
+++ attempting case rewriting
--- case rewriting generated new conjectures
	0 == xts = true => s(0) <= s(s(0)) = true
	0 == xts = false => 0 <= s(s(0)) = true
+++ added new clause(s)
	0 == xts = true => s(0) <= s(s(0)) = true
	0 == xts = false => 0 <= s(s(0)) = true
... to conjectures
--- clause
	0 == xts = true => s(0) <= s(s(0)) = true
... reduced to tautology
	0 == xts = true => true = true
--- clause
	0 == xts = false => 0 <= s(s(0)) = true
... reduced to tautology
	0 == xts = false => true = true

+++ Status of the Inference System
--- Conjectures:
	x == xts3 = true => count(x, xts2 .. xts1 .. nil) <= s(s(0)) = true
	x == xts3 = false => count(x, xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts3 == xts2 = true => count(s(xts3), xts1 .. nil) <= s(0) = true
	count(s(xts2), xts1 .. nil) <= s(s(0)) = true
	xts3 == xts2 = false => count(s(xts3), xts1 .. nil) <= s(s(0)) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	count(x, xs) <= len(xs) -> true
	count(x, xts .. yts) <= s(len(yts)) -> true
	0 == xts = true => count(0, xts .. nil) <= s(0) -> true
	count(x, xts2 .. xts1 .. yts) <= s(s(len(yts))) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(0)) -> true
	count(x, xts3 .. xts2 .. xts1 .. yts) <= s(s(s(len(yts)))) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> yts
	^f0($n0 + 1; yts, xts@) -> xts$n0 .. ^f0($n0; yts, xts@)
	^f1(0; yts) -> len(yts)
	^f1($n1 + 1; yts) -> s(^f1($n1; yts))
+++ }
+++ Lemma(s)           = 
	count(x, xts$n .. ^f0($n; yts, xts@)) <= s(^f1($n; yts)) = true

+++ treating clause
	x == xts3 = true => count(x, xts2 .. xts1 .. nil) <= s(s(0)) = true
+++ inductive narrowing on conjecture
	x == xts3 = true => count(x, xts2 .. xts1 .. nil) <= s(s(0)) = true
... induction variables of
	x == xts3 = true => count(x, xts2 .. xts1 .. nil) <= s(s(0)) = true
... are:
	x:nat
	xts3:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	x == xts3 = true => count(x, xts2 .. xts1 .. nil) <= s(s(0)) = true
... with variable x
+++ creating new conjecture
	0 == xts3 = true => count(0, xts2 .. xts1 .. nil) <= s(s(0)) = true
+++ creating new conjecture
	s(xts4) == xts3 = true => count(s(xts4), xts2 .. xts1 .. nil) <= s(s(0)) = true
+++ non-reduced clause(s)
	0 == xts3 = true => count(0, xts2 .. xts1 .. nil) <= s(s(0)) = true
... need recursive treatment for next inductive variable
+++ perform INDUCTIVE NARROWING on conjecture 
	0 == xts3 = true => count(0, xts2 .. xts1 .. nil) <= s(s(0)) = true
... with variable xts3
+++ creating new conjecture
	0 == 0 = true => count(0, xts2 .. xts1 .. nil) <= s(s(0)) = true
+++ creating new conjecture
	0 == s(xts3) = true => count(0, xts2 .. xts1 .. nil) <= s(s(0)) = true
--- clause
	0 == 0 = true => count(0, xts2 .. xts1 .. nil) <= s(s(0)) = true
... reduced in 1 step to
	count(0, xts2 .. xts1 .. nil) <= s(s(0)) = true
--- clause
	0 == s(xts3) = true => count(0, xts2 .. xts1 .. nil) <= s(s(0)) = true
... reduced in 1 step to
	false = true => count(0, xts2 .. xts1 .. nil) <= s(s(0)) = true
--- clause
	false = true => count(0, xts2 .. xts1 .. nil) <= s(s(0)) = true
... contains a ground negative condition
	false = true
... and is therefore discarded (false => t is always true)
+++ inductive narrowing succeeded
--- clause
	0 == xts3 = true => count(0, xts2 .. xts1 .. nil) <= s(s(0)) = true
... oriented to rule
	0 == xts = true => count(0, xts2 .. xts1 .. nil) <= s(s(0)) -> true
+++ added new clause(s)
	s(xts4) == xts3 = true => count(s(xts4), xts2 .. xts1 .. nil) <= s(s(0)) = true
	count(0, xts2 .. xts1 .. nil) <= s(s(0)) = true
... to conjectures

+++ Status of the Inference System
--- Conjectures:
	x == xts3 = false => count(x, xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts3 == xts2 = true => count(s(xts3), xts1 .. nil) <= s(0) = true
	count(s(xts2), xts1 .. nil) <= s(s(0)) = true
	xts3 == xts2 = false => count(s(xts3), xts1 .. nil) <= s(s(0)) = true
	s(xts4) == xts3 = true => count(s(xts4), xts2 .. xts1 .. nil) <= s(s(0)) = true
	count(0, xts2 .. xts1 .. nil) <= s(s(0)) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	count(x, xs) <= len(xs) -> true
	count(x, xts .. yts) <= s(len(yts)) -> true
	0 == xts = true => count(0, xts .. nil) <= s(0) -> true
	count(x, xts2 .. xts1 .. yts) <= s(s(len(yts))) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(0)) -> true
	count(x, xts3 .. xts2 .. xts1 .. yts) <= s(s(s(len(yts)))) -> true
	0 == xts = true => count(0, xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> yts
	^f0($n0 + 1; yts, xts@) -> xts$n0 .. ^f0($n0; yts, xts@)
	^f1(0; yts) -> len(yts)
	^f1($n1 + 1; yts) -> s(^f1($n1; yts))
+++ }
+++ Lemma(s)           = 
	count(x, xts$n .. ^f0($n; yts, xts@)) <= s(^f1($n; yts)) = true

+++ treating clause
	x == xts3 = false => count(x, xts2 .. xts1 .. nil) <= s(s(s(0))) = true
+++ inductive narrowing on conjecture
	x == xts3 = false => count(x, xts2 .. xts1 .. nil) <= s(s(s(0))) = true
... induction variables of
	x == xts3 = false => count(x, xts2 .. xts1 .. nil) <= s(s(s(0))) = true
... are:
	x:nat
	xts3:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	x == xts3 = false => count(x, xts2 .. xts1 .. nil) <= s(s(s(0))) = true
... with variable x
+++ creating new conjecture
	0 == xts3 = false => count(0, xts2 .. xts1 .. nil) <= s(s(s(0))) = true
+++ creating new conjecture
	s(xts4) == xts3 = false => count(s(xts4), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
+++ non-reduced clause(s)
	0 == xts3 = false => count(0, xts2 .. xts1 .. nil) <= s(s(s(0))) = true
... need recursive treatment for next inductive variable
+++ perform INDUCTIVE NARROWING on conjecture 
	0 == xts3 = false => count(0, xts2 .. xts1 .. nil) <= s(s(s(0))) = true
... with variable xts3
+++ creating new conjecture
	0 == 0 = false => count(0, xts2 .. xts1 .. nil) <= s(s(s(0))) = true
+++ creating new conjecture
	0 == s(xts3) = false => count(0, xts2 .. xts1 .. nil) <= s(s(s(0))) = true
--- clause
	0 == 0 = false => count(0, xts2 .. xts1 .. nil) <= s(s(s(0))) = true
... reduced in 1 step to
	true = false => count(0, xts2 .. xts1 .. nil) <= s(s(s(0))) = true
--- clause
	true = false => count(0, xts2 .. xts1 .. nil) <= s(s(s(0))) = true
... contains a ground negative condition
	true = false
... and is therefore discarded (false => t is always true)
--- clause
	0 == s(xts3) = false => count(0, xts2 .. xts1 .. nil) <= s(s(s(0))) = true
... reduced in 1 step to
	count(0, xts2 .. xts1 .. nil) <= s(s(s(0))) = true
+++ inductive narrowing succeeded
--- clause
	0 == xts3 = false => count(0, xts2 .. xts1 .. nil) <= s(s(s(0))) = true
... oriented to rule
	0 == xts = false => count(0, xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
+++ added new clause(s)
	s(xts4) == xts3 = false => count(s(xts4), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	count(0, xts2 .. xts1 .. nil) <= s(s(s(0))) = true
... to conjectures

+++ Status of the Inference System
--- Conjectures:
	xts3 == xts2 = true => count(s(xts3), xts1 .. nil) <= s(0) = true
	count(s(xts2), xts1 .. nil) <= s(s(0)) = true
	xts3 == xts2 = false => count(s(xts3), xts1 .. nil) <= s(s(0)) = true
	s(xts4) == xts3 = true => count(s(xts4), xts2 .. xts1 .. nil) <= s(s(0)) = true
	count(0, xts2 .. xts1 .. nil) <= s(s(0)) = true
	s(xts4) == xts3 = false => count(s(xts4), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	count(0, xts2 .. xts1 .. nil) <= s(s(s(0))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	count(x, xs) <= len(xs) -> true
	count(x, xts .. yts) <= s(len(yts)) -> true
	0 == xts = true => count(0, xts .. nil) <= s(0) -> true
	count(x, xts2 .. xts1 .. yts) <= s(s(len(yts))) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(0)) -> true
	count(x, xts3 .. xts2 .. xts1 .. yts) <= s(s(s(len(yts)))) -> true
	0 == xts = true => count(0, xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	0 == xts = false => count(0, xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> yts
	^f0($n0 + 1; yts, xts@) -> xts$n0 .. ^f0($n0; yts, xts@)
	^f1(0; yts) -> len(yts)
	^f1($n1 + 1; yts) -> s(^f1($n1; yts))
+++ }
+++ Lemma(s)           = 
	count(x, xts$n .. ^f0($n; yts, xts@)) <= s(^f1($n; yts)) = true

+++ treating clause
	xts3 == xts2 = true => count(s(xts3), xts1 .. nil) <= s(0) = true
+++ inductive narrowing on conjecture
	xts3 == xts2 = true => count(s(xts3), xts1 .. nil) <= s(0) = true
... induction variables of
	xts3 == xts2 = true => count(s(xts3), xts1 .. nil) <= s(0) = true
... are:
	xts2:nat
	xts3:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	xts3 == xts2 = true => count(s(xts3), xts1 .. nil) <= s(0) = true
... with variable xts2
+++ creating new conjecture
	xts2 == 0 = true => count(s(xts2), xts1 .. nil) <= s(0) = true
+++ creating new conjecture
	xts3 == s(xts2) = true => count(s(xts3), xts1 .. nil) <= s(0) = true
+++ inductive narrowing succeeded
--- clause
	xts3 == xts2 = true => count(s(xts3), xts1 .. nil) <= s(0) = true
... oriented to rule
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
+++ added new clause(s)
	xts2 == 0 = true => count(s(xts2), xts1 .. nil) <= s(0) = true
	xts3 == s(xts2) = true => count(s(xts3), xts1 .. nil) <= s(0) = true
... to conjectures

+++ Status of the Inference System
--- Conjectures:
	count(s(xts2), xts1 .. nil) <= s(s(0)) = true
	xts3 == xts2 = false => count(s(xts3), xts1 .. nil) <= s(s(0)) = true
	s(xts4) == xts3 = true => count(s(xts4), xts2 .. xts1 .. nil) <= s(s(0)) = true
	count(0, xts2 .. xts1 .. nil) <= s(s(0)) = true
	s(xts4) == xts3 = false => count(s(xts4), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	count(0, xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts2 == 0 = true => count(s(xts2), xts1 .. nil) <= s(0) = true
	xts3 == s(xts2) = true => count(s(xts3), xts1 .. nil) <= s(0) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	count(x, xs) <= len(xs) -> true
	count(x, xts .. yts) <= s(len(yts)) -> true
	0 == xts = true => count(0, xts .. nil) <= s(0) -> true
	count(x, xts2 .. xts1 .. yts) <= s(s(len(yts))) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(0)) -> true
	count(x, xts3 .. xts2 .. xts1 .. yts) <= s(s(s(len(yts)))) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	0 == xts = true => count(0, xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	0 == xts = false => count(0, xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> yts
	^f0($n0 + 1; yts, xts@) -> xts$n0 .. ^f0($n0; yts, xts@)
	^f1(0; yts) -> len(yts)
	^f1($n1 + 1; yts) -> s(^f1($n1; yts))
+++ }
+++ Lemma(s)           = 
	count(x, xts$n .. ^f0($n; yts, xts@)) <= s(^f1($n; yts)) = true

+++ treating clause
	count(s(xts2), xts1 .. nil) <= s(s(0)) = true
--- no new clauses created
+++ attempting case rewriting
--- case rewriting generated new conjectures
	s(xts2) == xts1 = true => s(0) <= s(s(0)) = true
	s(xts2) == xts1 = false => 0 <= s(s(0)) = true
+++ added new clause(s)
	s(xts2) == xts1 = true => s(0) <= s(s(0)) = true
	s(xts2) == xts1 = false => 0 <= s(s(0)) = true
... to conjectures
--- clause
	s(xts2) == xts1 = true => s(0) <= s(s(0)) = true
... reduced to tautology
	s(xts2) == xts1 = true => true = true
--- clause
	s(xts2) == xts1 = false => 0 <= s(s(0)) = true
... reduced to tautology
	s(xts2) == xts1 = false => true = true

+++ Status of the Inference System
--- Conjectures:
	xts3 == xts2 = false => count(s(xts3), xts1 .. nil) <= s(s(0)) = true
	s(xts4) == xts3 = true => count(s(xts4), xts2 .. xts1 .. nil) <= s(s(0)) = true
	count(0, xts2 .. xts1 .. nil) <= s(s(0)) = true
	s(xts4) == xts3 = false => count(s(xts4), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	count(0, xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts2 == 0 = true => count(s(xts2), xts1 .. nil) <= s(0) = true
	xts3 == s(xts2) = true => count(s(xts3), xts1 .. nil) <= s(0) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	count(x, xs) <= len(xs) -> true
	count(x, xts .. yts) <= s(len(yts)) -> true
	0 == xts = true => count(0, xts .. nil) <= s(0) -> true
	count(x, xts2 .. xts1 .. yts) <= s(s(len(yts))) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(0)) -> true
	count(x, xts3 .. xts2 .. xts1 .. yts) <= s(s(s(len(yts)))) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	0 == xts = true => count(0, xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	0 == xts = false => count(0, xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> yts
	^f0($n0 + 1; yts, xts@) -> xts$n0 .. ^f0($n0; yts, xts@)
	^f1(0; yts) -> len(yts)
	^f1($n1 + 1; yts) -> s(^f1($n1; yts))
+++ }
+++ Lemma(s)           = 
	count(x, xts$n .. ^f0($n; yts, xts@)) <= s(^f1($n; yts)) = true

+++ treating clause
	xts3 == xts2 = false => count(s(xts3), xts1 .. nil) <= s(s(0)) = true
+++ inductive narrowing on conjecture
	xts3 == xts2 = false => count(s(xts3), xts1 .. nil) <= s(s(0)) = true
... induction variables of
	xts3 == xts2 = false => count(s(xts3), xts1 .. nil) <= s(s(0)) = true
... are:
	xts2:nat
	xts3:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	xts3 == xts2 = false => count(s(xts3), xts1 .. nil) <= s(s(0)) = true
... with variable xts2
+++ creating new conjecture
	xts2 == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) = true
+++ creating new conjecture
	xts3 == s(xts2) = false => count(s(xts3), xts1 .. nil) <= s(s(0)) = true
+++ inductive narrowing succeeded
--- clause
	xts3 == xts2 = false => count(s(xts3), xts1 .. nil) <= s(s(0)) = true
... oriented to rule
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
+++ added new clause(s)
	xts2 == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) = true
	xts3 == s(xts2) = false => count(s(xts3), xts1 .. nil) <= s(s(0)) = true
... to conjectures

+++ Status of the Inference System
--- Conjectures:
	s(xts4) == xts3 = true => count(s(xts4), xts2 .. xts1 .. nil) <= s(s(0)) = true
	count(0, xts2 .. xts1 .. nil) <= s(s(0)) = true
	s(xts4) == xts3 = false => count(s(xts4), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	count(0, xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts2 == 0 = true => count(s(xts2), xts1 .. nil) <= s(0) = true
	xts3 == s(xts2) = true => count(s(xts3), xts1 .. nil) <= s(0) = true
	xts2 == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) = true
	xts3 == s(xts2) = false => count(s(xts3), xts1 .. nil) <= s(s(0)) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	count(x, xs) <= len(xs) -> true
	count(x, xts .. yts) <= s(len(yts)) -> true
	0 == xts = true => count(0, xts .. nil) <= s(0) -> true
	count(x, xts2 .. xts1 .. yts) <= s(s(len(yts))) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(0)) -> true
	count(x, xts3 .. xts2 .. xts1 .. yts) <= s(s(s(len(yts)))) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	0 == xts = true => count(0, xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	0 == xts = false => count(0, xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> yts
	^f0($n0 + 1; yts, xts@) -> xts$n0 .. ^f0($n0; yts, xts@)
	^f1(0; yts) -> len(yts)
	^f1($n1 + 1; yts) -> s(^f1($n1; yts))
+++ }
+++ Lemma(s)           = 
	count(x, xts$n .. ^f0($n; yts, xts@)) <= s(^f1($n; yts)) = true

+++ treating clause
	s(xts4) == xts3 = true => count(s(xts4), xts2 .. xts1 .. nil) <= s(s(0)) = true
+++ inductive narrowing on conjecture
	s(xts4) == xts3 = true => count(s(xts4), xts2 .. xts1 .. nil) <= s(s(0)) = true
... induction variables of
	s(xts4) == xts3 = true => count(s(xts4), xts2 .. xts1 .. nil) <= s(s(0)) = true
... are:
	xts3:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	s(xts4) == xts3 = true => count(s(xts4), xts2 .. xts1 .. nil) <= s(s(0)) = true
... with variable xts3
+++ creating new conjecture
	s(xts3) == 0 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) = true
+++ creating new conjecture
	s(xts4) == s(xts3) = true => count(s(xts4), xts2 .. xts1 .. nil) <= s(s(0)) = true
--- clause
	s(xts3) == 0 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) = true
... reduced in 1 step to
	false = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) = true
--- clause
	false = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) = true
... contains a ground negative condition
	false = true
... and is therefore discarded (false => t is always true)
--- clause
	s(xts4) == s(xts3) = true => count(s(xts4), xts2 .. xts1 .. nil) <= s(s(0)) = true
... reduced in 1 step to
	xts4 == xts3 = true => count(s(xts4), xts2 .. xts1 .. nil) <= s(s(0)) = true
+++ inductive narrowing succeeded
--- clause
	s(xts4) == xts3 = true => count(s(xts4), xts2 .. xts1 .. nil) <= s(s(0)) = true
... oriented to rule
	s(xts2) == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
+++ added new clause(s)
	xts4 == xts3 = true => count(s(xts4), xts2 .. xts1 .. nil) <= s(s(0)) = true
... to conjectures

+++ Status of the Inference System
--- Conjectures:
	count(0, xts2 .. xts1 .. nil) <= s(s(0)) = true
	s(xts4) == xts3 = false => count(s(xts4), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	count(0, xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts2 == 0 = true => count(s(xts2), xts1 .. nil) <= s(0) = true
	xts3 == s(xts2) = true => count(s(xts3), xts1 .. nil) <= s(0) = true
	xts2 == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) = true
	xts3 == s(xts2) = false => count(s(xts3), xts1 .. nil) <= s(s(0)) = true
	xts4 == xts3 = true => count(s(xts4), xts2 .. xts1 .. nil) <= s(s(0)) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	count(x, xs) <= len(xs) -> true
	count(x, xts .. yts) <= s(len(yts)) -> true
	0 == xts = true => count(0, xts .. nil) <= s(0) -> true
	count(x, xts2 .. xts1 .. yts) <= s(s(len(yts))) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(0)) -> true
	count(x, xts3 .. xts2 .. xts1 .. yts) <= s(s(s(len(yts)))) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	0 == xts = true => count(0, xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	0 == xts = false => count(0, xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> yts
	^f0($n0 + 1; yts, xts@) -> xts$n0 .. ^f0($n0; yts, xts@)
	^f1(0; yts) -> len(yts)
	^f1($n1 + 1; yts) -> s(^f1($n1; yts))
+++ }
+++ Lemma(s)           = 
	count(x, xts$n .. ^f0($n; yts, xts@)) <= s(^f1($n; yts)) = true

+++ treating clause
	count(0, xts2 .. xts1 .. nil) <= s(s(0)) = true
--- no new clauses created
+++ attempting case rewriting
--- case rewriting generated new conjectures
	0 == xts2 = true => s(count(0, xts1 .. nil)) <= s(s(0)) = true
	0 == xts2 = false => count(0, xts1 .. nil) <= s(s(0)) = true
+++ added new clause(s)
	0 == xts2 = true => s(count(0, xts1 .. nil)) <= s(s(0)) = true
	0 == xts2 = false => count(0, xts1 .. nil) <= s(s(0)) = true
... to conjectures
--- clause
	0 == xts2 = true => s(count(0, xts1 .. nil)) <= s(s(0)) = true
... reduced in 1 step to
	0 == xts2 = true => count(0, xts1 .. nil) <= s(0) = true

+++ Status of the Inference System
--- Conjectures:
	s(xts4) == xts3 = false => count(s(xts4), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	count(0, xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts2 == 0 = true => count(s(xts2), xts1 .. nil) <= s(0) = true
	xts3 == s(xts2) = true => count(s(xts3), xts1 .. nil) <= s(0) = true
	xts2 == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) = true
	xts3 == s(xts2) = false => count(s(xts3), xts1 .. nil) <= s(s(0)) = true
	xts4 == xts3 = true => count(s(xts4), xts2 .. xts1 .. nil) <= s(s(0)) = true
	0 == xts2 = true => count(0, xts1 .. nil) <= s(0) = true
	0 == xts2 = false => count(0, xts1 .. nil) <= s(s(0)) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	count(x, xs) <= len(xs) -> true
	count(x, xts .. yts) <= s(len(yts)) -> true
	0 == xts = true => count(0, xts .. nil) <= s(0) -> true
	count(x, xts2 .. xts1 .. yts) <= s(s(len(yts))) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(0)) -> true
	count(x, xts3 .. xts2 .. xts1 .. yts) <= s(s(s(len(yts)))) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	0 == xts = true => count(0, xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	0 == xts = false => count(0, xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> yts
	^f0($n0 + 1; yts, xts@) -> xts$n0 .. ^f0($n0; yts, xts@)
	^f1(0; yts) -> len(yts)
	^f1($n1 + 1; yts) -> s(^f1($n1; yts))
+++ }
+++ Lemma(s)           = 
	count(x, xts$n .. ^f0($n; yts, xts@)) <= s(^f1($n; yts)) = true

+++ treating clause
	s(xts4) == xts3 = false => count(s(xts4), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
+++ inductive narrowing on conjecture
	s(xts4) == xts3 = false => count(s(xts4), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
... induction variables of
	s(xts4) == xts3 = false => count(s(xts4), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
... are:
	xts3:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	s(xts4) == xts3 = false => count(s(xts4), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
... with variable xts3
+++ creating new conjecture
	s(xts3) == 0 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
+++ creating new conjecture
	s(xts4) == s(xts3) = false => count(s(xts4), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
--- clause
	s(xts3) == 0 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
... reduced in 1 step to
	count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
--- clause
	s(xts4) == s(xts3) = false => count(s(xts4), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
... reduced in 1 step to
	xts4 == xts3 = false => count(s(xts4), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
+++ inductive narrowing succeeded
--- clause
	s(xts4) == xts3 = false => count(s(xts4), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
... oriented to rule
	s(xts2) == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
+++ added new clause(s)
	count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts4 == xts3 = false => count(s(xts4), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
... to conjectures

+++ Status of the Inference System
--- Conjectures:
	count(0, xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts2 == 0 = true => count(s(xts2), xts1 .. nil) <= s(0) = true
	xts3 == s(xts2) = true => count(s(xts3), xts1 .. nil) <= s(0) = true
	xts2 == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) = true
	xts3 == s(xts2) = false => count(s(xts3), xts1 .. nil) <= s(s(0)) = true
	xts4 == xts3 = true => count(s(xts4), xts2 .. xts1 .. nil) <= s(s(0)) = true
	0 == xts2 = true => count(0, xts1 .. nil) <= s(0) = true
	0 == xts2 = false => count(0, xts1 .. nil) <= s(s(0)) = true
	count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts4 == xts3 = false => count(s(xts4), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	count(x, xs) <= len(xs) -> true
	count(x, xts .. yts) <= s(len(yts)) -> true
	0 == xts = true => count(0, xts .. nil) <= s(0) -> true
	count(x, xts2 .. xts1 .. yts) <= s(s(len(yts))) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(0)) -> true
	count(x, xts3 .. xts2 .. xts1 .. yts) <= s(s(s(len(yts)))) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	0 == xts = true => count(0, xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	0 == xts = false => count(0, xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> yts
	^f0($n0 + 1; yts, xts@) -> xts$n0 .. ^f0($n0; yts, xts@)
	^f1(0; yts) -> len(yts)
	^f1($n1 + 1; yts) -> s(^f1($n1; yts))
+++ }
+++ Lemma(s)           = 
	count(x, xts$n .. ^f0($n; yts, xts@)) <= s(^f1($n; yts)) = true

+++ treating clause
	count(0, xts2 .. xts1 .. nil) <= s(s(s(0))) = true
--- no new clauses created
+++ attempting case rewriting
--- case rewriting generated new conjectures
	0 == xts2 = true => s(count(0, xts1 .. nil)) <= s(s(s(0))) = true
	0 == xts2 = false => count(0, xts1 .. nil) <= s(s(s(0))) = true
+++ added new clause(s)
	0 == xts2 = true => s(count(0, xts1 .. nil)) <= s(s(s(0))) = true
	0 == xts2 = false => count(0, xts1 .. nil) <= s(s(s(0))) = true
... to conjectures
--- clause
	0 == xts2 = true => s(count(0, xts1 .. nil)) <= s(s(s(0))) = true
... reduced in 1 step to
	0 == xts2 = true => count(0, xts1 .. nil) <= s(s(0)) = true

+++ Status of the Inference System
--- Conjectures:
	xts2 == 0 = true => count(s(xts2), xts1 .. nil) <= s(0) = true
	xts3 == s(xts2) = true => count(s(xts3), xts1 .. nil) <= s(0) = true
	xts2 == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) = true
	xts3 == s(xts2) = false => count(s(xts3), xts1 .. nil) <= s(s(0)) = true
	xts4 == xts3 = true => count(s(xts4), xts2 .. xts1 .. nil) <= s(s(0)) = true
	0 == xts2 = true => count(0, xts1 .. nil) <= s(0) = true
	0 == xts2 = false => count(0, xts1 .. nil) <= s(s(0)) = true
	count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts4 == xts3 = false => count(s(xts4), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	0 == xts2 = true => count(0, xts1 .. nil) <= s(s(0)) = true
	0 == xts2 = false => count(0, xts1 .. nil) <= s(s(s(0))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	count(x, xs) <= len(xs) -> true
	count(x, xts .. yts) <= s(len(yts)) -> true
	0 == xts = true => count(0, xts .. nil) <= s(0) -> true
	count(x, xts2 .. xts1 .. yts) <= s(s(len(yts))) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(0)) -> true
	count(x, xts3 .. xts2 .. xts1 .. yts) <= s(s(s(len(yts)))) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	0 == xts = true => count(0, xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	0 == xts = false => count(0, xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> yts
	^f0($n0 + 1; yts, xts@) -> xts$n0 .. ^f0($n0; yts, xts@)
	^f1(0; yts) -> len(yts)
	^f1($n1 + 1; yts) -> s(^f1($n1; yts))
+++ }
+++ Lemma(s)           = 
	count(x, xts$n .. ^f0($n; yts, xts@)) <= s(^f1($n; yts)) = true

+++ treating clause
	xts2 == 0 = true => count(s(xts2), xts1 .. nil) <= s(0) = true
+++ inductive narrowing on conjecture
	xts2 == 0 = true => count(s(xts2), xts1 .. nil) <= s(0) = true
... induction variables of
	xts2 == 0 = true => count(s(xts2), xts1 .. nil) <= s(0) = true
... are:
	xts2:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	xts2 == 0 = true => count(s(xts2), xts1 .. nil) <= s(0) = true
... with variable xts2
+++ creating new conjecture
	0 == 0 = true => count(s(0), xts .. nil) <= s(0) = true
+++ creating new conjecture
	s(xts2) == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) = true
--- clause
	0 == 0 = true => count(s(0), xts .. nil) <= s(0) = true
... reduced in 1 step to
	count(s(0), xts .. nil) <= s(0) = true
--- clause
	s(xts2) == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) = true
... reduced in 1 step to
	false = true => count(s(s(xts2)), xts1 .. nil) <= s(0) = true
--- clause
	false = true => count(s(s(xts2)), xts1 .. nil) <= s(0) = true
... contains a ground negative condition
	false = true
... and is therefore discarded (false => t is always true)
+++ inductive narrowing succeeded
--- clause
	xts2 == 0 = true => count(s(xts2), xts1 .. nil) <= s(0) = true
... oriented to rule
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
+++ added new clause(s)
	count(s(0), xts .. nil) <= s(0) = true
... to conjectures

+++ Status of the Inference System
--- Conjectures:
	xts3 == s(xts2) = true => count(s(xts3), xts1 .. nil) <= s(0) = true
	xts2 == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) = true
	xts3 == s(xts2) = false => count(s(xts3), xts1 .. nil) <= s(s(0)) = true
	xts4 == xts3 = true => count(s(xts4), xts2 .. xts1 .. nil) <= s(s(0)) = true
	0 == xts2 = true => count(0, xts1 .. nil) <= s(0) = true
	0 == xts2 = false => count(0, xts1 .. nil) <= s(s(0)) = true
	count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts4 == xts3 = false => count(s(xts4), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	0 == xts2 = true => count(0, xts1 .. nil) <= s(s(0)) = true
	0 == xts2 = false => count(0, xts1 .. nil) <= s(s(s(0))) = true
	count(s(0), xts .. nil) <= s(0) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	count(x, xs) <= len(xs) -> true
	count(x, xts .. yts) <= s(len(yts)) -> true
	0 == xts = true => count(0, xts .. nil) <= s(0) -> true
	count(x, xts2 .. xts1 .. yts) <= s(s(len(yts))) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	count(x, xts3 .. xts2 .. xts1 .. yts) <= s(s(s(len(yts)))) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	0 == xts = true => count(0, xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	0 == xts = false => count(0, xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> yts
	^f0($n0 + 1; yts, xts@) -> xts$n0 .. ^f0($n0; yts, xts@)
	^f1(0; yts) -> len(yts)
	^f1($n1 + 1; yts) -> s(^f1($n1; yts))
+++ }
+++ Lemma(s)           = 
	count(x, xts$n .. ^f0($n; yts, xts@)) <= s(^f1($n; yts)) = true

+++ treating clause
	xts3 == s(xts2) = true => count(s(xts3), xts1 .. nil) <= s(0) = true
+++ inductive narrowing on conjecture
	xts3 == s(xts2) = true => count(s(xts3), xts1 .. nil) <= s(0) = true
... induction variables of
	xts3 == s(xts2) = true => count(s(xts3), xts1 .. nil) <= s(0) = true
... are:
	xts3:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	xts3 == s(xts2) = true => count(s(xts3), xts1 .. nil) <= s(0) = true
... with variable xts3
+++ creating new conjecture
	0 == s(xts2) = true => count(s(0), xts1 .. nil) <= s(0) = true
+++ creating new conjecture
	s(xts3) == s(xts2) = true => count(s(s(xts3)), xts1 .. nil) <= s(0) = true
--- clause
	0 == s(xts2) = true => count(s(0), xts1 .. nil) <= s(0) = true
... reduced in 1 step to
	false = true => count(s(0), xts .. nil) <= s(0) = true
--- clause
	false = true => count(s(0), xts .. nil) <= s(0) = true
... contains a ground negative condition
	false = true
... and is therefore discarded (false => t is always true)
--- clause
	s(xts3) == s(xts2) = true => count(s(s(xts3)), xts1 .. nil) <= s(0) = true
... reduced in 1 step to
	xts3 == xts2 = true => count(s(s(xts3)), xts1 .. nil) <= s(0) = true
+++ inductive narrowing succeeded
--- clause
	xts3 == s(xts2) = true => count(s(xts3), xts1 .. nil) <= s(0) = true
... oriented to rule
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
+++ added new clause(s)
	xts3 == xts2 = true => count(s(s(xts3)), xts1 .. nil) <= s(0) = true
... to conjectures

+++ Status of the Inference System
--- Conjectures:
	xts2 == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) = true
	xts3 == s(xts2) = false => count(s(xts3), xts1 .. nil) <= s(s(0)) = true
	xts4 == xts3 = true => count(s(xts4), xts2 .. xts1 .. nil) <= s(s(0)) = true
	0 == xts2 = true => count(0, xts1 .. nil) <= s(0) = true
	0 == xts2 = false => count(0, xts1 .. nil) <= s(s(0)) = true
	count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts4 == xts3 = false => count(s(xts4), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	0 == xts2 = true => count(0, xts1 .. nil) <= s(s(0)) = true
	0 == xts2 = false => count(0, xts1 .. nil) <= s(s(s(0))) = true
	count(s(0), xts .. nil) <= s(0) = true
	xts3 == xts2 = true => count(s(s(xts3)), xts1 .. nil) <= s(0) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	count(x, xs) <= len(xs) -> true
	count(x, xts .. yts) <= s(len(yts)) -> true
	0 == xts = true => count(0, xts .. nil) <= s(0) -> true
	count(x, xts2 .. xts1 .. yts) <= s(s(len(yts))) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	count(x, xts3 .. xts2 .. xts1 .. yts) <= s(s(s(len(yts)))) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	0 == xts = true => count(0, xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	0 == xts = false => count(0, xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> yts
	^f0($n0 + 1; yts, xts@) -> xts$n0 .. ^f0($n0; yts, xts@)
	^f1(0; yts) -> len(yts)
	^f1($n1 + 1; yts) -> s(^f1($n1; yts))
+++ }
+++ Lemma(s)           = 
	count(x, xts$n .. ^f0($n; yts, xts@)) <= s(^f1($n; yts)) = true

+++ treating clause
	xts2 == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) = true
+++ inductive narrowing on conjecture
	xts2 == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) = true
... induction variables of
	xts2 == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) = true
... are:
	xts2:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	xts2 == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) = true
... with variable xts2
+++ creating new conjecture
	0 == 0 = false => count(s(0), xts .. nil) <= s(s(0)) = true
+++ creating new conjecture
	s(xts2) == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) = true
--- clause
	0 == 0 = false => count(s(0), xts .. nil) <= s(s(0)) = true
... reduced in 1 step to
	true = false => count(s(0), xts .. nil) <= s(s(0)) = true
--- clause
	true = false => count(s(0), xts .. nil) <= s(s(0)) = true
... contains a ground negative condition
	true = false
... and is therefore discarded (false => t is always true)
--- clause
	s(xts2) == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) = true
... reduced in 1 step to
	count(s(s(xts2)), xts1 .. nil) <= s(s(0)) = true
+++ inductive narrowing succeeded
--- clause
	xts2 == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) = true
... oriented to rule
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
+++ added new clause(s)
	count(s(s(xts2)), xts1 .. nil) <= s(s(0)) = true
... to conjectures

+++ Status of the Inference System
--- Conjectures:
	xts3 == s(xts2) = false => count(s(xts3), xts1 .. nil) <= s(s(0)) = true
	xts4 == xts3 = true => count(s(xts4), xts2 .. xts1 .. nil) <= s(s(0)) = true
	0 == xts2 = true => count(0, xts1 .. nil) <= s(0) = true
	0 == xts2 = false => count(0, xts1 .. nil) <= s(s(0)) = true
	count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts4 == xts3 = false => count(s(xts4), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	0 == xts2 = true => count(0, xts1 .. nil) <= s(s(0)) = true
	0 == xts2 = false => count(0, xts1 .. nil) <= s(s(s(0))) = true
	count(s(0), xts .. nil) <= s(0) = true
	xts3 == xts2 = true => count(s(s(xts3)), xts1 .. nil) <= s(0) = true
	count(s(s(xts2)), xts1 .. nil) <= s(s(0)) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	count(x, xs) <= len(xs) -> true
	count(x, xts .. yts) <= s(len(yts)) -> true
	0 == xts = true => count(0, xts .. nil) <= s(0) -> true
	count(x, xts2 .. xts1 .. yts) <= s(s(len(yts))) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	count(x, xts3 .. xts2 .. xts1 .. yts) <= s(s(s(len(yts)))) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	0 == xts = true => count(0, xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	0 == xts = false => count(0, xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> yts
	^f0($n0 + 1; yts, xts@) -> xts$n0 .. ^f0($n0; yts, xts@)
	^f1(0; yts) -> len(yts)
	^f1($n1 + 1; yts) -> s(^f1($n1; yts))
+++ }
+++ Lemma(s)           = 
	count(x, xts$n .. ^f0($n; yts, xts@)) <= s(^f1($n; yts)) = true

+++ treating clause
	xts3 == s(xts2) = false => count(s(xts3), xts1 .. nil) <= s(s(0)) = true
+++ inductive narrowing on conjecture
	xts3 == s(xts2) = false => count(s(xts3), xts1 .. nil) <= s(s(0)) = true
... induction variables of
	xts3 == s(xts2) = false => count(s(xts3), xts1 .. nil) <= s(s(0)) = true
... are:
	xts3:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	xts3 == s(xts2) = false => count(s(xts3), xts1 .. nil) <= s(s(0)) = true
... with variable xts3
+++ creating new conjecture
	0 == s(xts2) = false => count(s(0), xts1 .. nil) <= s(s(0)) = true
+++ creating new conjecture
	s(xts3) == s(xts2) = false => count(s(s(xts3)), xts1 .. nil) <= s(s(0)) = true
--- clause
	0 == s(xts2) = false => count(s(0), xts1 .. nil) <= s(s(0)) = true
... reduced in 1 step to
	count(s(0), xts .. nil) <= s(s(0)) = true
--- clause
	s(xts3) == s(xts2) = false => count(s(s(xts3)), xts1 .. nil) <= s(s(0)) = true
... reduced in 1 step to
	xts3 == xts2 = false => count(s(s(xts3)), xts1 .. nil) <= s(s(0)) = true
+++ inductive narrowing succeeded
--- clause
	xts3 == s(xts2) = false => count(s(xts3), xts1 .. nil) <= s(s(0)) = true
... oriented to rule
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
+++ added new clause(s)
	count(s(0), xts .. nil) <= s(s(0)) = true
	xts3 == xts2 = false => count(s(s(xts3)), xts1 .. nil) <= s(s(0)) = true
... to conjectures

+++ Status of the Inference System
--- Conjectures:
	xts4 == xts3 = true => count(s(xts4), xts2 .. xts1 .. nil) <= s(s(0)) = true
	0 == xts2 = true => count(0, xts1 .. nil) <= s(0) = true
	0 == xts2 = false => count(0, xts1 .. nil) <= s(s(0)) = true
	count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts4 == xts3 = false => count(s(xts4), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	0 == xts2 = true => count(0, xts1 .. nil) <= s(s(0)) = true
	0 == xts2 = false => count(0, xts1 .. nil) <= s(s(s(0))) = true
	count(s(0), xts .. nil) <= s(0) = true
	xts3 == xts2 = true => count(s(s(xts3)), xts1 .. nil) <= s(0) = true
	count(s(s(xts2)), xts1 .. nil) <= s(s(0)) = true
	count(s(0), xts .. nil) <= s(s(0)) = true
	xts3 == xts2 = false => count(s(s(xts3)), xts1 .. nil) <= s(s(0)) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	count(x, xs) <= len(xs) -> true
	count(x, xts .. yts) <= s(len(yts)) -> true
	0 == xts = true => count(0, xts .. nil) <= s(0) -> true
	count(x, xts2 .. xts1 .. yts) <= s(s(len(yts))) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	count(x, xts3 .. xts2 .. xts1 .. yts) <= s(s(s(len(yts)))) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	0 == xts = true => count(0, xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	0 == xts = false => count(0, xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> yts
	^f0($n0 + 1; yts, xts@) -> xts$n0 .. ^f0($n0; yts, xts@)
	^f1(0; yts) -> len(yts)
	^f1($n1 + 1; yts) -> s(^f1($n1; yts))
+++ }
+++ Lemma(s)           = 
	count(x, xts$n .. ^f0($n; yts, xts@)) <= s(^f1($n; yts)) = true

+++ treating clause
	xts4 == xts3 = true => count(s(xts4), xts2 .. xts1 .. nil) <= s(s(0)) = true
+++ inductive narrowing on conjecture
	xts4 == xts3 = true => count(s(xts4), xts2 .. xts1 .. nil) <= s(s(0)) = true
... induction variables of
	xts4 == xts3 = true => count(s(xts4), xts2 .. xts1 .. nil) <= s(s(0)) = true
... are:
	xts3:nat
	xts4:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	xts4 == xts3 = true => count(s(xts4), xts2 .. xts1 .. nil) <= s(s(0)) = true
... with variable xts3
+++ creating new conjecture
	xts3 == 0 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) = true
+++ creating new conjecture
	xts4 == s(xts3) = true => count(s(xts4), xts2 .. xts1 .. nil) <= s(s(0)) = true
+++ inductive narrowing succeeded
--- clause
	xts4 == xts3 = true => count(s(xts4), xts2 .. xts1 .. nil) <= s(s(0)) = true
... oriented to rule
	xts2 == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
+++ added new clause(s)
	xts3 == 0 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts4 == s(xts3) = true => count(s(xts4), xts2 .. xts1 .. nil) <= s(s(0)) = true
... to conjectures

+++ Status of the Inference System
--- Conjectures:
	0 == xts2 = true => count(0, xts1 .. nil) <= s(0) = true
	0 == xts2 = false => count(0, xts1 .. nil) <= s(s(0)) = true
	count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts4 == xts3 = false => count(s(xts4), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	0 == xts2 = true => count(0, xts1 .. nil) <= s(s(0)) = true
	0 == xts2 = false => count(0, xts1 .. nil) <= s(s(s(0))) = true
	count(s(0), xts .. nil) <= s(0) = true
	xts3 == xts2 = true => count(s(s(xts3)), xts1 .. nil) <= s(0) = true
	count(s(s(xts2)), xts1 .. nil) <= s(s(0)) = true
	count(s(0), xts .. nil) <= s(s(0)) = true
	xts3 == xts2 = false => count(s(s(xts3)), xts1 .. nil) <= s(s(0)) = true
	xts3 == 0 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts4 == s(xts3) = true => count(s(xts4), xts2 .. xts1 .. nil) <= s(s(0)) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	count(x, xs) <= len(xs) -> true
	count(x, xts .. yts) <= s(len(yts)) -> true
	0 == xts = true => count(0, xts .. nil) <= s(0) -> true
	count(x, xts2 .. xts1 .. yts) <= s(s(len(yts))) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	count(x, xts3 .. xts2 .. xts1 .. yts) <= s(s(s(len(yts)))) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	0 == xts = true => count(0, xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	0 == xts = false => count(0, xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> yts
	^f0($n0 + 1; yts, xts@) -> xts$n0 .. ^f0($n0; yts, xts@)
	^f1(0; yts) -> len(yts)
	^f1($n1 + 1; yts) -> s(^f1($n1; yts))
+++ }
+++ Lemma(s)           = 
	count(x, xts$n .. ^f0($n; yts, xts@)) <= s(^f1($n; yts)) = true

+++ treating clause
	0 == xts2 = true => count(0, xts1 .. nil) <= s(0) = true
+++ inductive narrowing on conjecture
	0 == xts2 = true => count(0, xts1 .. nil) <= s(0) = true
... induction variables of
	0 == xts2 = true => count(0, xts1 .. nil) <= s(0) = true
... are:
	xts2:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	0 == xts2 = true => count(0, xts1 .. nil) <= s(0) = true
... with variable xts2
+++ creating new conjecture
	0 == 0 = true => count(0, xts .. nil) <= s(0) = true
+++ creating new conjecture
	0 == s(xts2) = true => count(0, xts1 .. nil) <= s(0) = true
--- clause
	0 == 0 = true => count(0, xts .. nil) <= s(0) = true
... reduced in 1 step to
	count(0, xts .. nil) <= s(0) = true
--- clause
	0 == s(xts2) = true => count(0, xts1 .. nil) <= s(0) = true
... reduced in 1 step to
	false = true => count(0, xts .. nil) <= s(0) = true
--- clause
	false = true => count(0, xts .. nil) <= s(0) = true
... contains a ground negative condition
	false = true
... and is therefore discarded (false => t is always true)
+++ inductive narrowing succeeded
--- clause
	0 == xts2 = true => count(0, xts1 .. nil) <= s(0) = true
... oriented to rule
	0 == xts = true => count(0, xts .. nil) <= s(0) -> true
+++ added new clause(s)
	count(0, xts .. nil) <= s(0) = true
... to conjectures

+++ Status of the Inference System
--- Conjectures:
	0 == xts2 = false => count(0, xts1 .. nil) <= s(s(0)) = true
	count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts4 == xts3 = false => count(s(xts4), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	0 == xts2 = true => count(0, xts1 .. nil) <= s(s(0)) = true
	0 == xts2 = false => count(0, xts1 .. nil) <= s(s(s(0))) = true
	count(s(0), xts .. nil) <= s(0) = true
	xts3 == xts2 = true => count(s(s(xts3)), xts1 .. nil) <= s(0) = true
	count(s(s(xts2)), xts1 .. nil) <= s(s(0)) = true
	count(s(0), xts .. nil) <= s(s(0)) = true
	xts3 == xts2 = false => count(s(s(xts3)), xts1 .. nil) <= s(s(0)) = true
	xts3 == 0 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts4 == s(xts3) = true => count(s(xts4), xts2 .. xts1 .. nil) <= s(s(0)) = true
	count(0, xts .. nil) <= s(0) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	count(x, xs) <= len(xs) -> true
	count(x, xts .. yts) <= s(len(yts)) -> true
	0 == xts = true => count(0, xts .. nil) <= s(0) -> true
	count(x, xts2 .. xts1 .. yts) <= s(s(len(yts))) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	count(x, xts3 .. xts2 .. xts1 .. yts) <= s(s(s(len(yts)))) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	0 == xts = true => count(0, xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	0 == xts = false => count(0, xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> yts
	^f0($n0 + 1; yts, xts@) -> xts$n0 .. ^f0($n0; yts, xts@)
	^f1(0; yts) -> len(yts)
	^f1($n1 + 1; yts) -> s(^f1($n1; yts))
+++ }
+++ Lemma(s)           = 
	count(x, xts$n .. ^f0($n; yts, xts@)) <= s(^f1($n; yts)) = true

+++ treating clause
	0 == xts2 = false => count(0, xts1 .. nil) <= s(s(0)) = true
+++ inductive narrowing on conjecture
	0 == xts2 = false => count(0, xts1 .. nil) <= s(s(0)) = true
... induction variables of
	0 == xts2 = false => count(0, xts1 .. nil) <= s(s(0)) = true
... are:
	xts2:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	0 == xts2 = false => count(0, xts1 .. nil) <= s(s(0)) = true
... with variable xts2
+++ creating new conjecture
	0 == 0 = false => count(0, xts .. nil) <= s(s(0)) = true
+++ creating new conjecture
	0 == s(xts2) = false => count(0, xts1 .. nil) <= s(s(0)) = true
--- clause
	0 == 0 = false => count(0, xts .. nil) <= s(s(0)) = true
... reduced in 1 step to
	true = false => count(0, xts .. nil) <= s(s(0)) = true
--- clause
	true = false => count(0, xts .. nil) <= s(s(0)) = true
... contains a ground negative condition
	true = false
... and is therefore discarded (false => t is always true)
--- clause
	0 == s(xts2) = false => count(0, xts1 .. nil) <= s(s(0)) = true
... reduced in 1 step to
	count(0, xts .. nil) <= s(s(0)) = true
+++ inductive narrowing succeeded
--- clause
	0 == xts2 = false => count(0, xts1 .. nil) <= s(s(0)) = true
... oriented to rule
	0 == xts = false => count(0, xts .. nil) <= s(s(0)) -> true
+++ added new clause(s)
	count(0, xts .. nil) <= s(s(0)) = true
... to conjectures

+++ Status of the Inference System
--- Conjectures:
	count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts4 == xts3 = false => count(s(xts4), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	0 == xts2 = true => count(0, xts1 .. nil) <= s(s(0)) = true
	0 == xts2 = false => count(0, xts1 .. nil) <= s(s(s(0))) = true
	count(s(0), xts .. nil) <= s(0) = true
	xts3 == xts2 = true => count(s(s(xts3)), xts1 .. nil) <= s(0) = true
	count(s(s(xts2)), xts1 .. nil) <= s(s(0)) = true
	count(s(0), xts .. nil) <= s(s(0)) = true
	xts3 == xts2 = false => count(s(s(xts3)), xts1 .. nil) <= s(s(0)) = true
	xts3 == 0 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts4 == s(xts3) = true => count(s(xts4), xts2 .. xts1 .. nil) <= s(s(0)) = true
	count(0, xts .. nil) <= s(0) = true
	count(0, xts .. nil) <= s(s(0)) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	count(x, xs) <= len(xs) -> true
	count(x, xts .. yts) <= s(len(yts)) -> true
	0 == xts = true => count(0, xts .. nil) <= s(0) -> true
	count(x, xts2 .. xts1 .. yts) <= s(s(len(yts))) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	count(x, xts3 .. xts2 .. xts1 .. yts) <= s(s(s(len(yts)))) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	0 == xts = true => count(0, xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	0 == xts = false => count(0, xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> yts
	^f0($n0 + 1; yts, xts@) -> xts$n0 .. ^f0($n0; yts, xts@)
	^f1(0; yts) -> len(yts)
	^f1($n1 + 1; yts) -> s(^f1($n1; yts))
+++ }
+++ Lemma(s)           = 
	count(x, xts$n .. ^f0($n; yts, xts@)) <= s(^f1($n; yts)) = true

+++ treating clause
	count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
--- no new clauses created
+++ attempting case rewriting
--- case rewriting generated new conjectures
	s(xts3) == xts2 = true => s(count(s(xts3), xts1 .. nil)) <= s(s(s(0))) = true
	s(xts3) == xts2 = false => count(s(xts3), xts1 .. nil) <= s(s(s(0))) = true
+++ added new clause(s)
	s(xts3) == xts2 = true => s(count(s(xts3), xts1 .. nil)) <= s(s(s(0))) = true
	s(xts3) == xts2 = false => count(s(xts3), xts1 .. nil) <= s(s(s(0))) = true
... to conjectures
--- clause
	s(xts3) == xts2 = true => s(count(s(xts3), xts1 .. nil)) <= s(s(s(0))) = true
... reduced in 1 step to
	s(xts3) == xts2 = true => count(s(xts3), xts1 .. nil) <= s(s(0)) = true

+++ Status of the Inference System
--- Conjectures:
	xts4 == xts3 = false => count(s(xts4), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	0 == xts2 = true => count(0, xts1 .. nil) <= s(s(0)) = true
	0 == xts2 = false => count(0, xts1 .. nil) <= s(s(s(0))) = true
	count(s(0), xts .. nil) <= s(0) = true
	xts3 == xts2 = true => count(s(s(xts3)), xts1 .. nil) <= s(0) = true
	count(s(s(xts2)), xts1 .. nil) <= s(s(0)) = true
	count(s(0), xts .. nil) <= s(s(0)) = true
	xts3 == xts2 = false => count(s(s(xts3)), xts1 .. nil) <= s(s(0)) = true
	xts3 == 0 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts4 == s(xts3) = true => count(s(xts4), xts2 .. xts1 .. nil) <= s(s(0)) = true
	count(0, xts .. nil) <= s(0) = true
	count(0, xts .. nil) <= s(s(0)) = true
	s(xts3) == xts2 = true => count(s(xts3), xts1 .. nil) <= s(s(0)) = true
	s(xts3) == xts2 = false => count(s(xts3), xts1 .. nil) <= s(s(s(0))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	count(x, xs) <= len(xs) -> true
	count(x, xts .. yts) <= s(len(yts)) -> true
	0 == xts = true => count(0, xts .. nil) <= s(0) -> true
	count(x, xts2 .. xts1 .. yts) <= s(s(len(yts))) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	count(x, xts3 .. xts2 .. xts1 .. yts) <= s(s(s(len(yts)))) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	0 == xts = true => count(0, xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	0 == xts = false => count(0, xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> yts
	^f0($n0 + 1; yts, xts@) -> xts$n0 .. ^f0($n0; yts, xts@)
	^f1(0; yts) -> len(yts)
	^f1($n1 + 1; yts) -> s(^f1($n1; yts))
+++ }
+++ Lemma(s)           = 
	count(x, xts$n .. ^f0($n; yts, xts@)) <= s(^f1($n; yts)) = true

+++ treating clause
	xts4 == xts3 = false => count(s(xts4), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
+++ inductive narrowing on conjecture
	xts4 == xts3 = false => count(s(xts4), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
... induction variables of
	xts4 == xts3 = false => count(s(xts4), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
... are:
	xts3:nat
	xts4:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	xts4 == xts3 = false => count(s(xts4), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
... with variable xts3
+++ creating new conjecture
	xts3 == 0 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
+++ creating new conjecture
	xts4 == s(xts3) = false => count(s(xts4), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
+++ inductive narrowing succeeded
--- clause
	xts4 == xts3 = false => count(s(xts4), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
... oriented to rule
	xts2 == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
+++ added new clause(s)
	xts3 == 0 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts4 == s(xts3) = false => count(s(xts4), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
... to conjectures

+++ Status of the Inference System
--- Conjectures:
	0 == xts2 = true => count(0, xts1 .. nil) <= s(s(0)) = true
	0 == xts2 = false => count(0, xts1 .. nil) <= s(s(s(0))) = true
	count(s(0), xts .. nil) <= s(0) = true
	xts3 == xts2 = true => count(s(s(xts3)), xts1 .. nil) <= s(0) = true
	count(s(s(xts2)), xts1 .. nil) <= s(s(0)) = true
	count(s(0), xts .. nil) <= s(s(0)) = true
	xts3 == xts2 = false => count(s(s(xts3)), xts1 .. nil) <= s(s(0)) = true
	xts3 == 0 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts4 == s(xts3) = true => count(s(xts4), xts2 .. xts1 .. nil) <= s(s(0)) = true
	count(0, xts .. nil) <= s(0) = true
	count(0, xts .. nil) <= s(s(0)) = true
	s(xts3) == xts2 = true => count(s(xts3), xts1 .. nil) <= s(s(0)) = true
	s(xts3) == xts2 = false => count(s(xts3), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == 0 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts4 == s(xts3) = false => count(s(xts4), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	count(x, xs) <= len(xs) -> true
	count(x, xts .. yts) <= s(len(yts)) -> true
	0 == xts = true => count(0, xts .. nil) <= s(0) -> true
	count(x, xts2 .. xts1 .. yts) <= s(s(len(yts))) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	count(x, xts3 .. xts2 .. xts1 .. yts) <= s(s(s(len(yts)))) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	0 == xts = true => count(0, xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	0 == xts = false => count(0, xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> yts
	^f0($n0 + 1; yts, xts@) -> xts$n0 .. ^f0($n0; yts, xts@)
	^f1(0; yts) -> len(yts)
	^f1($n1 + 1; yts) -> s(^f1($n1; yts))
+++ }
+++ Lemma(s)           = 
	count(x, xts$n .. ^f0($n; yts, xts@)) <= s(^f1($n; yts)) = true

+++ treating clause
	0 == xts2 = true => count(0, xts1 .. nil) <= s(s(0)) = true
+++ inductive narrowing on conjecture
	0 == xts2 = true => count(0, xts1 .. nil) <= s(s(0)) = true
... induction variables of
	0 == xts2 = true => count(0, xts1 .. nil) <= s(s(0)) = true
... are:
	xts2:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	0 == xts2 = true => count(0, xts1 .. nil) <= s(s(0)) = true
... with variable xts2
+++ creating new conjecture
	0 == 0 = true => count(0, xts .. nil) <= s(s(0)) = true
+++ creating new conjecture
	0 == s(xts2) = true => count(0, xts1 .. nil) <= s(s(0)) = true
--- clause
	0 == 0 = true => count(0, xts .. nil) <= s(s(0)) = true
... reduced in 1 step to
	count(0, xts .. nil) <= s(s(0)) = true
--- clause
	0 == s(xts2) = true => count(0, xts1 .. nil) <= s(s(0)) = true
... reduced in 1 step to
	false = true => count(0, xts .. nil) <= s(s(0)) = true
--- clause
	false = true => count(0, xts .. nil) <= s(s(0)) = true
... contains a ground negative condition
	false = true
... and is therefore discarded (false => t is always true)
--- clause
	count(0, xts .. nil) <= s(s(0)) = true
... subsumed by an existing conjecture
+++ inductive narrowing succeeded
--- clause
	0 == xts2 = true => count(0, xts1 .. nil) <= s(s(0)) = true
... oriented to rule
	0 == xts = true => count(0, xts .. nil) <= s(s(0)) -> true

+++ Status of the Inference System
--- Conjectures:
	0 == xts2 = false => count(0, xts1 .. nil) <= s(s(s(0))) = true
	count(s(0), xts .. nil) <= s(0) = true
	xts3 == xts2 = true => count(s(s(xts3)), xts1 .. nil) <= s(0) = true
	count(s(s(xts2)), xts1 .. nil) <= s(s(0)) = true
	count(s(0), xts .. nil) <= s(s(0)) = true
	xts3 == xts2 = false => count(s(s(xts3)), xts1 .. nil) <= s(s(0)) = true
	xts3 == 0 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts4 == s(xts3) = true => count(s(xts4), xts2 .. xts1 .. nil) <= s(s(0)) = true
	count(0, xts .. nil) <= s(0) = true
	count(0, xts .. nil) <= s(s(0)) = true
	s(xts3) == xts2 = true => count(s(xts3), xts1 .. nil) <= s(s(0)) = true
	s(xts3) == xts2 = false => count(s(xts3), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == 0 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts4 == s(xts3) = false => count(s(xts4), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	count(x, xs) <= len(xs) -> true
	count(x, xts .. yts) <= s(len(yts)) -> true
	0 == xts = true => count(0, xts .. nil) <= s(0) -> true
	count(x, xts2 .. xts1 .. yts) <= s(s(len(yts))) -> true
	0 == xts = true => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	count(x, xts3 .. xts2 .. xts1 .. yts) <= s(s(s(len(yts)))) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	0 == xts = true => count(0, xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	0 == xts = false => count(0, xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> yts
	^f0($n0 + 1; yts, xts@) -> xts$n0 .. ^f0($n0; yts, xts@)
	^f1(0; yts) -> len(yts)
	^f1($n1 + 1; yts) -> s(^f1($n1; yts))
+++ }
+++ Lemma(s)           = 
	count(x, xts$n .. ^f0($n; yts, xts@)) <= s(^f1($n; yts)) = true

+++ treating clause
	0 == xts2 = false => count(0, xts1 .. nil) <= s(s(s(0))) = true
+++ inductive narrowing on conjecture
	0 == xts2 = false => count(0, xts1 .. nil) <= s(s(s(0))) = true
... induction variables of
	0 == xts2 = false => count(0, xts1 .. nil) <= s(s(s(0))) = true
... are:
	xts2:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	0 == xts2 = false => count(0, xts1 .. nil) <= s(s(s(0))) = true
... with variable xts2
+++ creating new conjecture
	0 == 0 = false => count(0, xts .. nil) <= s(s(s(0))) = true
+++ creating new conjecture
	0 == s(xts2) = false => count(0, xts1 .. nil) <= s(s(s(0))) = true
--- clause
	0 == 0 = false => count(0, xts .. nil) <= s(s(s(0))) = true
... reduced in 1 step to
	true = false => count(0, xts .. nil) <= s(s(s(0))) = true
--- clause
	true = false => count(0, xts .. nil) <= s(s(s(0))) = true
... contains a ground negative condition
	true = false
... and is therefore discarded (false => t is always true)
--- clause
	0 == s(xts2) = false => count(0, xts1 .. nil) <= s(s(s(0))) = true
... reduced in 1 step to
	count(0, xts .. nil) <= s(s(s(0))) = true
+++ inductive narrowing succeeded
--- clause
	0 == xts2 = false => count(0, xts1 .. nil) <= s(s(s(0))) = true
... oriented to rule
	0 == xts = false => count(0, xts .. nil) <= s(s(s(0))) -> true
+++ added new clause(s)
	count(0, xts .. nil) <= s(s(s(0))) = true
... to conjectures

+++ Status of the Inference System
--- Conjectures:
	count(s(0), xts .. nil) <= s(0) = true
	xts3 == xts2 = true => count(s(s(xts3)), xts1 .. nil) <= s(0) = true
	count(s(s(xts2)), xts1 .. nil) <= s(s(0)) = true
	count(s(0), xts .. nil) <= s(s(0)) = true
	xts3 == xts2 = false => count(s(s(xts3)), xts1 .. nil) <= s(s(0)) = true
	xts3 == 0 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts4 == s(xts3) = true => count(s(xts4), xts2 .. xts1 .. nil) <= s(s(0)) = true
	count(0, xts .. nil) <= s(0) = true
	count(0, xts .. nil) <= s(s(0)) = true
	s(xts3) == xts2 = true => count(s(xts3), xts1 .. nil) <= s(s(0)) = true
	s(xts3) == xts2 = false => count(s(xts3), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == 0 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts4 == s(xts3) = false => count(s(xts4), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	count(0, xts .. nil) <= s(s(s(0))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	count(x, xs) <= len(xs) -> true
	count(x, xts .. yts) <= s(len(yts)) -> true
	0 == xts = true => count(0, xts .. nil) <= s(0) -> true
	count(x, xts2 .. xts1 .. yts) <= s(s(len(yts))) -> true
	0 == xts = true => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	count(x, xts3 .. xts2 .. xts1 .. yts) <= s(s(s(len(yts)))) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	0 == xts = true => count(0, xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	0 == xts = false => count(0, xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> yts
	^f0($n0 + 1; yts, xts@) -> xts$n0 .. ^f0($n0; yts, xts@)
	^f1(0; yts) -> len(yts)
	^f1($n1 + 1; yts) -> s(^f1($n1; yts))
+++ }
+++ Lemma(s)           = 
	count(x, xts$n .. ^f0($n; yts, xts@)) <= s(^f1($n; yts)) = true

+++ treating clause
	count(s(0), xts .. nil) <= s(0) = true
--- no new clauses created
+++ attempting case rewriting
--- case rewriting generated new conjectures
	s(0) == xts = true => s(0) <= s(0) = true
	s(0) == xts = false => 0 <= s(0) = true
+++ added new clause(s)
	s(0) == xts = true => s(0) <= s(0) = true
	s(0) == xts = false => 0 <= s(0) = true
... to conjectures
--- clause
	s(0) == xts = true => s(0) <= s(0) = true
... reduced to tautology
	s(0) == xts = true => true = true
--- clause
	s(0) == xts = false => 0 <= s(0) = true
... reduced to tautology
	s(0) == xts = false => true = true

+++ Status of the Inference System
--- Conjectures:
	xts3 == xts2 = true => count(s(s(xts3)), xts1 .. nil) <= s(0) = true
	count(s(s(xts2)), xts1 .. nil) <= s(s(0)) = true
	count(s(0), xts .. nil) <= s(s(0)) = true
	xts3 == xts2 = false => count(s(s(xts3)), xts1 .. nil) <= s(s(0)) = true
	xts3 == 0 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts4 == s(xts3) = true => count(s(xts4), xts2 .. xts1 .. nil) <= s(s(0)) = true
	count(0, xts .. nil) <= s(0) = true
	count(0, xts .. nil) <= s(s(0)) = true
	s(xts3) == xts2 = true => count(s(xts3), xts1 .. nil) <= s(s(0)) = true
	s(xts3) == xts2 = false => count(s(xts3), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == 0 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts4 == s(xts3) = false => count(s(xts4), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	count(0, xts .. nil) <= s(s(s(0))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	count(x, xs) <= len(xs) -> true
	count(x, xts .. yts) <= s(len(yts)) -> true
	0 == xts = true => count(0, xts .. nil) <= s(0) -> true
	count(x, xts2 .. xts1 .. yts) <= s(s(len(yts))) -> true
	0 == xts = true => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	count(x, xts3 .. xts2 .. xts1 .. yts) <= s(s(s(len(yts)))) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	0 == xts = true => count(0, xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	0 == xts = false => count(0, xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> yts
	^f0($n0 + 1; yts, xts@) -> xts$n0 .. ^f0($n0; yts, xts@)
	^f1(0; yts) -> len(yts)
	^f1($n1 + 1; yts) -> s(^f1($n1; yts))
+++ }
+++ Lemma(s)           = 
	count(x, xts$n .. ^f0($n; yts, xts@)) <= s(^f1($n; yts)) = true

+++ treating clause
	xts3 == xts2 = true => count(s(s(xts3)), xts1 .. nil) <= s(0) = true
+++ inductive narrowing on conjecture
	xts3 == xts2 = true => count(s(s(xts3)), xts1 .. nil) <= s(0) = true
... induction variables of
	xts3 == xts2 = true => count(s(s(xts3)), xts1 .. nil) <= s(0) = true
... are:
	xts2:nat
	xts3:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	xts3 == xts2 = true => count(s(s(xts3)), xts1 .. nil) <= s(0) = true
... with variable xts2
+++ creating new conjecture
	xts2 == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) = true
+++ creating new conjecture
	xts3 == s(xts2) = true => count(s(s(xts3)), xts1 .. nil) <= s(0) = true
+++ inductive narrowing succeeded
--- clause
	xts3 == xts2 = true => count(s(s(xts3)), xts1 .. nil) <= s(0) = true
... oriented to rule
	xts2 == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
+++ added new clause(s)
	xts2 == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) = true
	xts3 == s(xts2) = true => count(s(s(xts3)), xts1 .. nil) <= s(0) = true
... to conjectures

+++ Status of the Inference System
--- Conjectures:
	count(s(s(xts2)), xts1 .. nil) <= s(s(0)) = true
	count(s(0), xts .. nil) <= s(s(0)) = true
	xts3 == xts2 = false => count(s(s(xts3)), xts1 .. nil) <= s(s(0)) = true
	xts3 == 0 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts4 == s(xts3) = true => count(s(xts4), xts2 .. xts1 .. nil) <= s(s(0)) = true
	count(0, xts .. nil) <= s(0) = true
	count(0, xts .. nil) <= s(s(0)) = true
	s(xts3) == xts2 = true => count(s(xts3), xts1 .. nil) <= s(s(0)) = true
	s(xts3) == xts2 = false => count(s(xts3), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == 0 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts4 == s(xts3) = false => count(s(xts4), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	count(0, xts .. nil) <= s(s(s(0))) = true
	xts2 == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) = true
	xts3 == s(xts2) = true => count(s(s(xts3)), xts1 .. nil) <= s(0) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	count(x, xs) <= len(xs) -> true
	count(x, xts .. yts) <= s(len(yts)) -> true
	0 == xts = true => count(0, xts .. nil) <= s(0) -> true
	count(x, xts2 .. xts1 .. yts) <= s(s(len(yts))) -> true
	0 == xts = true => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	count(x, xts3 .. xts2 .. xts1 .. yts) <= s(s(s(len(yts)))) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	0 == xts = true => count(0, xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	0 == xts = false => count(0, xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> yts
	^f0($n0 + 1; yts, xts@) -> xts$n0 .. ^f0($n0; yts, xts@)
	^f1(0; yts) -> len(yts)
	^f1($n1 + 1; yts) -> s(^f1($n1; yts))
+++ }
+++ Lemma(s)           = 
	count(x, xts$n .. ^f0($n; yts, xts@)) <= s(^f1($n; yts)) = true

+++ treating clause
	count(s(s(xts2)), xts1 .. nil) <= s(s(0)) = true
--- no new clauses created
+++ attempting case rewriting
--- case rewriting generated new conjectures
	s(s(xts2)) == xts1 = true => s(0) <= s(s(0)) = true
	s(s(xts2)) == xts1 = false => 0 <= s(s(0)) = true
+++ added new clause(s)
	s(s(xts2)) == xts1 = true => s(0) <= s(s(0)) = true
	s(s(xts2)) == xts1 = false => 0 <= s(s(0)) = true
... to conjectures
--- clause
	s(s(xts2)) == xts1 = true => s(0) <= s(s(0)) = true
... reduced to tautology
	s(s(xts2)) == xts1 = true => true = true
--- clause
	s(s(xts2)) == xts1 = false => 0 <= s(s(0)) = true
... reduced to tautology
	s(s(xts2)) == xts1 = false => true = true

+++ Status of the Inference System
--- Conjectures:
	count(s(0), xts .. nil) <= s(s(0)) = true
	xts3 == xts2 = false => count(s(s(xts3)), xts1 .. nil) <= s(s(0)) = true
	xts3 == 0 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts4 == s(xts3) = true => count(s(xts4), xts2 .. xts1 .. nil) <= s(s(0)) = true
	count(0, xts .. nil) <= s(0) = true
	count(0, xts .. nil) <= s(s(0)) = true
	s(xts3) == xts2 = true => count(s(xts3), xts1 .. nil) <= s(s(0)) = true
	s(xts3) == xts2 = false => count(s(xts3), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == 0 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts4 == s(xts3) = false => count(s(xts4), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	count(0, xts .. nil) <= s(s(s(0))) = true
	xts2 == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) = true
	xts3 == s(xts2) = true => count(s(s(xts3)), xts1 .. nil) <= s(0) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	count(x, xs) <= len(xs) -> true
	count(x, xts .. yts) <= s(len(yts)) -> true
	0 == xts = true => count(0, xts .. nil) <= s(0) -> true
	count(x, xts2 .. xts1 .. yts) <= s(s(len(yts))) -> true
	0 == xts = true => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	count(x, xts3 .. xts2 .. xts1 .. yts) <= s(s(s(len(yts)))) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	0 == xts = true => count(0, xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	0 == xts = false => count(0, xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> yts
	^f0($n0 + 1; yts, xts@) -> xts$n0 .. ^f0($n0; yts, xts@)
	^f1(0; yts) -> len(yts)
	^f1($n1 + 1; yts) -> s(^f1($n1; yts))
+++ }
+++ Lemma(s)           = 
	count(x, xts$n .. ^f0($n; yts, xts@)) <= s(^f1($n; yts)) = true

+++ treating clause
	count(s(0), xts .. nil) <= s(s(0)) = true
--- no new clauses created
+++ attempting case rewriting
--- case rewriting generated new conjectures
	s(0) == xts = true => s(0) <= s(s(0)) = true
	s(0) == xts = false => 0 <= s(s(0)) = true
+++ added new clause(s)
	s(0) == xts = true => s(0) <= s(s(0)) = true
	s(0) == xts = false => 0 <= s(s(0)) = true
... to conjectures
--- clause
	s(0) == xts = true => s(0) <= s(s(0)) = true
... reduced to tautology
	s(0) == xts = true => true = true
--- clause
	s(0) == xts = false => 0 <= s(s(0)) = true
... reduced to tautology
	s(0) == xts = false => true = true

+++ Status of the Inference System
--- Conjectures:
	xts3 == xts2 = false => count(s(s(xts3)), xts1 .. nil) <= s(s(0)) = true
	xts3 == 0 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts4 == s(xts3) = true => count(s(xts4), xts2 .. xts1 .. nil) <= s(s(0)) = true
	count(0, xts .. nil) <= s(0) = true
	count(0, xts .. nil) <= s(s(0)) = true
	s(xts3) == xts2 = true => count(s(xts3), xts1 .. nil) <= s(s(0)) = true
	s(xts3) == xts2 = false => count(s(xts3), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == 0 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts4 == s(xts3) = false => count(s(xts4), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	count(0, xts .. nil) <= s(s(s(0))) = true
	xts2 == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) = true
	xts3 == s(xts2) = true => count(s(s(xts3)), xts1 .. nil) <= s(0) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	count(x, xs) <= len(xs) -> true
	count(x, xts .. yts) <= s(len(yts)) -> true
	0 == xts = true => count(0, xts .. nil) <= s(0) -> true
	count(x, xts2 .. xts1 .. yts) <= s(s(len(yts))) -> true
	0 == xts = true => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	count(x, xts3 .. xts2 .. xts1 .. yts) <= s(s(s(len(yts)))) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	0 == xts = true => count(0, xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	0 == xts = false => count(0, xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> yts
	^f0($n0 + 1; yts, xts@) -> xts$n0 .. ^f0($n0; yts, xts@)
	^f1(0; yts) -> len(yts)
	^f1($n1 + 1; yts) -> s(^f1($n1; yts))
+++ }
+++ Lemma(s)           = 
	count(x, xts$n .. ^f0($n; yts, xts@)) <= s(^f1($n; yts)) = true

+++ treating clause
	xts3 == xts2 = false => count(s(s(xts3)), xts1 .. nil) <= s(s(0)) = true
+++ inductive narrowing on conjecture
	xts3 == xts2 = false => count(s(s(xts3)), xts1 .. nil) <= s(s(0)) = true
... induction variables of
	xts3 == xts2 = false => count(s(s(xts3)), xts1 .. nil) <= s(s(0)) = true
... are:
	xts2:nat
	xts3:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	xts3 == xts2 = false => count(s(s(xts3)), xts1 .. nil) <= s(s(0)) = true
... with variable xts2
+++ creating new conjecture
	xts2 == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) = true
+++ creating new conjecture
	xts3 == s(xts2) = false => count(s(s(xts3)), xts1 .. nil) <= s(s(0)) = true
+++ inductive narrowing succeeded
--- clause
	xts3 == xts2 = false => count(s(s(xts3)), xts1 .. nil) <= s(s(0)) = true
... oriented to rule
	xts2 == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
+++ added new clause(s)
	xts2 == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) = true
	xts3 == s(xts2) = false => count(s(s(xts3)), xts1 .. nil) <= s(s(0)) = true
... to conjectures

+++ Status of the Inference System
--- Conjectures:
	xts3 == 0 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts4 == s(xts3) = true => count(s(xts4), xts2 .. xts1 .. nil) <= s(s(0)) = true
	count(0, xts .. nil) <= s(0) = true
	count(0, xts .. nil) <= s(s(0)) = true
	s(xts3) == xts2 = true => count(s(xts3), xts1 .. nil) <= s(s(0)) = true
	s(xts3) == xts2 = false => count(s(xts3), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == 0 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts4 == s(xts3) = false => count(s(xts4), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	count(0, xts .. nil) <= s(s(s(0))) = true
	xts2 == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) = true
	xts3 == s(xts2) = true => count(s(s(xts3)), xts1 .. nil) <= s(0) = true
	xts2 == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) = true
	xts3 == s(xts2) = false => count(s(s(xts3)), xts1 .. nil) <= s(s(0)) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	count(x, xs) <= len(xs) -> true
	count(x, xts .. yts) <= s(len(yts)) -> true
	0 == xts = true => count(0, xts .. nil) <= s(0) -> true
	count(x, xts2 .. xts1 .. yts) <= s(s(len(yts))) -> true
	0 == xts = true => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	count(x, xts3 .. xts2 .. xts1 .. yts) <= s(s(s(len(yts)))) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	0 == xts = true => count(0, xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	0 == xts = false => count(0, xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> yts
	^f0($n0 + 1; yts, xts@) -> xts$n0 .. ^f0($n0; yts, xts@)
	^f1(0; yts) -> len(yts)
	^f1($n1 + 1; yts) -> s(^f1($n1; yts))
+++ }
+++ Lemma(s)           = 
	count(x, xts$n .. ^f0($n; yts, xts@)) <= s(^f1($n; yts)) = true

+++ treating clause
	xts3 == 0 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) = true
+++ inductive narrowing on conjecture
	xts3 == 0 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) = true
... induction variables of
	xts3 == 0 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) = true
... are:
	xts3:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	xts3 == 0 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) = true
... with variable xts3
+++ creating new conjecture
	0 == 0 = true => count(s(0), xts2 .. xts1 .. nil) <= s(s(0)) = true
+++ creating new conjecture
	s(xts3) == 0 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) = true
--- clause
	0 == 0 = true => count(s(0), xts2 .. xts1 .. nil) <= s(s(0)) = true
... reduced in 1 step to
	count(s(0), xts2 .. xts1 .. nil) <= s(s(0)) = true
--- clause
	s(xts3) == 0 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) = true
... reduced in 1 step to
	false = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) = true
--- clause
	false = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) = true
... contains a ground negative condition
	false = true
... and is therefore discarded (false => t is always true)
+++ inductive narrowing succeeded
--- clause
	xts3 == 0 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) = true
... oriented to rule
	xts == 0 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
+++ added new clause(s)
	count(s(0), xts2 .. xts1 .. nil) <= s(s(0)) = true
... to conjectures

+++ Status of the Inference System
--- Conjectures:
	xts4 == s(xts3) = true => count(s(xts4), xts2 .. xts1 .. nil) <= s(s(0)) = true
	count(0, xts .. nil) <= s(0) = true
	count(0, xts .. nil) <= s(s(0)) = true
	s(xts3) == xts2 = true => count(s(xts3), xts1 .. nil) <= s(s(0)) = true
	s(xts3) == xts2 = false => count(s(xts3), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == 0 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts4 == s(xts3) = false => count(s(xts4), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	count(0, xts .. nil) <= s(s(s(0))) = true
	xts2 == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) = true
	xts3 == s(xts2) = true => count(s(s(xts3)), xts1 .. nil) <= s(0) = true
	xts2 == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) = true
	xts3 == s(xts2) = false => count(s(s(xts3)), xts1 .. nil) <= s(s(0)) = true
	count(s(0), xts2 .. xts1 .. nil) <= s(s(0)) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	count(x, xs) <= len(xs) -> true
	count(x, xts .. yts) <= s(len(yts)) -> true
	0 == xts = true => count(0, xts .. nil) <= s(0) -> true
	count(x, xts2 .. xts1 .. yts) <= s(s(len(yts))) -> true
	0 == xts = true => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	count(x, xts3 .. xts2 .. xts1 .. yts) <= s(s(s(len(yts)))) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	0 == xts = true => count(0, xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	0 == xts = false => count(0, xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> yts
	^f0($n0 + 1; yts, xts@) -> xts$n0 .. ^f0($n0; yts, xts@)
	^f1(0; yts) -> len(yts)
	^f1($n1 + 1; yts) -> s(^f1($n1; yts))
+++ }
+++ Lemma(s)           = 
	count(x, xts$n .. ^f0($n; yts, xts@)) <= s(^f1($n; yts)) = true

+++ treating clause
	xts4 == s(xts3) = true => count(s(xts4), xts2 .. xts1 .. nil) <= s(s(0)) = true
+++ inductive narrowing on conjecture
	xts4 == s(xts3) = true => count(s(xts4), xts2 .. xts1 .. nil) <= s(s(0)) = true
... induction variables of
	xts4 == s(xts3) = true => count(s(xts4), xts2 .. xts1 .. nil) <= s(s(0)) = true
... are:
	xts4:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	xts4 == s(xts3) = true => count(s(xts4), xts2 .. xts1 .. nil) <= s(s(0)) = true
... with variable xts4
+++ creating new conjecture
	0 == s(xts3) = true => count(s(0), xts2 .. xts1 .. nil) <= s(s(0)) = true
+++ creating new conjecture
	s(xts4) == s(xts3) = true => count(s(s(xts4)), xts2 .. xts1 .. nil) <= s(s(0)) = true
--- clause
	0 == s(xts3) = true => count(s(0), xts2 .. xts1 .. nil) <= s(s(0)) = true
... reduced in 1 step to
	false = true => count(s(0), xts2 .. xts1 .. nil) <= s(s(0)) = true
--- clause
	false = true => count(s(0), xts2 .. xts1 .. nil) <= s(s(0)) = true
... contains a ground negative condition
	false = true
... and is therefore discarded (false => t is always true)
--- clause
	s(xts4) == s(xts3) = true => count(s(s(xts4)), xts2 .. xts1 .. nil) <= s(s(0)) = true
... reduced in 1 step to
	xts4 == xts3 = true => count(s(s(xts4)), xts2 .. xts1 .. nil) <= s(s(0)) = true
+++ inductive narrowing succeeded
--- clause
	xts4 == s(xts3) = true => count(s(xts4), xts2 .. xts1 .. nil) <= s(s(0)) = true
... oriented to rule
	xts2 == s(xts1) = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
+++ added new clause(s)
	xts4 == xts3 = true => count(s(s(xts4)), xts2 .. xts1 .. nil) <= s(s(0)) = true
... to conjectures

+++ Status of the Inference System
--- Conjectures:
	count(0, xts .. nil) <= s(0) = true
	count(0, xts .. nil) <= s(s(0)) = true
	s(xts3) == xts2 = true => count(s(xts3), xts1 .. nil) <= s(s(0)) = true
	s(xts3) == xts2 = false => count(s(xts3), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == 0 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts4 == s(xts3) = false => count(s(xts4), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	count(0, xts .. nil) <= s(s(s(0))) = true
	xts2 == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) = true
	xts3 == s(xts2) = true => count(s(s(xts3)), xts1 .. nil) <= s(0) = true
	xts2 == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) = true
	xts3 == s(xts2) = false => count(s(s(xts3)), xts1 .. nil) <= s(s(0)) = true
	count(s(0), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts4 == xts3 = true => count(s(s(xts4)), xts2 .. xts1 .. nil) <= s(s(0)) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	count(x, xs) <= len(xs) -> true
	count(x, xts .. yts) <= s(len(yts)) -> true
	0 == xts = true => count(0, xts .. nil) <= s(0) -> true
	count(x, xts2 .. xts1 .. yts) <= s(s(len(yts))) -> true
	0 == xts = true => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	count(x, xts3 .. xts2 .. xts1 .. yts) <= s(s(s(len(yts)))) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	0 == xts = true => count(0, xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	0 == xts = false => count(0, xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> yts
	^f0($n0 + 1; yts, xts@) -> xts$n0 .. ^f0($n0; yts, xts@)
	^f1(0; yts) -> len(yts)
	^f1($n1 + 1; yts) -> s(^f1($n1; yts))
+++ }
+++ Lemma(s)           = 
	count(x, xts$n .. ^f0($n; yts, xts@)) <= s(^f1($n; yts)) = true

+++ treating clause
	count(0, xts .. nil) <= s(0) = true
--- no new clauses created
+++ attempting case rewriting
--- case rewriting generated new conjectures
	0 == xts = true => s(0) <= s(0) = true
	0 == xts = false => 0 <= s(0) = true
+++ added new clause(s)
	0 == xts = true => s(0) <= s(0) = true
	0 == xts = false => 0 <= s(0) = true
... to conjectures
--- clause
	0 == xts = true => s(0) <= s(0) = true
... reduced to tautology
	0 == xts = true => true = true
--- clause
	0 == xts = false => 0 <= s(0) = true
... reduced to tautology
	0 == xts = false => true = true

+++ Status of the Inference System
--- Conjectures:
	count(0, xts .. nil) <= s(s(0)) = true
	s(xts3) == xts2 = true => count(s(xts3), xts1 .. nil) <= s(s(0)) = true
	s(xts3) == xts2 = false => count(s(xts3), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == 0 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts4 == s(xts3) = false => count(s(xts4), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	count(0, xts .. nil) <= s(s(s(0))) = true
	xts2 == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) = true
	xts3 == s(xts2) = true => count(s(s(xts3)), xts1 .. nil) <= s(0) = true
	xts2 == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) = true
	xts3 == s(xts2) = false => count(s(s(xts3)), xts1 .. nil) <= s(s(0)) = true
	count(s(0), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts4 == xts3 = true => count(s(s(xts4)), xts2 .. xts1 .. nil) <= s(s(0)) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	count(x, xs) <= len(xs) -> true
	count(x, xts .. yts) <= s(len(yts)) -> true
	0 == xts = true => count(0, xts .. nil) <= s(0) -> true
	count(x, xts2 .. xts1 .. yts) <= s(s(len(yts))) -> true
	0 == xts = true => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	count(x, xts3 .. xts2 .. xts1 .. yts) <= s(s(s(len(yts)))) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	0 == xts = true => count(0, xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	0 == xts = false => count(0, xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> yts
	^f0($n0 + 1; yts, xts@) -> xts$n0 .. ^f0($n0; yts, xts@)
	^f1(0; yts) -> len(yts)
	^f1($n1 + 1; yts) -> s(^f1($n1; yts))
+++ }
+++ Lemma(s)           = 
	count(x, xts$n .. ^f0($n; yts, xts@)) <= s(^f1($n; yts)) = true

+++ treating clause
	count(0, xts .. nil) <= s(s(0)) = true
--- no new clauses created
+++ attempting case rewriting
--- case rewriting generated new conjectures
	0 == xts = true => s(0) <= s(s(0)) = true
	0 == xts = false => 0 <= s(s(0)) = true
+++ added new clause(s)
	0 == xts = true => s(0) <= s(s(0)) = true
	0 == xts = false => 0 <= s(s(0)) = true
... to conjectures
--- clause
	0 == xts = true => s(0) <= s(s(0)) = true
... reduced to tautology
	0 == xts = true => true = true
--- clause
	0 == xts = false => 0 <= s(s(0)) = true
... reduced to tautology
	0 == xts = false => true = true

+++ Status of the Inference System
--- Conjectures:
	s(xts3) == xts2 = true => count(s(xts3), xts1 .. nil) <= s(s(0)) = true
	s(xts3) == xts2 = false => count(s(xts3), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == 0 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts4 == s(xts3) = false => count(s(xts4), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	count(0, xts .. nil) <= s(s(s(0))) = true
	xts2 == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) = true
	xts3 == s(xts2) = true => count(s(s(xts3)), xts1 .. nil) <= s(0) = true
	xts2 == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) = true
	xts3 == s(xts2) = false => count(s(s(xts3)), xts1 .. nil) <= s(s(0)) = true
	count(s(0), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts4 == xts3 = true => count(s(s(xts4)), xts2 .. xts1 .. nil) <= s(s(0)) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	count(x, xs) <= len(xs) -> true
	count(x, xts .. yts) <= s(len(yts)) -> true
	0 == xts = true => count(0, xts .. nil) <= s(0) -> true
	count(x, xts2 .. xts1 .. yts) <= s(s(len(yts))) -> true
	0 == xts = true => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	count(x, xts3 .. xts2 .. xts1 .. yts) <= s(s(s(len(yts)))) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	0 == xts = true => count(0, xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	0 == xts = false => count(0, xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> yts
	^f0($n0 + 1; yts, xts@) -> xts$n0 .. ^f0($n0; yts, xts@)
	^f1(0; yts) -> len(yts)
	^f1($n1 + 1; yts) -> s(^f1($n1; yts))
+++ }
+++ Lemma(s)           = 
	count(x, xts$n .. ^f0($n; yts, xts@)) <= s(^f1($n; yts)) = true

+++ treating clause
	s(xts3) == xts2 = true => count(s(xts3), xts1 .. nil) <= s(s(0)) = true
+++ inductive narrowing on conjecture
	s(xts3) == xts2 = true => count(s(xts3), xts1 .. nil) <= s(s(0)) = true
... induction variables of
	s(xts3) == xts2 = true => count(s(xts3), xts1 .. nil) <= s(s(0)) = true
... are:
	xts2:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	s(xts3) == xts2 = true => count(s(xts3), xts1 .. nil) <= s(s(0)) = true
... with variable xts2
+++ creating new conjecture
	s(xts2) == 0 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) = true
+++ creating new conjecture
	s(xts3) == s(xts2) = true => count(s(xts3), xts1 .. nil) <= s(s(0)) = true
--- clause
	s(xts2) == 0 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) = true
... reduced in 1 step to
	false = true => count(s(xts2), xts1 .. nil) <= s(s(0)) = true
--- clause
	false = true => count(s(xts2), xts1 .. nil) <= s(s(0)) = true
... contains a ground negative condition
	false = true
... and is therefore discarded (false => t is always true)
--- clause
	s(xts3) == s(xts2) = true => count(s(xts3), xts1 .. nil) <= s(s(0)) = true
... reduced in 1 step to
	xts3 == xts2 = true => count(s(xts3), xts1 .. nil) <= s(s(0)) = true
+++ inductive narrowing succeeded
--- clause
	s(xts3) == xts2 = true => count(s(xts3), xts1 .. nil) <= s(s(0)) = true
... oriented to rule
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
+++ added new clause(s)
	xts3 == xts2 = true => count(s(xts3), xts1 .. nil) <= s(s(0)) = true
... to conjectures

+++ Status of the Inference System
--- Conjectures:
	s(xts3) == xts2 = false => count(s(xts3), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == 0 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts4 == s(xts3) = false => count(s(xts4), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	count(0, xts .. nil) <= s(s(s(0))) = true
	xts2 == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) = true
	xts3 == s(xts2) = true => count(s(s(xts3)), xts1 .. nil) <= s(0) = true
	xts2 == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) = true
	xts3 == s(xts2) = false => count(s(s(xts3)), xts1 .. nil) <= s(s(0)) = true
	count(s(0), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts4 == xts3 = true => count(s(s(xts4)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts3 == xts2 = true => count(s(xts3), xts1 .. nil) <= s(s(0)) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	count(x, xs) <= len(xs) -> true
	count(x, xts .. yts) <= s(len(yts)) -> true
	0 == xts = true => count(0, xts .. nil) <= s(0) -> true
	count(x, xts2 .. xts1 .. yts) <= s(s(len(yts))) -> true
	0 == xts = true => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	count(x, xts3 .. xts2 .. xts1 .. yts) <= s(s(s(len(yts)))) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	0 == xts = true => count(0, xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	0 == xts = false => count(0, xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> yts
	^f0($n0 + 1; yts, xts@) -> xts$n0 .. ^f0($n0; yts, xts@)
	^f1(0; yts) -> len(yts)
	^f1($n1 + 1; yts) -> s(^f1($n1; yts))
+++ }
+++ Lemma(s)           = 
	count(x, xts$n .. ^f0($n; yts, xts@)) <= s(^f1($n; yts)) = true

+++ treating clause
	s(xts3) == xts2 = false => count(s(xts3), xts1 .. nil) <= s(s(s(0))) = true
+++ inductive narrowing on conjecture
	s(xts3) == xts2 = false => count(s(xts3), xts1 .. nil) <= s(s(s(0))) = true
... induction variables of
	s(xts3) == xts2 = false => count(s(xts3), xts1 .. nil) <= s(s(s(0))) = true
... are:
	xts2:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	s(xts3) == xts2 = false => count(s(xts3), xts1 .. nil) <= s(s(s(0))) = true
... with variable xts2
+++ creating new conjecture
	s(xts2) == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) = true
+++ creating new conjecture
	s(xts3) == s(xts2) = false => count(s(xts3), xts1 .. nil) <= s(s(s(0))) = true
--- clause
	s(xts2) == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) = true
... reduced in 1 step to
	count(s(xts2), xts1 .. nil) <= s(s(s(0))) = true
--- clause
	s(xts3) == s(xts2) = false => count(s(xts3), xts1 .. nil) <= s(s(s(0))) = true
... reduced in 1 step to
	xts3 == xts2 = false => count(s(xts3), xts1 .. nil) <= s(s(s(0))) = true
+++ inductive narrowing succeeded
--- clause
	s(xts3) == xts2 = false => count(s(xts3), xts1 .. nil) <= s(s(s(0))) = true
... oriented to rule
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
+++ added new clause(s)
	count(s(xts2), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == xts2 = false => count(s(xts3), xts1 .. nil) <= s(s(s(0))) = true
... to conjectures

+++ Status of the Inference System
--- Conjectures:
	xts3 == 0 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts4 == s(xts3) = false => count(s(xts4), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	count(0, xts .. nil) <= s(s(s(0))) = true
	xts2 == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) = true
	xts3 == s(xts2) = true => count(s(s(xts3)), xts1 .. nil) <= s(0) = true
	xts2 == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) = true
	xts3 == s(xts2) = false => count(s(s(xts3)), xts1 .. nil) <= s(s(0)) = true
	count(s(0), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts4 == xts3 = true => count(s(s(xts4)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts3 == xts2 = true => count(s(xts3), xts1 .. nil) <= s(s(0)) = true
	count(s(xts2), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == xts2 = false => count(s(xts3), xts1 .. nil) <= s(s(s(0))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	count(x, xs) <= len(xs) -> true
	count(x, xts .. yts) <= s(len(yts)) -> true
	0 == xts = true => count(0, xts .. nil) <= s(0) -> true
	count(x, xts2 .. xts1 .. yts) <= s(s(len(yts))) -> true
	0 == xts = true => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	count(x, xts3 .. xts2 .. xts1 .. yts) <= s(s(s(len(yts)))) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	0 == xts = true => count(0, xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	0 == xts = false => count(0, xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> yts
	^f0($n0 + 1; yts, xts@) -> xts$n0 .. ^f0($n0; yts, xts@)
	^f1(0; yts) -> len(yts)
	^f1($n1 + 1; yts) -> s(^f1($n1; yts))
+++ }
+++ Lemma(s)           = 
	count(x, xts$n .. ^f0($n; yts, xts@)) <= s(^f1($n; yts)) = true

+++ treating clause
	xts3 == 0 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
+++ inductive narrowing on conjecture
	xts3 == 0 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
... induction variables of
	xts3 == 0 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
... are:
	xts3:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	xts3 == 0 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
... with variable xts3
+++ creating new conjecture
	0 == 0 = false => count(s(0), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
+++ creating new conjecture
	s(xts3) == 0 = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
--- clause
	0 == 0 = false => count(s(0), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
... reduced in 1 step to
	true = false => count(s(0), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
--- clause
	true = false => count(s(0), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
... contains a ground negative condition
	true = false
... and is therefore discarded (false => t is always true)
--- clause
	s(xts3) == 0 = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
... reduced in 1 step to
	count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
+++ inductive narrowing succeeded
--- clause
	xts3 == 0 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
... oriented to rule
	xts == 0 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
+++ added new clause(s)
	count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
... to conjectures

+++ Status of the Inference System
--- Conjectures:
	xts4 == s(xts3) = false => count(s(xts4), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	count(0, xts .. nil) <= s(s(s(0))) = true
	xts2 == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) = true
	xts3 == s(xts2) = true => count(s(s(xts3)), xts1 .. nil) <= s(0) = true
	xts2 == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) = true
	xts3 == s(xts2) = false => count(s(s(xts3)), xts1 .. nil) <= s(s(0)) = true
	count(s(0), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts4 == xts3 = true => count(s(s(xts4)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts3 == xts2 = true => count(s(xts3), xts1 .. nil) <= s(s(0)) = true
	count(s(xts2), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == xts2 = false => count(s(xts3), xts1 .. nil) <= s(s(s(0))) = true
	count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	count(x, xs) <= len(xs) -> true
	count(x, xts .. yts) <= s(len(yts)) -> true
	0 == xts = true => count(0, xts .. nil) <= s(0) -> true
	count(x, xts2 .. xts1 .. yts) <= s(s(len(yts))) -> true
	0 == xts = true => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	count(x, xts3 .. xts2 .. xts1 .. yts) <= s(s(s(len(yts)))) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	0 == xts = true => count(0, xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	0 == xts = false => count(0, xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> yts
	^f0($n0 + 1; yts, xts@) -> xts$n0 .. ^f0($n0; yts, xts@)
	^f1(0; yts) -> len(yts)
	^f1($n1 + 1; yts) -> s(^f1($n1; yts))
+++ }
+++ Lemma(s)           = 
	count(x, xts$n .. ^f0($n; yts, xts@)) <= s(^f1($n; yts)) = true

+++ treating clause
	xts4 == s(xts3) = false => count(s(xts4), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
+++ inductive narrowing on conjecture
	xts4 == s(xts3) = false => count(s(xts4), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
... induction variables of
	xts4 == s(xts3) = false => count(s(xts4), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
... are:
	xts4:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	xts4 == s(xts3) = false => count(s(xts4), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
... with variable xts4
+++ creating new conjecture
	0 == s(xts3) = false => count(s(0), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
+++ creating new conjecture
	s(xts4) == s(xts3) = false => count(s(s(xts4)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
--- clause
	0 == s(xts3) = false => count(s(0), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
... reduced in 1 step to
	count(s(0), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
--- clause
	s(xts4) == s(xts3) = false => count(s(s(xts4)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
... reduced in 1 step to
	xts4 == xts3 = false => count(s(s(xts4)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
+++ inductive narrowing succeeded
--- clause
	xts4 == s(xts3) = false => count(s(xts4), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
... oriented to rule
	xts2 == s(xts1) = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
+++ added new clause(s)
	count(s(0), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts4 == xts3 = false => count(s(s(xts4)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
... to conjectures

+++ Status of the Inference System
--- Conjectures:
	count(0, xts .. nil) <= s(s(s(0))) = true
	xts2 == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) = true
	xts3 == s(xts2) = true => count(s(s(xts3)), xts1 .. nil) <= s(0) = true
	xts2 == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) = true
	xts3 == s(xts2) = false => count(s(s(xts3)), xts1 .. nil) <= s(s(0)) = true
	count(s(0), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts4 == xts3 = true => count(s(s(xts4)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts3 == xts2 = true => count(s(xts3), xts1 .. nil) <= s(s(0)) = true
	count(s(xts2), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == xts2 = false => count(s(xts3), xts1 .. nil) <= s(s(s(0))) = true
	count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	count(s(0), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts4 == xts3 = false => count(s(s(xts4)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	count(x, xs) <= len(xs) -> true
	count(x, xts .. yts) <= s(len(yts)) -> true
	0 == xts = true => count(0, xts .. nil) <= s(0) -> true
	count(x, xts2 .. xts1 .. yts) <= s(s(len(yts))) -> true
	0 == xts = true => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	count(x, xts3 .. xts2 .. xts1 .. yts) <= s(s(s(len(yts)))) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	0 == xts = true => count(0, xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	0 == xts = false => count(0, xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> yts
	^f0($n0 + 1; yts, xts@) -> xts$n0 .. ^f0($n0; yts, xts@)
	^f1(0; yts) -> len(yts)
	^f1($n1 + 1; yts) -> s(^f1($n1; yts))
+++ }
+++ Lemma(s)           = 
	count(x, xts$n .. ^f0($n; yts, xts@)) <= s(^f1($n; yts)) = true

+++ treating clause
	count(0, xts .. nil) <= s(s(s(0))) = true
--- no new clauses created
+++ attempting case rewriting
--- case rewriting generated new conjectures
	0 == xts = true => s(0) <= s(s(s(0))) = true
	0 == xts = false => 0 <= s(s(s(0))) = true
+++ added new clause(s)
	0 == xts = true => s(0) <= s(s(s(0))) = true
	0 == xts = false => 0 <= s(s(s(0))) = true
... to conjectures
--- clause
	0 == xts = true => s(0) <= s(s(s(0))) = true
... reduced to tautology
	0 == xts = true => true = true
--- clause
	0 == xts = false => 0 <= s(s(s(0))) = true
... reduced to tautology
	0 == xts = false => true = true

+++ Status of the Inference System
--- Conjectures:
	xts2 == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) = true
	xts3 == s(xts2) = true => count(s(s(xts3)), xts1 .. nil) <= s(0) = true
	xts2 == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) = true
	xts3 == s(xts2) = false => count(s(s(xts3)), xts1 .. nil) <= s(s(0)) = true
	count(s(0), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts4 == xts3 = true => count(s(s(xts4)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts3 == xts2 = true => count(s(xts3), xts1 .. nil) <= s(s(0)) = true
	count(s(xts2), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == xts2 = false => count(s(xts3), xts1 .. nil) <= s(s(s(0))) = true
	count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	count(s(0), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts4 == xts3 = false => count(s(s(xts4)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	count(x, xs) <= len(xs) -> true
	count(x, xts .. yts) <= s(len(yts)) -> true
	0 == xts = true => count(0, xts .. nil) <= s(0) -> true
	count(x, xts2 .. xts1 .. yts) <= s(s(len(yts))) -> true
	0 == xts = true => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	count(x, xts3 .. xts2 .. xts1 .. yts) <= s(s(s(len(yts)))) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	0 == xts = true => count(0, xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	0 == xts = false => count(0, xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> yts
	^f0($n0 + 1; yts, xts@) -> xts$n0 .. ^f0($n0; yts, xts@)
	^f1(0; yts) -> len(yts)
	^f1($n1 + 1; yts) -> s(^f1($n1; yts))
+++ }
+++ Lemma(s)           = 
	count(x, xts$n .. ^f0($n; yts, xts@)) <= s(^f1($n; yts)) = true

+++ treating clause
	xts2 == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) = true
+++ inductive narrowing on conjecture
	xts2 == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) = true
... induction variables of
	xts2 == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) = true
... are:
	xts2:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	xts2 == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) = true
... with variable xts2
+++ creating new conjecture
	0 == 0 = true => count(s(s(0)), xts .. nil) <= s(0) = true
+++ creating new conjecture
	s(xts2) == 0 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) = true
--- clause
	0 == 0 = true => count(s(s(0)), xts .. nil) <= s(0) = true
... reduced in 1 step to
	count(s(s(0)), xts .. nil) <= s(0) = true
--- clause
	s(xts2) == 0 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) = true
... reduced in 1 step to
	false = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) = true
--- clause
	false = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) = true
... contains a ground negative condition
	false = true
... and is therefore discarded (false => t is always true)
+++ inductive narrowing succeeded
--- clause
	xts2 == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) = true
... oriented to rule
	xts == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
+++ added new clause(s)
	count(s(s(0)), xts .. nil) <= s(0) = true
... to conjectures

+++ Status of the Inference System
--- Conjectures:
	xts3 == s(xts2) = true => count(s(s(xts3)), xts1 .. nil) <= s(0) = true
	xts2 == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) = true
	xts3 == s(xts2) = false => count(s(s(xts3)), xts1 .. nil) <= s(s(0)) = true
	count(s(0), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts4 == xts3 = true => count(s(s(xts4)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts3 == xts2 = true => count(s(xts3), xts1 .. nil) <= s(s(0)) = true
	count(s(xts2), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == xts2 = false => count(s(xts3), xts1 .. nil) <= s(s(s(0))) = true
	count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	count(s(0), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts4 == xts3 = false => count(s(s(xts4)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	count(s(s(0)), xts .. nil) <= s(0) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	count(x, xs) <= len(xs) -> true
	count(x, xts .. yts) <= s(len(yts)) -> true
	0 == xts = true => count(0, xts .. nil) <= s(0) -> true
	count(x, xts2 .. xts1 .. yts) <= s(s(len(yts))) -> true
	0 == xts = true => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	count(x, xts3 .. xts2 .. xts1 .. yts) <= s(s(s(len(yts)))) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	0 == xts = true => count(0, xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	0 == xts = false => count(0, xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> yts
	^f0($n0 + 1; yts, xts@) -> xts$n0 .. ^f0($n0; yts, xts@)
	^f1(0; yts) -> len(yts)
	^f1($n1 + 1; yts) -> s(^f1($n1; yts))
+++ }
+++ Lemma(s)           = 
	count(x, xts$n .. ^f0($n; yts, xts@)) <= s(^f1($n; yts)) = true

+++ treating clause
	xts3 == s(xts2) = true => count(s(s(xts3)), xts1 .. nil) <= s(0) = true
+++ inductive narrowing on conjecture
	xts3 == s(xts2) = true => count(s(s(xts3)), xts1 .. nil) <= s(0) = true
... induction variables of
	xts3 == s(xts2) = true => count(s(s(xts3)), xts1 .. nil) <= s(0) = true
... are:
	xts3:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	xts3 == s(xts2) = true => count(s(s(xts3)), xts1 .. nil) <= s(0) = true
... with variable xts3
+++ creating new conjecture
	0 == s(xts2) = true => count(s(s(0)), xts1 .. nil) <= s(0) = true
+++ creating new conjecture
	s(xts3) == s(xts2) = true => count(s(s(s(xts3))), xts1 .. nil) <= s(0) = true
--- clause
	0 == s(xts2) = true => count(s(s(0)), xts1 .. nil) <= s(0) = true
... reduced in 1 step to
	false = true => count(s(s(0)), xts .. nil) <= s(0) = true
--- clause
	false = true => count(s(s(0)), xts .. nil) <= s(0) = true
... contains a ground negative condition
	false = true
... and is therefore discarded (false => t is always true)
--- clause
	s(xts3) == s(xts2) = true => count(s(s(s(xts3))), xts1 .. nil) <= s(0) = true
... reduced in 1 step to
	xts3 == xts2 = true => count(s(s(s(xts3))), xts1 .. nil) <= s(0) = true
+++ inductive narrowing succeeded
--- clause
	xts3 == s(xts2) = true => count(s(s(xts3)), xts1 .. nil) <= s(0) = true
... oriented to rule
	xts2 == s(xts1) = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
+++ added new clause(s)
	xts3 == xts2 = true => count(s(s(s(xts3))), xts1 .. nil) <= s(0) = true
... to conjectures

+++ Status of the Inference System
--- Conjectures:
	xts2 == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) = true
	xts3 == s(xts2) = false => count(s(s(xts3)), xts1 .. nil) <= s(s(0)) = true
	count(s(0), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts4 == xts3 = true => count(s(s(xts4)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts3 == xts2 = true => count(s(xts3), xts1 .. nil) <= s(s(0)) = true
	count(s(xts2), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == xts2 = false => count(s(xts3), xts1 .. nil) <= s(s(s(0))) = true
	count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	count(s(0), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts4 == xts3 = false => count(s(s(xts4)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	count(s(s(0)), xts .. nil) <= s(0) = true
	xts3 == xts2 = true => count(s(s(s(xts3))), xts1 .. nil) <= s(0) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	count(x, xs) <= len(xs) -> true
	count(x, xts .. yts) <= s(len(yts)) -> true
	0 == xts = true => count(0, xts .. nil) <= s(0) -> true
	count(x, xts2 .. xts1 .. yts) <= s(s(len(yts))) -> true
	0 == xts = true => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	count(x, xts3 .. xts2 .. xts1 .. yts) <= s(s(s(len(yts)))) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	0 == xts = true => count(0, xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	0 == xts = false => count(0, xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> yts
	^f0($n0 + 1; yts, xts@) -> xts$n0 .. ^f0($n0; yts, xts@)
	^f1(0; yts) -> len(yts)
	^f1($n1 + 1; yts) -> s(^f1($n1; yts))
+++ }
+++ Lemma(s)           = 
	count(x, xts$n .. ^f0($n; yts, xts@)) <= s(^f1($n; yts)) = true

+++ treating clause
	xts2 == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) = true
+++ inductive narrowing on conjecture
	xts2 == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) = true
... induction variables of
	xts2 == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) = true
... are:
	xts2:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	xts2 == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) = true
... with variable xts2
+++ creating new conjecture
	0 == 0 = false => count(s(s(0)), xts .. nil) <= s(s(0)) = true
+++ creating new conjecture
	s(xts2) == 0 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) = true
--- clause
	0 == 0 = false => count(s(s(0)), xts .. nil) <= s(s(0)) = true
... reduced in 1 step to
	true = false => count(s(s(0)), xts .. nil) <= s(s(0)) = true
--- clause
	true = false => count(s(s(0)), xts .. nil) <= s(s(0)) = true
... contains a ground negative condition
	true = false
... and is therefore discarded (false => t is always true)
--- clause
	s(xts2) == 0 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) = true
... reduced in 1 step to
	count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) = true
+++ inductive narrowing succeeded
--- clause
	xts2 == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) = true
... oriented to rule
	xts == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
+++ added new clause(s)
	count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) = true
... to conjectures

+++ Status of the Inference System
--- Conjectures:
	xts3 == s(xts2) = false => count(s(s(xts3)), xts1 .. nil) <= s(s(0)) = true
	count(s(0), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts4 == xts3 = true => count(s(s(xts4)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts3 == xts2 = true => count(s(xts3), xts1 .. nil) <= s(s(0)) = true
	count(s(xts2), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == xts2 = false => count(s(xts3), xts1 .. nil) <= s(s(s(0))) = true
	count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	count(s(0), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts4 == xts3 = false => count(s(s(xts4)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	count(s(s(0)), xts .. nil) <= s(0) = true
	xts3 == xts2 = true => count(s(s(s(xts3))), xts1 .. nil) <= s(0) = true
	count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	count(x, xs) <= len(xs) -> true
	count(x, xts .. yts) <= s(len(yts)) -> true
	0 == xts = true => count(0, xts .. nil) <= s(0) -> true
	count(x, xts2 .. xts1 .. yts) <= s(s(len(yts))) -> true
	0 == xts = true => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	count(x, xts3 .. xts2 .. xts1 .. yts) <= s(s(s(len(yts)))) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	0 == xts = true => count(0, xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	0 == xts = false => count(0, xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> yts
	^f0($n0 + 1; yts, xts@) -> xts$n0 .. ^f0($n0; yts, xts@)
	^f1(0; yts) -> len(yts)
	^f1($n1 + 1; yts) -> s(^f1($n1; yts))
+++ }
+++ Lemma(s)           = 
	count(x, xts$n .. ^f0($n; yts, xts@)) <= s(^f1($n; yts)) = true

+++ treating clause
	xts3 == s(xts2) = false => count(s(s(xts3)), xts1 .. nil) <= s(s(0)) = true
+++ inductive narrowing on conjecture
	xts3 == s(xts2) = false => count(s(s(xts3)), xts1 .. nil) <= s(s(0)) = true
... induction variables of
	xts3 == s(xts2) = false => count(s(s(xts3)), xts1 .. nil) <= s(s(0)) = true
... are:
	xts3:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	xts3 == s(xts2) = false => count(s(s(xts3)), xts1 .. nil) <= s(s(0)) = true
... with variable xts3
+++ creating new conjecture
	0 == s(xts2) = false => count(s(s(0)), xts1 .. nil) <= s(s(0)) = true
+++ creating new conjecture
	s(xts3) == s(xts2) = false => count(s(s(s(xts3))), xts1 .. nil) <= s(s(0)) = true
--- clause
	0 == s(xts2) = false => count(s(s(0)), xts1 .. nil) <= s(s(0)) = true
... reduced in 1 step to
	count(s(s(0)), xts .. nil) <= s(s(0)) = true
--- clause
	s(xts3) == s(xts2) = false => count(s(s(s(xts3))), xts1 .. nil) <= s(s(0)) = true
... reduced in 1 step to
	xts3 == xts2 = false => count(s(s(s(xts3))), xts1 .. nil) <= s(s(0)) = true
+++ inductive narrowing succeeded
--- clause
	xts3 == s(xts2) = false => count(s(s(xts3)), xts1 .. nil) <= s(s(0)) = true
... oriented to rule
	xts2 == s(xts1) = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
+++ added new clause(s)
	count(s(s(0)), xts .. nil) <= s(s(0)) = true
	xts3 == xts2 = false => count(s(s(s(xts3))), xts1 .. nil) <= s(s(0)) = true
... to conjectures

+++ Status of the Inference System
--- Conjectures:
	count(s(0), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts4 == xts3 = true => count(s(s(xts4)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts3 == xts2 = true => count(s(xts3), xts1 .. nil) <= s(s(0)) = true
	count(s(xts2), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == xts2 = false => count(s(xts3), xts1 .. nil) <= s(s(s(0))) = true
	count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	count(s(0), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts4 == xts3 = false => count(s(s(xts4)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	count(s(s(0)), xts .. nil) <= s(0) = true
	xts3 == xts2 = true => count(s(s(s(xts3))), xts1 .. nil) <= s(0) = true
	count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) = true
	count(s(s(0)), xts .. nil) <= s(s(0)) = true
	xts3 == xts2 = false => count(s(s(s(xts3))), xts1 .. nil) <= s(s(0)) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	count(x, xs) <= len(xs) -> true
	count(x, xts .. yts) <= s(len(yts)) -> true
	0 == xts = true => count(0, xts .. nil) <= s(0) -> true
	count(x, xts2 .. xts1 .. yts) <= s(s(len(yts))) -> true
	0 == xts = true => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	count(x, xts3 .. xts2 .. xts1 .. yts) <= s(s(s(len(yts)))) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	0 == xts = true => count(0, xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	0 == xts = false => count(0, xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> yts
	^f0($n0 + 1; yts, xts@) -> xts$n0 .. ^f0($n0; yts, xts@)
	^f1(0; yts) -> len(yts)
	^f1($n1 + 1; yts) -> s(^f1($n1; yts))
+++ }
+++ Lemma(s)           = 
	count(x, xts$n .. ^f0($n; yts, xts@)) <= s(^f1($n; yts)) = true

+++ treating clause
	count(s(0), xts2 .. xts1 .. nil) <= s(s(0)) = true
--- no new clauses created
+++ attempting case rewriting
--- case rewriting generated new conjectures
	s(0) == xts2 = true => s(count(s(0), xts1 .. nil)) <= s(s(0)) = true
	s(0) == xts2 = false => count(s(0), xts1 .. nil) <= s(s(0)) = true
+++ added new clause(s)
	s(0) == xts2 = true => s(count(s(0), xts1 .. nil)) <= s(s(0)) = true
	s(0) == xts2 = false => count(s(0), xts1 .. nil) <= s(s(0)) = true
... to conjectures
--- clause
	s(0) == xts2 = true => s(count(s(0), xts1 .. nil)) <= s(s(0)) = true
... reduced in 1 step to
	s(0) == xts2 = true => count(s(0), xts1 .. nil) <= s(0) = true

+++ Status of the Inference System
--- Conjectures:
	xts4 == xts3 = true => count(s(s(xts4)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts3 == xts2 = true => count(s(xts3), xts1 .. nil) <= s(s(0)) = true
	count(s(xts2), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == xts2 = false => count(s(xts3), xts1 .. nil) <= s(s(s(0))) = true
	count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	count(s(0), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts4 == xts3 = false => count(s(s(xts4)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	count(s(s(0)), xts .. nil) <= s(0) = true
	xts3 == xts2 = true => count(s(s(s(xts3))), xts1 .. nil) <= s(0) = true
	count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) = true
	count(s(s(0)), xts .. nil) <= s(s(0)) = true
	xts3 == xts2 = false => count(s(s(s(xts3))), xts1 .. nil) <= s(s(0)) = true
	s(0) == xts2 = true => count(s(0), xts1 .. nil) <= s(0) = true
	s(0) == xts2 = false => count(s(0), xts1 .. nil) <= s(s(0)) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	count(x, xs) <= len(xs) -> true
	count(x, xts .. yts) <= s(len(yts)) -> true
	0 == xts = true => count(0, xts .. nil) <= s(0) -> true
	count(x, xts2 .. xts1 .. yts) <= s(s(len(yts))) -> true
	0 == xts = true => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	count(x, xts3 .. xts2 .. xts1 .. yts) <= s(s(s(len(yts)))) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	0 == xts = true => count(0, xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	0 == xts = false => count(0, xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> yts
	^f0($n0 + 1; yts, xts@) -> xts$n0 .. ^f0($n0; yts, xts@)
	^f1(0; yts) -> len(yts)
	^f1($n1 + 1; yts) -> s(^f1($n1; yts))
+++ }
+++ Lemma(s)           = 
	count(x, xts$n .. ^f0($n; yts, xts@)) <= s(^f1($n; yts)) = true

+++ treating clause
	xts4 == xts3 = true => count(s(s(xts4)), xts2 .. xts1 .. nil) <= s(s(0)) = true
+++ inductive narrowing on conjecture
	xts4 == xts3 = true => count(s(s(xts4)), xts2 .. xts1 .. nil) <= s(s(0)) = true
... induction variables of
	xts4 == xts3 = true => count(s(s(xts4)), xts2 .. xts1 .. nil) <= s(s(0)) = true
... are:
	xts3:nat
	xts4:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	xts4 == xts3 = true => count(s(s(xts4)), xts2 .. xts1 .. nil) <= s(s(0)) = true
... with variable xts3
+++ creating new conjecture
	xts3 == 0 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) = true
+++ creating new conjecture
	xts4 == s(xts3) = true => count(s(s(xts4)), xts2 .. xts1 .. nil) <= s(s(0)) = true
+++ inductive narrowing succeeded
--- clause
	xts4 == xts3 = true => count(s(s(xts4)), xts2 .. xts1 .. nil) <= s(s(0)) = true
... oriented to rule
	xts2 == xts1 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
+++ added new clause(s)
	xts3 == 0 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts4 == s(xts3) = true => count(s(s(xts4)), xts2 .. xts1 .. nil) <= s(s(0)) = true
... to conjectures

+++ Status of the Inference System
--- Conjectures:
	xts3 == xts2 = true => count(s(xts3), xts1 .. nil) <= s(s(0)) = true
	count(s(xts2), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == xts2 = false => count(s(xts3), xts1 .. nil) <= s(s(s(0))) = true
	count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	count(s(0), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts4 == xts3 = false => count(s(s(xts4)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	count(s(s(0)), xts .. nil) <= s(0) = true
	xts3 == xts2 = true => count(s(s(s(xts3))), xts1 .. nil) <= s(0) = true
	count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) = true
	count(s(s(0)), xts .. nil) <= s(s(0)) = true
	xts3 == xts2 = false => count(s(s(s(xts3))), xts1 .. nil) <= s(s(0)) = true
	s(0) == xts2 = true => count(s(0), xts1 .. nil) <= s(0) = true
	s(0) == xts2 = false => count(s(0), xts1 .. nil) <= s(s(0)) = true
	xts3 == 0 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts4 == s(xts3) = true => count(s(s(xts4)), xts2 .. xts1 .. nil) <= s(s(0)) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	count(x, xs) <= len(xs) -> true
	count(x, xts .. yts) <= s(len(yts)) -> true
	0 == xts = true => count(0, xts .. nil) <= s(0) -> true
	count(x, xts2 .. xts1 .. yts) <= s(s(len(yts))) -> true
	0 == xts = true => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	count(x, xts3 .. xts2 .. xts1 .. yts) <= s(s(s(len(yts)))) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	0 == xts = true => count(0, xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	0 == xts = false => count(0, xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> yts
	^f0($n0 + 1; yts, xts@) -> xts$n0 .. ^f0($n0; yts, xts@)
	^f1(0; yts) -> len(yts)
	^f1($n1 + 1; yts) -> s(^f1($n1; yts))
+++ }
+++ Lemma(s)           = 
	count(x, xts$n .. ^f0($n; yts, xts@)) <= s(^f1($n; yts)) = true

+++ treating clause
	xts3 == xts2 = true => count(s(xts3), xts1 .. nil) <= s(s(0)) = true
+++ inductive narrowing on conjecture
	xts3 == xts2 = true => count(s(xts3), xts1 .. nil) <= s(s(0)) = true
... induction variables of
	xts3 == xts2 = true => count(s(xts3), xts1 .. nil) <= s(s(0)) = true
... are:
	xts2:nat
	xts3:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	xts3 == xts2 = true => count(s(xts3), xts1 .. nil) <= s(s(0)) = true
... with variable xts2
+++ creating new conjecture
	xts2 == 0 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) = true
+++ creating new conjecture
	xts3 == s(xts2) = true => count(s(xts3), xts1 .. nil) <= s(s(0)) = true
+++ inductive narrowing succeeded
--- clause
	xts3 == xts2 = true => count(s(xts3), xts1 .. nil) <= s(s(0)) = true
... oriented to rule
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
+++ added new clause(s)
	xts2 == 0 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) = true
	xts3 == s(xts2) = true => count(s(xts3), xts1 .. nil) <= s(s(0)) = true
... to conjectures

+++ Status of the Inference System
--- Conjectures:
	count(s(xts2), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == xts2 = false => count(s(xts3), xts1 .. nil) <= s(s(s(0))) = true
	count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	count(s(0), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts4 == xts3 = false => count(s(s(xts4)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	count(s(s(0)), xts .. nil) <= s(0) = true
	xts3 == xts2 = true => count(s(s(s(xts3))), xts1 .. nil) <= s(0) = true
	count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) = true
	count(s(s(0)), xts .. nil) <= s(s(0)) = true
	xts3 == xts2 = false => count(s(s(s(xts3))), xts1 .. nil) <= s(s(0)) = true
	s(0) == xts2 = true => count(s(0), xts1 .. nil) <= s(0) = true
	s(0) == xts2 = false => count(s(0), xts1 .. nil) <= s(s(0)) = true
	xts3 == 0 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts4 == s(xts3) = true => count(s(s(xts4)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) = true
	xts3 == s(xts2) = true => count(s(xts3), xts1 .. nil) <= s(s(0)) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	count(x, xs) <= len(xs) -> true
	count(x, xts .. yts) <= s(len(yts)) -> true
	0 == xts = true => count(0, xts .. nil) <= s(0) -> true
	count(x, xts2 .. xts1 .. yts) <= s(s(len(yts))) -> true
	0 == xts = true => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	count(x, xts3 .. xts2 .. xts1 .. yts) <= s(s(s(len(yts)))) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	0 == xts = true => count(0, xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	0 == xts = false => count(0, xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> yts
	^f0($n0 + 1; yts, xts@) -> xts$n0 .. ^f0($n0; yts, xts@)
	^f1(0; yts) -> len(yts)
	^f1($n1 + 1; yts) -> s(^f1($n1; yts))
+++ }
+++ Lemma(s)           = 
	count(x, xts$n .. ^f0($n; yts, xts@)) <= s(^f1($n; yts)) = true

+++ treating clause
	count(s(xts2), xts1 .. nil) <= s(s(s(0))) = true
--- no new clauses created
+++ attempting case rewriting
--- case rewriting generated new conjectures
	s(xts2) == xts1 = true => s(0) <= s(s(s(0))) = true
	s(xts2) == xts1 = false => 0 <= s(s(s(0))) = true
+++ added new clause(s)
	s(xts2) == xts1 = true => s(0) <= s(s(s(0))) = true
	s(xts2) == xts1 = false => 0 <= s(s(s(0))) = true
... to conjectures
--- clause
	s(xts2) == xts1 = true => s(0) <= s(s(s(0))) = true
... reduced to tautology
	s(xts2) == xts1 = true => true = true
--- clause
	s(xts2) == xts1 = false => 0 <= s(s(s(0))) = true
... reduced to tautology
	s(xts2) == xts1 = false => true = true

+++ Status of the Inference System
--- Conjectures:
	xts3 == xts2 = false => count(s(xts3), xts1 .. nil) <= s(s(s(0))) = true
	count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	count(s(0), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts4 == xts3 = false => count(s(s(xts4)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	count(s(s(0)), xts .. nil) <= s(0) = true
	xts3 == xts2 = true => count(s(s(s(xts3))), xts1 .. nil) <= s(0) = true
	count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) = true
	count(s(s(0)), xts .. nil) <= s(s(0)) = true
	xts3 == xts2 = false => count(s(s(s(xts3))), xts1 .. nil) <= s(s(0)) = true
	s(0) == xts2 = true => count(s(0), xts1 .. nil) <= s(0) = true
	s(0) == xts2 = false => count(s(0), xts1 .. nil) <= s(s(0)) = true
	xts3 == 0 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts4 == s(xts3) = true => count(s(s(xts4)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) = true
	xts3 == s(xts2) = true => count(s(xts3), xts1 .. nil) <= s(s(0)) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	count(x, xs) <= len(xs) -> true
	count(x, xts .. yts) <= s(len(yts)) -> true
	0 == xts = true => count(0, xts .. nil) <= s(0) -> true
	count(x, xts2 .. xts1 .. yts) <= s(s(len(yts))) -> true
	0 == xts = true => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	count(x, xts3 .. xts2 .. xts1 .. yts) <= s(s(s(len(yts)))) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	0 == xts = true => count(0, xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	0 == xts = false => count(0, xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> yts
	^f0($n0 + 1; yts, xts@) -> xts$n0 .. ^f0($n0; yts, xts@)
	^f1(0; yts) -> len(yts)
	^f1($n1 + 1; yts) -> s(^f1($n1; yts))
+++ }
+++ Lemma(s)           = 
	count(x, xts$n .. ^f0($n; yts, xts@)) <= s(^f1($n; yts)) = true

+++ treating clause
	xts3 == xts2 = false => count(s(xts3), xts1 .. nil) <= s(s(s(0))) = true
+++ inductive narrowing on conjecture
	xts3 == xts2 = false => count(s(xts3), xts1 .. nil) <= s(s(s(0))) = true
... induction variables of
	xts3 == xts2 = false => count(s(xts3), xts1 .. nil) <= s(s(s(0))) = true
... are:
	xts2:nat
	xts3:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	xts3 == xts2 = false => count(s(xts3), xts1 .. nil) <= s(s(s(0))) = true
... with variable xts2
+++ creating new conjecture
	xts2 == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) = true
+++ creating new conjecture
	xts3 == s(xts2) = false => count(s(xts3), xts1 .. nil) <= s(s(s(0))) = true
+++ inductive narrowing succeeded
--- clause
	xts3 == xts2 = false => count(s(xts3), xts1 .. nil) <= s(s(s(0))) = true
... oriented to rule
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
+++ added new clause(s)
	xts2 == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == s(xts2) = false => count(s(xts3), xts1 .. nil) <= s(s(s(0))) = true
... to conjectures

+++ Status of the Inference System
--- Conjectures:
	count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	count(s(0), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts4 == xts3 = false => count(s(s(xts4)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	count(s(s(0)), xts .. nil) <= s(0) = true
	xts3 == xts2 = true => count(s(s(s(xts3))), xts1 .. nil) <= s(0) = true
	count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) = true
	count(s(s(0)), xts .. nil) <= s(s(0)) = true
	xts3 == xts2 = false => count(s(s(s(xts3))), xts1 .. nil) <= s(s(0)) = true
	s(0) == xts2 = true => count(s(0), xts1 .. nil) <= s(0) = true
	s(0) == xts2 = false => count(s(0), xts1 .. nil) <= s(s(0)) = true
	xts3 == 0 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts4 == s(xts3) = true => count(s(s(xts4)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) = true
	xts3 == s(xts2) = true => count(s(xts3), xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == s(xts2) = false => count(s(xts3), xts1 .. nil) <= s(s(s(0))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	count(x, xs) <= len(xs) -> true
	count(x, xts .. yts) <= s(len(yts)) -> true
	0 == xts = true => count(0, xts .. nil) <= s(0) -> true
	count(x, xts2 .. xts1 .. yts) <= s(s(len(yts))) -> true
	0 == xts = true => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	count(x, xts3 .. xts2 .. xts1 .. yts) <= s(s(s(len(yts)))) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	0 == xts = true => count(0, xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	0 == xts = false => count(0, xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> yts
	^f0($n0 + 1; yts, xts@) -> xts$n0 .. ^f0($n0; yts, xts@)
	^f1(0; yts) -> len(yts)
	^f1($n1 + 1; yts) -> s(^f1($n1; yts))
+++ }
+++ Lemma(s)           = 
	count(x, xts$n .. ^f0($n; yts, xts@)) <= s(^f1($n; yts)) = true

+++ treating clause
	count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
--- no new clauses created
+++ attempting case rewriting
--- case rewriting generated new conjectures
	s(s(xts3)) == xts2 = true => s(count(s(s(xts3)), xts1 .. nil)) <= s(s(s(0))) = true
	s(s(xts3)) == xts2 = false => count(s(s(xts3)), xts1 .. nil) <= s(s(s(0))) = true
+++ added new clause(s)
	s(s(xts3)) == xts2 = true => s(count(s(s(xts3)), xts1 .. nil)) <= s(s(s(0))) = true
	s(s(xts3)) == xts2 = false => count(s(s(xts3)), xts1 .. nil) <= s(s(s(0))) = true
... to conjectures
--- clause
	s(s(xts3)) == xts2 = true => s(count(s(s(xts3)), xts1 .. nil)) <= s(s(s(0))) = true
... reduced in 1 step to
	s(s(xts3)) == xts2 = true => count(s(s(xts3)), xts1 .. nil) <= s(s(0)) = true

+++ Status of the Inference System
--- Conjectures:
	count(s(0), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts4 == xts3 = false => count(s(s(xts4)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	count(s(s(0)), xts .. nil) <= s(0) = true
	xts3 == xts2 = true => count(s(s(s(xts3))), xts1 .. nil) <= s(0) = true
	count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) = true
	count(s(s(0)), xts .. nil) <= s(s(0)) = true
	xts3 == xts2 = false => count(s(s(s(xts3))), xts1 .. nil) <= s(s(0)) = true
	s(0) == xts2 = true => count(s(0), xts1 .. nil) <= s(0) = true
	s(0) == xts2 = false => count(s(0), xts1 .. nil) <= s(s(0)) = true
	xts3 == 0 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts4 == s(xts3) = true => count(s(s(xts4)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) = true
	xts3 == s(xts2) = true => count(s(xts3), xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == s(xts2) = false => count(s(xts3), xts1 .. nil) <= s(s(s(0))) = true
	s(s(xts3)) == xts2 = true => count(s(s(xts3)), xts1 .. nil) <= s(s(0)) = true
	s(s(xts3)) == xts2 = false => count(s(s(xts3)), xts1 .. nil) <= s(s(s(0))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	count(x, xs) <= len(xs) -> true
	count(x, xts .. yts) <= s(len(yts)) -> true
	0 == xts = true => count(0, xts .. nil) <= s(0) -> true
	count(x, xts2 .. xts1 .. yts) <= s(s(len(yts))) -> true
	0 == xts = true => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	count(x, xts3 .. xts2 .. xts1 .. yts) <= s(s(s(len(yts)))) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	0 == xts = true => count(0, xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	0 == xts = false => count(0, xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> yts
	^f0($n0 + 1; yts, xts@) -> xts$n0 .. ^f0($n0; yts, xts@)
	^f1(0; yts) -> len(yts)
	^f1($n1 + 1; yts) -> s(^f1($n1; yts))
+++ }
+++ Lemma(s)           = 
	count(x, xts$n .. ^f0($n; yts, xts@)) <= s(^f1($n; yts)) = true

+++ treating clause
	count(s(0), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
--- no new clauses created
+++ attempting case rewriting
--- case rewriting generated new conjectures
	s(0) == xts2 = true => s(count(s(0), xts1 .. nil)) <= s(s(s(0))) = true
	s(0) == xts2 = false => count(s(0), xts1 .. nil) <= s(s(s(0))) = true
+++ added new clause(s)
	s(0) == xts2 = true => s(count(s(0), xts1 .. nil)) <= s(s(s(0))) = true
	s(0) == xts2 = false => count(s(0), xts1 .. nil) <= s(s(s(0))) = true
... to conjectures
--- clause
	s(0) == xts2 = true => s(count(s(0), xts1 .. nil)) <= s(s(s(0))) = true
... reduced in 1 step to
	s(0) == xts2 = true => count(s(0), xts1 .. nil) <= s(s(0)) = true

+++ Status of the Inference System
--- Conjectures:
	xts4 == xts3 = false => count(s(s(xts4)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	count(s(s(0)), xts .. nil) <= s(0) = true
	xts3 == xts2 = true => count(s(s(s(xts3))), xts1 .. nil) <= s(0) = true
	count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) = true
	count(s(s(0)), xts .. nil) <= s(s(0)) = true
	xts3 == xts2 = false => count(s(s(s(xts3))), xts1 .. nil) <= s(s(0)) = true
	s(0) == xts2 = true => count(s(0), xts1 .. nil) <= s(0) = true
	s(0) == xts2 = false => count(s(0), xts1 .. nil) <= s(s(0)) = true
	xts3 == 0 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts4 == s(xts3) = true => count(s(s(xts4)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) = true
	xts3 == s(xts2) = true => count(s(xts3), xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == s(xts2) = false => count(s(xts3), xts1 .. nil) <= s(s(s(0))) = true
	s(s(xts3)) == xts2 = true => count(s(s(xts3)), xts1 .. nil) <= s(s(0)) = true
	s(s(xts3)) == xts2 = false => count(s(s(xts3)), xts1 .. nil) <= s(s(s(0))) = true
	s(0) == xts2 = true => count(s(0), xts1 .. nil) <= s(s(0)) = true
	s(0) == xts2 = false => count(s(0), xts1 .. nil) <= s(s(s(0))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	count(x, xs) <= len(xs) -> true
	count(x, xts .. yts) <= s(len(yts)) -> true
	0 == xts = true => count(0, xts .. nil) <= s(0) -> true
	count(x, xts2 .. xts1 .. yts) <= s(s(len(yts))) -> true
	0 == xts = true => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	count(x, xts3 .. xts2 .. xts1 .. yts) <= s(s(s(len(yts)))) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	0 == xts = true => count(0, xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	0 == xts = false => count(0, xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> yts
	^f0($n0 + 1; yts, xts@) -> xts$n0 .. ^f0($n0; yts, xts@)
	^f1(0; yts) -> len(yts)
	^f1($n1 + 1; yts) -> s(^f1($n1; yts))
+++ }
+++ Lemma(s)           = 
	count(x, xts$n .. ^f0($n; yts, xts@)) <= s(^f1($n; yts)) = true

+++ treating clause
	xts4 == xts3 = false => count(s(s(xts4)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
+++ inductive narrowing on conjecture
	xts4 == xts3 = false => count(s(s(xts4)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
... induction variables of
	xts4 == xts3 = false => count(s(s(xts4)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
... are:
	xts3:nat
	xts4:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	xts4 == xts3 = false => count(s(s(xts4)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
... with variable xts3
+++ creating new conjecture
	xts3 == 0 = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
+++ creating new conjecture
	xts4 == s(xts3) = false => count(s(s(xts4)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
+++ inductive narrowing succeeded
--- clause
	xts4 == xts3 = false => count(s(s(xts4)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
... oriented to rule
	xts2 == xts1 = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
+++ added new clause(s)
	xts3 == 0 = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts4 == s(xts3) = false => count(s(s(xts4)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
... to conjectures

+++ Status of the Inference System
--- Conjectures:
	count(s(s(0)), xts .. nil) <= s(0) = true
	xts3 == xts2 = true => count(s(s(s(xts3))), xts1 .. nil) <= s(0) = true
	count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) = true
	count(s(s(0)), xts .. nil) <= s(s(0)) = true
	xts3 == xts2 = false => count(s(s(s(xts3))), xts1 .. nil) <= s(s(0)) = true
	s(0) == xts2 = true => count(s(0), xts1 .. nil) <= s(0) = true
	s(0) == xts2 = false => count(s(0), xts1 .. nil) <= s(s(0)) = true
	xts3 == 0 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts4 == s(xts3) = true => count(s(s(xts4)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) = true
	xts3 == s(xts2) = true => count(s(xts3), xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == s(xts2) = false => count(s(xts3), xts1 .. nil) <= s(s(s(0))) = true
	s(s(xts3)) == xts2 = true => count(s(s(xts3)), xts1 .. nil) <= s(s(0)) = true
	s(s(xts3)) == xts2 = false => count(s(s(xts3)), xts1 .. nil) <= s(s(s(0))) = true
	s(0) == xts2 = true => count(s(0), xts1 .. nil) <= s(s(0)) = true
	s(0) == xts2 = false => count(s(0), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == 0 = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts4 == s(xts3) = false => count(s(s(xts4)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	count(x, xs) <= len(xs) -> true
	count(x, xts .. yts) <= s(len(yts)) -> true
	0 == xts = true => count(0, xts .. nil) <= s(0) -> true
	count(x, xts2 .. xts1 .. yts) <= s(s(len(yts))) -> true
	0 == xts = true => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	count(x, xts3 .. xts2 .. xts1 .. yts) <= s(s(s(len(yts)))) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	0 == xts = true => count(0, xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	0 == xts = false => count(0, xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> yts
	^f0($n0 + 1; yts, xts@) -> xts$n0 .. ^f0($n0; yts, xts@)
	^f1(0; yts) -> len(yts)
	^f1($n1 + 1; yts) -> s(^f1($n1; yts))
+++ }
+++ Lemma(s)           = 
	count(x, xts$n .. ^f0($n; yts, xts@)) <= s(^f1($n; yts)) = true

+++ treating clause
	count(s(s(0)), xts .. nil) <= s(0) = true
--- no new clauses created
+++ attempting case rewriting
--- case rewriting generated new conjectures
	s(s(0)) == xts = true => s(0) <= s(0) = true
	s(s(0)) == xts = false => 0 <= s(0) = true
+++ added new clause(s)
	s(s(0)) == xts = true => s(0) <= s(0) = true
	s(s(0)) == xts = false => 0 <= s(0) = true
... to conjectures
--- clause
	s(s(0)) == xts = true => s(0) <= s(0) = true
... reduced to tautology
	s(s(0)) == xts = true => true = true
--- clause
	s(s(0)) == xts = false => 0 <= s(0) = true
... reduced to tautology
	s(s(0)) == xts = false => true = true

+++ Status of the Inference System
--- Conjectures:
	xts3 == xts2 = true => count(s(s(s(xts3))), xts1 .. nil) <= s(0) = true
	count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) = true
	count(s(s(0)), xts .. nil) <= s(s(0)) = true
	xts3 == xts2 = false => count(s(s(s(xts3))), xts1 .. nil) <= s(s(0)) = true
	s(0) == xts2 = true => count(s(0), xts1 .. nil) <= s(0) = true
	s(0) == xts2 = false => count(s(0), xts1 .. nil) <= s(s(0)) = true
	xts3 == 0 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts4 == s(xts3) = true => count(s(s(xts4)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) = true
	xts3 == s(xts2) = true => count(s(xts3), xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == s(xts2) = false => count(s(xts3), xts1 .. nil) <= s(s(s(0))) = true
	s(s(xts3)) == xts2 = true => count(s(s(xts3)), xts1 .. nil) <= s(s(0)) = true
	s(s(xts3)) == xts2 = false => count(s(s(xts3)), xts1 .. nil) <= s(s(s(0))) = true
	s(0) == xts2 = true => count(s(0), xts1 .. nil) <= s(s(0)) = true
	s(0) == xts2 = false => count(s(0), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == 0 = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts4 == s(xts3) = false => count(s(s(xts4)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	count(x, xs) <= len(xs) -> true
	count(x, xts .. yts) <= s(len(yts)) -> true
	0 == xts = true => count(0, xts .. nil) <= s(0) -> true
	count(x, xts2 .. xts1 .. yts) <= s(s(len(yts))) -> true
	0 == xts = true => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	count(x, xts3 .. xts2 .. xts1 .. yts) <= s(s(s(len(yts)))) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	0 == xts = true => count(0, xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	0 == xts = false => count(0, xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> yts
	^f0($n0 + 1; yts, xts@) -> xts$n0 .. ^f0($n0; yts, xts@)
	^f1(0; yts) -> len(yts)
	^f1($n1 + 1; yts) -> s(^f1($n1; yts))
+++ }
+++ Lemma(s)           = 
	count(x, xts$n .. ^f0($n; yts, xts@)) <= s(^f1($n; yts)) = true

+++ treating clause
	xts3 == xts2 = true => count(s(s(s(xts3))), xts1 .. nil) <= s(0) = true
+++ inductive narrowing on conjecture
	xts3 == xts2 = true => count(s(s(s(xts3))), xts1 .. nil) <= s(0) = true
... induction variables of
	xts3 == xts2 = true => count(s(s(s(xts3))), xts1 .. nil) <= s(0) = true
... are:
	xts2:nat
	xts3:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	xts3 == xts2 = true => count(s(s(s(xts3))), xts1 .. nil) <= s(0) = true
... with variable xts2
+++ creating new conjecture
	xts2 == 0 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) = true
+++ creating new conjecture
	xts3 == s(xts2) = true => count(s(s(s(xts3))), xts1 .. nil) <= s(0) = true
+++ inductive narrowing succeeded
--- clause
	xts3 == xts2 = true => count(s(s(s(xts3))), xts1 .. nil) <= s(0) = true
... oriented to rule
	xts2 == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
+++ added new clause(s)
	xts2 == 0 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) = true
	xts3 == s(xts2) = true => count(s(s(s(xts3))), xts1 .. nil) <= s(0) = true
... to conjectures
+++ active wrap
	xts3 == xts2 = true => count(s(.), xts1 .. nil) <= s(0) = true
... with sequence
	xts3 == xts2 = true => count(s(xts3), xts1 .. nil) <= s(0) = true
	xts3 == xts2 = true => count(s(s(xts3)), xts1 .. nil) <= s(0) = true
	xts3 == xts2 = true => count(s(s(s(xts3))), xts1 .. nil) <= s(0) = true
+++ primal grammar found for head
	{.., 0, <=, ==, count, nil, s, true}
... and wrap
	xts3 == xts2 = true => count(s(.), xts1 .. nil) <= s(0) = true
+++ Presburger system  = {
	^f136(0; xts) -> xts
	^f136($n136 + 1; xts) -> s(^f136($n136; xts))
+++ }
+++ Lemma(s)           = 
	xts3 == xts2 = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(0) = true

+++ Status of the Inference System
--- Conjectures:
	count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) = true
	count(s(s(0)), xts .. nil) <= s(s(0)) = true
	xts3 == xts2 = false => count(s(s(s(xts3))), xts1 .. nil) <= s(s(0)) = true
	s(0) == xts2 = true => count(s(0), xts1 .. nil) <= s(0) = true
	s(0) == xts2 = false => count(s(0), xts1 .. nil) <= s(s(0)) = true
	xts3 == 0 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts4 == s(xts3) = true => count(s(s(xts4)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) = true
	xts3 == s(xts2) = true => count(s(xts3), xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == s(xts2) = false => count(s(xts3), xts1 .. nil) <= s(s(s(0))) = true
	s(s(xts3)) == xts2 = true => count(s(s(xts3)), xts1 .. nil) <= s(s(0)) = true
	s(s(xts3)) == xts2 = false => count(s(s(xts3)), xts1 .. nil) <= s(s(s(0))) = true
	s(0) == xts2 = true => count(s(0), xts1 .. nil) <= s(s(0)) = true
	s(0) == xts2 = false => count(s(0), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == 0 = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts4 == s(xts3) = false => count(s(s(xts4)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts2 == 0 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) = true
	xts3 == s(xts2) = true => count(s(s(s(xts3))), xts1 .. nil) <= s(0) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	count(x, xs) <= len(xs) -> true
	count(x, xts .. yts) <= s(len(yts)) -> true
	0 == xts = true => count(0, xts .. nil) <= s(0) -> true
	count(x, xts2 .. xts1 .. yts) <= s(s(len(yts))) -> true
	0 == xts = true => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	count(x, xts3 .. xts2 .. xts1 .. yts) <= s(s(s(len(yts)))) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	0 == xts = true => count(0, xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	0 == xts = false => count(0, xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> yts
	^f0($n0 + 1; yts, xts@) -> xts$n0 .. ^f0($n0; yts, xts@)
	^f1(0; yts) -> len(yts)
	^f1($n1 + 1; yts) -> s(^f1($n1; yts))
	^f136(0; xts) -> xts
	^f136($n136 + 1; xts) -> s(^f136($n136; xts))
+++ }
+++ Lemma(s)           = 
	count(x, xts$n .. ^f0($n; yts, xts@)) <= s(^f1($n; yts)) = true
	xts3 == xts2 = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(0) = true

+++ treating clause
	count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) = true
--- no new clauses created
+++ attempting case rewriting
--- case rewriting generated new conjectures
	s(s(s(xts2))) == xts1 = true => s(0) <= s(s(0)) = true
	s(s(s(xts2))) == xts1 = false => 0 <= s(s(0)) = true
+++ added new clause(s)
	s(s(s(xts2))) == xts1 = true => s(0) <= s(s(0)) = true
	s(s(s(xts2))) == xts1 = false => 0 <= s(s(0)) = true
... to conjectures
--- clause
	s(s(s(xts2))) == xts1 = true => s(0) <= s(s(0)) = true
... reduced to tautology
	s(s(s(xts2))) == xts1 = true => true = true
--- clause
	s(s(s(xts2))) == xts1 = false => 0 <= s(s(0)) = true
... reduced to tautology
	s(s(s(xts2))) == xts1 = false => true = true

+++ Status of the Inference System
--- Conjectures:
	count(s(s(0)), xts .. nil) <= s(s(0)) = true
	xts3 == xts2 = false => count(s(s(s(xts3))), xts1 .. nil) <= s(s(0)) = true
	s(0) == xts2 = true => count(s(0), xts1 .. nil) <= s(0) = true
	s(0) == xts2 = false => count(s(0), xts1 .. nil) <= s(s(0)) = true
	xts3 == 0 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts4 == s(xts3) = true => count(s(s(xts4)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) = true
	xts3 == s(xts2) = true => count(s(xts3), xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == s(xts2) = false => count(s(xts3), xts1 .. nil) <= s(s(s(0))) = true
	s(s(xts3)) == xts2 = true => count(s(s(xts3)), xts1 .. nil) <= s(s(0)) = true
	s(s(xts3)) == xts2 = false => count(s(s(xts3)), xts1 .. nil) <= s(s(s(0))) = true
	s(0) == xts2 = true => count(s(0), xts1 .. nil) <= s(s(0)) = true
	s(0) == xts2 = false => count(s(0), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == 0 = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts4 == s(xts3) = false => count(s(s(xts4)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts2 == 0 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) = true
	xts3 == s(xts2) = true => count(s(s(s(xts3))), xts1 .. nil) <= s(0) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	count(x, xs) <= len(xs) -> true
	count(x, xts .. yts) <= s(len(yts)) -> true
	0 == xts = true => count(0, xts .. nil) <= s(0) -> true
	count(x, xts2 .. xts1 .. yts) <= s(s(len(yts))) -> true
	0 == xts = true => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	count(x, xts3 .. xts2 .. xts1 .. yts) <= s(s(s(len(yts)))) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	0 == xts = true => count(0, xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	0 == xts = false => count(0, xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> yts
	^f0($n0 + 1; yts, xts@) -> xts$n0 .. ^f0($n0; yts, xts@)
	^f1(0; yts) -> len(yts)
	^f1($n1 + 1; yts) -> s(^f1($n1; yts))
	^f136(0; xts) -> xts
	^f136($n136 + 1; xts) -> s(^f136($n136; xts))
+++ }
+++ Lemma(s)           = 
	count(x, xts$n .. ^f0($n; yts, xts@)) <= s(^f1($n; yts)) = true
	xts3 == xts2 = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(0) = true

+++ treating clause
	count(s(s(0)), xts .. nil) <= s(s(0)) = true
--- no new clauses created
+++ attempting case rewriting
--- case rewriting generated new conjectures
	s(s(0)) == xts = true => s(0) <= s(s(0)) = true
	s(s(0)) == xts = false => 0 <= s(s(0)) = true
+++ added new clause(s)
	s(s(0)) == xts = true => s(0) <= s(s(0)) = true
	s(s(0)) == xts = false => 0 <= s(s(0)) = true
... to conjectures
--- clause
	s(s(0)) == xts = true => s(0) <= s(s(0)) = true
... reduced to tautology
	s(s(0)) == xts = true => true = true
--- clause
	s(s(0)) == xts = false => 0 <= s(s(0)) = true
... reduced to tautology
	s(s(0)) == xts = false => true = true

+++ Status of the Inference System
--- Conjectures:
	xts3 == xts2 = false => count(s(s(s(xts3))), xts1 .. nil) <= s(s(0)) = true
	s(0) == xts2 = true => count(s(0), xts1 .. nil) <= s(0) = true
	s(0) == xts2 = false => count(s(0), xts1 .. nil) <= s(s(0)) = true
	xts3 == 0 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts4 == s(xts3) = true => count(s(s(xts4)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) = true
	xts3 == s(xts2) = true => count(s(xts3), xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == s(xts2) = false => count(s(xts3), xts1 .. nil) <= s(s(s(0))) = true
	s(s(xts3)) == xts2 = true => count(s(s(xts3)), xts1 .. nil) <= s(s(0)) = true
	s(s(xts3)) == xts2 = false => count(s(s(xts3)), xts1 .. nil) <= s(s(s(0))) = true
	s(0) == xts2 = true => count(s(0), xts1 .. nil) <= s(s(0)) = true
	s(0) == xts2 = false => count(s(0), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == 0 = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts4 == s(xts3) = false => count(s(s(xts4)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts2 == 0 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) = true
	xts3 == s(xts2) = true => count(s(s(s(xts3))), xts1 .. nil) <= s(0) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	count(x, xs) <= len(xs) -> true
	count(x, xts .. yts) <= s(len(yts)) -> true
	0 == xts = true => count(0, xts .. nil) <= s(0) -> true
	count(x, xts2 .. xts1 .. yts) <= s(s(len(yts))) -> true
	0 == xts = true => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	count(x, xts3 .. xts2 .. xts1 .. yts) <= s(s(s(len(yts)))) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	0 == xts = true => count(0, xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	0 == xts = false => count(0, xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> yts
	^f0($n0 + 1; yts, xts@) -> xts$n0 .. ^f0($n0; yts, xts@)
	^f1(0; yts) -> len(yts)
	^f1($n1 + 1; yts) -> s(^f1($n1; yts))
	^f136(0; xts) -> xts
	^f136($n136 + 1; xts) -> s(^f136($n136; xts))
+++ }
+++ Lemma(s)           = 
	count(x, xts$n .. ^f0($n; yts, xts@)) <= s(^f1($n; yts)) = true
	xts3 == xts2 = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(0) = true

+++ treating clause
	xts3 == xts2 = false => count(s(s(s(xts3))), xts1 .. nil) <= s(s(0)) = true
+++ inductive narrowing on conjecture
	xts3 == xts2 = false => count(s(s(s(xts3))), xts1 .. nil) <= s(s(0)) = true
... induction variables of
	xts3 == xts2 = false => count(s(s(s(xts3))), xts1 .. nil) <= s(s(0)) = true
... are:
	xts2:nat
	xts3:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	xts3 == xts2 = false => count(s(s(s(xts3))), xts1 .. nil) <= s(s(0)) = true
... with variable xts2
+++ creating new conjecture
	xts2 == 0 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) = true
+++ creating new conjecture
	xts3 == s(xts2) = false => count(s(s(s(xts3))), xts1 .. nil) <= s(s(0)) = true
+++ inductive narrowing succeeded
--- clause
	xts3 == xts2 = false => count(s(s(s(xts3))), xts1 .. nil) <= s(s(0)) = true
... oriented to rule
	xts2 == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
+++ added new clause(s)
	xts2 == 0 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) = true
	xts3 == s(xts2) = false => count(s(s(s(xts3))), xts1 .. nil) <= s(s(0)) = true
... to conjectures
+++ active wrap
	xts3 == xts2 = false => count(s(.), xts1 .. nil) <= s(s(0)) = true
... with sequence
	xts3 == xts2 = false => count(s(xts3), xts1 .. nil) <= s(s(0)) = true
	xts3 == xts2 = false => count(s(s(xts3)), xts1 .. nil) <= s(s(0)) = true
	xts3 == xts2 = false => count(s(s(s(xts3))), xts1 .. nil) <= s(s(0)) = true
+++ primal grammar found for head
	{.., 0, <=, ==, count, false, nil, s, true}
... and wrap
	xts3 == xts2 = false => count(s(.), xts1 .. nil) <= s(s(0)) = true
+++ Presburger system  = {
	^f136(0; xts) -> xts
	^f136($n136 + 1; xts) -> s(^f136($n136; xts))
+++ }
+++ Lemma(s)           = 
	xts3 == xts2 = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true

+++ Status of the Inference System
--- Conjectures:
	s(0) == xts2 = true => count(s(0), xts1 .. nil) <= s(0) = true
	s(0) == xts2 = false => count(s(0), xts1 .. nil) <= s(s(0)) = true
	xts3 == 0 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts4 == s(xts3) = true => count(s(s(xts4)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) = true
	xts3 == s(xts2) = true => count(s(xts3), xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == s(xts2) = false => count(s(xts3), xts1 .. nil) <= s(s(s(0))) = true
	s(s(xts3)) == xts2 = true => count(s(s(xts3)), xts1 .. nil) <= s(s(0)) = true
	s(s(xts3)) == xts2 = false => count(s(s(xts3)), xts1 .. nil) <= s(s(s(0))) = true
	s(0) == xts2 = true => count(s(0), xts1 .. nil) <= s(s(0)) = true
	s(0) == xts2 = false => count(s(0), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == 0 = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts4 == s(xts3) = false => count(s(s(xts4)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts2 == 0 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) = true
	xts3 == s(xts2) = true => count(s(s(s(xts3))), xts1 .. nil) <= s(0) = true
	xts2 == 0 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) = true
	xts3 == s(xts2) = false => count(s(s(s(xts3))), xts1 .. nil) <= s(s(0)) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	count(x, xs) <= len(xs) -> true
	count(x, xts .. yts) <= s(len(yts)) -> true
	0 == xts = true => count(0, xts .. nil) <= s(0) -> true
	count(x, xts2 .. xts1 .. yts) <= s(s(len(yts))) -> true
	0 == xts = true => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	count(x, xts3 .. xts2 .. xts1 .. yts) <= s(s(s(len(yts)))) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	0 == xts = true => count(0, xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	0 == xts = false => count(0, xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> yts
	^f0($n0 + 1; yts, xts@) -> xts$n0 .. ^f0($n0; yts, xts@)
	^f1(0; yts) -> len(yts)
	^f1($n1 + 1; yts) -> s(^f1($n1; yts))
	^f136(0; xts) -> xts
	^f136($n136 + 1; xts) -> s(^f136($n136; xts))
+++ }
+++ Lemma(s)           = 
	count(x, xts$n .. ^f0($n; yts, xts@)) <= s(^f1($n; yts)) = true
	xts3 == xts2 = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(0) = true
	xts3 == xts2 = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true

+++ treating clause
	s(0) == xts2 = true => count(s(0), xts1 .. nil) <= s(0) = true
+++ inductive narrowing on conjecture
	s(0) == xts2 = true => count(s(0), xts1 .. nil) <= s(0) = true
... induction variables of
	s(0) == xts2 = true => count(s(0), xts1 .. nil) <= s(0) = true
... are:
	xts2:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	s(0) == xts2 = true => count(s(0), xts1 .. nil) <= s(0) = true
... with variable xts2
+++ creating new conjecture
	s(0) == 0 = true => count(s(0), xts .. nil) <= s(0) = true
+++ creating new conjecture
	s(0) == s(xts2) = true => count(s(0), xts1 .. nil) <= s(0) = true
--- clause
	s(0) == 0 = true => count(s(0), xts .. nil) <= s(0) = true
... reduced in 1 step to
	false = true => count(s(0), xts .. nil) <= s(0) = true
--- clause
	false = true => count(s(0), xts .. nil) <= s(0) = true
... contains a ground negative condition
	false = true
... and is therefore discarded (false => t is always true)
--- clause
	s(0) == s(xts2) = true => count(s(0), xts1 .. nil) <= s(0) = true
... reduced in 1 step to
	0 == xts2 = true => count(s(0), xts1 .. nil) <= s(0) = true
+++ inductive narrowing succeeded
--- clause
	s(0) == xts2 = true => count(s(0), xts1 .. nil) <= s(0) = true
... oriented to rule
	s(0) == xts = true => count(s(0), xts .. nil) <= s(0) -> true
+++ added new clause(s)
	0 == xts2 = true => count(s(0), xts1 .. nil) <= s(0) = true
... to conjectures

+++ Status of the Inference System
--- Conjectures:
	s(0) == xts2 = false => count(s(0), xts1 .. nil) <= s(s(0)) = true
	xts3 == 0 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts4 == s(xts3) = true => count(s(s(xts4)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) = true
	xts3 == s(xts2) = true => count(s(xts3), xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == s(xts2) = false => count(s(xts3), xts1 .. nil) <= s(s(s(0))) = true
	s(s(xts3)) == xts2 = true => count(s(s(xts3)), xts1 .. nil) <= s(s(0)) = true
	s(s(xts3)) == xts2 = false => count(s(s(xts3)), xts1 .. nil) <= s(s(s(0))) = true
	s(0) == xts2 = true => count(s(0), xts1 .. nil) <= s(s(0)) = true
	s(0) == xts2 = false => count(s(0), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == 0 = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts4 == s(xts3) = false => count(s(s(xts4)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts2 == 0 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) = true
	xts3 == s(xts2) = true => count(s(s(s(xts3))), xts1 .. nil) <= s(0) = true
	xts2 == 0 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) = true
	xts3 == s(xts2) = false => count(s(s(s(xts3))), xts1 .. nil) <= s(s(0)) = true
	0 == xts2 = true => count(s(0), xts1 .. nil) <= s(0) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	count(x, xs) <= len(xs) -> true
	count(x, xts .. yts) <= s(len(yts)) -> true
	0 == xts = true => count(0, xts .. nil) <= s(0) -> true
	count(x, xts2 .. xts1 .. yts) <= s(s(len(yts))) -> true
	0 == xts = true => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(0)) -> true
	s(0) == xts = true => count(s(0), xts .. nil) <= s(0) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	count(x, xts3 .. xts2 .. xts1 .. yts) <= s(s(s(len(yts)))) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	0 == xts = true => count(0, xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	0 == xts = false => count(0, xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> yts
	^f0($n0 + 1; yts, xts@) -> xts$n0 .. ^f0($n0; yts, xts@)
	^f1(0; yts) -> len(yts)
	^f1($n1 + 1; yts) -> s(^f1($n1; yts))
	^f136(0; xts) -> xts
	^f136($n136 + 1; xts) -> s(^f136($n136; xts))
+++ }
+++ Lemma(s)           = 
	count(x, xts$n .. ^f0($n; yts, xts@)) <= s(^f1($n; yts)) = true
	xts3 == xts2 = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(0) = true
	xts3 == xts2 = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true

+++ treating clause
	s(0) == xts2 = false => count(s(0), xts1 .. nil) <= s(s(0)) = true
+++ inductive narrowing on conjecture
	s(0) == xts2 = false => count(s(0), xts1 .. nil) <= s(s(0)) = true
... induction variables of
	s(0) == xts2 = false => count(s(0), xts1 .. nil) <= s(s(0)) = true
... are:
	xts2:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	s(0) == xts2 = false => count(s(0), xts1 .. nil) <= s(s(0)) = true
... with variable xts2
+++ creating new conjecture
	s(0) == 0 = false => count(s(0), xts .. nil) <= s(s(0)) = true
+++ creating new conjecture
	s(0) == s(xts2) = false => count(s(0), xts1 .. nil) <= s(s(0)) = true
--- clause
	s(0) == 0 = false => count(s(0), xts .. nil) <= s(s(0)) = true
... reduced in 1 step to
	count(s(0), xts .. nil) <= s(s(0)) = true
--- clause
	s(0) == s(xts2) = false => count(s(0), xts1 .. nil) <= s(s(0)) = true
... reduced in 1 step to
	0 == xts2 = false => count(s(0), xts1 .. nil) <= s(s(0)) = true
+++ inductive narrowing succeeded
--- clause
	s(0) == xts2 = false => count(s(0), xts1 .. nil) <= s(s(0)) = true
... oriented to rule
	s(0) == xts = false => count(s(0), xts .. nil) <= s(s(0)) -> true
+++ added new clause(s)
	count(s(0), xts .. nil) <= s(s(0)) = true
	0 == xts2 = false => count(s(0), xts1 .. nil) <= s(s(0)) = true
... to conjectures

+++ Status of the Inference System
--- Conjectures:
	xts3 == 0 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts4 == s(xts3) = true => count(s(s(xts4)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) = true
	xts3 == s(xts2) = true => count(s(xts3), xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == s(xts2) = false => count(s(xts3), xts1 .. nil) <= s(s(s(0))) = true
	s(s(xts3)) == xts2 = true => count(s(s(xts3)), xts1 .. nil) <= s(s(0)) = true
	s(s(xts3)) == xts2 = false => count(s(s(xts3)), xts1 .. nil) <= s(s(s(0))) = true
	s(0) == xts2 = true => count(s(0), xts1 .. nil) <= s(s(0)) = true
	s(0) == xts2 = false => count(s(0), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == 0 = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts4 == s(xts3) = false => count(s(s(xts4)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts2 == 0 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) = true
	xts3 == s(xts2) = true => count(s(s(s(xts3))), xts1 .. nil) <= s(0) = true
	xts2 == 0 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) = true
	xts3 == s(xts2) = false => count(s(s(s(xts3))), xts1 .. nil) <= s(s(0)) = true
	0 == xts2 = true => count(s(0), xts1 .. nil) <= s(0) = true
	count(s(0), xts .. nil) <= s(s(0)) = true
	0 == xts2 = false => count(s(0), xts1 .. nil) <= s(s(0)) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	count(x, xs) <= len(xs) -> true
	count(x, xts .. yts) <= s(len(yts)) -> true
	0 == xts = true => count(0, xts .. nil) <= s(0) -> true
	count(x, xts2 .. xts1 .. yts) <= s(s(len(yts))) -> true
	0 == xts = true => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(0)) -> true
	s(0) == xts = true => count(s(0), xts .. nil) <= s(0) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	s(0) == xts = false => count(s(0), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	count(x, xts3 .. xts2 .. xts1 .. yts) <= s(s(s(len(yts)))) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	0 == xts = true => count(0, xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	0 == xts = false => count(0, xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> yts
	^f0($n0 + 1; yts, xts@) -> xts$n0 .. ^f0($n0; yts, xts@)
	^f1(0; yts) -> len(yts)
	^f1($n1 + 1; yts) -> s(^f1($n1; yts))
	^f136(0; xts) -> xts
	^f136($n136 + 1; xts) -> s(^f136($n136; xts))
+++ }
+++ Lemma(s)           = 
	count(x, xts$n .. ^f0($n; yts, xts@)) <= s(^f1($n; yts)) = true
	xts3 == xts2 = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(0) = true
	xts3 == xts2 = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true

+++ treating clause
	xts3 == 0 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) = true
+++ inductive narrowing on conjecture
	xts3 == 0 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) = true
... induction variables of
	xts3 == 0 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) = true
... are:
	xts3:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	xts3 == 0 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) = true
... with variable xts3
+++ creating new conjecture
	0 == 0 = true => count(s(s(0)), xts2 .. xts1 .. nil) <= s(s(0)) = true
+++ creating new conjecture
	s(xts3) == 0 = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) = true
--- clause
	0 == 0 = true => count(s(s(0)), xts2 .. xts1 .. nil) <= s(s(0)) = true
... reduced in 1 step to
	count(s(s(0)), xts2 .. xts1 .. nil) <= s(s(0)) = true
--- clause
	s(xts3) == 0 = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) = true
... reduced in 1 step to
	false = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) = true
--- clause
	false = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) = true
... contains a ground negative condition
	false = true
... and is therefore discarded (false => t is always true)
+++ inductive narrowing succeeded
--- clause
	xts3 == 0 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) = true
... oriented to rule
	xts == 0 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
+++ added new clause(s)
	count(s(s(0)), xts2 .. xts1 .. nil) <= s(s(0)) = true
... to conjectures

+++ Status of the Inference System
--- Conjectures:
	xts4 == s(xts3) = true => count(s(s(xts4)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) = true
	xts3 == s(xts2) = true => count(s(xts3), xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == s(xts2) = false => count(s(xts3), xts1 .. nil) <= s(s(s(0))) = true
	s(s(xts3)) == xts2 = true => count(s(s(xts3)), xts1 .. nil) <= s(s(0)) = true
	s(s(xts3)) == xts2 = false => count(s(s(xts3)), xts1 .. nil) <= s(s(s(0))) = true
	s(0) == xts2 = true => count(s(0), xts1 .. nil) <= s(s(0)) = true
	s(0) == xts2 = false => count(s(0), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == 0 = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts4 == s(xts3) = false => count(s(s(xts4)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts2 == 0 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) = true
	xts3 == s(xts2) = true => count(s(s(s(xts3))), xts1 .. nil) <= s(0) = true
	xts2 == 0 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) = true
	xts3 == s(xts2) = false => count(s(s(s(xts3))), xts1 .. nil) <= s(s(0)) = true
	0 == xts2 = true => count(s(0), xts1 .. nil) <= s(0) = true
	count(s(0), xts .. nil) <= s(s(0)) = true
	0 == xts2 = false => count(s(0), xts1 .. nil) <= s(s(0)) = true
	count(s(s(0)), xts2 .. xts1 .. nil) <= s(s(0)) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	count(x, xs) <= len(xs) -> true
	count(x, xts .. yts) <= s(len(yts)) -> true
	0 == xts = true => count(0, xts .. nil) <= s(0) -> true
	count(x, xts2 .. xts1 .. yts) <= s(s(len(yts))) -> true
	0 == xts = true => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(0)) -> true
	s(0) == xts = true => count(s(0), xts .. nil) <= s(0) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	s(0) == xts = false => count(s(0), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	count(x, xts3 .. xts2 .. xts1 .. yts) <= s(s(s(len(yts)))) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	0 == xts = true => count(0, xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	0 == xts = false => count(0, xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> yts
	^f0($n0 + 1; yts, xts@) -> xts$n0 .. ^f0($n0; yts, xts@)
	^f1(0; yts) -> len(yts)
	^f1($n1 + 1; yts) -> s(^f1($n1; yts))
	^f136(0; xts) -> xts
	^f136($n136 + 1; xts) -> s(^f136($n136; xts))
+++ }
+++ Lemma(s)           = 
	count(x, xts$n .. ^f0($n; yts, xts@)) <= s(^f1($n; yts)) = true
	xts3 == xts2 = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(0) = true
	xts3 == xts2 = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true

+++ treating clause
	xts4 == s(xts3) = true => count(s(s(xts4)), xts2 .. xts1 .. nil) <= s(s(0)) = true
+++ inductive narrowing on conjecture
	xts4 == s(xts3) = true => count(s(s(xts4)), xts2 .. xts1 .. nil) <= s(s(0)) = true
... induction variables of
	xts4 == s(xts3) = true => count(s(s(xts4)), xts2 .. xts1 .. nil) <= s(s(0)) = true
... are:
	xts4:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	xts4 == s(xts3) = true => count(s(s(xts4)), xts2 .. xts1 .. nil) <= s(s(0)) = true
... with variable xts4
+++ creating new conjecture
	0 == s(xts3) = true => count(s(s(0)), xts2 .. xts1 .. nil) <= s(s(0)) = true
+++ creating new conjecture
	s(xts4) == s(xts3) = true => count(s(s(s(xts4))), xts2 .. xts1 .. nil) <= s(s(0)) = true
--- clause
	0 == s(xts3) = true => count(s(s(0)), xts2 .. xts1 .. nil) <= s(s(0)) = true
... reduced in 1 step to
	false = true => count(s(s(0)), xts2 .. xts1 .. nil) <= s(s(0)) = true
--- clause
	false = true => count(s(s(0)), xts2 .. xts1 .. nil) <= s(s(0)) = true
... contains a ground negative condition
	false = true
... and is therefore discarded (false => t is always true)
--- clause
	s(xts4) == s(xts3) = true => count(s(s(s(xts4))), xts2 .. xts1 .. nil) <= s(s(0)) = true
... reduced in 1 step to
	xts4 == xts3 = true => count(s(s(s(xts4))), xts2 .. xts1 .. nil) <= s(s(0)) = true
+++ inductive narrowing succeeded
--- clause
	xts4 == s(xts3) = true => count(s(s(xts4)), xts2 .. xts1 .. nil) <= s(s(0)) = true
... oriented to rule
	xts2 == s(xts1) = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
+++ added new clause(s)
	xts4 == xts3 = true => count(s(s(s(xts4))), xts2 .. xts1 .. nil) <= s(s(0)) = true
... to conjectures

+++ Status of the Inference System
--- Conjectures:
	xts2 == 0 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) = true
	xts3 == s(xts2) = true => count(s(xts3), xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == s(xts2) = false => count(s(xts3), xts1 .. nil) <= s(s(s(0))) = true
	s(s(xts3)) == xts2 = true => count(s(s(xts3)), xts1 .. nil) <= s(s(0)) = true
	s(s(xts3)) == xts2 = false => count(s(s(xts3)), xts1 .. nil) <= s(s(s(0))) = true
	s(0) == xts2 = true => count(s(0), xts1 .. nil) <= s(s(0)) = true
	s(0) == xts2 = false => count(s(0), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == 0 = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts4 == s(xts3) = false => count(s(s(xts4)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts2 == 0 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) = true
	xts3 == s(xts2) = true => count(s(s(s(xts3))), xts1 .. nil) <= s(0) = true
	xts2 == 0 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) = true
	xts3 == s(xts2) = false => count(s(s(s(xts3))), xts1 .. nil) <= s(s(0)) = true
	0 == xts2 = true => count(s(0), xts1 .. nil) <= s(0) = true
	count(s(0), xts .. nil) <= s(s(0)) = true
	0 == xts2 = false => count(s(0), xts1 .. nil) <= s(s(0)) = true
	count(s(s(0)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts4 == xts3 = true => count(s(s(s(xts4))), xts2 .. xts1 .. nil) <= s(s(0)) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	count(x, xs) <= len(xs) -> true
	count(x, xts .. yts) <= s(len(yts)) -> true
	0 == xts = true => count(0, xts .. nil) <= s(0) -> true
	count(x, xts2 .. xts1 .. yts) <= s(s(len(yts))) -> true
	0 == xts = true => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(0)) -> true
	s(0) == xts = true => count(s(0), xts .. nil) <= s(0) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	s(0) == xts = false => count(s(0), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	count(x, xts3 .. xts2 .. xts1 .. yts) <= s(s(s(len(yts)))) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	0 == xts = true => count(0, xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	0 == xts = false => count(0, xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> yts
	^f0($n0 + 1; yts, xts@) -> xts$n0 .. ^f0($n0; yts, xts@)
	^f1(0; yts) -> len(yts)
	^f1($n1 + 1; yts) -> s(^f1($n1; yts))
	^f136(0; xts) -> xts
	^f136($n136 + 1; xts) -> s(^f136($n136; xts))
+++ }
+++ Lemma(s)           = 
	count(x, xts$n .. ^f0($n; yts, xts@)) <= s(^f1($n; yts)) = true
	xts3 == xts2 = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(0) = true
	xts3 == xts2 = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true

+++ treating clause
	xts2 == 0 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) = true
+++ inductive narrowing on conjecture
	xts2 == 0 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) = true
... induction variables of
	xts2 == 0 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) = true
... are:
	xts2:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	xts2 == 0 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) = true
... with variable xts2
+++ creating new conjecture
	0 == 0 = true => count(s(0), xts .. nil) <= s(s(0)) = true
+++ creating new conjecture
	s(xts2) == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) = true
--- clause
	0 == 0 = true => count(s(0), xts .. nil) <= s(s(0)) = true
... reduced in 1 step to
	count(s(0), xts .. nil) <= s(s(0)) = true
--- clause
	s(xts2) == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) = true
... reduced in 1 step to
	false = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) = true
--- clause
	false = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) = true
... contains a ground negative condition
	false = true
... and is therefore discarded (false => t is always true)
--- clause
	count(s(0), xts .. nil) <= s(s(0)) = true
... subsumed by an existing conjecture
+++ inductive narrowing succeeded
--- clause
	xts2 == 0 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) = true
... oriented to rule
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true

+++ Status of the Inference System
--- Conjectures:
	xts3 == s(xts2) = true => count(s(xts3), xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == s(xts2) = false => count(s(xts3), xts1 .. nil) <= s(s(s(0))) = true
	s(s(xts3)) == xts2 = true => count(s(s(xts3)), xts1 .. nil) <= s(s(0)) = true
	s(s(xts3)) == xts2 = false => count(s(s(xts3)), xts1 .. nil) <= s(s(s(0))) = true
	s(0) == xts2 = true => count(s(0), xts1 .. nil) <= s(s(0)) = true
	s(0) == xts2 = false => count(s(0), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == 0 = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts4 == s(xts3) = false => count(s(s(xts4)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts2 == 0 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) = true
	xts3 == s(xts2) = true => count(s(s(s(xts3))), xts1 .. nil) <= s(0) = true
	xts2 == 0 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) = true
	xts3 == s(xts2) = false => count(s(s(s(xts3))), xts1 .. nil) <= s(s(0)) = true
	0 == xts2 = true => count(s(0), xts1 .. nil) <= s(0) = true
	count(s(0), xts .. nil) <= s(s(0)) = true
	0 == xts2 = false => count(s(0), xts1 .. nil) <= s(s(0)) = true
	count(s(s(0)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts4 == xts3 = true => count(s(s(s(xts4))), xts2 .. xts1 .. nil) <= s(s(0)) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	count(x, xs) <= len(xs) -> true
	count(x, xts .. yts) <= s(len(yts)) -> true
	0 == xts = true => count(0, xts .. nil) <= s(0) -> true
	count(x, xts2 .. xts1 .. yts) <= s(s(len(yts))) -> true
	0 == xts = true => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(0)) -> true
	s(0) == xts = true => count(s(0), xts .. nil) <= s(0) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	s(0) == xts = false => count(s(0), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	count(x, xts3 .. xts2 .. xts1 .. yts) <= s(s(s(len(yts)))) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	0 == xts = true => count(0, xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	0 == xts = false => count(0, xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> yts
	^f0($n0 + 1; yts, xts@) -> xts$n0 .. ^f0($n0; yts, xts@)
	^f1(0; yts) -> len(yts)
	^f1($n1 + 1; yts) -> s(^f1($n1; yts))
	^f136(0; xts) -> xts
	^f136($n136 + 1; xts) -> s(^f136($n136; xts))
+++ }
+++ Lemma(s)           = 
	count(x, xts$n .. ^f0($n; yts, xts@)) <= s(^f1($n; yts)) = true
	xts3 == xts2 = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(0) = true
	xts3 == xts2 = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true

+++ treating clause
	xts3 == s(xts2) = true => count(s(xts3), xts1 .. nil) <= s(s(0)) = true
+++ inductive narrowing on conjecture
	xts3 == s(xts2) = true => count(s(xts3), xts1 .. nil) <= s(s(0)) = true
... induction variables of
	xts3 == s(xts2) = true => count(s(xts3), xts1 .. nil) <= s(s(0)) = true
... are:
	xts3:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	xts3 == s(xts2) = true => count(s(xts3), xts1 .. nil) <= s(s(0)) = true
... with variable xts3
+++ creating new conjecture
	0 == s(xts2) = true => count(s(0), xts1 .. nil) <= s(s(0)) = true
+++ creating new conjecture
	s(xts3) == s(xts2) = true => count(s(s(xts3)), xts1 .. nil) <= s(s(0)) = true
--- clause
	0 == s(xts2) = true => count(s(0), xts1 .. nil) <= s(s(0)) = true
... reduced in 1 step to
	false = true => count(s(0), xts .. nil) <= s(s(0)) = true
--- clause
	false = true => count(s(0), xts .. nil) <= s(s(0)) = true
... contains a ground negative condition
	false = true
... and is therefore discarded (false => t is always true)
--- clause
	s(xts3) == s(xts2) = true => count(s(s(xts3)), xts1 .. nil) <= s(s(0)) = true
... reduced in 1 step to
	xts3 == xts2 = true => count(s(s(xts3)), xts1 .. nil) <= s(s(0)) = true
+++ inductive narrowing succeeded
--- clause
	xts3 == s(xts2) = true => count(s(xts3), xts1 .. nil) <= s(s(0)) = true
... oriented to rule
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
+++ added new clause(s)
	xts3 == xts2 = true => count(s(s(xts3)), xts1 .. nil) <= s(s(0)) = true
... to conjectures

+++ Status of the Inference System
--- Conjectures:
	xts2 == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == s(xts2) = false => count(s(xts3), xts1 .. nil) <= s(s(s(0))) = true
	s(s(xts3)) == xts2 = true => count(s(s(xts3)), xts1 .. nil) <= s(s(0)) = true
	s(s(xts3)) == xts2 = false => count(s(s(xts3)), xts1 .. nil) <= s(s(s(0))) = true
	s(0) == xts2 = true => count(s(0), xts1 .. nil) <= s(s(0)) = true
	s(0) == xts2 = false => count(s(0), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == 0 = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts4 == s(xts3) = false => count(s(s(xts4)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts2 == 0 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) = true
	xts3 == s(xts2) = true => count(s(s(s(xts3))), xts1 .. nil) <= s(0) = true
	xts2 == 0 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) = true
	xts3 == s(xts2) = false => count(s(s(s(xts3))), xts1 .. nil) <= s(s(0)) = true
	0 == xts2 = true => count(s(0), xts1 .. nil) <= s(0) = true
	count(s(0), xts .. nil) <= s(s(0)) = true
	0 == xts2 = false => count(s(0), xts1 .. nil) <= s(s(0)) = true
	count(s(s(0)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts4 == xts3 = true => count(s(s(s(xts4))), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts3 == xts2 = true => count(s(s(xts3)), xts1 .. nil) <= s(s(0)) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	count(x, xs) <= len(xs) -> true
	count(x, xts .. yts) <= s(len(yts)) -> true
	0 == xts = true => count(0, xts .. nil) <= s(0) -> true
	count(x, xts2 .. xts1 .. yts) <= s(s(len(yts))) -> true
	0 == xts = true => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(0)) -> true
	s(0) == xts = true => count(s(0), xts .. nil) <= s(0) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	s(0) == xts = false => count(s(0), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	count(x, xts3 .. xts2 .. xts1 .. yts) <= s(s(s(len(yts)))) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	0 == xts = true => count(0, xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	0 == xts = false => count(0, xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> yts
	^f0($n0 + 1; yts, xts@) -> xts$n0 .. ^f0($n0; yts, xts@)
	^f1(0; yts) -> len(yts)
	^f1($n1 + 1; yts) -> s(^f1($n1; yts))
	^f136(0; xts) -> xts
	^f136($n136 + 1; xts) -> s(^f136($n136; xts))
+++ }
+++ Lemma(s)           = 
	count(x, xts$n .. ^f0($n; yts, xts@)) <= s(^f1($n; yts)) = true
	xts3 == xts2 = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(0) = true
	xts3 == xts2 = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true

+++ treating clause
	xts2 == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) = true
+++ inductive narrowing on conjecture
	xts2 == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) = true
... induction variables of
	xts2 == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) = true
... are:
	xts2:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	xts2 == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) = true
... with variable xts2
+++ creating new conjecture
	0 == 0 = false => count(s(0), xts .. nil) <= s(s(s(0))) = true
+++ creating new conjecture
	s(xts2) == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) = true
--- clause
	0 == 0 = false => count(s(0), xts .. nil) <= s(s(s(0))) = true
... reduced in 1 step to
	true = false => count(s(0), xts .. nil) <= s(s(s(0))) = true
--- clause
	true = false => count(s(0), xts .. nil) <= s(s(s(0))) = true
... contains a ground negative condition
	true = false
... and is therefore discarded (false => t is always true)
--- clause
	s(xts2) == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) = true
... reduced in 1 step to
	count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) = true
+++ inductive narrowing succeeded
--- clause
	xts2 == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) = true
... oriented to rule
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
+++ added new clause(s)
	count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) = true
... to conjectures

+++ Status of the Inference System
--- Conjectures:
	xts3 == s(xts2) = false => count(s(xts3), xts1 .. nil) <= s(s(s(0))) = true
	s(s(xts3)) == xts2 = true => count(s(s(xts3)), xts1 .. nil) <= s(s(0)) = true
	s(s(xts3)) == xts2 = false => count(s(s(xts3)), xts1 .. nil) <= s(s(s(0))) = true
	s(0) == xts2 = true => count(s(0), xts1 .. nil) <= s(s(0)) = true
	s(0) == xts2 = false => count(s(0), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == 0 = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts4 == s(xts3) = false => count(s(s(xts4)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts2 == 0 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) = true
	xts3 == s(xts2) = true => count(s(s(s(xts3))), xts1 .. nil) <= s(0) = true
	xts2 == 0 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) = true
	xts3 == s(xts2) = false => count(s(s(s(xts3))), xts1 .. nil) <= s(s(0)) = true
	0 == xts2 = true => count(s(0), xts1 .. nil) <= s(0) = true
	count(s(0), xts .. nil) <= s(s(0)) = true
	0 == xts2 = false => count(s(0), xts1 .. nil) <= s(s(0)) = true
	count(s(s(0)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts4 == xts3 = true => count(s(s(s(xts4))), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts3 == xts2 = true => count(s(s(xts3)), xts1 .. nil) <= s(s(0)) = true
	count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	count(x, xs) <= len(xs) -> true
	count(x, xts .. yts) <= s(len(yts)) -> true
	0 == xts = true => count(0, xts .. nil) <= s(0) -> true
	count(x, xts2 .. xts1 .. yts) <= s(s(len(yts))) -> true
	0 == xts = true => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(0)) -> true
	s(0) == xts = true => count(s(0), xts .. nil) <= s(0) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	s(0) == xts = false => count(s(0), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	count(x, xts3 .. xts2 .. xts1 .. yts) <= s(s(s(len(yts)))) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	0 == xts = true => count(0, xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	0 == xts = false => count(0, xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> yts
	^f0($n0 + 1; yts, xts@) -> xts$n0 .. ^f0($n0; yts, xts@)
	^f1(0; yts) -> len(yts)
	^f1($n1 + 1; yts) -> s(^f1($n1; yts))
	^f136(0; xts) -> xts
	^f136($n136 + 1; xts) -> s(^f136($n136; xts))
+++ }
+++ Lemma(s)           = 
	count(x, xts$n .. ^f0($n; yts, xts@)) <= s(^f1($n; yts)) = true
	xts3 == xts2 = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(0) = true
	xts3 == xts2 = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true

+++ treating clause
	xts3 == s(xts2) = false => count(s(xts3), xts1 .. nil) <= s(s(s(0))) = true
+++ inductive narrowing on conjecture
	xts3 == s(xts2) = false => count(s(xts3), xts1 .. nil) <= s(s(s(0))) = true
... induction variables of
	xts3 == s(xts2) = false => count(s(xts3), xts1 .. nil) <= s(s(s(0))) = true
... are:
	xts3:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	xts3 == s(xts2) = false => count(s(xts3), xts1 .. nil) <= s(s(s(0))) = true
... with variable xts3
+++ creating new conjecture
	0 == s(xts2) = false => count(s(0), xts1 .. nil) <= s(s(s(0))) = true
+++ creating new conjecture
	s(xts3) == s(xts2) = false => count(s(s(xts3)), xts1 .. nil) <= s(s(s(0))) = true
--- clause
	0 == s(xts2) = false => count(s(0), xts1 .. nil) <= s(s(s(0))) = true
... reduced in 1 step to
	count(s(0), xts .. nil) <= s(s(s(0))) = true
--- clause
	s(xts3) == s(xts2) = false => count(s(s(xts3)), xts1 .. nil) <= s(s(s(0))) = true
... reduced in 1 step to
	xts3 == xts2 = false => count(s(s(xts3)), xts1 .. nil) <= s(s(s(0))) = true
+++ inductive narrowing succeeded
--- clause
	xts3 == s(xts2) = false => count(s(xts3), xts1 .. nil) <= s(s(s(0))) = true
... oriented to rule
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
+++ added new clause(s)
	count(s(0), xts .. nil) <= s(s(s(0))) = true
	xts3 == xts2 = false => count(s(s(xts3)), xts1 .. nil) <= s(s(s(0))) = true
... to conjectures

+++ Status of the Inference System
--- Conjectures:
	s(s(xts3)) == xts2 = true => count(s(s(xts3)), xts1 .. nil) <= s(s(0)) = true
	s(s(xts3)) == xts2 = false => count(s(s(xts3)), xts1 .. nil) <= s(s(s(0))) = true
	s(0) == xts2 = true => count(s(0), xts1 .. nil) <= s(s(0)) = true
	s(0) == xts2 = false => count(s(0), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == 0 = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts4 == s(xts3) = false => count(s(s(xts4)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts2 == 0 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) = true
	xts3 == s(xts2) = true => count(s(s(s(xts3))), xts1 .. nil) <= s(0) = true
	xts2 == 0 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) = true
	xts3 == s(xts2) = false => count(s(s(s(xts3))), xts1 .. nil) <= s(s(0)) = true
	0 == xts2 = true => count(s(0), xts1 .. nil) <= s(0) = true
	count(s(0), xts .. nil) <= s(s(0)) = true
	0 == xts2 = false => count(s(0), xts1 .. nil) <= s(s(0)) = true
	count(s(s(0)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts4 == xts3 = true => count(s(s(s(xts4))), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts3 == xts2 = true => count(s(s(xts3)), xts1 .. nil) <= s(s(0)) = true
	count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) = true
	count(s(0), xts .. nil) <= s(s(s(0))) = true
	xts3 == xts2 = false => count(s(s(xts3)), xts1 .. nil) <= s(s(s(0))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	count(x, xs) <= len(xs) -> true
	count(x, xts .. yts) <= s(len(yts)) -> true
	0 == xts = true => count(0, xts .. nil) <= s(0) -> true
	count(x, xts2 .. xts1 .. yts) <= s(s(len(yts))) -> true
	0 == xts = true => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(0)) -> true
	s(0) == xts = true => count(s(0), xts .. nil) <= s(0) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	s(0) == xts = false => count(s(0), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	count(x, xts3 .. xts2 .. xts1 .. yts) <= s(s(s(len(yts)))) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	0 == xts = true => count(0, xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	0 == xts = false => count(0, xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> yts
	^f0($n0 + 1; yts, xts@) -> xts$n0 .. ^f0($n0; yts, xts@)
	^f1(0; yts) -> len(yts)
	^f1($n1 + 1; yts) -> s(^f1($n1; yts))
	^f136(0; xts) -> xts
	^f136($n136 + 1; xts) -> s(^f136($n136; xts))
+++ }
+++ Lemma(s)           = 
	count(x, xts$n .. ^f0($n; yts, xts@)) <= s(^f1($n; yts)) = true
	xts3 == xts2 = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(0) = true
	xts3 == xts2 = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true

+++ treating clause
	s(s(xts3)) == xts2 = true => count(s(s(xts3)), xts1 .. nil) <= s(s(0)) = true
+++ inductive narrowing on conjecture
	s(s(xts3)) == xts2 = true => count(s(s(xts3)), xts1 .. nil) <= s(s(0)) = true
... induction variables of
	s(s(xts3)) == xts2 = true => count(s(s(xts3)), xts1 .. nil) <= s(s(0)) = true
... are:
	xts2:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	s(s(xts3)) == xts2 = true => count(s(s(xts3)), xts1 .. nil) <= s(s(0)) = true
... with variable xts2
+++ creating new conjecture
	s(s(xts2)) == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) = true
+++ creating new conjecture
	s(s(xts3)) == s(xts2) = true => count(s(s(xts3)), xts1 .. nil) <= s(s(0)) = true
--- clause
	s(s(xts2)) == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) = true
... reduced in 1 step to
	false = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) = true
--- clause
	false = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) = true
... contains a ground negative condition
	false = true
... and is therefore discarded (false => t is always true)
--- clause
	s(s(xts3)) == s(xts2) = true => count(s(s(xts3)), xts1 .. nil) <= s(s(0)) = true
... reduced in 1 step to
	s(xts3) == xts2 = true => count(s(s(xts3)), xts1 .. nil) <= s(s(0)) = true
+++ inductive narrowing succeeded
--- clause
	s(s(xts3)) == xts2 = true => count(s(s(xts3)), xts1 .. nil) <= s(s(0)) = true
... oriented to rule
	s(s(xts2)) == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
+++ added new clause(s)
	s(xts3) == xts2 = true => count(s(s(xts3)), xts1 .. nil) <= s(s(0)) = true
... to conjectures

+++ Status of the Inference System
--- Conjectures:
	s(s(xts3)) == xts2 = false => count(s(s(xts3)), xts1 .. nil) <= s(s(s(0))) = true
	s(0) == xts2 = true => count(s(0), xts1 .. nil) <= s(s(0)) = true
	s(0) == xts2 = false => count(s(0), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == 0 = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts4 == s(xts3) = false => count(s(s(xts4)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts2 == 0 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) = true
	xts3 == s(xts2) = true => count(s(s(s(xts3))), xts1 .. nil) <= s(0) = true
	xts2 == 0 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) = true
	xts3 == s(xts2) = false => count(s(s(s(xts3))), xts1 .. nil) <= s(s(0)) = true
	0 == xts2 = true => count(s(0), xts1 .. nil) <= s(0) = true
	count(s(0), xts .. nil) <= s(s(0)) = true
	0 == xts2 = false => count(s(0), xts1 .. nil) <= s(s(0)) = true
	count(s(s(0)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts4 == xts3 = true => count(s(s(s(xts4))), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts3 == xts2 = true => count(s(s(xts3)), xts1 .. nil) <= s(s(0)) = true
	count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) = true
	count(s(0), xts .. nil) <= s(s(s(0))) = true
	xts3 == xts2 = false => count(s(s(xts3)), xts1 .. nil) <= s(s(s(0))) = true
	s(xts3) == xts2 = true => count(s(s(xts3)), xts1 .. nil) <= s(s(0)) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	count(x, xs) <= len(xs) -> true
	count(x, xts .. yts) <= s(len(yts)) -> true
	0 == xts = true => count(0, xts .. nil) <= s(0) -> true
	count(x, xts2 .. xts1 .. yts) <= s(s(len(yts))) -> true
	0 == xts = true => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(0)) -> true
	s(0) == xts = true => count(s(0), xts .. nil) <= s(0) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	s(0) == xts = false => count(s(0), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	count(x, xts3 .. xts2 .. xts1 .. yts) <= s(s(s(len(yts)))) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	0 == xts = true => count(0, xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	0 == xts = false => count(0, xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(xts2)) == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> yts
	^f0($n0 + 1; yts, xts@) -> xts$n0 .. ^f0($n0; yts, xts@)
	^f1(0; yts) -> len(yts)
	^f1($n1 + 1; yts) -> s(^f1($n1; yts))
	^f136(0; xts) -> xts
	^f136($n136 + 1; xts) -> s(^f136($n136; xts))
+++ }
+++ Lemma(s)           = 
	count(x, xts$n .. ^f0($n; yts, xts@)) <= s(^f1($n; yts)) = true
	xts3 == xts2 = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(0) = true
	xts3 == xts2 = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true

+++ treating clause
	s(s(xts3)) == xts2 = false => count(s(s(xts3)), xts1 .. nil) <= s(s(s(0))) = true
+++ inductive narrowing on conjecture
	s(s(xts3)) == xts2 = false => count(s(s(xts3)), xts1 .. nil) <= s(s(s(0))) = true
... induction variables of
	s(s(xts3)) == xts2 = false => count(s(s(xts3)), xts1 .. nil) <= s(s(s(0))) = true
... are:
	xts2:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	s(s(xts3)) == xts2 = false => count(s(s(xts3)), xts1 .. nil) <= s(s(s(0))) = true
... with variable xts2
+++ creating new conjecture
	s(s(xts2)) == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) = true
+++ creating new conjecture
	s(s(xts3)) == s(xts2) = false => count(s(s(xts3)), xts1 .. nil) <= s(s(s(0))) = true
--- clause
	s(s(xts2)) == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) = true
... reduced in 1 step to
	count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) = true
--- clause
	s(s(xts3)) == s(xts2) = false => count(s(s(xts3)), xts1 .. nil) <= s(s(s(0))) = true
... reduced in 1 step to
	s(xts3) == xts2 = false => count(s(s(xts3)), xts1 .. nil) <= s(s(s(0))) = true
--- clause
	count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) = true
... subsumed by an existing conjecture
+++ inductive narrowing succeeded
--- clause
	s(s(xts3)) == xts2 = false => count(s(s(xts3)), xts1 .. nil) <= s(s(s(0))) = true
... oriented to rule
	s(s(xts2)) == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
+++ added new clause(s)
	s(xts3) == xts2 = false => count(s(s(xts3)), xts1 .. nil) <= s(s(s(0))) = true
... to conjectures

+++ Status of the Inference System
--- Conjectures:
	s(0) == xts2 = true => count(s(0), xts1 .. nil) <= s(s(0)) = true
	s(0) == xts2 = false => count(s(0), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == 0 = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts4 == s(xts3) = false => count(s(s(xts4)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts2 == 0 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) = true
	xts3 == s(xts2) = true => count(s(s(s(xts3))), xts1 .. nil) <= s(0) = true
	xts2 == 0 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) = true
	xts3 == s(xts2) = false => count(s(s(s(xts3))), xts1 .. nil) <= s(s(0)) = true
	0 == xts2 = true => count(s(0), xts1 .. nil) <= s(0) = true
	count(s(0), xts .. nil) <= s(s(0)) = true
	0 == xts2 = false => count(s(0), xts1 .. nil) <= s(s(0)) = true
	count(s(s(0)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts4 == xts3 = true => count(s(s(s(xts4))), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts3 == xts2 = true => count(s(s(xts3)), xts1 .. nil) <= s(s(0)) = true
	count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) = true
	count(s(0), xts .. nil) <= s(s(s(0))) = true
	xts3 == xts2 = false => count(s(s(xts3)), xts1 .. nil) <= s(s(s(0))) = true
	s(xts3) == xts2 = true => count(s(s(xts3)), xts1 .. nil) <= s(s(0)) = true
	s(xts3) == xts2 = false => count(s(s(xts3)), xts1 .. nil) <= s(s(s(0))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	count(x, xs) <= len(xs) -> true
	count(x, xts .. yts) <= s(len(yts)) -> true
	0 == xts = true => count(0, xts .. nil) <= s(0) -> true
	count(x, xts2 .. xts1 .. yts) <= s(s(len(yts))) -> true
	0 == xts = true => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(0)) -> true
	s(0) == xts = true => count(s(0), xts .. nil) <= s(0) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	s(0) == xts = false => count(s(0), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	count(x, xts3 .. xts2 .. xts1 .. yts) <= s(s(s(len(yts)))) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	0 == xts = true => count(0, xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	0 == xts = false => count(0, xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(xts2)) == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(xts2)) == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> yts
	^f0($n0 + 1; yts, xts@) -> xts$n0 .. ^f0($n0; yts, xts@)
	^f1(0; yts) -> len(yts)
	^f1($n1 + 1; yts) -> s(^f1($n1; yts))
	^f136(0; xts) -> xts
	^f136($n136 + 1; xts) -> s(^f136($n136; xts))
+++ }
+++ Lemma(s)           = 
	count(x, xts$n .. ^f0($n; yts, xts@)) <= s(^f1($n; yts)) = true
	xts3 == xts2 = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(0) = true
	xts3 == xts2 = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true

+++ treating clause
	s(0) == xts2 = true => count(s(0), xts1 .. nil) <= s(s(0)) = true
+++ inductive narrowing on conjecture
	s(0) == xts2 = true => count(s(0), xts1 .. nil) <= s(s(0)) = true
... induction variables of
	s(0) == xts2 = true => count(s(0), xts1 .. nil) <= s(s(0)) = true
... are:
	xts2:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	s(0) == xts2 = true => count(s(0), xts1 .. nil) <= s(s(0)) = true
... with variable xts2
+++ creating new conjecture
	s(0) == 0 = true => count(s(0), xts .. nil) <= s(s(0)) = true
+++ creating new conjecture
	s(0) == s(xts2) = true => count(s(0), xts1 .. nil) <= s(s(0)) = true
--- clause
	s(0) == 0 = true => count(s(0), xts .. nil) <= s(s(0)) = true
... reduced in 1 step to
	false = true => count(s(0), xts .. nil) <= s(s(0)) = true
--- clause
	false = true => count(s(0), xts .. nil) <= s(s(0)) = true
... contains a ground negative condition
	false = true
... and is therefore discarded (false => t is always true)
--- clause
	s(0) == s(xts2) = true => count(s(0), xts1 .. nil) <= s(s(0)) = true
... reduced in 1 step to
	0 == xts2 = true => count(s(0), xts1 .. nil) <= s(s(0)) = true
+++ inductive narrowing succeeded
--- clause
	s(0) == xts2 = true => count(s(0), xts1 .. nil) <= s(s(0)) = true
... oriented to rule
	s(0) == xts = true => count(s(0), xts .. nil) <= s(s(0)) -> true
+++ added new clause(s)
	0 == xts2 = true => count(s(0), xts1 .. nil) <= s(s(0)) = true
... to conjectures

+++ Status of the Inference System
--- Conjectures:
	s(0) == xts2 = false => count(s(0), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == 0 = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts4 == s(xts3) = false => count(s(s(xts4)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts2 == 0 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) = true
	xts3 == s(xts2) = true => count(s(s(s(xts3))), xts1 .. nil) <= s(0) = true
	xts2 == 0 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) = true
	xts3 == s(xts2) = false => count(s(s(s(xts3))), xts1 .. nil) <= s(s(0)) = true
	0 == xts2 = true => count(s(0), xts1 .. nil) <= s(0) = true
	count(s(0), xts .. nil) <= s(s(0)) = true
	0 == xts2 = false => count(s(0), xts1 .. nil) <= s(s(0)) = true
	count(s(s(0)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts4 == xts3 = true => count(s(s(s(xts4))), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts3 == xts2 = true => count(s(s(xts3)), xts1 .. nil) <= s(s(0)) = true
	count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) = true
	count(s(0), xts .. nil) <= s(s(s(0))) = true
	xts3 == xts2 = false => count(s(s(xts3)), xts1 .. nil) <= s(s(s(0))) = true
	s(xts3) == xts2 = true => count(s(s(xts3)), xts1 .. nil) <= s(s(0)) = true
	s(xts3) == xts2 = false => count(s(s(xts3)), xts1 .. nil) <= s(s(s(0))) = true
	0 == xts2 = true => count(s(0), xts1 .. nil) <= s(s(0)) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	count(x, xs) <= len(xs) -> true
	count(x, xts .. yts) <= s(len(yts)) -> true
	0 == xts = true => count(0, xts .. nil) <= s(0) -> true
	count(x, xts2 .. xts1 .. yts) <= s(s(len(yts))) -> true
	0 == xts = true => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(0)) -> true
	s(0) == xts = true => count(s(0), xts .. nil) <= s(0) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	s(0) == xts = true => count(s(0), xts .. nil) <= s(s(0)) -> true
	s(0) == xts = false => count(s(0), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	count(x, xts3 .. xts2 .. xts1 .. yts) <= s(s(s(len(yts)))) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	0 == xts = true => count(0, xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	0 == xts = false => count(0, xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(xts2)) == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(xts2)) == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> yts
	^f0($n0 + 1; yts, xts@) -> xts$n0 .. ^f0($n0; yts, xts@)
	^f1(0; yts) -> len(yts)
	^f1($n1 + 1; yts) -> s(^f1($n1; yts))
	^f136(0; xts) -> xts
	^f136($n136 + 1; xts) -> s(^f136($n136; xts))
+++ }
+++ Lemma(s)           = 
	count(x, xts$n .. ^f0($n; yts, xts@)) <= s(^f1($n; yts)) = true
	xts3 == xts2 = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(0) = true
	xts3 == xts2 = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true

+++ treating clause
	s(0) == xts2 = false => count(s(0), xts1 .. nil) <= s(s(s(0))) = true
+++ inductive narrowing on conjecture
	s(0) == xts2 = false => count(s(0), xts1 .. nil) <= s(s(s(0))) = true
... induction variables of
	s(0) == xts2 = false => count(s(0), xts1 .. nil) <= s(s(s(0))) = true
... are:
	xts2:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	s(0) == xts2 = false => count(s(0), xts1 .. nil) <= s(s(s(0))) = true
... with variable xts2
+++ creating new conjecture
	s(0) == 0 = false => count(s(0), xts .. nil) <= s(s(s(0))) = true
+++ creating new conjecture
	s(0) == s(xts2) = false => count(s(0), xts1 .. nil) <= s(s(s(0))) = true
--- clause
	s(0) == 0 = false => count(s(0), xts .. nil) <= s(s(s(0))) = true
... reduced in 1 step to
	count(s(0), xts .. nil) <= s(s(s(0))) = true
--- clause
	s(0) == s(xts2) = false => count(s(0), xts1 .. nil) <= s(s(s(0))) = true
... reduced in 1 step to
	0 == xts2 = false => count(s(0), xts1 .. nil) <= s(s(s(0))) = true
--- clause
	count(s(0), xts .. nil) <= s(s(s(0))) = true
... subsumed by an existing conjecture
+++ inductive narrowing succeeded
--- clause
	s(0) == xts2 = false => count(s(0), xts1 .. nil) <= s(s(s(0))) = true
... oriented to rule
	s(0) == xts = false => count(s(0), xts .. nil) <= s(s(s(0))) -> true
+++ added new clause(s)
	0 == xts2 = false => count(s(0), xts1 .. nil) <= s(s(s(0))) = true
... to conjectures

+++ Status of the Inference System
--- Conjectures:
	xts3 == 0 = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts4 == s(xts3) = false => count(s(s(xts4)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts2 == 0 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) = true
	xts3 == s(xts2) = true => count(s(s(s(xts3))), xts1 .. nil) <= s(0) = true
	xts2 == 0 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) = true
	xts3 == s(xts2) = false => count(s(s(s(xts3))), xts1 .. nil) <= s(s(0)) = true
	0 == xts2 = true => count(s(0), xts1 .. nil) <= s(0) = true
	count(s(0), xts .. nil) <= s(s(0)) = true
	0 == xts2 = false => count(s(0), xts1 .. nil) <= s(s(0)) = true
	count(s(s(0)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts4 == xts3 = true => count(s(s(s(xts4))), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts3 == xts2 = true => count(s(s(xts3)), xts1 .. nil) <= s(s(0)) = true
	count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) = true
	count(s(0), xts .. nil) <= s(s(s(0))) = true
	xts3 == xts2 = false => count(s(s(xts3)), xts1 .. nil) <= s(s(s(0))) = true
	s(xts3) == xts2 = true => count(s(s(xts3)), xts1 .. nil) <= s(s(0)) = true
	s(xts3) == xts2 = false => count(s(s(xts3)), xts1 .. nil) <= s(s(s(0))) = true
	0 == xts2 = true => count(s(0), xts1 .. nil) <= s(s(0)) = true
	0 == xts2 = false => count(s(0), xts1 .. nil) <= s(s(s(0))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	count(x, xs) <= len(xs) -> true
	count(x, xts .. yts) <= s(len(yts)) -> true
	0 == xts = true => count(0, xts .. nil) <= s(0) -> true
	count(x, xts2 .. xts1 .. yts) <= s(s(len(yts))) -> true
	0 == xts = true => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(0)) -> true
	s(0) == xts = true => count(s(0), xts .. nil) <= s(0) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	s(0) == xts = true => count(s(0), xts .. nil) <= s(s(0)) -> true
	s(0) == xts = false => count(s(0), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	count(x, xts3 .. xts2 .. xts1 .. yts) <= s(s(s(len(yts)))) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	0 == xts = true => count(0, xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(0) == xts = false => count(s(0), xts .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	0 == xts = false => count(0, xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(xts2)) == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(xts2)) == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> yts
	^f0($n0 + 1; yts, xts@) -> xts$n0 .. ^f0($n0; yts, xts@)
	^f1(0; yts) -> len(yts)
	^f1($n1 + 1; yts) -> s(^f1($n1; yts))
	^f136(0; xts) -> xts
	^f136($n136 + 1; xts) -> s(^f136($n136; xts))
+++ }
+++ Lemma(s)           = 
	count(x, xts$n .. ^f0($n; yts, xts@)) <= s(^f1($n; yts)) = true
	xts3 == xts2 = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(0) = true
	xts3 == xts2 = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true

+++ treating clause
	xts3 == 0 = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
+++ inductive narrowing on conjecture
	xts3 == 0 = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
... induction variables of
	xts3 == 0 = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
... are:
	xts3:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	xts3 == 0 = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
... with variable xts3
+++ creating new conjecture
	0 == 0 = false => count(s(s(0)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
+++ creating new conjecture
	s(xts3) == 0 = false => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
--- clause
	0 == 0 = false => count(s(s(0)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
... reduced in 1 step to
	true = false => count(s(s(0)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
--- clause
	true = false => count(s(s(0)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
... contains a ground negative condition
	true = false
... and is therefore discarded (false => t is always true)
--- clause
	s(xts3) == 0 = false => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
... reduced in 1 step to
	count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
+++ inductive narrowing succeeded
--- clause
	xts3 == 0 = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
... oriented to rule
	xts == 0 = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
+++ added new clause(s)
	count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
... to conjectures

+++ Status of the Inference System
--- Conjectures:
	xts4 == s(xts3) = false => count(s(s(xts4)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts2 == 0 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) = true
	xts3 == s(xts2) = true => count(s(s(s(xts3))), xts1 .. nil) <= s(0) = true
	xts2 == 0 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) = true
	xts3 == s(xts2) = false => count(s(s(s(xts3))), xts1 .. nil) <= s(s(0)) = true
	0 == xts2 = true => count(s(0), xts1 .. nil) <= s(0) = true
	count(s(0), xts .. nil) <= s(s(0)) = true
	0 == xts2 = false => count(s(0), xts1 .. nil) <= s(s(0)) = true
	count(s(s(0)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts4 == xts3 = true => count(s(s(s(xts4))), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts3 == xts2 = true => count(s(s(xts3)), xts1 .. nil) <= s(s(0)) = true
	count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) = true
	count(s(0), xts .. nil) <= s(s(s(0))) = true
	xts3 == xts2 = false => count(s(s(xts3)), xts1 .. nil) <= s(s(s(0))) = true
	s(xts3) == xts2 = true => count(s(s(xts3)), xts1 .. nil) <= s(s(0)) = true
	s(xts3) == xts2 = false => count(s(s(xts3)), xts1 .. nil) <= s(s(s(0))) = true
	0 == xts2 = true => count(s(0), xts1 .. nil) <= s(s(0)) = true
	0 == xts2 = false => count(s(0), xts1 .. nil) <= s(s(s(0))) = true
	count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	count(x, xs) <= len(xs) -> true
	count(x, xts .. yts) <= s(len(yts)) -> true
	0 == xts = true => count(0, xts .. nil) <= s(0) -> true
	count(x, xts2 .. xts1 .. yts) <= s(s(len(yts))) -> true
	0 == xts = true => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(0)) -> true
	s(0) == xts = true => count(s(0), xts .. nil) <= s(0) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	s(0) == xts = true => count(s(0), xts .. nil) <= s(s(0)) -> true
	s(0) == xts = false => count(s(0), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	count(x, xts3 .. xts2 .. xts1 .. yts) <= s(s(s(len(yts)))) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	0 == xts = true => count(0, xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(0) == xts = false => count(s(0), xts .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	0 == xts = false => count(0, xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(xts2)) == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(xts2)) == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> yts
	^f0($n0 + 1; yts, xts@) -> xts$n0 .. ^f0($n0; yts, xts@)
	^f1(0; yts) -> len(yts)
	^f1($n1 + 1; yts) -> s(^f1($n1; yts))
	^f136(0; xts) -> xts
	^f136($n136 + 1; xts) -> s(^f136($n136; xts))
+++ }
+++ Lemma(s)           = 
	count(x, xts$n .. ^f0($n; yts, xts@)) <= s(^f1($n; yts)) = true
	xts3 == xts2 = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(0) = true
	xts3 == xts2 = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true

+++ treating clause
	xts4 == s(xts3) = false => count(s(s(xts4)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
+++ inductive narrowing on conjecture
	xts4 == s(xts3) = false => count(s(s(xts4)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
... induction variables of
	xts4 == s(xts3) = false => count(s(s(xts4)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
... are:
	xts4:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	xts4 == s(xts3) = false => count(s(s(xts4)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
... with variable xts4
+++ creating new conjecture
	0 == s(xts3) = false => count(s(s(0)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
+++ creating new conjecture
	s(xts4) == s(xts3) = false => count(s(s(s(xts4))), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
--- clause
	0 == s(xts3) = false => count(s(s(0)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
... reduced in 1 step to
	count(s(s(0)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
--- clause
	s(xts4) == s(xts3) = false => count(s(s(s(xts4))), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
... reduced in 1 step to
	xts4 == xts3 = false => count(s(s(s(xts4))), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
+++ inductive narrowing succeeded
--- clause
	xts4 == s(xts3) = false => count(s(s(xts4)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
... oriented to rule
	xts2 == s(xts1) = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
+++ added new clause(s)
	count(s(s(0)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts4 == xts3 = false => count(s(s(s(xts4))), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
... to conjectures

+++ Status of the Inference System
--- Conjectures:
	xts2 == 0 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) = true
	xts3 == s(xts2) = true => count(s(s(s(xts3))), xts1 .. nil) <= s(0) = true
	xts2 == 0 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) = true
	xts3 == s(xts2) = false => count(s(s(s(xts3))), xts1 .. nil) <= s(s(0)) = true
	0 == xts2 = true => count(s(0), xts1 .. nil) <= s(0) = true
	count(s(0), xts .. nil) <= s(s(0)) = true
	0 == xts2 = false => count(s(0), xts1 .. nil) <= s(s(0)) = true
	count(s(s(0)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts4 == xts3 = true => count(s(s(s(xts4))), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts3 == xts2 = true => count(s(s(xts3)), xts1 .. nil) <= s(s(0)) = true
	count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) = true
	count(s(0), xts .. nil) <= s(s(s(0))) = true
	xts3 == xts2 = false => count(s(s(xts3)), xts1 .. nil) <= s(s(s(0))) = true
	s(xts3) == xts2 = true => count(s(s(xts3)), xts1 .. nil) <= s(s(0)) = true
	s(xts3) == xts2 = false => count(s(s(xts3)), xts1 .. nil) <= s(s(s(0))) = true
	0 == xts2 = true => count(s(0), xts1 .. nil) <= s(s(0)) = true
	0 == xts2 = false => count(s(0), xts1 .. nil) <= s(s(s(0))) = true
	count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	count(s(s(0)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts4 == xts3 = false => count(s(s(s(xts4))), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	count(x, xs) <= len(xs) -> true
	count(x, xts .. yts) <= s(len(yts)) -> true
	0 == xts = true => count(0, xts .. nil) <= s(0) -> true
	count(x, xts2 .. xts1 .. yts) <= s(s(len(yts))) -> true
	0 == xts = true => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(0)) -> true
	s(0) == xts = true => count(s(0), xts .. nil) <= s(0) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	s(0) == xts = true => count(s(0), xts .. nil) <= s(s(0)) -> true
	s(0) == xts = false => count(s(0), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	count(x, xts3 .. xts2 .. xts1 .. yts) <= s(s(s(len(yts)))) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	0 == xts = true => count(0, xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(0) == xts = false => count(s(0), xts .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	0 == xts = false => count(0, xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(xts2)) == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(xts2)) == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> yts
	^f0($n0 + 1; yts, xts@) -> xts$n0 .. ^f0($n0; yts, xts@)
	^f1(0; yts) -> len(yts)
	^f1($n1 + 1; yts) -> s(^f1($n1; yts))
	^f136(0; xts) -> xts
	^f136($n136 + 1; xts) -> s(^f136($n136; xts))
+++ }
+++ Lemma(s)           = 
	count(x, xts$n .. ^f0($n; yts, xts@)) <= s(^f1($n; yts)) = true
	xts3 == xts2 = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(0) = true
	xts3 == xts2 = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true

+++ treating clause
	xts2 == 0 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) = true
+++ inductive narrowing on conjecture
	xts2 == 0 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) = true
... induction variables of
	xts2 == 0 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) = true
... are:
	xts2:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	xts2 == 0 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) = true
... with variable xts2
+++ creating new conjecture
	0 == 0 = true => count(s(s(s(0))), xts .. nil) <= s(0) = true
+++ creating new conjecture
	s(xts2) == 0 = true => count(s(s(s(s(xts2)))), xts1 .. nil) <= s(0) = true
--- clause
	0 == 0 = true => count(s(s(s(0))), xts .. nil) <= s(0) = true
... reduced in 1 step to
	count(s(s(s(0))), xts .. nil) <= s(0) = true
--- clause
	s(xts2) == 0 = true => count(s(s(s(s(xts2)))), xts1 .. nil) <= s(0) = true
... reduced in 1 step to
	false = true => count(s(s(s(s(xts2)))), xts1 .. nil) <= s(0) = true
--- clause
	false = true => count(s(s(s(s(xts2)))), xts1 .. nil) <= s(0) = true
... contains a ground negative condition
	false = true
... and is therefore discarded (false => t is always true)
+++ inductive narrowing succeeded
--- clause
	xts2 == 0 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) = true
... oriented to rule
	xts == 0 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
+++ added new clause(s)
	count(s(s(s(0))), xts .. nil) <= s(0) = true
... to conjectures
+++ active wrap
	xts2 == 0 = true => count(s(.), xts1 .. nil) <= s(0) = true
... with sequence
	xts2 == 0 = true => count(s(xts2), xts1 .. nil) <= s(0) = true
	xts2 == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) = true
	xts2 == 0 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) = true
+++ primal grammar found for head
	{.., 0, <=, ==, count, nil, s, true}
... and wrap
	xts2 == 0 = true => count(s(.), xts1 .. nil) <= s(0) = true
+++ Presburger system  = {
	^f136(0; xts) -> xts
	^f136($n136 + 1; xts) -> s(^f136($n136; xts))
+++ }
+++ Lemma(s)           = 
	xts2 == 0 = true => count(s(^f136($n; xts2)), xts1 .. nil) <= s(0) = true

+++ Status of the Inference System
--- Conjectures:
	xts3 == s(xts2) = true => count(s(s(s(xts3))), xts1 .. nil) <= s(0) = true
	xts2 == 0 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) = true
	xts3 == s(xts2) = false => count(s(s(s(xts3))), xts1 .. nil) <= s(s(0)) = true
	0 == xts2 = true => count(s(0), xts1 .. nil) <= s(0) = true
	count(s(0), xts .. nil) <= s(s(0)) = true
	0 == xts2 = false => count(s(0), xts1 .. nil) <= s(s(0)) = true
	count(s(s(0)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts4 == xts3 = true => count(s(s(s(xts4))), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts3 == xts2 = true => count(s(s(xts3)), xts1 .. nil) <= s(s(0)) = true
	count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) = true
	count(s(0), xts .. nil) <= s(s(s(0))) = true
	xts3 == xts2 = false => count(s(s(xts3)), xts1 .. nil) <= s(s(s(0))) = true
	s(xts3) == xts2 = true => count(s(s(xts3)), xts1 .. nil) <= s(s(0)) = true
	s(xts3) == xts2 = false => count(s(s(xts3)), xts1 .. nil) <= s(s(s(0))) = true
	0 == xts2 = true => count(s(0), xts1 .. nil) <= s(s(0)) = true
	0 == xts2 = false => count(s(0), xts1 .. nil) <= s(s(s(0))) = true
	count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	count(s(s(0)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts4 == xts3 = false => count(s(s(s(xts4))), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	count(s(s(s(0))), xts .. nil) <= s(0) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	count(x, xs) <= len(xs) -> true
	count(x, xts .. yts) <= s(len(yts)) -> true
	0 == xts = true => count(0, xts .. nil) <= s(0) -> true
	count(x, xts2 .. xts1 .. yts) <= s(s(len(yts))) -> true
	0 == xts = true => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(0)) -> true
	s(0) == xts = true => count(s(0), xts .. nil) <= s(0) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	s(0) == xts = true => count(s(0), xts .. nil) <= s(s(0)) -> true
	s(0) == xts = false => count(s(0), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	count(x, xts3 .. xts2 .. xts1 .. yts) <= s(s(s(len(yts)))) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	0 == xts = true => count(0, xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(0) == xts = false => count(s(0), xts .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	0 == xts = false => count(0, xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(xts2)) == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(xts2)) == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> yts
	^f0($n0 + 1; yts, xts@) -> xts$n0 .. ^f0($n0; yts, xts@)
	^f1(0; yts) -> len(yts)
	^f1($n1 + 1; yts) -> s(^f1($n1; yts))
	^f136(0; xts) -> xts
	^f136($n136 + 1; xts) -> s(^f136($n136; xts))
+++ }
+++ Lemma(s)           = 
	count(x, xts$n .. ^f0($n; yts, xts@)) <= s(^f1($n; yts)) = true
	xts3 == xts2 = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(0) = true
	xts3 == xts2 = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = true => count(s(^f136($n; xts2)), xts1 .. nil) <= s(0) = true

+++ treating clause
	xts3 == s(xts2) = true => count(s(s(s(xts3))), xts1 .. nil) <= s(0) = true
+++ inductive narrowing on conjecture
	xts3 == s(xts2) = true => count(s(s(s(xts3))), xts1 .. nil) <= s(0) = true
... induction variables of
	xts3 == s(xts2) = true => count(s(s(s(xts3))), xts1 .. nil) <= s(0) = true
... are:
	xts3:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	xts3 == s(xts2) = true => count(s(s(s(xts3))), xts1 .. nil) <= s(0) = true
... with variable xts3
+++ creating new conjecture
	0 == s(xts2) = true => count(s(s(s(0))), xts1 .. nil) <= s(0) = true
+++ creating new conjecture
	s(xts3) == s(xts2) = true => count(s(s(s(s(xts3)))), xts1 .. nil) <= s(0) = true
--- clause
	0 == s(xts2) = true => count(s(s(s(0))), xts1 .. nil) <= s(0) = true
... reduced in 1 step to
	false = true => count(s(s(s(0))), xts .. nil) <= s(0) = true
--- clause
	false = true => count(s(s(s(0))), xts .. nil) <= s(0) = true
... contains a ground negative condition
	false = true
... and is therefore discarded (false => t is always true)
--- clause
	s(xts3) == s(xts2) = true => count(s(s(s(s(xts3)))), xts1 .. nil) <= s(0) = true
... reduced in 1 step to
	xts3 == xts2 = true => count(s(s(s(s(xts3)))), xts1 .. nil) <= s(0) = true
--- clause
	xts3 == xts2 = true => count(s(s(s(s(xts3)))), xts1 .. nil) <= s(0) = true
... subsumed by lemma
	xts3 == xts2 = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(0) = true
... with substitution
	$n <- 3
+++ inductive narrowing succeeded
--- clause
	xts3 == s(xts2) = true => count(s(s(s(xts3))), xts1 .. nil) <= s(0) = true
... oriented to rule
	xts2 == s(xts1) = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
+++ active wrap
	xts3 == s(xts2) = true => count(s(.), xts1 .. nil) <= s(0) = true
... with sequence
	xts3 == s(xts2) = true => count(s(xts3), xts1 .. nil) <= s(0) = true
	xts3 == s(xts2) = true => count(s(s(xts3)), xts1 .. nil) <= s(0) = true
	xts3 == s(xts2) = true => count(s(s(s(xts3))), xts1 .. nil) <= s(0) = true
+++ primal grammar found for head
	{.., 0, <=, ==, count, nil, s, true}
... and wrap
	xts3 == s(xts2) = true => count(s(.), xts1 .. nil) <= s(0) = true
+++ Presburger system  = {
	^f136(0; xts) -> xts
	^f136($n136 + 1; xts) -> s(^f136($n136; xts))
+++ }
+++ Lemma(s)           = 
	xts3 == s(xts2) = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(0) = true

+++ Status of the Inference System
--- Conjectures:
	xts2 == 0 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) = true
	xts3 == s(xts2) = false => count(s(s(s(xts3))), xts1 .. nil) <= s(s(0)) = true
	0 == xts2 = true => count(s(0), xts1 .. nil) <= s(0) = true
	count(s(0), xts .. nil) <= s(s(0)) = true
	0 == xts2 = false => count(s(0), xts1 .. nil) <= s(s(0)) = true
	count(s(s(0)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts4 == xts3 = true => count(s(s(s(xts4))), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts3 == xts2 = true => count(s(s(xts3)), xts1 .. nil) <= s(s(0)) = true
	count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) = true
	count(s(0), xts .. nil) <= s(s(s(0))) = true
	xts3 == xts2 = false => count(s(s(xts3)), xts1 .. nil) <= s(s(s(0))) = true
	s(xts3) == xts2 = true => count(s(s(xts3)), xts1 .. nil) <= s(s(0)) = true
	s(xts3) == xts2 = false => count(s(s(xts3)), xts1 .. nil) <= s(s(s(0))) = true
	0 == xts2 = true => count(s(0), xts1 .. nil) <= s(s(0)) = true
	0 == xts2 = false => count(s(0), xts1 .. nil) <= s(s(s(0))) = true
	count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	count(s(s(0)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts4 == xts3 = false => count(s(s(s(xts4))), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	count(s(s(s(0))), xts .. nil) <= s(0) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	count(x, xs) <= len(xs) -> true
	count(x, xts .. yts) <= s(len(yts)) -> true
	0 == xts = true => count(0, xts .. nil) <= s(0) -> true
	count(x, xts2 .. xts1 .. yts) <= s(s(len(yts))) -> true
	0 == xts = true => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(0)) -> true
	s(0) == xts = true => count(s(0), xts .. nil) <= s(0) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	s(0) == xts = true => count(s(0), xts .. nil) <= s(s(0)) -> true
	s(0) == xts = false => count(s(0), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	count(x, xts3 .. xts2 .. xts1 .. yts) <= s(s(s(len(yts)))) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	0 == xts = true => count(0, xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(0) == xts = false => count(s(0), xts .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	0 == xts = false => count(0, xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(xts2)) == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(xts2)) == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> yts
	^f0($n0 + 1; yts, xts@) -> xts$n0 .. ^f0($n0; yts, xts@)
	^f1(0; yts) -> len(yts)
	^f1($n1 + 1; yts) -> s(^f1($n1; yts))
	^f136(0; xts) -> xts
	^f136($n136 + 1; xts) -> s(^f136($n136; xts))
+++ }
+++ Lemma(s)           = 
	count(x, xts$n .. ^f0($n; yts, xts@)) <= s(^f1($n; yts)) = true
	xts3 == xts2 = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(0) = true
	xts3 == xts2 = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = true => count(s(^f136($n; xts2)), xts1 .. nil) <= s(0) = true
	xts3 == s(xts2) = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(0) = true

+++ treating clause
	xts2 == 0 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) = true
+++ inductive narrowing on conjecture
	xts2 == 0 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) = true
... induction variables of
	xts2 == 0 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) = true
... are:
	xts2:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	xts2 == 0 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) = true
... with variable xts2
+++ creating new conjecture
	0 == 0 = false => count(s(s(s(0))), xts .. nil) <= s(s(0)) = true
+++ creating new conjecture
	s(xts2) == 0 = false => count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(0)) = true
--- clause
	0 == 0 = false => count(s(s(s(0))), xts .. nil) <= s(s(0)) = true
... reduced in 1 step to
	true = false => count(s(s(s(0))), xts .. nil) <= s(s(0)) = true
--- clause
	true = false => count(s(s(s(0))), xts .. nil) <= s(s(0)) = true
... contains a ground negative condition
	true = false
... and is therefore discarded (false => t is always true)
--- clause
	s(xts2) == 0 = false => count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(0)) = true
... reduced in 1 step to
	count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(0)) = true
+++ inductive narrowing succeeded
--- clause
	xts2 == 0 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) = true
... oriented to rule
	xts == 0 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
+++ added new clause(s)
	count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(0)) = true
... to conjectures
+++ active wrap
	xts2 == 0 = false => count(s(.), xts1 .. nil) <= s(s(0)) = true
... with sequence
	xts2 == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) = true
+++ primal grammar found for head
	{.., 0, <=, ==, count, false, nil, s, true}
... and wrap
	xts2 == 0 = false => count(s(.), xts1 .. nil) <= s(s(0)) = true
+++ Presburger system  = {
	^f136(0; xts) -> xts
	^f136($n136 + 1; xts) -> s(^f136($n136; xts))
+++ }
+++ Lemma(s)           = 
	xts2 == 0 = false => count(s(^f136($n; xts2)), xts1 .. nil) <= s(s(0)) = true

+++ Status of the Inference System
--- Conjectures:
	xts3 == s(xts2) = false => count(s(s(s(xts3))), xts1 .. nil) <= s(s(0)) = true
	0 == xts2 = true => count(s(0), xts1 .. nil) <= s(0) = true
	count(s(0), xts .. nil) <= s(s(0)) = true
	0 == xts2 = false => count(s(0), xts1 .. nil) <= s(s(0)) = true
	count(s(s(0)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts4 == xts3 = true => count(s(s(s(xts4))), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts3 == xts2 = true => count(s(s(xts3)), xts1 .. nil) <= s(s(0)) = true
	count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) = true
	count(s(0), xts .. nil) <= s(s(s(0))) = true
	xts3 == xts2 = false => count(s(s(xts3)), xts1 .. nil) <= s(s(s(0))) = true
	s(xts3) == xts2 = true => count(s(s(xts3)), xts1 .. nil) <= s(s(0)) = true
	s(xts3) == xts2 = false => count(s(s(xts3)), xts1 .. nil) <= s(s(s(0))) = true
	0 == xts2 = true => count(s(0), xts1 .. nil) <= s(s(0)) = true
	0 == xts2 = false => count(s(0), xts1 .. nil) <= s(s(s(0))) = true
	count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	count(s(s(0)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts4 == xts3 = false => count(s(s(s(xts4))), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	count(s(s(s(0))), xts .. nil) <= s(0) = true
	count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(0)) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	count(x, xs) <= len(xs) -> true
	count(x, xts .. yts) <= s(len(yts)) -> true
	0 == xts = true => count(0, xts .. nil) <= s(0) -> true
	count(x, xts2 .. xts1 .. yts) <= s(s(len(yts))) -> true
	0 == xts = true => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(0)) -> true
	s(0) == xts = true => count(s(0), xts .. nil) <= s(0) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	s(0) == xts = true => count(s(0), xts .. nil) <= s(s(0)) -> true
	s(0) == xts = false => count(s(0), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	count(x, xts3 .. xts2 .. xts1 .. yts) <= s(s(s(len(yts)))) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	0 == xts = true => count(0, xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(0) == xts = false => count(s(0), xts .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	0 == xts = false => count(0, xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(xts2)) == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(xts2)) == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> yts
	^f0($n0 + 1; yts, xts@) -> xts$n0 .. ^f0($n0; yts, xts@)
	^f1(0; yts) -> len(yts)
	^f1($n1 + 1; yts) -> s(^f1($n1; yts))
	^f136(0; xts) -> xts
	^f136($n136 + 1; xts) -> s(^f136($n136; xts))
+++ }
+++ Lemma(s)           = 
	count(x, xts$n .. ^f0($n; yts, xts@)) <= s(^f1($n; yts)) = true
	xts3 == xts2 = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(0) = true
	xts3 == xts2 = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = true => count(s(^f136($n; xts2)), xts1 .. nil) <= s(0) = true
	xts3 == s(xts2) = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(0) = true
	xts2 == 0 = false => count(s(^f136($n; xts2)), xts1 .. nil) <= s(s(0)) = true

+++ treating clause
	xts3 == s(xts2) = false => count(s(s(s(xts3))), xts1 .. nil) <= s(s(0)) = true
+++ inductive narrowing on conjecture
	xts3 == s(xts2) = false => count(s(s(s(xts3))), xts1 .. nil) <= s(s(0)) = true
... induction variables of
	xts3 == s(xts2) = false => count(s(s(s(xts3))), xts1 .. nil) <= s(s(0)) = true
... are:
	xts3:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	xts3 == s(xts2) = false => count(s(s(s(xts3))), xts1 .. nil) <= s(s(0)) = true
... with variable xts3
+++ creating new conjecture
	0 == s(xts2) = false => count(s(s(s(0))), xts1 .. nil) <= s(s(0)) = true
+++ creating new conjecture
	s(xts3) == s(xts2) = false => count(s(s(s(s(xts3)))), xts1 .. nil) <= s(s(0)) = true
--- clause
	0 == s(xts2) = false => count(s(s(s(0))), xts1 .. nil) <= s(s(0)) = true
... reduced in 1 step to
	count(s(s(s(0))), xts .. nil) <= s(s(0)) = true
--- clause
	s(xts3) == s(xts2) = false => count(s(s(s(s(xts3)))), xts1 .. nil) <= s(s(0)) = true
... reduced in 1 step to
	xts3 == xts2 = false => count(s(s(s(s(xts3)))), xts1 .. nil) <= s(s(0)) = true
--- clause
	xts3 == xts2 = false => count(s(s(s(s(xts3)))), xts1 .. nil) <= s(s(0)) = true
... subsumed by lemma
	xts3 == xts2 = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true
... with substitution
	$n <- 3
+++ inductive narrowing succeeded
--- clause
	xts3 == s(xts2) = false => count(s(s(s(xts3))), xts1 .. nil) <= s(s(0)) = true
... oriented to rule
	xts2 == s(xts1) = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
+++ added new clause(s)
	count(s(s(s(0))), xts .. nil) <= s(s(0)) = true
... to conjectures
+++ active wrap
	xts3 == s(xts2) = false => count(s(.), xts1 .. nil) <= s(s(0)) = true
... with sequence
	xts3 == s(xts2) = false => count(s(xts3), xts1 .. nil) <= s(s(0)) = true
	xts3 == s(xts2) = false => count(s(s(xts3)), xts1 .. nil) <= s(s(0)) = true
	xts3 == s(xts2) = false => count(s(s(s(xts3))), xts1 .. nil) <= s(s(0)) = true
+++ primal grammar found for head
	{.., 0, <=, ==, count, false, nil, s, true}
... and wrap
	xts3 == s(xts2) = false => count(s(.), xts1 .. nil) <= s(s(0)) = true
+++ Presburger system  = {
	^f136(0; xts) -> xts
	^f136($n136 + 1; xts) -> s(^f136($n136; xts))
+++ }
+++ Lemma(s)           = 
	xts3 == s(xts2) = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true

+++ Status of the Inference System
--- Conjectures:
	0 == xts2 = true => count(s(0), xts1 .. nil) <= s(0) = true
	count(s(0), xts .. nil) <= s(s(0)) = true
	0 == xts2 = false => count(s(0), xts1 .. nil) <= s(s(0)) = true
	count(s(s(0)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts4 == xts3 = true => count(s(s(s(xts4))), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts3 == xts2 = true => count(s(s(xts3)), xts1 .. nil) <= s(s(0)) = true
	count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) = true
	count(s(0), xts .. nil) <= s(s(s(0))) = true
	xts3 == xts2 = false => count(s(s(xts3)), xts1 .. nil) <= s(s(s(0))) = true
	s(xts3) == xts2 = true => count(s(s(xts3)), xts1 .. nil) <= s(s(0)) = true
	s(xts3) == xts2 = false => count(s(s(xts3)), xts1 .. nil) <= s(s(s(0))) = true
	0 == xts2 = true => count(s(0), xts1 .. nil) <= s(s(0)) = true
	0 == xts2 = false => count(s(0), xts1 .. nil) <= s(s(s(0))) = true
	count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	count(s(s(0)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts4 == xts3 = false => count(s(s(s(xts4))), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	count(s(s(s(0))), xts .. nil) <= s(0) = true
	count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(0)) = true
	count(s(s(s(0))), xts .. nil) <= s(s(0)) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	count(x, xs) <= len(xs) -> true
	count(x, xts .. yts) <= s(len(yts)) -> true
	0 == xts = true => count(0, xts .. nil) <= s(0) -> true
	count(x, xts2 .. xts1 .. yts) <= s(s(len(yts))) -> true
	0 == xts = true => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(0)) -> true
	s(0) == xts = true => count(s(0), xts .. nil) <= s(0) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	s(0) == xts = true => count(s(0), xts .. nil) <= s(s(0)) -> true
	s(0) == xts = false => count(s(0), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	count(x, xts3 .. xts2 .. xts1 .. yts) <= s(s(s(len(yts)))) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	0 == xts = true => count(0, xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(0) == xts = false => count(s(0), xts .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	0 == xts = false => count(0, xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(xts2)) == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(xts2)) == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> yts
	^f0($n0 + 1; yts, xts@) -> xts$n0 .. ^f0($n0; yts, xts@)
	^f1(0; yts) -> len(yts)
	^f1($n1 + 1; yts) -> s(^f1($n1; yts))
	^f136(0; xts) -> xts
	^f136($n136 + 1; xts) -> s(^f136($n136; xts))
+++ }
+++ Lemma(s)           = 
	count(x, xts$n .. ^f0($n; yts, xts@)) <= s(^f1($n; yts)) = true
	xts3 == xts2 = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(0) = true
	xts3 == xts2 = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = true => count(s(^f136($n; xts2)), xts1 .. nil) <= s(0) = true
	xts3 == s(xts2) = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(0) = true
	xts2 == 0 = false => count(s(^f136($n; xts2)), xts1 .. nil) <= s(s(0)) = true
	xts3 == s(xts2) = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true

+++ treating clause
	0 == xts2 = true => count(s(0), xts1 .. nil) <= s(0) = true
+++ inductive narrowing on conjecture
	0 == xts2 = true => count(s(0), xts1 .. nil) <= s(0) = true
... induction variables of
	0 == xts2 = true => count(s(0), xts1 .. nil) <= s(0) = true
... are:
	xts2:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	0 == xts2 = true => count(s(0), xts1 .. nil) <= s(0) = true
... with variable xts2
+++ creating new conjecture
	0 == 0 = true => count(s(0), xts .. nil) <= s(0) = true
+++ creating new conjecture
	0 == s(xts2) = true => count(s(0), xts1 .. nil) <= s(0) = true
--- clause
	0 == 0 = true => count(s(0), xts .. nil) <= s(0) = true
... reduced in 1 step to
	count(s(0), xts .. nil) <= s(0) = true
--- clause
	0 == s(xts2) = true => count(s(0), xts1 .. nil) <= s(0) = true
... reduced in 1 step to
	false = true => count(s(0), xts .. nil) <= s(0) = true
--- clause
	false = true => count(s(0), xts .. nil) <= s(0) = true
... contains a ground negative condition
	false = true
... and is therefore discarded (false => t is always true)
+++ inductive narrowing succeeded
--- clause
	0 == xts2 = true => count(s(0), xts1 .. nil) <= s(0) = true
... oriented to rule
	0 == xts = true => count(s(0), xts .. nil) <= s(0) -> true
+++ added new clause(s)
	count(s(0), xts .. nil) <= s(0) = true
... to conjectures

+++ Status of the Inference System
--- Conjectures:
	count(s(0), xts .. nil) <= s(s(0)) = true
	0 == xts2 = false => count(s(0), xts1 .. nil) <= s(s(0)) = true
	count(s(s(0)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts4 == xts3 = true => count(s(s(s(xts4))), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts3 == xts2 = true => count(s(s(xts3)), xts1 .. nil) <= s(s(0)) = true
	count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) = true
	count(s(0), xts .. nil) <= s(s(s(0))) = true
	xts3 == xts2 = false => count(s(s(xts3)), xts1 .. nil) <= s(s(s(0))) = true
	s(xts3) == xts2 = true => count(s(s(xts3)), xts1 .. nil) <= s(s(0)) = true
	s(xts3) == xts2 = false => count(s(s(xts3)), xts1 .. nil) <= s(s(s(0))) = true
	0 == xts2 = true => count(s(0), xts1 .. nil) <= s(s(0)) = true
	0 == xts2 = false => count(s(0), xts1 .. nil) <= s(s(s(0))) = true
	count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	count(s(s(0)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts4 == xts3 = false => count(s(s(s(xts4))), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	count(s(s(s(0))), xts .. nil) <= s(0) = true
	count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(0)) = true
	count(s(s(s(0))), xts .. nil) <= s(s(0)) = true
	count(s(0), xts .. nil) <= s(0) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	count(x, xs) <= len(xs) -> true
	count(x, xts .. yts) <= s(len(yts)) -> true
	0 == xts = true => count(0, xts .. nil) <= s(0) -> true
	count(x, xts2 .. xts1 .. yts) <= s(s(len(yts))) -> true
	0 == xts = true => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = true => count(s(0), xts .. nil) <= s(0) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(0)) -> true
	s(0) == xts = true => count(s(0), xts .. nil) <= s(0) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	s(0) == xts = true => count(s(0), xts .. nil) <= s(s(0)) -> true
	s(0) == xts = false => count(s(0), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	count(x, xts3 .. xts2 .. xts1 .. yts) <= s(s(s(len(yts)))) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	0 == xts = true => count(0, xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(0) == xts = false => count(s(0), xts .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	0 == xts = false => count(0, xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(xts2)) == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(xts2)) == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> yts
	^f0($n0 + 1; yts, xts@) -> xts$n0 .. ^f0($n0; yts, xts@)
	^f1(0; yts) -> len(yts)
	^f1($n1 + 1; yts) -> s(^f1($n1; yts))
	^f136(0; xts) -> xts
	^f136($n136 + 1; xts) -> s(^f136($n136; xts))
+++ }
+++ Lemma(s)           = 
	count(x, xts$n .. ^f0($n; yts, xts@)) <= s(^f1($n; yts)) = true
	xts3 == xts2 = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(0) = true
	xts3 == xts2 = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = true => count(s(^f136($n; xts2)), xts1 .. nil) <= s(0) = true
	xts3 == s(xts2) = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(0) = true
	xts2 == 0 = false => count(s(^f136($n; xts2)), xts1 .. nil) <= s(s(0)) = true
	xts3 == s(xts2) = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true

+++ treating clause
	count(s(0), xts .. nil) <= s(s(0)) = true
--- no new clauses created
+++ attempting case rewriting
--- case rewriting generated new conjectures
	s(0) == xts = true => s(0) <= s(s(0)) = true
	s(0) == xts = false => 0 <= s(s(0)) = true
+++ added new clause(s)
	s(0) == xts = true => s(0) <= s(s(0)) = true
	s(0) == xts = false => 0 <= s(s(0)) = true
... to conjectures
--- clause
	s(0) == xts = true => s(0) <= s(s(0)) = true
... reduced to tautology
	s(0) == xts = true => true = true
--- clause
	s(0) == xts = false => 0 <= s(s(0)) = true
... reduced to tautology
	s(0) == xts = false => true = true

+++ Status of the Inference System
--- Conjectures:
	0 == xts2 = false => count(s(0), xts1 .. nil) <= s(s(0)) = true
	count(s(s(0)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts4 == xts3 = true => count(s(s(s(xts4))), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts3 == xts2 = true => count(s(s(xts3)), xts1 .. nil) <= s(s(0)) = true
	count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) = true
	count(s(0), xts .. nil) <= s(s(s(0))) = true
	xts3 == xts2 = false => count(s(s(xts3)), xts1 .. nil) <= s(s(s(0))) = true
	s(xts3) == xts2 = true => count(s(s(xts3)), xts1 .. nil) <= s(s(0)) = true
	s(xts3) == xts2 = false => count(s(s(xts3)), xts1 .. nil) <= s(s(s(0))) = true
	0 == xts2 = true => count(s(0), xts1 .. nil) <= s(s(0)) = true
	0 == xts2 = false => count(s(0), xts1 .. nil) <= s(s(s(0))) = true
	count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	count(s(s(0)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts4 == xts3 = false => count(s(s(s(xts4))), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	count(s(s(s(0))), xts .. nil) <= s(0) = true
	count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(0)) = true
	count(s(s(s(0))), xts .. nil) <= s(s(0)) = true
	count(s(0), xts .. nil) <= s(0) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	count(x, xs) <= len(xs) -> true
	count(x, xts .. yts) <= s(len(yts)) -> true
	0 == xts = true => count(0, xts .. nil) <= s(0) -> true
	count(x, xts2 .. xts1 .. yts) <= s(s(len(yts))) -> true
	0 == xts = true => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = true => count(s(0), xts .. nil) <= s(0) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(0)) -> true
	s(0) == xts = true => count(s(0), xts .. nil) <= s(0) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	s(0) == xts = true => count(s(0), xts .. nil) <= s(s(0)) -> true
	s(0) == xts = false => count(s(0), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	count(x, xts3 .. xts2 .. xts1 .. yts) <= s(s(s(len(yts)))) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	0 == xts = true => count(0, xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(0) == xts = false => count(s(0), xts .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	0 == xts = false => count(0, xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(xts2)) == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(xts2)) == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> yts
	^f0($n0 + 1; yts, xts@) -> xts$n0 .. ^f0($n0; yts, xts@)
	^f1(0; yts) -> len(yts)
	^f1($n1 + 1; yts) -> s(^f1($n1; yts))
	^f136(0; xts) -> xts
	^f136($n136 + 1; xts) -> s(^f136($n136; xts))
+++ }
+++ Lemma(s)           = 
	count(x, xts$n .. ^f0($n; yts, xts@)) <= s(^f1($n; yts)) = true
	xts3 == xts2 = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(0) = true
	xts3 == xts2 = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = true => count(s(^f136($n; xts2)), xts1 .. nil) <= s(0) = true
	xts3 == s(xts2) = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(0) = true
	xts2 == 0 = false => count(s(^f136($n; xts2)), xts1 .. nil) <= s(s(0)) = true
	xts3 == s(xts2) = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true

+++ treating clause
	0 == xts2 = false => count(s(0), xts1 .. nil) <= s(s(0)) = true
+++ inductive narrowing on conjecture
	0 == xts2 = false => count(s(0), xts1 .. nil) <= s(s(0)) = true
... induction variables of
	0 == xts2 = false => count(s(0), xts1 .. nil) <= s(s(0)) = true
... are:
	xts2:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	0 == xts2 = false => count(s(0), xts1 .. nil) <= s(s(0)) = true
... with variable xts2
+++ creating new conjecture
	0 == 0 = false => count(s(0), xts .. nil) <= s(s(0)) = true
+++ creating new conjecture
	0 == s(xts2) = false => count(s(0), xts1 .. nil) <= s(s(0)) = true
--- clause
	0 == 0 = false => count(s(0), xts .. nil) <= s(s(0)) = true
... reduced in 1 step to
	true = false => count(s(0), xts .. nil) <= s(s(0)) = true
--- clause
	true = false => count(s(0), xts .. nil) <= s(s(0)) = true
... contains a ground negative condition
	true = false
... and is therefore discarded (false => t is always true)
--- clause
	0 == s(xts2) = false => count(s(0), xts1 .. nil) <= s(s(0)) = true
... reduced in 1 step to
	count(s(0), xts .. nil) <= s(s(0)) = true
+++ inductive narrowing succeeded
--- clause
	0 == xts2 = false => count(s(0), xts1 .. nil) <= s(s(0)) = true
... oriented to rule
	0 == xts = false => count(s(0), xts .. nil) <= s(s(0)) -> true
+++ added new clause(s)
	count(s(0), xts .. nil) <= s(s(0)) = true
... to conjectures

+++ Status of the Inference System
--- Conjectures:
	count(s(s(0)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts4 == xts3 = true => count(s(s(s(xts4))), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts3 == xts2 = true => count(s(s(xts3)), xts1 .. nil) <= s(s(0)) = true
	count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) = true
	count(s(0), xts .. nil) <= s(s(s(0))) = true
	xts3 == xts2 = false => count(s(s(xts3)), xts1 .. nil) <= s(s(s(0))) = true
	s(xts3) == xts2 = true => count(s(s(xts3)), xts1 .. nil) <= s(s(0)) = true
	s(xts3) == xts2 = false => count(s(s(xts3)), xts1 .. nil) <= s(s(s(0))) = true
	0 == xts2 = true => count(s(0), xts1 .. nil) <= s(s(0)) = true
	0 == xts2 = false => count(s(0), xts1 .. nil) <= s(s(s(0))) = true
	count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	count(s(s(0)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts4 == xts3 = false => count(s(s(s(xts4))), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	count(s(s(s(0))), xts .. nil) <= s(0) = true
	count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(0)) = true
	count(s(s(s(0))), xts .. nil) <= s(s(0)) = true
	count(s(0), xts .. nil) <= s(0) = true
	count(s(0), xts .. nil) <= s(s(0)) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	count(x, xs) <= len(xs) -> true
	count(x, xts .. yts) <= s(len(yts)) -> true
	0 == xts = true => count(0, xts .. nil) <= s(0) -> true
	count(x, xts2 .. xts1 .. yts) <= s(s(len(yts))) -> true
	0 == xts = true => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = true => count(s(0), xts .. nil) <= s(0) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(0)) -> true
	s(0) == xts = true => count(s(0), xts .. nil) <= s(0) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(s(0))) -> true
	0 == xts = false => count(s(0), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	s(0) == xts = true => count(s(0), xts .. nil) <= s(s(0)) -> true
	s(0) == xts = false => count(s(0), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	count(x, xts3 .. xts2 .. xts1 .. yts) <= s(s(s(len(yts)))) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	0 == xts = true => count(0, xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(0) == xts = false => count(s(0), xts .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	0 == xts = false => count(0, xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(xts2)) == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(xts2)) == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> yts
	^f0($n0 + 1; yts, xts@) -> xts$n0 .. ^f0($n0; yts, xts@)
	^f1(0; yts) -> len(yts)
	^f1($n1 + 1; yts) -> s(^f1($n1; yts))
	^f136(0; xts) -> xts
	^f136($n136 + 1; xts) -> s(^f136($n136; xts))
+++ }
+++ Lemma(s)           = 
	count(x, xts$n .. ^f0($n; yts, xts@)) <= s(^f1($n; yts)) = true
	xts3 == xts2 = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(0) = true
	xts3 == xts2 = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = true => count(s(^f136($n; xts2)), xts1 .. nil) <= s(0) = true
	xts3 == s(xts2) = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(0) = true
	xts2 == 0 = false => count(s(^f136($n; xts2)), xts1 .. nil) <= s(s(0)) = true
	xts3 == s(xts2) = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true

+++ treating clause
	count(s(s(0)), xts2 .. xts1 .. nil) <= s(s(0)) = true
--- no new clauses created
+++ attempting case rewriting
--- case rewriting generated new conjectures
	s(s(0)) == xts2 = true => s(count(s(s(0)), xts1 .. nil)) <= s(s(0)) = true
	s(s(0)) == xts2 = false => count(s(s(0)), xts1 .. nil) <= s(s(0)) = true
+++ added new clause(s)
	s(s(0)) == xts2 = true => s(count(s(s(0)), xts1 .. nil)) <= s(s(0)) = true
	s(s(0)) == xts2 = false => count(s(s(0)), xts1 .. nil) <= s(s(0)) = true
... to conjectures
--- clause
	s(s(0)) == xts2 = true => s(count(s(s(0)), xts1 .. nil)) <= s(s(0)) = true
... reduced in 1 step to
	s(s(0)) == xts2 = true => count(s(s(0)), xts1 .. nil) <= s(0) = true

+++ Status of the Inference System
--- Conjectures:
	xts4 == xts3 = true => count(s(s(s(xts4))), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts3 == xts2 = true => count(s(s(xts3)), xts1 .. nil) <= s(s(0)) = true
	count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) = true
	count(s(0), xts .. nil) <= s(s(s(0))) = true
	xts3 == xts2 = false => count(s(s(xts3)), xts1 .. nil) <= s(s(s(0))) = true
	s(xts3) == xts2 = true => count(s(s(xts3)), xts1 .. nil) <= s(s(0)) = true
	s(xts3) == xts2 = false => count(s(s(xts3)), xts1 .. nil) <= s(s(s(0))) = true
	0 == xts2 = true => count(s(0), xts1 .. nil) <= s(s(0)) = true
	0 == xts2 = false => count(s(0), xts1 .. nil) <= s(s(s(0))) = true
	count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	count(s(s(0)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts4 == xts3 = false => count(s(s(s(xts4))), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	count(s(s(s(0))), xts .. nil) <= s(0) = true
	count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(0)) = true
	count(s(s(s(0))), xts .. nil) <= s(s(0)) = true
	count(s(0), xts .. nil) <= s(0) = true
	count(s(0), xts .. nil) <= s(s(0)) = true
	s(s(0)) == xts2 = true => count(s(s(0)), xts1 .. nil) <= s(0) = true
	s(s(0)) == xts2 = false => count(s(s(0)), xts1 .. nil) <= s(s(0)) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	count(x, xs) <= len(xs) -> true
	count(x, xts .. yts) <= s(len(yts)) -> true
	0 == xts = true => count(0, xts .. nil) <= s(0) -> true
	count(x, xts2 .. xts1 .. yts) <= s(s(len(yts))) -> true
	0 == xts = true => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = true => count(s(0), xts .. nil) <= s(0) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(0)) -> true
	s(0) == xts = true => count(s(0), xts .. nil) <= s(0) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(s(0))) -> true
	0 == xts = false => count(s(0), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	s(0) == xts = true => count(s(0), xts .. nil) <= s(s(0)) -> true
	s(0) == xts = false => count(s(0), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	count(x, xts3 .. xts2 .. xts1 .. yts) <= s(s(s(len(yts)))) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	0 == xts = true => count(0, xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(0) == xts = false => count(s(0), xts .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	0 == xts = false => count(0, xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(xts2)) == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(xts2)) == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> yts
	^f0($n0 + 1; yts, xts@) -> xts$n0 .. ^f0($n0; yts, xts@)
	^f1(0; yts) -> len(yts)
	^f1($n1 + 1; yts) -> s(^f1($n1; yts))
	^f136(0; xts) -> xts
	^f136($n136 + 1; xts) -> s(^f136($n136; xts))
+++ }
+++ Lemma(s)           = 
	count(x, xts$n .. ^f0($n; yts, xts@)) <= s(^f1($n; yts)) = true
	xts3 == xts2 = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(0) = true
	xts3 == xts2 = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = true => count(s(^f136($n; xts2)), xts1 .. nil) <= s(0) = true
	xts3 == s(xts2) = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(0) = true
	xts2 == 0 = false => count(s(^f136($n; xts2)), xts1 .. nil) <= s(s(0)) = true
	xts3 == s(xts2) = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true

+++ treating clause
	xts4 == xts3 = true => count(s(s(s(xts4))), xts2 .. xts1 .. nil) <= s(s(0)) = true
+++ inductive narrowing on conjecture
	xts4 == xts3 = true => count(s(s(s(xts4))), xts2 .. xts1 .. nil) <= s(s(0)) = true
... induction variables of
	xts4 == xts3 = true => count(s(s(s(xts4))), xts2 .. xts1 .. nil) <= s(s(0)) = true
... are:
	xts3:nat
	xts4:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	xts4 == xts3 = true => count(s(s(s(xts4))), xts2 .. xts1 .. nil) <= s(s(0)) = true
... with variable xts3
+++ creating new conjecture
	xts3 == 0 = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) = true
+++ creating new conjecture
	xts4 == s(xts3) = true => count(s(s(s(xts4))), xts2 .. xts1 .. nil) <= s(s(0)) = true
+++ inductive narrowing succeeded
--- clause
	xts4 == xts3 = true => count(s(s(s(xts4))), xts2 .. xts1 .. nil) <= s(s(0)) = true
... oriented to rule
	xts2 == xts1 = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) -> true
+++ added new clause(s)
	xts3 == 0 = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts4 == s(xts3) = true => count(s(s(s(xts4))), xts2 .. xts1 .. nil) <= s(s(0)) = true
... to conjectures
+++ active wrap
	xts4 == xts3 = true => count(s(.), xts2 .. xts1 .. nil) <= s(s(0)) = true
... with sequence
	xts4 == xts3 = true => count(s(xts4), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts4 == xts3 = true => count(s(s(xts4)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts4 == xts3 = true => count(s(s(s(xts4))), xts2 .. xts1 .. nil) <= s(s(0)) = true
+++ primal grammar found for head
	{.., 0, <=, ==, count, nil, s, true}
... and wrap
	xts4 == xts3 = true => count(s(.), xts2 .. xts1 .. nil) <= s(s(0)) = true
+++ Presburger system  = {
	^f136(0; xts) -> xts
	^f136($n136 + 1; xts) -> s(^f136($n136; xts))
+++ }
+++ Lemma(s)           = 
	xts4 == xts3 = true => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(0)) = true

+++ Status of the Inference System
--- Conjectures:
	xts3 == xts2 = true => count(s(s(xts3)), xts1 .. nil) <= s(s(0)) = true
	count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) = true
	count(s(0), xts .. nil) <= s(s(s(0))) = true
	xts3 == xts2 = false => count(s(s(xts3)), xts1 .. nil) <= s(s(s(0))) = true
	s(xts3) == xts2 = true => count(s(s(xts3)), xts1 .. nil) <= s(s(0)) = true
	s(xts3) == xts2 = false => count(s(s(xts3)), xts1 .. nil) <= s(s(s(0))) = true
	0 == xts2 = true => count(s(0), xts1 .. nil) <= s(s(0)) = true
	0 == xts2 = false => count(s(0), xts1 .. nil) <= s(s(s(0))) = true
	count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	count(s(s(0)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts4 == xts3 = false => count(s(s(s(xts4))), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	count(s(s(s(0))), xts .. nil) <= s(0) = true
	count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(0)) = true
	count(s(s(s(0))), xts .. nil) <= s(s(0)) = true
	count(s(0), xts .. nil) <= s(0) = true
	count(s(0), xts .. nil) <= s(s(0)) = true
	s(s(0)) == xts2 = true => count(s(s(0)), xts1 .. nil) <= s(0) = true
	s(s(0)) == xts2 = false => count(s(s(0)), xts1 .. nil) <= s(s(0)) = true
	xts3 == 0 = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts4 == s(xts3) = true => count(s(s(s(xts4))), xts2 .. xts1 .. nil) <= s(s(0)) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	count(x, xs) <= len(xs) -> true
	count(x, xts .. yts) <= s(len(yts)) -> true
	0 == xts = true => count(0, xts .. nil) <= s(0) -> true
	count(x, xts2 .. xts1 .. yts) <= s(s(len(yts))) -> true
	0 == xts = true => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = true => count(s(0), xts .. nil) <= s(0) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(0)) -> true
	s(0) == xts = true => count(s(0), xts .. nil) <= s(0) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(s(0))) -> true
	0 == xts = false => count(s(0), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	s(0) == xts = true => count(s(0), xts .. nil) <= s(s(0)) -> true
	s(0) == xts = false => count(s(0), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	count(x, xts3 .. xts2 .. xts1 .. yts) <= s(s(s(len(yts)))) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	0 == xts = true => count(0, xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(0) == xts = false => count(s(0), xts .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	0 == xts = false => count(0, xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(xts2)) == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(xts2)) == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> yts
	^f0($n0 + 1; yts, xts@) -> xts$n0 .. ^f0($n0; yts, xts@)
	^f1(0; yts) -> len(yts)
	^f1($n1 + 1; yts) -> s(^f1($n1; yts))
	^f136(0; xts) -> xts
	^f136($n136 + 1; xts) -> s(^f136($n136; xts))
+++ }
+++ Lemma(s)           = 
	count(x, xts$n .. ^f0($n; yts, xts@)) <= s(^f1($n; yts)) = true
	xts3 == xts2 = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(0) = true
	xts3 == xts2 = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = true => count(s(^f136($n; xts2)), xts1 .. nil) <= s(0) = true
	xts3 == s(xts2) = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(0) = true
	xts2 == 0 = false => count(s(^f136($n; xts2)), xts1 .. nil) <= s(s(0)) = true
	xts3 == s(xts2) = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true
	xts4 == xts3 = true => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(0)) = true

+++ treating clause
	xts3 == xts2 = true => count(s(s(xts3)), xts1 .. nil) <= s(s(0)) = true
+++ inductive narrowing on conjecture
	xts3 == xts2 = true => count(s(s(xts3)), xts1 .. nil) <= s(s(0)) = true
... induction variables of
	xts3 == xts2 = true => count(s(s(xts3)), xts1 .. nil) <= s(s(0)) = true
... are:
	xts2:nat
	xts3:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	xts3 == xts2 = true => count(s(s(xts3)), xts1 .. nil) <= s(s(0)) = true
... with variable xts2
+++ creating new conjecture
	xts2 == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) = true
+++ creating new conjecture
	xts3 == s(xts2) = true => count(s(s(xts3)), xts1 .. nil) <= s(s(0)) = true
+++ inductive narrowing succeeded
--- clause
	xts3 == xts2 = true => count(s(s(xts3)), xts1 .. nil) <= s(s(0)) = true
... oriented to rule
	xts2 == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
+++ added new clause(s)
	xts2 == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) = true
	xts3 == s(xts2) = true => count(s(s(xts3)), xts1 .. nil) <= s(s(0)) = true
... to conjectures

+++ Status of the Inference System
--- Conjectures:
	count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) = true
	count(s(0), xts .. nil) <= s(s(s(0))) = true
	xts3 == xts2 = false => count(s(s(xts3)), xts1 .. nil) <= s(s(s(0))) = true
	s(xts3) == xts2 = true => count(s(s(xts3)), xts1 .. nil) <= s(s(0)) = true
	s(xts3) == xts2 = false => count(s(s(xts3)), xts1 .. nil) <= s(s(s(0))) = true
	0 == xts2 = true => count(s(0), xts1 .. nil) <= s(s(0)) = true
	0 == xts2 = false => count(s(0), xts1 .. nil) <= s(s(s(0))) = true
	count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	count(s(s(0)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts4 == xts3 = false => count(s(s(s(xts4))), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	count(s(s(s(0))), xts .. nil) <= s(0) = true
	count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(0)) = true
	count(s(s(s(0))), xts .. nil) <= s(s(0)) = true
	count(s(0), xts .. nil) <= s(0) = true
	count(s(0), xts .. nil) <= s(s(0)) = true
	s(s(0)) == xts2 = true => count(s(s(0)), xts1 .. nil) <= s(0) = true
	s(s(0)) == xts2 = false => count(s(s(0)), xts1 .. nil) <= s(s(0)) = true
	xts3 == 0 = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts4 == s(xts3) = true => count(s(s(s(xts4))), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) = true
	xts3 == s(xts2) = true => count(s(s(xts3)), xts1 .. nil) <= s(s(0)) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	count(x, xs) <= len(xs) -> true
	count(x, xts .. yts) <= s(len(yts)) -> true
	0 == xts = true => count(0, xts .. nil) <= s(0) -> true
	count(x, xts2 .. xts1 .. yts) <= s(s(len(yts))) -> true
	0 == xts = true => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = true => count(s(0), xts .. nil) <= s(0) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(0)) -> true
	s(0) == xts = true => count(s(0), xts .. nil) <= s(0) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(s(0))) -> true
	0 == xts = false => count(s(0), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	s(0) == xts = true => count(s(0), xts .. nil) <= s(s(0)) -> true
	s(0) == xts = false => count(s(0), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	count(x, xts3 .. xts2 .. xts1 .. yts) <= s(s(s(len(yts)))) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	0 == xts = true => count(0, xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(0) == xts = false => count(s(0), xts .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	0 == xts = false => count(0, xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(xts2)) == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(xts2)) == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> yts
	^f0($n0 + 1; yts, xts@) -> xts$n0 .. ^f0($n0; yts, xts@)
	^f1(0; yts) -> len(yts)
	^f1($n1 + 1; yts) -> s(^f1($n1; yts))
	^f136(0; xts) -> xts
	^f136($n136 + 1; xts) -> s(^f136($n136; xts))
+++ }
+++ Lemma(s)           = 
	count(x, xts$n .. ^f0($n; yts, xts@)) <= s(^f1($n; yts)) = true
	xts3 == xts2 = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(0) = true
	xts3 == xts2 = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = true => count(s(^f136($n; xts2)), xts1 .. nil) <= s(0) = true
	xts3 == s(xts2) = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(0) = true
	xts2 == 0 = false => count(s(^f136($n; xts2)), xts1 .. nil) <= s(s(0)) = true
	xts3 == s(xts2) = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true
	xts4 == xts3 = true => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(0)) = true

+++ treating clause
	count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) = true
--- no new clauses created
+++ attempting case rewriting
--- case rewriting generated new conjectures
	s(s(xts2)) == xts1 = true => s(0) <= s(s(s(0))) = true
	s(s(xts2)) == xts1 = false => 0 <= s(s(s(0))) = true
+++ added new clause(s)
	s(s(xts2)) == xts1 = true => s(0) <= s(s(s(0))) = true
	s(s(xts2)) == xts1 = false => 0 <= s(s(s(0))) = true
... to conjectures
--- clause
	s(s(xts2)) == xts1 = true => s(0) <= s(s(s(0))) = true
... reduced to tautology
	s(s(xts2)) == xts1 = true => true = true
--- clause
	s(s(xts2)) == xts1 = false => 0 <= s(s(s(0))) = true
... reduced to tautology
	s(s(xts2)) == xts1 = false => true = true

+++ Status of the Inference System
--- Conjectures:
	count(s(0), xts .. nil) <= s(s(s(0))) = true
	xts3 == xts2 = false => count(s(s(xts3)), xts1 .. nil) <= s(s(s(0))) = true
	s(xts3) == xts2 = true => count(s(s(xts3)), xts1 .. nil) <= s(s(0)) = true
	s(xts3) == xts2 = false => count(s(s(xts3)), xts1 .. nil) <= s(s(s(0))) = true
	0 == xts2 = true => count(s(0), xts1 .. nil) <= s(s(0)) = true
	0 == xts2 = false => count(s(0), xts1 .. nil) <= s(s(s(0))) = true
	count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	count(s(s(0)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts4 == xts3 = false => count(s(s(s(xts4))), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	count(s(s(s(0))), xts .. nil) <= s(0) = true
	count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(0)) = true
	count(s(s(s(0))), xts .. nil) <= s(s(0)) = true
	count(s(0), xts .. nil) <= s(0) = true
	count(s(0), xts .. nil) <= s(s(0)) = true
	s(s(0)) == xts2 = true => count(s(s(0)), xts1 .. nil) <= s(0) = true
	s(s(0)) == xts2 = false => count(s(s(0)), xts1 .. nil) <= s(s(0)) = true
	xts3 == 0 = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts4 == s(xts3) = true => count(s(s(s(xts4))), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) = true
	xts3 == s(xts2) = true => count(s(s(xts3)), xts1 .. nil) <= s(s(0)) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	count(x, xs) <= len(xs) -> true
	count(x, xts .. yts) <= s(len(yts)) -> true
	0 == xts = true => count(0, xts .. nil) <= s(0) -> true
	count(x, xts2 .. xts1 .. yts) <= s(s(len(yts))) -> true
	0 == xts = true => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = true => count(s(0), xts .. nil) <= s(0) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(0)) -> true
	s(0) == xts = true => count(s(0), xts .. nil) <= s(0) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(s(0))) -> true
	0 == xts = false => count(s(0), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	s(0) == xts = true => count(s(0), xts .. nil) <= s(s(0)) -> true
	s(0) == xts = false => count(s(0), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	count(x, xts3 .. xts2 .. xts1 .. yts) <= s(s(s(len(yts)))) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	0 == xts = true => count(0, xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(0) == xts = false => count(s(0), xts .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	0 == xts = false => count(0, xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(xts2)) == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(xts2)) == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> yts
	^f0($n0 + 1; yts, xts@) -> xts$n0 .. ^f0($n0; yts, xts@)
	^f1(0; yts) -> len(yts)
	^f1($n1 + 1; yts) -> s(^f1($n1; yts))
	^f136(0; xts) -> xts
	^f136($n136 + 1; xts) -> s(^f136($n136; xts))
+++ }
+++ Lemma(s)           = 
	count(x, xts$n .. ^f0($n; yts, xts@)) <= s(^f1($n; yts)) = true
	xts3 == xts2 = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(0) = true
	xts3 == xts2 = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = true => count(s(^f136($n; xts2)), xts1 .. nil) <= s(0) = true
	xts3 == s(xts2) = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(0) = true
	xts2 == 0 = false => count(s(^f136($n; xts2)), xts1 .. nil) <= s(s(0)) = true
	xts3 == s(xts2) = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true
	xts4 == xts3 = true => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(0)) = true

+++ treating clause
	count(s(0), xts .. nil) <= s(s(s(0))) = true
--- no new clauses created
+++ attempting case rewriting
--- case rewriting generated new conjectures
	s(0) == xts = true => s(0) <= s(s(s(0))) = true
	s(0) == xts = false => 0 <= s(s(s(0))) = true
+++ added new clause(s)
	s(0) == xts = true => s(0) <= s(s(s(0))) = true
	s(0) == xts = false => 0 <= s(s(s(0))) = true
... to conjectures
--- clause
	s(0) == xts = true => s(0) <= s(s(s(0))) = true
... reduced to tautology
	s(0) == xts = true => true = true
--- clause
	s(0) == xts = false => 0 <= s(s(s(0))) = true
... reduced to tautology
	s(0) == xts = false => true = true

+++ Status of the Inference System
--- Conjectures:
	xts3 == xts2 = false => count(s(s(xts3)), xts1 .. nil) <= s(s(s(0))) = true
	s(xts3) == xts2 = true => count(s(s(xts3)), xts1 .. nil) <= s(s(0)) = true
	s(xts3) == xts2 = false => count(s(s(xts3)), xts1 .. nil) <= s(s(s(0))) = true
	0 == xts2 = true => count(s(0), xts1 .. nil) <= s(s(0)) = true
	0 == xts2 = false => count(s(0), xts1 .. nil) <= s(s(s(0))) = true
	count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	count(s(s(0)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts4 == xts3 = false => count(s(s(s(xts4))), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	count(s(s(s(0))), xts .. nil) <= s(0) = true
	count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(0)) = true
	count(s(s(s(0))), xts .. nil) <= s(s(0)) = true
	count(s(0), xts .. nil) <= s(0) = true
	count(s(0), xts .. nil) <= s(s(0)) = true
	s(s(0)) == xts2 = true => count(s(s(0)), xts1 .. nil) <= s(0) = true
	s(s(0)) == xts2 = false => count(s(s(0)), xts1 .. nil) <= s(s(0)) = true
	xts3 == 0 = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts4 == s(xts3) = true => count(s(s(s(xts4))), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) = true
	xts3 == s(xts2) = true => count(s(s(xts3)), xts1 .. nil) <= s(s(0)) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	count(x, xs) <= len(xs) -> true
	count(x, xts .. yts) <= s(len(yts)) -> true
	0 == xts = true => count(0, xts .. nil) <= s(0) -> true
	count(x, xts2 .. xts1 .. yts) <= s(s(len(yts))) -> true
	0 == xts = true => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = true => count(s(0), xts .. nil) <= s(0) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(0)) -> true
	s(0) == xts = true => count(s(0), xts .. nil) <= s(0) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(s(0))) -> true
	0 == xts = false => count(s(0), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	s(0) == xts = true => count(s(0), xts .. nil) <= s(s(0)) -> true
	s(0) == xts = false => count(s(0), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	count(x, xts3 .. xts2 .. xts1 .. yts) <= s(s(s(len(yts)))) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	0 == xts = true => count(0, xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(0) == xts = false => count(s(0), xts .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	0 == xts = false => count(0, xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(xts2)) == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(xts2)) == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> yts
	^f0($n0 + 1; yts, xts@) -> xts$n0 .. ^f0($n0; yts, xts@)
	^f1(0; yts) -> len(yts)
	^f1($n1 + 1; yts) -> s(^f1($n1; yts))
	^f136(0; xts) -> xts
	^f136($n136 + 1; xts) -> s(^f136($n136; xts))
+++ }
+++ Lemma(s)           = 
	count(x, xts$n .. ^f0($n; yts, xts@)) <= s(^f1($n; yts)) = true
	xts3 == xts2 = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(0) = true
	xts3 == xts2 = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = true => count(s(^f136($n; xts2)), xts1 .. nil) <= s(0) = true
	xts3 == s(xts2) = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(0) = true
	xts2 == 0 = false => count(s(^f136($n; xts2)), xts1 .. nil) <= s(s(0)) = true
	xts3 == s(xts2) = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true
	xts4 == xts3 = true => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(0)) = true

+++ treating clause
	xts3 == xts2 = false => count(s(s(xts3)), xts1 .. nil) <= s(s(s(0))) = true
+++ inductive narrowing on conjecture
	xts3 == xts2 = false => count(s(s(xts3)), xts1 .. nil) <= s(s(s(0))) = true
... induction variables of
	xts3 == xts2 = false => count(s(s(xts3)), xts1 .. nil) <= s(s(s(0))) = true
... are:
	xts2:nat
	xts3:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	xts3 == xts2 = false => count(s(s(xts3)), xts1 .. nil) <= s(s(s(0))) = true
... with variable xts2
+++ creating new conjecture
	xts2 == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) = true
+++ creating new conjecture
	xts3 == s(xts2) = false => count(s(s(xts3)), xts1 .. nil) <= s(s(s(0))) = true
+++ inductive narrowing succeeded
--- clause
	xts3 == xts2 = false => count(s(s(xts3)), xts1 .. nil) <= s(s(s(0))) = true
... oriented to rule
	xts2 == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
+++ added new clause(s)
	xts2 == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == s(xts2) = false => count(s(s(xts3)), xts1 .. nil) <= s(s(s(0))) = true
... to conjectures

+++ Status of the Inference System
--- Conjectures:
	s(xts3) == xts2 = true => count(s(s(xts3)), xts1 .. nil) <= s(s(0)) = true
	s(xts3) == xts2 = false => count(s(s(xts3)), xts1 .. nil) <= s(s(s(0))) = true
	0 == xts2 = true => count(s(0), xts1 .. nil) <= s(s(0)) = true
	0 == xts2 = false => count(s(0), xts1 .. nil) <= s(s(s(0))) = true
	count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	count(s(s(0)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts4 == xts3 = false => count(s(s(s(xts4))), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	count(s(s(s(0))), xts .. nil) <= s(0) = true
	count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(0)) = true
	count(s(s(s(0))), xts .. nil) <= s(s(0)) = true
	count(s(0), xts .. nil) <= s(0) = true
	count(s(0), xts .. nil) <= s(s(0)) = true
	s(s(0)) == xts2 = true => count(s(s(0)), xts1 .. nil) <= s(0) = true
	s(s(0)) == xts2 = false => count(s(s(0)), xts1 .. nil) <= s(s(0)) = true
	xts3 == 0 = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts4 == s(xts3) = true => count(s(s(s(xts4))), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) = true
	xts3 == s(xts2) = true => count(s(s(xts3)), xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == s(xts2) = false => count(s(s(xts3)), xts1 .. nil) <= s(s(s(0))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	count(x, xs) <= len(xs) -> true
	count(x, xts .. yts) <= s(len(yts)) -> true
	0 == xts = true => count(0, xts .. nil) <= s(0) -> true
	count(x, xts2 .. xts1 .. yts) <= s(s(len(yts))) -> true
	0 == xts = true => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = true => count(s(0), xts .. nil) <= s(0) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(0)) -> true
	s(0) == xts = true => count(s(0), xts .. nil) <= s(0) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(s(0))) -> true
	0 == xts = false => count(s(0), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	s(0) == xts = true => count(s(0), xts .. nil) <= s(s(0)) -> true
	s(0) == xts = false => count(s(0), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	count(x, xts3 .. xts2 .. xts1 .. yts) <= s(s(s(len(yts)))) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	0 == xts = true => count(0, xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(0) == xts = false => count(s(0), xts .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	0 == xts = false => count(0, xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(xts2)) == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(xts2)) == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> yts
	^f0($n0 + 1; yts, xts@) -> xts$n0 .. ^f0($n0; yts, xts@)
	^f1(0; yts) -> len(yts)
	^f1($n1 + 1; yts) -> s(^f1($n1; yts))
	^f136(0; xts) -> xts
	^f136($n136 + 1; xts) -> s(^f136($n136; xts))
+++ }
+++ Lemma(s)           = 
	count(x, xts$n .. ^f0($n; yts, xts@)) <= s(^f1($n; yts)) = true
	xts3 == xts2 = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(0) = true
	xts3 == xts2 = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = true => count(s(^f136($n; xts2)), xts1 .. nil) <= s(0) = true
	xts3 == s(xts2) = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(0) = true
	xts2 == 0 = false => count(s(^f136($n; xts2)), xts1 .. nil) <= s(s(0)) = true
	xts3 == s(xts2) = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true
	xts4 == xts3 = true => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(0)) = true

+++ treating clause
	s(xts3) == xts2 = true => count(s(s(xts3)), xts1 .. nil) <= s(s(0)) = true
+++ inductive narrowing on conjecture
	s(xts3) == xts2 = true => count(s(s(xts3)), xts1 .. nil) <= s(s(0)) = true
... induction variables of
	s(xts3) == xts2 = true => count(s(s(xts3)), xts1 .. nil) <= s(s(0)) = true
... are:
	xts2:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	s(xts3) == xts2 = true => count(s(s(xts3)), xts1 .. nil) <= s(s(0)) = true
... with variable xts2
+++ creating new conjecture
	s(xts2) == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) = true
+++ creating new conjecture
	s(xts3) == s(xts2) = true => count(s(s(xts3)), xts1 .. nil) <= s(s(0)) = true
--- clause
	s(xts2) == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) = true
... reduced in 1 step to
	false = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) = true
--- clause
	false = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) = true
... contains a ground negative condition
	false = true
... and is therefore discarded (false => t is always true)
--- clause
	s(xts3) == s(xts2) = true => count(s(s(xts3)), xts1 .. nil) <= s(s(0)) = true
... reduced in 1 step to
	xts3 == xts2 = true => count(s(s(xts3)), xts1 .. nil) <= s(s(0)) = true
+++ inductive narrowing succeeded
--- clause
	s(xts3) == xts2 = true => count(s(s(xts3)), xts1 .. nil) <= s(s(0)) = true
... oriented to rule
	s(xts2) == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
+++ added new clause(s)
	xts3 == xts2 = true => count(s(s(xts3)), xts1 .. nil) <= s(s(0)) = true
... to conjectures

+++ Status of the Inference System
--- Conjectures:
	s(xts3) == xts2 = false => count(s(s(xts3)), xts1 .. nil) <= s(s(s(0))) = true
	0 == xts2 = true => count(s(0), xts1 .. nil) <= s(s(0)) = true
	0 == xts2 = false => count(s(0), xts1 .. nil) <= s(s(s(0))) = true
	count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	count(s(s(0)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts4 == xts3 = false => count(s(s(s(xts4))), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	count(s(s(s(0))), xts .. nil) <= s(0) = true
	count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(0)) = true
	count(s(s(s(0))), xts .. nil) <= s(s(0)) = true
	count(s(0), xts .. nil) <= s(0) = true
	count(s(0), xts .. nil) <= s(s(0)) = true
	s(s(0)) == xts2 = true => count(s(s(0)), xts1 .. nil) <= s(0) = true
	s(s(0)) == xts2 = false => count(s(s(0)), xts1 .. nil) <= s(s(0)) = true
	xts3 == 0 = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts4 == s(xts3) = true => count(s(s(s(xts4))), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) = true
	xts3 == s(xts2) = true => count(s(s(xts3)), xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == s(xts2) = false => count(s(s(xts3)), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == xts2 = true => count(s(s(xts3)), xts1 .. nil) <= s(s(0)) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	count(x, xs) <= len(xs) -> true
	count(x, xts .. yts) <= s(len(yts)) -> true
	0 == xts = true => count(0, xts .. nil) <= s(0) -> true
	count(x, xts2 .. xts1 .. yts) <= s(s(len(yts))) -> true
	0 == xts = true => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = true => count(s(0), xts .. nil) <= s(0) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(0)) -> true
	s(0) == xts = true => count(s(0), xts .. nil) <= s(0) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(s(0))) -> true
	0 == xts = false => count(s(0), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	s(0) == xts = true => count(s(0), xts .. nil) <= s(s(0)) -> true
	s(0) == xts = false => count(s(0), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	count(x, xts3 .. xts2 .. xts1 .. yts) <= s(s(s(len(yts)))) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	0 == xts = true => count(0, xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(0) == xts = false => count(s(0), xts .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	0 == xts = false => count(0, xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(xts2)) == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(xts2)) == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> yts
	^f0($n0 + 1; yts, xts@) -> xts$n0 .. ^f0($n0; yts, xts@)
	^f1(0; yts) -> len(yts)
	^f1($n1 + 1; yts) -> s(^f1($n1; yts))
	^f136(0; xts) -> xts
	^f136($n136 + 1; xts) -> s(^f136($n136; xts))
+++ }
+++ Lemma(s)           = 
	count(x, xts$n .. ^f0($n; yts, xts@)) <= s(^f1($n; yts)) = true
	xts3 == xts2 = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(0) = true
	xts3 == xts2 = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = true => count(s(^f136($n; xts2)), xts1 .. nil) <= s(0) = true
	xts3 == s(xts2) = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(0) = true
	xts2 == 0 = false => count(s(^f136($n; xts2)), xts1 .. nil) <= s(s(0)) = true
	xts3 == s(xts2) = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true
	xts4 == xts3 = true => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(0)) = true

+++ treating clause
	s(xts3) == xts2 = false => count(s(s(xts3)), xts1 .. nil) <= s(s(s(0))) = true
+++ inductive narrowing on conjecture
	s(xts3) == xts2 = false => count(s(s(xts3)), xts1 .. nil) <= s(s(s(0))) = true
... induction variables of
	s(xts3) == xts2 = false => count(s(s(xts3)), xts1 .. nil) <= s(s(s(0))) = true
... are:
	xts2:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	s(xts3) == xts2 = false => count(s(s(xts3)), xts1 .. nil) <= s(s(s(0))) = true
... with variable xts2
+++ creating new conjecture
	s(xts2) == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) = true
+++ creating new conjecture
	s(xts3) == s(xts2) = false => count(s(s(xts3)), xts1 .. nil) <= s(s(s(0))) = true
--- clause
	s(xts2) == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) = true
... reduced in 1 step to
	count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) = true
--- clause
	s(xts3) == s(xts2) = false => count(s(s(xts3)), xts1 .. nil) <= s(s(s(0))) = true
... reduced in 1 step to
	xts3 == xts2 = false => count(s(s(xts3)), xts1 .. nil) <= s(s(s(0))) = true
+++ inductive narrowing succeeded
--- clause
	s(xts3) == xts2 = false => count(s(s(xts3)), xts1 .. nil) <= s(s(s(0))) = true
... oriented to rule
	s(xts2) == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
+++ added new clause(s)
	count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == xts2 = false => count(s(s(xts3)), xts1 .. nil) <= s(s(s(0))) = true
... to conjectures

+++ Status of the Inference System
--- Conjectures:
	0 == xts2 = true => count(s(0), xts1 .. nil) <= s(s(0)) = true
	0 == xts2 = false => count(s(0), xts1 .. nil) <= s(s(s(0))) = true
	count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	count(s(s(0)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts4 == xts3 = false => count(s(s(s(xts4))), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	count(s(s(s(0))), xts .. nil) <= s(0) = true
	count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(0)) = true
	count(s(s(s(0))), xts .. nil) <= s(s(0)) = true
	count(s(0), xts .. nil) <= s(0) = true
	count(s(0), xts .. nil) <= s(s(0)) = true
	s(s(0)) == xts2 = true => count(s(s(0)), xts1 .. nil) <= s(0) = true
	s(s(0)) == xts2 = false => count(s(s(0)), xts1 .. nil) <= s(s(0)) = true
	xts3 == 0 = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts4 == s(xts3) = true => count(s(s(s(xts4))), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) = true
	xts3 == s(xts2) = true => count(s(s(xts3)), xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == s(xts2) = false => count(s(s(xts3)), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == xts2 = true => count(s(s(xts3)), xts1 .. nil) <= s(s(0)) = true
	count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == xts2 = false => count(s(s(xts3)), xts1 .. nil) <= s(s(s(0))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	count(x, xs) <= len(xs) -> true
	count(x, xts .. yts) <= s(len(yts)) -> true
	0 == xts = true => count(0, xts .. nil) <= s(0) -> true
	count(x, xts2 .. xts1 .. yts) <= s(s(len(yts))) -> true
	0 == xts = true => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = true => count(s(0), xts .. nil) <= s(0) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(0)) -> true
	s(0) == xts = true => count(s(0), xts .. nil) <= s(0) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(s(0))) -> true
	0 == xts = false => count(s(0), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	s(0) == xts = true => count(s(0), xts .. nil) <= s(s(0)) -> true
	s(0) == xts = false => count(s(0), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	count(x, xts3 .. xts2 .. xts1 .. yts) <= s(s(s(len(yts)))) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	0 == xts = true => count(0, xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(0) == xts = false => count(s(0), xts .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	0 == xts = false => count(0, xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(xts2)) == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(xts2)) == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> yts
	^f0($n0 + 1; yts, xts@) -> xts$n0 .. ^f0($n0; yts, xts@)
	^f1(0; yts) -> len(yts)
	^f1($n1 + 1; yts) -> s(^f1($n1; yts))
	^f136(0; xts) -> xts
	^f136($n136 + 1; xts) -> s(^f136($n136; xts))
+++ }
+++ Lemma(s)           = 
	count(x, xts$n .. ^f0($n; yts, xts@)) <= s(^f1($n; yts)) = true
	xts3 == xts2 = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(0) = true
	xts3 == xts2 = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = true => count(s(^f136($n; xts2)), xts1 .. nil) <= s(0) = true
	xts3 == s(xts2) = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(0) = true
	xts2 == 0 = false => count(s(^f136($n; xts2)), xts1 .. nil) <= s(s(0)) = true
	xts3 == s(xts2) = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true
	xts4 == xts3 = true => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(0)) = true

+++ treating clause
	0 == xts2 = true => count(s(0), xts1 .. nil) <= s(s(0)) = true
+++ inductive narrowing on conjecture
	0 == xts2 = true => count(s(0), xts1 .. nil) <= s(s(0)) = true
... induction variables of
	0 == xts2 = true => count(s(0), xts1 .. nil) <= s(s(0)) = true
... are:
	xts2:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	0 == xts2 = true => count(s(0), xts1 .. nil) <= s(s(0)) = true
... with variable xts2
+++ creating new conjecture
	0 == 0 = true => count(s(0), xts .. nil) <= s(s(0)) = true
+++ creating new conjecture
	0 == s(xts2) = true => count(s(0), xts1 .. nil) <= s(s(0)) = true
--- clause
	0 == 0 = true => count(s(0), xts .. nil) <= s(s(0)) = true
... reduced in 1 step to
	count(s(0), xts .. nil) <= s(s(0)) = true
--- clause
	0 == s(xts2) = true => count(s(0), xts1 .. nil) <= s(s(0)) = true
... reduced in 1 step to
	false = true => count(s(0), xts .. nil) <= s(s(0)) = true
--- clause
	false = true => count(s(0), xts .. nil) <= s(s(0)) = true
... contains a ground negative condition
	false = true
... and is therefore discarded (false => t is always true)
--- clause
	count(s(0), xts .. nil) <= s(s(0)) = true
... subsumed by an existing conjecture
+++ inductive narrowing succeeded
--- clause
	0 == xts2 = true => count(s(0), xts1 .. nil) <= s(s(0)) = true
... oriented to rule
	0 == xts = true => count(s(0), xts .. nil) <= s(s(0)) -> true

+++ Status of the Inference System
--- Conjectures:
	0 == xts2 = false => count(s(0), xts1 .. nil) <= s(s(s(0))) = true
	count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	count(s(s(0)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts4 == xts3 = false => count(s(s(s(xts4))), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	count(s(s(s(0))), xts .. nil) <= s(0) = true
	count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(0)) = true
	count(s(s(s(0))), xts .. nil) <= s(s(0)) = true
	count(s(0), xts .. nil) <= s(0) = true
	count(s(0), xts .. nil) <= s(s(0)) = true
	s(s(0)) == xts2 = true => count(s(s(0)), xts1 .. nil) <= s(0) = true
	s(s(0)) == xts2 = false => count(s(s(0)), xts1 .. nil) <= s(s(0)) = true
	xts3 == 0 = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts4 == s(xts3) = true => count(s(s(s(xts4))), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) = true
	xts3 == s(xts2) = true => count(s(s(xts3)), xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == s(xts2) = false => count(s(s(xts3)), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == xts2 = true => count(s(s(xts3)), xts1 .. nil) <= s(s(0)) = true
	count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == xts2 = false => count(s(s(xts3)), xts1 .. nil) <= s(s(s(0))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	count(x, xs) <= len(xs) -> true
	count(x, xts .. yts) <= s(len(yts)) -> true
	0 == xts = true => count(0, xts .. nil) <= s(0) -> true
	count(x, xts2 .. xts1 .. yts) <= s(s(len(yts))) -> true
	0 == xts = true => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = true => count(s(0), xts .. nil) <= s(0) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = true => count(s(0), xts .. nil) <= s(s(0)) -> true
	s(0) == xts = true => count(s(0), xts .. nil) <= s(0) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(s(0))) -> true
	0 == xts = false => count(s(0), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	s(0) == xts = true => count(s(0), xts .. nil) <= s(s(0)) -> true
	s(0) == xts = false => count(s(0), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	count(x, xts3 .. xts2 .. xts1 .. yts) <= s(s(s(len(yts)))) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	0 == xts = true => count(0, xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(0) == xts = false => count(s(0), xts .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	0 == xts = false => count(0, xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(xts2)) == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(xts2)) == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> yts
	^f0($n0 + 1; yts, xts@) -> xts$n0 .. ^f0($n0; yts, xts@)
	^f1(0; yts) -> len(yts)
	^f1($n1 + 1; yts) -> s(^f1($n1; yts))
	^f136(0; xts) -> xts
	^f136($n136 + 1; xts) -> s(^f136($n136; xts))
+++ }
+++ Lemma(s)           = 
	count(x, xts$n .. ^f0($n; yts, xts@)) <= s(^f1($n; yts)) = true
	xts3 == xts2 = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(0) = true
	xts3 == xts2 = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = true => count(s(^f136($n; xts2)), xts1 .. nil) <= s(0) = true
	xts3 == s(xts2) = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(0) = true
	xts2 == 0 = false => count(s(^f136($n; xts2)), xts1 .. nil) <= s(s(0)) = true
	xts3 == s(xts2) = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true
	xts4 == xts3 = true => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(0)) = true

+++ treating clause
	0 == xts2 = false => count(s(0), xts1 .. nil) <= s(s(s(0))) = true
+++ inductive narrowing on conjecture
	0 == xts2 = false => count(s(0), xts1 .. nil) <= s(s(s(0))) = true
... induction variables of
	0 == xts2 = false => count(s(0), xts1 .. nil) <= s(s(s(0))) = true
... are:
	xts2:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	0 == xts2 = false => count(s(0), xts1 .. nil) <= s(s(s(0))) = true
... with variable xts2
+++ creating new conjecture
	0 == 0 = false => count(s(0), xts .. nil) <= s(s(s(0))) = true
+++ creating new conjecture
	0 == s(xts2) = false => count(s(0), xts1 .. nil) <= s(s(s(0))) = true
--- clause
	0 == 0 = false => count(s(0), xts .. nil) <= s(s(s(0))) = true
... reduced in 1 step to
	true = false => count(s(0), xts .. nil) <= s(s(s(0))) = true
--- clause
	true = false => count(s(0), xts .. nil) <= s(s(s(0))) = true
... contains a ground negative condition
	true = false
... and is therefore discarded (false => t is always true)
--- clause
	0 == s(xts2) = false => count(s(0), xts1 .. nil) <= s(s(s(0))) = true
... reduced in 1 step to
	count(s(0), xts .. nil) <= s(s(s(0))) = true
+++ inductive narrowing succeeded
--- clause
	0 == xts2 = false => count(s(0), xts1 .. nil) <= s(s(s(0))) = true
... oriented to rule
	0 == xts = false => count(s(0), xts .. nil) <= s(s(s(0))) -> true
+++ added new clause(s)
	count(s(0), xts .. nil) <= s(s(s(0))) = true
... to conjectures

+++ Status of the Inference System
--- Conjectures:
	count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	count(s(s(0)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts4 == xts3 = false => count(s(s(s(xts4))), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	count(s(s(s(0))), xts .. nil) <= s(0) = true
	count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(0)) = true
	count(s(s(s(0))), xts .. nil) <= s(s(0)) = true
	count(s(0), xts .. nil) <= s(0) = true
	count(s(0), xts .. nil) <= s(s(0)) = true
	s(s(0)) == xts2 = true => count(s(s(0)), xts1 .. nil) <= s(0) = true
	s(s(0)) == xts2 = false => count(s(s(0)), xts1 .. nil) <= s(s(0)) = true
	xts3 == 0 = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts4 == s(xts3) = true => count(s(s(s(xts4))), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) = true
	xts3 == s(xts2) = true => count(s(s(xts3)), xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == s(xts2) = false => count(s(s(xts3)), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == xts2 = true => count(s(s(xts3)), xts1 .. nil) <= s(s(0)) = true
	count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == xts2 = false => count(s(s(xts3)), xts1 .. nil) <= s(s(s(0))) = true
	count(s(0), xts .. nil) <= s(s(s(0))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	count(x, xs) <= len(xs) -> true
	count(x, xts .. yts) <= s(len(yts)) -> true
	0 == xts = true => count(0, xts .. nil) <= s(0) -> true
	count(x, xts2 .. xts1 .. yts) <= s(s(len(yts))) -> true
	0 == xts = true => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = true => count(s(0), xts .. nil) <= s(0) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = true => count(s(0), xts .. nil) <= s(s(0)) -> true
	s(0) == xts = true => count(s(0), xts .. nil) <= s(0) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(s(0))) -> true
	0 == xts = false => count(s(0), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	s(0) == xts = true => count(s(0), xts .. nil) <= s(s(0)) -> true
	0 == xts = false => count(s(0), xts .. nil) <= s(s(s(0))) -> true
	s(0) == xts = false => count(s(0), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	count(x, xts3 .. xts2 .. xts1 .. yts) <= s(s(s(len(yts)))) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	0 == xts = true => count(0, xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(0) == xts = false => count(s(0), xts .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	0 == xts = false => count(0, xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(xts2)) == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(xts2)) == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> yts
	^f0($n0 + 1; yts, xts@) -> xts$n0 .. ^f0($n0; yts, xts@)
	^f1(0; yts) -> len(yts)
	^f1($n1 + 1; yts) -> s(^f1($n1; yts))
	^f136(0; xts) -> xts
	^f136($n136 + 1; xts) -> s(^f136($n136; xts))
+++ }
+++ Lemma(s)           = 
	count(x, xts$n .. ^f0($n; yts, xts@)) <= s(^f1($n; yts)) = true
	xts3 == xts2 = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(0) = true
	xts3 == xts2 = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = true => count(s(^f136($n; xts2)), xts1 .. nil) <= s(0) = true
	xts3 == s(xts2) = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(0) = true
	xts2 == 0 = false => count(s(^f136($n; xts2)), xts1 .. nil) <= s(s(0)) = true
	xts3 == s(xts2) = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true
	xts4 == xts3 = true => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(0)) = true

+++ treating clause
	count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
--- no new clauses created
+++ attempting case rewriting
--- case rewriting generated new conjectures
	s(s(s(xts3))) == xts2 = true => s(count(s(s(s(xts3))), xts1 .. nil)) <= s(s(s(0))) = true
	s(s(s(xts3))) == xts2 = false => count(s(s(s(xts3))), xts1 .. nil) <= s(s(s(0))) = true
+++ added new clause(s)
	s(s(s(xts3))) == xts2 = true => s(count(s(s(s(xts3))), xts1 .. nil)) <= s(s(s(0))) = true
	s(s(s(xts3))) == xts2 = false => count(s(s(s(xts3))), xts1 .. nil) <= s(s(s(0))) = true
... to conjectures
--- clause
	s(s(s(xts3))) == xts2 = true => s(count(s(s(s(xts3))), xts1 .. nil)) <= s(s(s(0))) = true
... reduced in 1 step to
	s(s(s(xts3))) == xts2 = true => count(s(s(s(xts3))), xts1 .. nil) <= s(s(0)) = true

+++ Status of the Inference System
--- Conjectures:
	count(s(s(0)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts4 == xts3 = false => count(s(s(s(xts4))), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	count(s(s(s(0))), xts .. nil) <= s(0) = true
	count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(0)) = true
	count(s(s(s(0))), xts .. nil) <= s(s(0)) = true
	count(s(0), xts .. nil) <= s(0) = true
	count(s(0), xts .. nil) <= s(s(0)) = true
	s(s(0)) == xts2 = true => count(s(s(0)), xts1 .. nil) <= s(0) = true
	s(s(0)) == xts2 = false => count(s(s(0)), xts1 .. nil) <= s(s(0)) = true
	xts3 == 0 = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts4 == s(xts3) = true => count(s(s(s(xts4))), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) = true
	xts3 == s(xts2) = true => count(s(s(xts3)), xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == s(xts2) = false => count(s(s(xts3)), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == xts2 = true => count(s(s(xts3)), xts1 .. nil) <= s(s(0)) = true
	count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == xts2 = false => count(s(s(xts3)), xts1 .. nil) <= s(s(s(0))) = true
	count(s(0), xts .. nil) <= s(s(s(0))) = true
	s(s(s(xts3))) == xts2 = true => count(s(s(s(xts3))), xts1 .. nil) <= s(s(0)) = true
	s(s(s(xts3))) == xts2 = false => count(s(s(s(xts3))), xts1 .. nil) <= s(s(s(0))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	count(x, xs) <= len(xs) -> true
	count(x, xts .. yts) <= s(len(yts)) -> true
	0 == xts = true => count(0, xts .. nil) <= s(0) -> true
	count(x, xts2 .. xts1 .. yts) <= s(s(len(yts))) -> true
	0 == xts = true => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = true => count(s(0), xts .. nil) <= s(0) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = true => count(s(0), xts .. nil) <= s(s(0)) -> true
	s(0) == xts = true => count(s(0), xts .. nil) <= s(0) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(s(0))) -> true
	0 == xts = false => count(s(0), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	s(0) == xts = true => count(s(0), xts .. nil) <= s(s(0)) -> true
	0 == xts = false => count(s(0), xts .. nil) <= s(s(s(0))) -> true
	s(0) == xts = false => count(s(0), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	count(x, xts3 .. xts2 .. xts1 .. yts) <= s(s(s(len(yts)))) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	0 == xts = true => count(0, xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(0) == xts = false => count(s(0), xts .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	0 == xts = false => count(0, xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(xts2)) == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(xts2)) == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> yts
	^f0($n0 + 1; yts, xts@) -> xts$n0 .. ^f0($n0; yts, xts@)
	^f1(0; yts) -> len(yts)
	^f1($n1 + 1; yts) -> s(^f1($n1; yts))
	^f136(0; xts) -> xts
	^f136($n136 + 1; xts) -> s(^f136($n136; xts))
+++ }
+++ Lemma(s)           = 
	count(x, xts$n .. ^f0($n; yts, xts@)) <= s(^f1($n; yts)) = true
	xts3 == xts2 = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(0) = true
	xts3 == xts2 = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = true => count(s(^f136($n; xts2)), xts1 .. nil) <= s(0) = true
	xts3 == s(xts2) = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(0) = true
	xts2 == 0 = false => count(s(^f136($n; xts2)), xts1 .. nil) <= s(s(0)) = true
	xts3 == s(xts2) = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true
	xts4 == xts3 = true => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(0)) = true

+++ treating clause
	count(s(s(0)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
--- no new clauses created
+++ attempting case rewriting
--- case rewriting generated new conjectures
	s(s(0)) == xts2 = true => s(count(s(s(0)), xts1 .. nil)) <= s(s(s(0))) = true
	s(s(0)) == xts2 = false => count(s(s(0)), xts1 .. nil) <= s(s(s(0))) = true
+++ added new clause(s)
	s(s(0)) == xts2 = true => s(count(s(s(0)), xts1 .. nil)) <= s(s(s(0))) = true
	s(s(0)) == xts2 = false => count(s(s(0)), xts1 .. nil) <= s(s(s(0))) = true
... to conjectures
--- clause
	s(s(0)) == xts2 = true => s(count(s(s(0)), xts1 .. nil)) <= s(s(s(0))) = true
... reduced in 1 step to
	s(s(0)) == xts2 = true => count(s(s(0)), xts1 .. nil) <= s(s(0)) = true

+++ Status of the Inference System
--- Conjectures:
	xts4 == xts3 = false => count(s(s(s(xts4))), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	count(s(s(s(0))), xts .. nil) <= s(0) = true
	count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(0)) = true
	count(s(s(s(0))), xts .. nil) <= s(s(0)) = true
	count(s(0), xts .. nil) <= s(0) = true
	count(s(0), xts .. nil) <= s(s(0)) = true
	s(s(0)) == xts2 = true => count(s(s(0)), xts1 .. nil) <= s(0) = true
	s(s(0)) == xts2 = false => count(s(s(0)), xts1 .. nil) <= s(s(0)) = true
	xts3 == 0 = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts4 == s(xts3) = true => count(s(s(s(xts4))), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) = true
	xts3 == s(xts2) = true => count(s(s(xts3)), xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == s(xts2) = false => count(s(s(xts3)), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == xts2 = true => count(s(s(xts3)), xts1 .. nil) <= s(s(0)) = true
	count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == xts2 = false => count(s(s(xts3)), xts1 .. nil) <= s(s(s(0))) = true
	count(s(0), xts .. nil) <= s(s(s(0))) = true
	s(s(s(xts3))) == xts2 = true => count(s(s(s(xts3))), xts1 .. nil) <= s(s(0)) = true
	s(s(s(xts3))) == xts2 = false => count(s(s(s(xts3))), xts1 .. nil) <= s(s(s(0))) = true
	s(s(0)) == xts2 = true => count(s(s(0)), xts1 .. nil) <= s(s(0)) = true
	s(s(0)) == xts2 = false => count(s(s(0)), xts1 .. nil) <= s(s(s(0))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	count(x, xs) <= len(xs) -> true
	count(x, xts .. yts) <= s(len(yts)) -> true
	0 == xts = true => count(0, xts .. nil) <= s(0) -> true
	count(x, xts2 .. xts1 .. yts) <= s(s(len(yts))) -> true
	0 == xts = true => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = true => count(s(0), xts .. nil) <= s(0) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = true => count(s(0), xts .. nil) <= s(s(0)) -> true
	s(0) == xts = true => count(s(0), xts .. nil) <= s(0) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(s(0))) -> true
	0 == xts = false => count(s(0), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	s(0) == xts = true => count(s(0), xts .. nil) <= s(s(0)) -> true
	0 == xts = false => count(s(0), xts .. nil) <= s(s(s(0))) -> true
	s(0) == xts = false => count(s(0), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	count(x, xts3 .. xts2 .. xts1 .. yts) <= s(s(s(len(yts)))) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	0 == xts = true => count(0, xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(0) == xts = false => count(s(0), xts .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	0 == xts = false => count(0, xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(xts2)) == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(xts2)) == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> yts
	^f0($n0 + 1; yts, xts@) -> xts$n0 .. ^f0($n0; yts, xts@)
	^f1(0; yts) -> len(yts)
	^f1($n1 + 1; yts) -> s(^f1($n1; yts))
	^f136(0; xts) -> xts
	^f136($n136 + 1; xts) -> s(^f136($n136; xts))
+++ }
+++ Lemma(s)           = 
	count(x, xts$n .. ^f0($n; yts, xts@)) <= s(^f1($n; yts)) = true
	xts3 == xts2 = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(0) = true
	xts3 == xts2 = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = true => count(s(^f136($n; xts2)), xts1 .. nil) <= s(0) = true
	xts3 == s(xts2) = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(0) = true
	xts2 == 0 = false => count(s(^f136($n; xts2)), xts1 .. nil) <= s(s(0)) = true
	xts3 == s(xts2) = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true
	xts4 == xts3 = true => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(0)) = true

+++ treating clause
	xts4 == xts3 = false => count(s(s(s(xts4))), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
+++ inductive narrowing on conjecture
	xts4 == xts3 = false => count(s(s(s(xts4))), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
... induction variables of
	xts4 == xts3 = false => count(s(s(s(xts4))), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
... are:
	xts3:nat
	xts4:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	xts4 == xts3 = false => count(s(s(s(xts4))), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
... with variable xts3
+++ creating new conjecture
	xts3 == 0 = false => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
+++ creating new conjecture
	xts4 == s(xts3) = false => count(s(s(s(xts4))), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
+++ inductive narrowing succeeded
--- clause
	xts4 == xts3 = false => count(s(s(s(xts4))), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
... oriented to rule
	xts2 == xts1 = false => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
+++ added new clause(s)
	xts3 == 0 = false => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts4 == s(xts3) = false => count(s(s(s(xts4))), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
... to conjectures
+++ active wrap
	xts4 == xts3 = false => count(s(.), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
... with sequence
	xts4 == xts3 = false => count(s(xts4), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts4 == xts3 = false => count(s(s(xts4)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts4 == xts3 = false => count(s(s(s(xts4))), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
+++ primal grammar found for head
	{.., 0, <=, ==, count, false, nil, s, true}
... and wrap
	xts4 == xts3 = false => count(s(.), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
+++ Presburger system  = {
	^f136(0; xts) -> xts
	^f136($n136 + 1; xts) -> s(^f136($n136; xts))
+++ }
+++ Lemma(s)           = 
	xts4 == xts3 = false => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true

+++ Status of the Inference System
--- Conjectures:
	count(s(s(s(0))), xts .. nil) <= s(0) = true
	count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(0)) = true
	count(s(s(s(0))), xts .. nil) <= s(s(0)) = true
	count(s(0), xts .. nil) <= s(0) = true
	count(s(0), xts .. nil) <= s(s(0)) = true
	s(s(0)) == xts2 = true => count(s(s(0)), xts1 .. nil) <= s(0) = true
	s(s(0)) == xts2 = false => count(s(s(0)), xts1 .. nil) <= s(s(0)) = true
	xts3 == 0 = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts4 == s(xts3) = true => count(s(s(s(xts4))), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) = true
	xts3 == s(xts2) = true => count(s(s(xts3)), xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == s(xts2) = false => count(s(s(xts3)), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == xts2 = true => count(s(s(xts3)), xts1 .. nil) <= s(s(0)) = true
	count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == xts2 = false => count(s(s(xts3)), xts1 .. nil) <= s(s(s(0))) = true
	count(s(0), xts .. nil) <= s(s(s(0))) = true
	s(s(s(xts3))) == xts2 = true => count(s(s(s(xts3))), xts1 .. nil) <= s(s(0)) = true
	s(s(s(xts3))) == xts2 = false => count(s(s(s(xts3))), xts1 .. nil) <= s(s(s(0))) = true
	s(s(0)) == xts2 = true => count(s(s(0)), xts1 .. nil) <= s(s(0)) = true
	s(s(0)) == xts2 = false => count(s(s(0)), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == 0 = false => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts4 == s(xts3) = false => count(s(s(s(xts4))), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	count(x, xs) <= len(xs) -> true
	count(x, xts .. yts) <= s(len(yts)) -> true
	0 == xts = true => count(0, xts .. nil) <= s(0) -> true
	count(x, xts2 .. xts1 .. yts) <= s(s(len(yts))) -> true
	0 == xts = true => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = true => count(s(0), xts .. nil) <= s(0) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = true => count(s(0), xts .. nil) <= s(s(0)) -> true
	s(0) == xts = true => count(s(0), xts .. nil) <= s(0) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(s(0))) -> true
	0 == xts = false => count(s(0), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	s(0) == xts = true => count(s(0), xts .. nil) <= s(s(0)) -> true
	0 == xts = false => count(s(0), xts .. nil) <= s(s(s(0))) -> true
	s(0) == xts = false => count(s(0), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	count(x, xts3 .. xts2 .. xts1 .. yts) <= s(s(s(len(yts)))) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	0 == xts = true => count(0, xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(0) == xts = false => count(s(0), xts .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	0 == xts = false => count(0, xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(xts2)) == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(xts2)) == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> yts
	^f0($n0 + 1; yts, xts@) -> xts$n0 .. ^f0($n0; yts, xts@)
	^f1(0; yts) -> len(yts)
	^f1($n1 + 1; yts) -> s(^f1($n1; yts))
	^f136(0; xts) -> xts
	^f136($n136 + 1; xts) -> s(^f136($n136; xts))
+++ }
+++ Lemma(s)           = 
	count(x, xts$n .. ^f0($n; yts, xts@)) <= s(^f1($n; yts)) = true
	xts3 == xts2 = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(0) = true
	xts3 == xts2 = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = true => count(s(^f136($n; xts2)), xts1 .. nil) <= s(0) = true
	xts3 == s(xts2) = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(0) = true
	xts2 == 0 = false => count(s(^f136($n; xts2)), xts1 .. nil) <= s(s(0)) = true
	xts3 == s(xts2) = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true
	xts4 == xts3 = true => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts4 == xts3 = false => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true

+++ treating clause
	count(s(s(s(0))), xts .. nil) <= s(0) = true
--- no new clauses created
+++ attempting case rewriting
--- case rewriting generated new conjectures
	s(s(s(0))) == xts = true => s(0) <= s(0) = true
	s(s(s(0))) == xts = false => 0 <= s(0) = true
+++ added new clause(s)
	s(s(s(0))) == xts = true => s(0) <= s(0) = true
	s(s(s(0))) == xts = false => 0 <= s(0) = true
... to conjectures
--- clause
	s(s(s(0))) == xts = true => s(0) <= s(0) = true
... reduced to tautology
	s(s(s(0))) == xts = true => true = true
--- clause
	s(s(s(0))) == xts = false => 0 <= s(0) = true
... reduced to tautology
	s(s(s(0))) == xts = false => true = true

+++ Status of the Inference System
--- Conjectures:
	count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(0)) = true
	count(s(s(s(0))), xts .. nil) <= s(s(0)) = true
	count(s(0), xts .. nil) <= s(0) = true
	count(s(0), xts .. nil) <= s(s(0)) = true
	s(s(0)) == xts2 = true => count(s(s(0)), xts1 .. nil) <= s(0) = true
	s(s(0)) == xts2 = false => count(s(s(0)), xts1 .. nil) <= s(s(0)) = true
	xts3 == 0 = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts4 == s(xts3) = true => count(s(s(s(xts4))), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) = true
	xts3 == s(xts2) = true => count(s(s(xts3)), xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == s(xts2) = false => count(s(s(xts3)), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == xts2 = true => count(s(s(xts3)), xts1 .. nil) <= s(s(0)) = true
	count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == xts2 = false => count(s(s(xts3)), xts1 .. nil) <= s(s(s(0))) = true
	count(s(0), xts .. nil) <= s(s(s(0))) = true
	s(s(s(xts3))) == xts2 = true => count(s(s(s(xts3))), xts1 .. nil) <= s(s(0)) = true
	s(s(s(xts3))) == xts2 = false => count(s(s(s(xts3))), xts1 .. nil) <= s(s(s(0))) = true
	s(s(0)) == xts2 = true => count(s(s(0)), xts1 .. nil) <= s(s(0)) = true
	s(s(0)) == xts2 = false => count(s(s(0)), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == 0 = false => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts4 == s(xts3) = false => count(s(s(s(xts4))), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	count(x, xs) <= len(xs) -> true
	count(x, xts .. yts) <= s(len(yts)) -> true
	0 == xts = true => count(0, xts .. nil) <= s(0) -> true
	count(x, xts2 .. xts1 .. yts) <= s(s(len(yts))) -> true
	0 == xts = true => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = true => count(s(0), xts .. nil) <= s(0) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = true => count(s(0), xts .. nil) <= s(s(0)) -> true
	s(0) == xts = true => count(s(0), xts .. nil) <= s(0) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(s(0))) -> true
	0 == xts = false => count(s(0), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	s(0) == xts = true => count(s(0), xts .. nil) <= s(s(0)) -> true
	0 == xts = false => count(s(0), xts .. nil) <= s(s(s(0))) -> true
	s(0) == xts = false => count(s(0), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	count(x, xts3 .. xts2 .. xts1 .. yts) <= s(s(s(len(yts)))) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	0 == xts = true => count(0, xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(0) == xts = false => count(s(0), xts .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	0 == xts = false => count(0, xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(xts2)) == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(xts2)) == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> yts
	^f0($n0 + 1; yts, xts@) -> xts$n0 .. ^f0($n0; yts, xts@)
	^f1(0; yts) -> len(yts)
	^f1($n1 + 1; yts) -> s(^f1($n1; yts))
	^f136(0; xts) -> xts
	^f136($n136 + 1; xts) -> s(^f136($n136; xts))
+++ }
+++ Lemma(s)           = 
	count(x, xts$n .. ^f0($n; yts, xts@)) <= s(^f1($n; yts)) = true
	xts3 == xts2 = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(0) = true
	xts3 == xts2 = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = true => count(s(^f136($n; xts2)), xts1 .. nil) <= s(0) = true
	xts3 == s(xts2) = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(0) = true
	xts2 == 0 = false => count(s(^f136($n; xts2)), xts1 .. nil) <= s(s(0)) = true
	xts3 == s(xts2) = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true
	xts4 == xts3 = true => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts4 == xts3 = false => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true

+++ treating clause
	count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(0)) = true
--- no new clauses created
+++ attempting case rewriting
--- case rewriting generated new conjectures
	s(s(s(s(xts2)))) == xts1 = true => s(0) <= s(s(0)) = true
	s(s(s(s(xts2)))) == xts1 = false => 0 <= s(s(0)) = true
+++ added new clause(s)
	s(s(s(s(xts2)))) == xts1 = true => s(0) <= s(s(0)) = true
	s(s(s(s(xts2)))) == xts1 = false => 0 <= s(s(0)) = true
... to conjectures
--- clause
	s(s(s(s(xts2)))) == xts1 = true => s(0) <= s(s(0)) = true
... reduced to tautology
	s(s(s(s(xts2)))) == xts1 = true => true = true
--- clause
	s(s(s(s(xts2)))) == xts1 = false => 0 <= s(s(0)) = true
... reduced to tautology
	s(s(s(s(xts2)))) == xts1 = false => true = true

+++ Status of the Inference System
--- Conjectures:
	count(s(s(s(0))), xts .. nil) <= s(s(0)) = true
	count(s(0), xts .. nil) <= s(0) = true
	count(s(0), xts .. nil) <= s(s(0)) = true
	s(s(0)) == xts2 = true => count(s(s(0)), xts1 .. nil) <= s(0) = true
	s(s(0)) == xts2 = false => count(s(s(0)), xts1 .. nil) <= s(s(0)) = true
	xts3 == 0 = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts4 == s(xts3) = true => count(s(s(s(xts4))), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) = true
	xts3 == s(xts2) = true => count(s(s(xts3)), xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == s(xts2) = false => count(s(s(xts3)), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == xts2 = true => count(s(s(xts3)), xts1 .. nil) <= s(s(0)) = true
	count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == xts2 = false => count(s(s(xts3)), xts1 .. nil) <= s(s(s(0))) = true
	count(s(0), xts .. nil) <= s(s(s(0))) = true
	s(s(s(xts3))) == xts2 = true => count(s(s(s(xts3))), xts1 .. nil) <= s(s(0)) = true
	s(s(s(xts3))) == xts2 = false => count(s(s(s(xts3))), xts1 .. nil) <= s(s(s(0))) = true
	s(s(0)) == xts2 = true => count(s(s(0)), xts1 .. nil) <= s(s(0)) = true
	s(s(0)) == xts2 = false => count(s(s(0)), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == 0 = false => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts4 == s(xts3) = false => count(s(s(s(xts4))), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	count(x, xs) <= len(xs) -> true
	count(x, xts .. yts) <= s(len(yts)) -> true
	0 == xts = true => count(0, xts .. nil) <= s(0) -> true
	count(x, xts2 .. xts1 .. yts) <= s(s(len(yts))) -> true
	0 == xts = true => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = true => count(s(0), xts .. nil) <= s(0) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = true => count(s(0), xts .. nil) <= s(s(0)) -> true
	s(0) == xts = true => count(s(0), xts .. nil) <= s(0) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(s(0))) -> true
	0 == xts = false => count(s(0), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	s(0) == xts = true => count(s(0), xts .. nil) <= s(s(0)) -> true
	0 == xts = false => count(s(0), xts .. nil) <= s(s(s(0))) -> true
	s(0) == xts = false => count(s(0), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	count(x, xts3 .. xts2 .. xts1 .. yts) <= s(s(s(len(yts)))) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	0 == xts = true => count(0, xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(0) == xts = false => count(s(0), xts .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	0 == xts = false => count(0, xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(xts2)) == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(xts2)) == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> yts
	^f0($n0 + 1; yts, xts@) -> xts$n0 .. ^f0($n0; yts, xts@)
	^f1(0; yts) -> len(yts)
	^f1($n1 + 1; yts) -> s(^f1($n1; yts))
	^f136(0; xts) -> xts
	^f136($n136 + 1; xts) -> s(^f136($n136; xts))
+++ }
+++ Lemma(s)           = 
	count(x, xts$n .. ^f0($n; yts, xts@)) <= s(^f1($n; yts)) = true
	xts3 == xts2 = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(0) = true
	xts3 == xts2 = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = true => count(s(^f136($n; xts2)), xts1 .. nil) <= s(0) = true
	xts3 == s(xts2) = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(0) = true
	xts2 == 0 = false => count(s(^f136($n; xts2)), xts1 .. nil) <= s(s(0)) = true
	xts3 == s(xts2) = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true
	xts4 == xts3 = true => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts4 == xts3 = false => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true

+++ treating clause
	count(s(s(s(0))), xts .. nil) <= s(s(0)) = true
--- no new clauses created
+++ attempting case rewriting
--- case rewriting generated new conjectures
	s(s(s(0))) == xts = true => s(0) <= s(s(0)) = true
	s(s(s(0))) == xts = false => 0 <= s(s(0)) = true
+++ added new clause(s)
	s(s(s(0))) == xts = true => s(0) <= s(s(0)) = true
	s(s(s(0))) == xts = false => 0 <= s(s(0)) = true
... to conjectures
--- clause
	s(s(s(0))) == xts = true => s(0) <= s(s(0)) = true
... reduced to tautology
	s(s(s(0))) == xts = true => true = true
--- clause
	s(s(s(0))) == xts = false => 0 <= s(s(0)) = true
... reduced to tautology
	s(s(s(0))) == xts = false => true = true

+++ Status of the Inference System
--- Conjectures:
	count(s(0), xts .. nil) <= s(0) = true
	count(s(0), xts .. nil) <= s(s(0)) = true
	s(s(0)) == xts2 = true => count(s(s(0)), xts1 .. nil) <= s(0) = true
	s(s(0)) == xts2 = false => count(s(s(0)), xts1 .. nil) <= s(s(0)) = true
	xts3 == 0 = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts4 == s(xts3) = true => count(s(s(s(xts4))), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) = true
	xts3 == s(xts2) = true => count(s(s(xts3)), xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == s(xts2) = false => count(s(s(xts3)), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == xts2 = true => count(s(s(xts3)), xts1 .. nil) <= s(s(0)) = true
	count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == xts2 = false => count(s(s(xts3)), xts1 .. nil) <= s(s(s(0))) = true
	count(s(0), xts .. nil) <= s(s(s(0))) = true
	s(s(s(xts3))) == xts2 = true => count(s(s(s(xts3))), xts1 .. nil) <= s(s(0)) = true
	s(s(s(xts3))) == xts2 = false => count(s(s(s(xts3))), xts1 .. nil) <= s(s(s(0))) = true
	s(s(0)) == xts2 = true => count(s(s(0)), xts1 .. nil) <= s(s(0)) = true
	s(s(0)) == xts2 = false => count(s(s(0)), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == 0 = false => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts4 == s(xts3) = false => count(s(s(s(xts4))), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	count(x, xs) <= len(xs) -> true
	count(x, xts .. yts) <= s(len(yts)) -> true
	0 == xts = true => count(0, xts .. nil) <= s(0) -> true
	count(x, xts2 .. xts1 .. yts) <= s(s(len(yts))) -> true
	0 == xts = true => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = true => count(s(0), xts .. nil) <= s(0) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = true => count(s(0), xts .. nil) <= s(s(0)) -> true
	s(0) == xts = true => count(s(0), xts .. nil) <= s(0) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(s(0))) -> true
	0 == xts = false => count(s(0), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	s(0) == xts = true => count(s(0), xts .. nil) <= s(s(0)) -> true
	0 == xts = false => count(s(0), xts .. nil) <= s(s(s(0))) -> true
	s(0) == xts = false => count(s(0), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	count(x, xts3 .. xts2 .. xts1 .. yts) <= s(s(s(len(yts)))) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	0 == xts = true => count(0, xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(0) == xts = false => count(s(0), xts .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	0 == xts = false => count(0, xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(xts2)) == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(xts2)) == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> yts
	^f0($n0 + 1; yts, xts@) -> xts$n0 .. ^f0($n0; yts, xts@)
	^f1(0; yts) -> len(yts)
	^f1($n1 + 1; yts) -> s(^f1($n1; yts))
	^f136(0; xts) -> xts
	^f136($n136 + 1; xts) -> s(^f136($n136; xts))
+++ }
+++ Lemma(s)           = 
	count(x, xts$n .. ^f0($n; yts, xts@)) <= s(^f1($n; yts)) = true
	xts3 == xts2 = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(0) = true
	xts3 == xts2 = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = true => count(s(^f136($n; xts2)), xts1 .. nil) <= s(0) = true
	xts3 == s(xts2) = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(0) = true
	xts2 == 0 = false => count(s(^f136($n; xts2)), xts1 .. nil) <= s(s(0)) = true
	xts3 == s(xts2) = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true
	xts4 == xts3 = true => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts4 == xts3 = false => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true

+++ treating clause
	count(s(0), xts .. nil) <= s(0) = true
--- no new clauses created
+++ attempting case rewriting
--- case rewriting generated new conjectures
	s(0) == xts = true => s(0) <= s(0) = true
	s(0) == xts = false => 0 <= s(0) = true
+++ added new clause(s)
	s(0) == xts = true => s(0) <= s(0) = true
	s(0) == xts = false => 0 <= s(0) = true
... to conjectures
--- clause
	s(0) == xts = true => s(0) <= s(0) = true
... reduced to tautology
	s(0) == xts = true => true = true
--- clause
	s(0) == xts = false => 0 <= s(0) = true
... reduced to tautology
	s(0) == xts = false => true = true

+++ Status of the Inference System
--- Conjectures:
	count(s(0), xts .. nil) <= s(s(0)) = true
	s(s(0)) == xts2 = true => count(s(s(0)), xts1 .. nil) <= s(0) = true
	s(s(0)) == xts2 = false => count(s(s(0)), xts1 .. nil) <= s(s(0)) = true
	xts3 == 0 = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts4 == s(xts3) = true => count(s(s(s(xts4))), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) = true
	xts3 == s(xts2) = true => count(s(s(xts3)), xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == s(xts2) = false => count(s(s(xts3)), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == xts2 = true => count(s(s(xts3)), xts1 .. nil) <= s(s(0)) = true
	count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == xts2 = false => count(s(s(xts3)), xts1 .. nil) <= s(s(s(0))) = true
	count(s(0), xts .. nil) <= s(s(s(0))) = true
	s(s(s(xts3))) == xts2 = true => count(s(s(s(xts3))), xts1 .. nil) <= s(s(0)) = true
	s(s(s(xts3))) == xts2 = false => count(s(s(s(xts3))), xts1 .. nil) <= s(s(s(0))) = true
	s(s(0)) == xts2 = true => count(s(s(0)), xts1 .. nil) <= s(s(0)) = true
	s(s(0)) == xts2 = false => count(s(s(0)), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == 0 = false => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts4 == s(xts3) = false => count(s(s(s(xts4))), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	count(x, xs) <= len(xs) -> true
	count(x, xts .. yts) <= s(len(yts)) -> true
	0 == xts = true => count(0, xts .. nil) <= s(0) -> true
	count(x, xts2 .. xts1 .. yts) <= s(s(len(yts))) -> true
	0 == xts = true => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = true => count(s(0), xts .. nil) <= s(0) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = true => count(s(0), xts .. nil) <= s(s(0)) -> true
	s(0) == xts = true => count(s(0), xts .. nil) <= s(0) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(s(0))) -> true
	0 == xts = false => count(s(0), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	s(0) == xts = true => count(s(0), xts .. nil) <= s(s(0)) -> true
	0 == xts = false => count(s(0), xts .. nil) <= s(s(s(0))) -> true
	s(0) == xts = false => count(s(0), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	count(x, xts3 .. xts2 .. xts1 .. yts) <= s(s(s(len(yts)))) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	0 == xts = true => count(0, xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(0) == xts = false => count(s(0), xts .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	0 == xts = false => count(0, xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(xts2)) == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(xts2)) == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> yts
	^f0($n0 + 1; yts, xts@) -> xts$n0 .. ^f0($n0; yts, xts@)
	^f1(0; yts) -> len(yts)
	^f1($n1 + 1; yts) -> s(^f1($n1; yts))
	^f136(0; xts) -> xts
	^f136($n136 + 1; xts) -> s(^f136($n136; xts))
+++ }
+++ Lemma(s)           = 
	count(x, xts$n .. ^f0($n; yts, xts@)) <= s(^f1($n; yts)) = true
	xts3 == xts2 = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(0) = true
	xts3 == xts2 = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = true => count(s(^f136($n; xts2)), xts1 .. nil) <= s(0) = true
	xts3 == s(xts2) = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(0) = true
	xts2 == 0 = false => count(s(^f136($n; xts2)), xts1 .. nil) <= s(s(0)) = true
	xts3 == s(xts2) = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true
	xts4 == xts3 = true => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts4 == xts3 = false => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true

+++ treating clause
	count(s(0), xts .. nil) <= s(s(0)) = true
--- no new clauses created
+++ attempting case rewriting
--- case rewriting generated new conjectures
	s(0) == xts = true => s(0) <= s(s(0)) = true
	s(0) == xts = false => 0 <= s(s(0)) = true
+++ added new clause(s)
	s(0) == xts = true => s(0) <= s(s(0)) = true
	s(0) == xts = false => 0 <= s(s(0)) = true
... to conjectures
--- clause
	s(0) == xts = true => s(0) <= s(s(0)) = true
... reduced to tautology
	s(0) == xts = true => true = true
--- clause
	s(0) == xts = false => 0 <= s(s(0)) = true
... reduced to tautology
	s(0) == xts = false => true = true

+++ Status of the Inference System
--- Conjectures:
	s(s(0)) == xts2 = true => count(s(s(0)), xts1 .. nil) <= s(0) = true
	s(s(0)) == xts2 = false => count(s(s(0)), xts1 .. nil) <= s(s(0)) = true
	xts3 == 0 = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts4 == s(xts3) = true => count(s(s(s(xts4))), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) = true
	xts3 == s(xts2) = true => count(s(s(xts3)), xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == s(xts2) = false => count(s(s(xts3)), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == xts2 = true => count(s(s(xts3)), xts1 .. nil) <= s(s(0)) = true
	count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == xts2 = false => count(s(s(xts3)), xts1 .. nil) <= s(s(s(0))) = true
	count(s(0), xts .. nil) <= s(s(s(0))) = true
	s(s(s(xts3))) == xts2 = true => count(s(s(s(xts3))), xts1 .. nil) <= s(s(0)) = true
	s(s(s(xts3))) == xts2 = false => count(s(s(s(xts3))), xts1 .. nil) <= s(s(s(0))) = true
	s(s(0)) == xts2 = true => count(s(s(0)), xts1 .. nil) <= s(s(0)) = true
	s(s(0)) == xts2 = false => count(s(s(0)), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == 0 = false => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts4 == s(xts3) = false => count(s(s(s(xts4))), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	count(x, xs) <= len(xs) -> true
	count(x, xts .. yts) <= s(len(yts)) -> true
	0 == xts = true => count(0, xts .. nil) <= s(0) -> true
	count(x, xts2 .. xts1 .. yts) <= s(s(len(yts))) -> true
	0 == xts = true => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = true => count(s(0), xts .. nil) <= s(0) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = true => count(s(0), xts .. nil) <= s(s(0)) -> true
	s(0) == xts = true => count(s(0), xts .. nil) <= s(0) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(s(0))) -> true
	0 == xts = false => count(s(0), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	s(0) == xts = true => count(s(0), xts .. nil) <= s(s(0)) -> true
	0 == xts = false => count(s(0), xts .. nil) <= s(s(s(0))) -> true
	s(0) == xts = false => count(s(0), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	count(x, xts3 .. xts2 .. xts1 .. yts) <= s(s(s(len(yts)))) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	0 == xts = true => count(0, xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(0) == xts = false => count(s(0), xts .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	0 == xts = false => count(0, xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(xts2)) == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(xts2)) == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> yts
	^f0($n0 + 1; yts, xts@) -> xts$n0 .. ^f0($n0; yts, xts@)
	^f1(0; yts) -> len(yts)
	^f1($n1 + 1; yts) -> s(^f1($n1; yts))
	^f136(0; xts) -> xts
	^f136($n136 + 1; xts) -> s(^f136($n136; xts))
+++ }
+++ Lemma(s)           = 
	count(x, xts$n .. ^f0($n; yts, xts@)) <= s(^f1($n; yts)) = true
	xts3 == xts2 = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(0) = true
	xts3 == xts2 = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = true => count(s(^f136($n; xts2)), xts1 .. nil) <= s(0) = true
	xts3 == s(xts2) = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(0) = true
	xts2 == 0 = false => count(s(^f136($n; xts2)), xts1 .. nil) <= s(s(0)) = true
	xts3 == s(xts2) = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true
	xts4 == xts3 = true => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts4 == xts3 = false => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true

+++ treating clause
	s(s(0)) == xts2 = true => count(s(s(0)), xts1 .. nil) <= s(0) = true
+++ inductive narrowing on conjecture
	s(s(0)) == xts2 = true => count(s(s(0)), xts1 .. nil) <= s(0) = true
... induction variables of
	s(s(0)) == xts2 = true => count(s(s(0)), xts1 .. nil) <= s(0) = true
... are:
	xts2:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	s(s(0)) == xts2 = true => count(s(s(0)), xts1 .. nil) <= s(0) = true
... with variable xts2
+++ creating new conjecture
	s(s(0)) == 0 = true => count(s(s(0)), xts .. nil) <= s(0) = true
+++ creating new conjecture
	s(s(0)) == s(xts2) = true => count(s(s(0)), xts1 .. nil) <= s(0) = true
--- clause
	s(s(0)) == 0 = true => count(s(s(0)), xts .. nil) <= s(0) = true
... reduced in 1 step to
	false = true => count(s(s(0)), xts .. nil) <= s(0) = true
--- clause
	false = true => count(s(s(0)), xts .. nil) <= s(0) = true
... contains a ground negative condition
	false = true
... and is therefore discarded (false => t is always true)
--- clause
	s(s(0)) == s(xts2) = true => count(s(s(0)), xts1 .. nil) <= s(0) = true
... reduced in 1 step to
	s(0) == xts2 = true => count(s(s(0)), xts1 .. nil) <= s(0) = true
+++ inductive narrowing succeeded
--- clause
	s(s(0)) == xts2 = true => count(s(s(0)), xts1 .. nil) <= s(0) = true
... oriented to rule
	s(s(0)) == xts = true => count(s(s(0)), xts .. nil) <= s(0) -> true
+++ added new clause(s)
	s(0) == xts2 = true => count(s(s(0)), xts1 .. nil) <= s(0) = true
... to conjectures

+++ Status of the Inference System
--- Conjectures:
	s(s(0)) == xts2 = false => count(s(s(0)), xts1 .. nil) <= s(s(0)) = true
	xts3 == 0 = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts4 == s(xts3) = true => count(s(s(s(xts4))), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) = true
	xts3 == s(xts2) = true => count(s(s(xts3)), xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == s(xts2) = false => count(s(s(xts3)), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == xts2 = true => count(s(s(xts3)), xts1 .. nil) <= s(s(0)) = true
	count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == xts2 = false => count(s(s(xts3)), xts1 .. nil) <= s(s(s(0))) = true
	count(s(0), xts .. nil) <= s(s(s(0))) = true
	s(s(s(xts3))) == xts2 = true => count(s(s(s(xts3))), xts1 .. nil) <= s(s(0)) = true
	s(s(s(xts3))) == xts2 = false => count(s(s(s(xts3))), xts1 .. nil) <= s(s(s(0))) = true
	s(s(0)) == xts2 = true => count(s(s(0)), xts1 .. nil) <= s(s(0)) = true
	s(s(0)) == xts2 = false => count(s(s(0)), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == 0 = false => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts4 == s(xts3) = false => count(s(s(s(xts4))), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	s(0) == xts2 = true => count(s(s(0)), xts1 .. nil) <= s(0) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	count(x, xs) <= len(xs) -> true
	count(x, xts .. yts) <= s(len(yts)) -> true
	0 == xts = true => count(0, xts .. nil) <= s(0) -> true
	count(x, xts2 .. xts1 .. yts) <= s(s(len(yts))) -> true
	0 == xts = true => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = true => count(s(0), xts .. nil) <= s(0) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = true => count(s(0), xts .. nil) <= s(s(0)) -> true
	s(0) == xts = true => count(s(0), xts .. nil) <= s(0) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(s(0))) -> true
	0 == xts = false => count(s(0), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	s(0) == xts = true => count(s(0), xts .. nil) <= s(s(0)) -> true
	0 == xts = false => count(s(0), xts .. nil) <= s(s(s(0))) -> true
	s(0) == xts = false => count(s(0), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	count(x, xts3 .. xts2 .. xts1 .. yts) <= s(s(s(len(yts)))) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	0 == xts = true => count(0, xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(0)) == xts = true => count(s(s(0)), xts .. nil) <= s(0) -> true
	s(0) == xts = false => count(s(0), xts .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	0 == xts = false => count(0, xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(xts2)) == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(xts2)) == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> yts
	^f0($n0 + 1; yts, xts@) -> xts$n0 .. ^f0($n0; yts, xts@)
	^f1(0; yts) -> len(yts)
	^f1($n1 + 1; yts) -> s(^f1($n1; yts))
	^f136(0; xts) -> xts
	^f136($n136 + 1; xts) -> s(^f136($n136; xts))
+++ }
+++ Lemma(s)           = 
	count(x, xts$n .. ^f0($n; yts, xts@)) <= s(^f1($n; yts)) = true
	xts3 == xts2 = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(0) = true
	xts3 == xts2 = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = true => count(s(^f136($n; xts2)), xts1 .. nil) <= s(0) = true
	xts3 == s(xts2) = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(0) = true
	xts2 == 0 = false => count(s(^f136($n; xts2)), xts1 .. nil) <= s(s(0)) = true
	xts3 == s(xts2) = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true
	xts4 == xts3 = true => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts4 == xts3 = false => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true

+++ treating clause
	s(s(0)) == xts2 = false => count(s(s(0)), xts1 .. nil) <= s(s(0)) = true
+++ inductive narrowing on conjecture
	s(s(0)) == xts2 = false => count(s(s(0)), xts1 .. nil) <= s(s(0)) = true
... induction variables of
	s(s(0)) == xts2 = false => count(s(s(0)), xts1 .. nil) <= s(s(0)) = true
... are:
	xts2:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	s(s(0)) == xts2 = false => count(s(s(0)), xts1 .. nil) <= s(s(0)) = true
... with variable xts2
+++ creating new conjecture
	s(s(0)) == 0 = false => count(s(s(0)), xts .. nil) <= s(s(0)) = true
+++ creating new conjecture
	s(s(0)) == s(xts2) = false => count(s(s(0)), xts1 .. nil) <= s(s(0)) = true
--- clause
	s(s(0)) == 0 = false => count(s(s(0)), xts .. nil) <= s(s(0)) = true
... reduced in 1 step to
	count(s(s(0)), xts .. nil) <= s(s(0)) = true
--- clause
	s(s(0)) == s(xts2) = false => count(s(s(0)), xts1 .. nil) <= s(s(0)) = true
... reduced in 1 step to
	s(0) == xts2 = false => count(s(s(0)), xts1 .. nil) <= s(s(0)) = true
+++ inductive narrowing succeeded
--- clause
	s(s(0)) == xts2 = false => count(s(s(0)), xts1 .. nil) <= s(s(0)) = true
... oriented to rule
	s(s(0)) == xts = false => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
+++ added new clause(s)
	count(s(s(0)), xts .. nil) <= s(s(0)) = true
	s(0) == xts2 = false => count(s(s(0)), xts1 .. nil) <= s(s(0)) = true
... to conjectures

+++ Status of the Inference System
--- Conjectures:
	xts3 == 0 = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts4 == s(xts3) = true => count(s(s(s(xts4))), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) = true
	xts3 == s(xts2) = true => count(s(s(xts3)), xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == s(xts2) = false => count(s(s(xts3)), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == xts2 = true => count(s(s(xts3)), xts1 .. nil) <= s(s(0)) = true
	count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == xts2 = false => count(s(s(xts3)), xts1 .. nil) <= s(s(s(0))) = true
	count(s(0), xts .. nil) <= s(s(s(0))) = true
	s(s(s(xts3))) == xts2 = true => count(s(s(s(xts3))), xts1 .. nil) <= s(s(0)) = true
	s(s(s(xts3))) == xts2 = false => count(s(s(s(xts3))), xts1 .. nil) <= s(s(s(0))) = true
	s(s(0)) == xts2 = true => count(s(s(0)), xts1 .. nil) <= s(s(0)) = true
	s(s(0)) == xts2 = false => count(s(s(0)), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == 0 = false => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts4 == s(xts3) = false => count(s(s(s(xts4))), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	s(0) == xts2 = true => count(s(s(0)), xts1 .. nil) <= s(0) = true
	count(s(s(0)), xts .. nil) <= s(s(0)) = true
	s(0) == xts2 = false => count(s(s(0)), xts1 .. nil) <= s(s(0)) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	count(x, xs) <= len(xs) -> true
	count(x, xts .. yts) <= s(len(yts)) -> true
	0 == xts = true => count(0, xts .. nil) <= s(0) -> true
	count(x, xts2 .. xts1 .. yts) <= s(s(len(yts))) -> true
	0 == xts = true => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = true => count(s(0), xts .. nil) <= s(0) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = true => count(s(0), xts .. nil) <= s(s(0)) -> true
	s(0) == xts = true => count(s(0), xts .. nil) <= s(0) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(s(0))) -> true
	0 == xts = false => count(s(0), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	s(0) == xts = true => count(s(0), xts .. nil) <= s(s(0)) -> true
	0 == xts = false => count(s(0), xts .. nil) <= s(s(s(0))) -> true
	s(0) == xts = false => count(s(0), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	count(x, xts3 .. xts2 .. xts1 .. yts) <= s(s(s(len(yts)))) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	0 == xts = true => count(0, xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(0)) == xts = true => count(s(s(0)), xts .. nil) <= s(0) -> true
	s(0) == xts = false => count(s(0), xts .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	0 == xts = false => count(0, xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(0)) == xts = false => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(xts2)) == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(xts2)) == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> yts
	^f0($n0 + 1; yts, xts@) -> xts$n0 .. ^f0($n0; yts, xts@)
	^f1(0; yts) -> len(yts)
	^f1($n1 + 1; yts) -> s(^f1($n1; yts))
	^f136(0; xts) -> xts
	^f136($n136 + 1; xts) -> s(^f136($n136; xts))
+++ }
+++ Lemma(s)           = 
	count(x, xts$n .. ^f0($n; yts, xts@)) <= s(^f1($n; yts)) = true
	xts3 == xts2 = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(0) = true
	xts3 == xts2 = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = true => count(s(^f136($n; xts2)), xts1 .. nil) <= s(0) = true
	xts3 == s(xts2) = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(0) = true
	xts2 == 0 = false => count(s(^f136($n; xts2)), xts1 .. nil) <= s(s(0)) = true
	xts3 == s(xts2) = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true
	xts4 == xts3 = true => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts4 == xts3 = false => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true

+++ treating clause
	xts3 == 0 = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) = true
+++ inductive narrowing on conjecture
	xts3 == 0 = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) = true
... induction variables of
	xts3 == 0 = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) = true
... are:
	xts3:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	xts3 == 0 = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) = true
... with variable xts3
+++ creating new conjecture
	0 == 0 = true => count(s(s(s(0))), xts2 .. xts1 .. nil) <= s(s(0)) = true
+++ creating new conjecture
	s(xts3) == 0 = true => count(s(s(s(s(xts3)))), xts2 .. xts1 .. nil) <= s(s(0)) = true
--- clause
	0 == 0 = true => count(s(s(s(0))), xts2 .. xts1 .. nil) <= s(s(0)) = true
... reduced in 1 step to
	count(s(s(s(0))), xts2 .. xts1 .. nil) <= s(s(0)) = true
--- clause
	s(xts3) == 0 = true => count(s(s(s(s(xts3)))), xts2 .. xts1 .. nil) <= s(s(0)) = true
... reduced in 1 step to
	false = true => count(s(s(s(s(xts3)))), xts2 .. xts1 .. nil) <= s(s(0)) = true
--- clause
	false = true => count(s(s(s(s(xts3)))), xts2 .. xts1 .. nil) <= s(s(0)) = true
... contains a ground negative condition
	false = true
... and is therefore discarded (false => t is always true)
+++ inductive narrowing succeeded
--- clause
	xts3 == 0 = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) = true
... oriented to rule
	xts == 0 = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) -> true
+++ added new clause(s)
	count(s(s(s(0))), xts2 .. xts1 .. nil) <= s(s(0)) = true
... to conjectures
+++ active wrap
	xts3 == 0 = true => count(s(.), xts2 .. xts1 .. nil) <= s(s(0)) = true
... with sequence
	xts3 == 0 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts3 == 0 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts3 == 0 = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) = true
+++ primal grammar found for head
	{.., 0, <=, ==, count, nil, s, true}
... and wrap
	xts3 == 0 = true => count(s(.), xts2 .. xts1 .. nil) <= s(s(0)) = true
+++ Presburger system  = {
	^f136(0; xts) -> xts
	^f136($n136 + 1; xts) -> s(^f136($n136; xts))
+++ }
+++ Lemma(s)           = 
	xts3 == 0 = true => count(s(^f136($n; xts3)), xts2 .. xts1 .. nil) <= s(s(0)) = true

+++ Status of the Inference System
--- Conjectures:
	xts4 == s(xts3) = true => count(s(s(s(xts4))), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) = true
	xts3 == s(xts2) = true => count(s(s(xts3)), xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == s(xts2) = false => count(s(s(xts3)), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == xts2 = true => count(s(s(xts3)), xts1 .. nil) <= s(s(0)) = true
	count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == xts2 = false => count(s(s(xts3)), xts1 .. nil) <= s(s(s(0))) = true
	count(s(0), xts .. nil) <= s(s(s(0))) = true
	s(s(s(xts3))) == xts2 = true => count(s(s(s(xts3))), xts1 .. nil) <= s(s(0)) = true
	s(s(s(xts3))) == xts2 = false => count(s(s(s(xts3))), xts1 .. nil) <= s(s(s(0))) = true
	s(s(0)) == xts2 = true => count(s(s(0)), xts1 .. nil) <= s(s(0)) = true
	s(s(0)) == xts2 = false => count(s(s(0)), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == 0 = false => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts4 == s(xts3) = false => count(s(s(s(xts4))), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	s(0) == xts2 = true => count(s(s(0)), xts1 .. nil) <= s(0) = true
	count(s(s(0)), xts .. nil) <= s(s(0)) = true
	s(0) == xts2 = false => count(s(s(0)), xts1 .. nil) <= s(s(0)) = true
	count(s(s(s(0))), xts2 .. xts1 .. nil) <= s(s(0)) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	count(x, xs) <= len(xs) -> true
	count(x, xts .. yts) <= s(len(yts)) -> true
	0 == xts = true => count(0, xts .. nil) <= s(0) -> true
	count(x, xts2 .. xts1 .. yts) <= s(s(len(yts))) -> true
	0 == xts = true => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = true => count(s(0), xts .. nil) <= s(0) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = true => count(s(0), xts .. nil) <= s(s(0)) -> true
	s(0) == xts = true => count(s(0), xts .. nil) <= s(0) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(s(0))) -> true
	0 == xts = false => count(s(0), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	s(0) == xts = true => count(s(0), xts .. nil) <= s(s(0)) -> true
	0 == xts = false => count(s(0), xts .. nil) <= s(s(s(0))) -> true
	s(0) == xts = false => count(s(0), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	count(x, xts3 .. xts2 .. xts1 .. yts) <= s(s(s(len(yts)))) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	0 == xts = true => count(0, xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(0)) == xts = true => count(s(s(0)), xts .. nil) <= s(0) -> true
	s(0) == xts = false => count(s(0), xts .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	0 == xts = false => count(0, xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(0)) == xts = false => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(xts2)) == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(xts2)) == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> yts
	^f0($n0 + 1; yts, xts@) -> xts$n0 .. ^f0($n0; yts, xts@)
	^f1(0; yts) -> len(yts)
	^f1($n1 + 1; yts) -> s(^f1($n1; yts))
	^f136(0; xts) -> xts
	^f136($n136 + 1; xts) -> s(^f136($n136; xts))
+++ }
+++ Lemma(s)           = 
	count(x, xts$n .. ^f0($n; yts, xts@)) <= s(^f1($n; yts)) = true
	xts3 == xts2 = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(0) = true
	xts3 == xts2 = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = true => count(s(^f136($n; xts2)), xts1 .. nil) <= s(0) = true
	xts3 == s(xts2) = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(0) = true
	xts2 == 0 = false => count(s(^f136($n; xts2)), xts1 .. nil) <= s(s(0)) = true
	xts3 == s(xts2) = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true
	xts4 == xts3 = true => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts4 == xts3 = false => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts3 == 0 = true => count(s(^f136($n; xts3)), xts2 .. xts1 .. nil) <= s(s(0)) = true

+++ treating clause
	xts4 == s(xts3) = true => count(s(s(s(xts4))), xts2 .. xts1 .. nil) <= s(s(0)) = true
+++ inductive narrowing on conjecture
	xts4 == s(xts3) = true => count(s(s(s(xts4))), xts2 .. xts1 .. nil) <= s(s(0)) = true
... induction variables of
	xts4 == s(xts3) = true => count(s(s(s(xts4))), xts2 .. xts1 .. nil) <= s(s(0)) = true
... are:
	xts4:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	xts4 == s(xts3) = true => count(s(s(s(xts4))), xts2 .. xts1 .. nil) <= s(s(0)) = true
... with variable xts4
+++ creating new conjecture
	0 == s(xts3) = true => count(s(s(s(0))), xts2 .. xts1 .. nil) <= s(s(0)) = true
+++ creating new conjecture
	s(xts4) == s(xts3) = true => count(s(s(s(s(xts4)))), xts2 .. xts1 .. nil) <= s(s(0)) = true
--- clause
	0 == s(xts3) = true => count(s(s(s(0))), xts2 .. xts1 .. nil) <= s(s(0)) = true
... reduced in 1 step to
	false = true => count(s(s(s(0))), xts2 .. xts1 .. nil) <= s(s(0)) = true
--- clause
	false = true => count(s(s(s(0))), xts2 .. xts1 .. nil) <= s(s(0)) = true
... contains a ground negative condition
	false = true
... and is therefore discarded (false => t is always true)
--- clause
	s(xts4) == s(xts3) = true => count(s(s(s(s(xts4)))), xts2 .. xts1 .. nil) <= s(s(0)) = true
... reduced in 1 step to
	xts4 == xts3 = true => count(s(s(s(s(xts4)))), xts2 .. xts1 .. nil) <= s(s(0)) = true
--- clause
	xts4 == xts3 = true => count(s(s(s(s(xts4)))), xts2 .. xts1 .. nil) <= s(s(0)) = true
... subsumed by lemma
	xts4 == xts3 = true => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(0)) = true
... with substitution
	$n <- 3
+++ inductive narrowing succeeded
--- clause
	xts4 == s(xts3) = true => count(s(s(s(xts4))), xts2 .. xts1 .. nil) <= s(s(0)) = true
... oriented to rule
	xts2 == s(xts1) = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) -> true
+++ active wrap
	xts4 == s(xts3) = true => count(s(.), xts2 .. xts1 .. nil) <= s(s(0)) = true
... with sequence
	xts4 == s(xts3) = true => count(s(xts4), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts4 == s(xts3) = true => count(s(s(xts4)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts4 == s(xts3) = true => count(s(s(s(xts4))), xts2 .. xts1 .. nil) <= s(s(0)) = true
+++ primal grammar found for head
	{.., 0, <=, ==, count, nil, s, true}
... and wrap
	xts4 == s(xts3) = true => count(s(.), xts2 .. xts1 .. nil) <= s(s(0)) = true
+++ Presburger system  = {
	^f136(0; xts) -> xts
	^f136($n136 + 1; xts) -> s(^f136($n136; xts))
+++ }
+++ Lemma(s)           = 
	xts4 == s(xts3) = true => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(0)) = true

+++ Status of the Inference System
--- Conjectures:
	xts2 == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) = true
	xts3 == s(xts2) = true => count(s(s(xts3)), xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == s(xts2) = false => count(s(s(xts3)), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == xts2 = true => count(s(s(xts3)), xts1 .. nil) <= s(s(0)) = true
	count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == xts2 = false => count(s(s(xts3)), xts1 .. nil) <= s(s(s(0))) = true
	count(s(0), xts .. nil) <= s(s(s(0))) = true
	s(s(s(xts3))) == xts2 = true => count(s(s(s(xts3))), xts1 .. nil) <= s(s(0)) = true
	s(s(s(xts3))) == xts2 = false => count(s(s(s(xts3))), xts1 .. nil) <= s(s(s(0))) = true
	s(s(0)) == xts2 = true => count(s(s(0)), xts1 .. nil) <= s(s(0)) = true
	s(s(0)) == xts2 = false => count(s(s(0)), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == 0 = false => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts4 == s(xts3) = false => count(s(s(s(xts4))), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	s(0) == xts2 = true => count(s(s(0)), xts1 .. nil) <= s(0) = true
	count(s(s(0)), xts .. nil) <= s(s(0)) = true
	s(0) == xts2 = false => count(s(s(0)), xts1 .. nil) <= s(s(0)) = true
	count(s(s(s(0))), xts2 .. xts1 .. nil) <= s(s(0)) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	count(x, xs) <= len(xs) -> true
	count(x, xts .. yts) <= s(len(yts)) -> true
	0 == xts = true => count(0, xts .. nil) <= s(0) -> true
	count(x, xts2 .. xts1 .. yts) <= s(s(len(yts))) -> true
	0 == xts = true => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = true => count(s(0), xts .. nil) <= s(0) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = true => count(s(0), xts .. nil) <= s(s(0)) -> true
	s(0) == xts = true => count(s(0), xts .. nil) <= s(0) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(s(0))) -> true
	0 == xts = false => count(s(0), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	s(0) == xts = true => count(s(0), xts .. nil) <= s(s(0)) -> true
	0 == xts = false => count(s(0), xts .. nil) <= s(s(s(0))) -> true
	s(0) == xts = false => count(s(0), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	count(x, xts3 .. xts2 .. xts1 .. yts) <= s(s(s(len(yts)))) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	0 == xts = true => count(0, xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(0)) == xts = true => count(s(s(0)), xts .. nil) <= s(0) -> true
	s(0) == xts = false => count(s(0), xts .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	0 == xts = false => count(0, xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(0)) == xts = false => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(xts2)) == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(xts2)) == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> yts
	^f0($n0 + 1; yts, xts@) -> xts$n0 .. ^f0($n0; yts, xts@)
	^f1(0; yts) -> len(yts)
	^f1($n1 + 1; yts) -> s(^f1($n1; yts))
	^f136(0; xts) -> xts
	^f136($n136 + 1; xts) -> s(^f136($n136; xts))
+++ }
+++ Lemma(s)           = 
	count(x, xts$n .. ^f0($n; yts, xts@)) <= s(^f1($n; yts)) = true
	xts3 == xts2 = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(0) = true
	xts3 == xts2 = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = true => count(s(^f136($n; xts2)), xts1 .. nil) <= s(0) = true
	xts3 == s(xts2) = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(0) = true
	xts2 == 0 = false => count(s(^f136($n; xts2)), xts1 .. nil) <= s(s(0)) = true
	xts3 == s(xts2) = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true
	xts4 == xts3 = true => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts4 == xts3 = false => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts3 == 0 = true => count(s(^f136($n; xts3)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts4 == s(xts3) = true => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(0)) = true

+++ treating clause
	xts2 == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) = true
+++ inductive narrowing on conjecture
	xts2 == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) = true
... induction variables of
	xts2 == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) = true
... are:
	xts2:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	xts2 == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) = true
... with variable xts2
+++ creating new conjecture
	0 == 0 = true => count(s(s(0)), xts .. nil) <= s(s(0)) = true
+++ creating new conjecture
	s(xts2) == 0 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) = true
--- clause
	0 == 0 = true => count(s(s(0)), xts .. nil) <= s(s(0)) = true
... reduced in 1 step to
	count(s(s(0)), xts .. nil) <= s(s(0)) = true
--- clause
	s(xts2) == 0 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) = true
... reduced in 1 step to
	false = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) = true
--- clause
	false = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) = true
... contains a ground negative condition
	false = true
... and is therefore discarded (false => t is always true)
--- clause
	count(s(s(0)), xts .. nil) <= s(s(0)) = true
... subsumed by an existing conjecture
+++ inductive narrowing succeeded
--- clause
	xts2 == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) = true
... oriented to rule
	xts == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true

+++ Status of the Inference System
--- Conjectures:
	xts3 == s(xts2) = true => count(s(s(xts3)), xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == s(xts2) = false => count(s(s(xts3)), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == xts2 = true => count(s(s(xts3)), xts1 .. nil) <= s(s(0)) = true
	count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == xts2 = false => count(s(s(xts3)), xts1 .. nil) <= s(s(s(0))) = true
	count(s(0), xts .. nil) <= s(s(s(0))) = true
	s(s(s(xts3))) == xts2 = true => count(s(s(s(xts3))), xts1 .. nil) <= s(s(0)) = true
	s(s(s(xts3))) == xts2 = false => count(s(s(s(xts3))), xts1 .. nil) <= s(s(s(0))) = true
	s(s(0)) == xts2 = true => count(s(s(0)), xts1 .. nil) <= s(s(0)) = true
	s(s(0)) == xts2 = false => count(s(s(0)), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == 0 = false => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts4 == s(xts3) = false => count(s(s(s(xts4))), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	s(0) == xts2 = true => count(s(s(0)), xts1 .. nil) <= s(0) = true
	count(s(s(0)), xts .. nil) <= s(s(0)) = true
	s(0) == xts2 = false => count(s(s(0)), xts1 .. nil) <= s(s(0)) = true
	count(s(s(s(0))), xts2 .. xts1 .. nil) <= s(s(0)) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	count(x, xs) <= len(xs) -> true
	count(x, xts .. yts) <= s(len(yts)) -> true
	0 == xts = true => count(0, xts .. nil) <= s(0) -> true
	count(x, xts2 .. xts1 .. yts) <= s(s(len(yts))) -> true
	0 == xts = true => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = true => count(s(0), xts .. nil) <= s(0) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = true => count(s(0), xts .. nil) <= s(s(0)) -> true
	s(0) == xts = true => count(s(0), xts .. nil) <= s(0) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(s(0))) -> true
	0 == xts = false => count(s(0), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	s(0) == xts = true => count(s(0), xts .. nil) <= s(s(0)) -> true
	0 == xts = false => count(s(0), xts .. nil) <= s(s(s(0))) -> true
	s(0) == xts = false => count(s(0), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	count(x, xts3 .. xts2 .. xts1 .. yts) <= s(s(s(len(yts)))) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	0 == xts = true => count(0, xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(0)) == xts = true => count(s(s(0)), xts .. nil) <= s(0) -> true
	s(0) == xts = false => count(s(0), xts .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	xts == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	0 == xts = false => count(0, xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(0)) == xts = false => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(xts2)) == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(xts2)) == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> yts
	^f0($n0 + 1; yts, xts@) -> xts$n0 .. ^f0($n0; yts, xts@)
	^f1(0; yts) -> len(yts)
	^f1($n1 + 1; yts) -> s(^f1($n1; yts))
	^f136(0; xts) -> xts
	^f136($n136 + 1; xts) -> s(^f136($n136; xts))
+++ }
+++ Lemma(s)           = 
	count(x, xts$n .. ^f0($n; yts, xts@)) <= s(^f1($n; yts)) = true
	xts3 == xts2 = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(0) = true
	xts3 == xts2 = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = true => count(s(^f136($n; xts2)), xts1 .. nil) <= s(0) = true
	xts3 == s(xts2) = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(0) = true
	xts2 == 0 = false => count(s(^f136($n; xts2)), xts1 .. nil) <= s(s(0)) = true
	xts3 == s(xts2) = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true
	xts4 == xts3 = true => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts4 == xts3 = false => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts3 == 0 = true => count(s(^f136($n; xts3)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts4 == s(xts3) = true => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(0)) = true

+++ treating clause
	xts3 == s(xts2) = true => count(s(s(xts3)), xts1 .. nil) <= s(s(0)) = true
+++ inductive narrowing on conjecture
	xts3 == s(xts2) = true => count(s(s(xts3)), xts1 .. nil) <= s(s(0)) = true
... induction variables of
	xts3 == s(xts2) = true => count(s(s(xts3)), xts1 .. nil) <= s(s(0)) = true
... are:
	xts3:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	xts3 == s(xts2) = true => count(s(s(xts3)), xts1 .. nil) <= s(s(0)) = true
... with variable xts3
+++ creating new conjecture
	0 == s(xts2) = true => count(s(s(0)), xts1 .. nil) <= s(s(0)) = true
+++ creating new conjecture
	s(xts3) == s(xts2) = true => count(s(s(s(xts3))), xts1 .. nil) <= s(s(0)) = true
--- clause
	0 == s(xts2) = true => count(s(s(0)), xts1 .. nil) <= s(s(0)) = true
... reduced in 1 step to
	false = true => count(s(s(0)), xts .. nil) <= s(s(0)) = true
--- clause
	false = true => count(s(s(0)), xts .. nil) <= s(s(0)) = true
... contains a ground negative condition
	false = true
... and is therefore discarded (false => t is always true)
--- clause
	s(xts3) == s(xts2) = true => count(s(s(s(xts3))), xts1 .. nil) <= s(s(0)) = true
... reduced in 1 step to
	xts3 == xts2 = true => count(s(s(s(xts3))), xts1 .. nil) <= s(s(0)) = true
+++ inductive narrowing succeeded
--- clause
	xts3 == s(xts2) = true => count(s(s(xts3)), xts1 .. nil) <= s(s(0)) = true
... oriented to rule
	xts2 == s(xts1) = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
+++ added new clause(s)
	xts3 == xts2 = true => count(s(s(s(xts3))), xts1 .. nil) <= s(s(0)) = true
... to conjectures

+++ Status of the Inference System
--- Conjectures:
	xts2 == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == s(xts2) = false => count(s(s(xts3)), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == xts2 = true => count(s(s(xts3)), xts1 .. nil) <= s(s(0)) = true
	count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == xts2 = false => count(s(s(xts3)), xts1 .. nil) <= s(s(s(0))) = true
	count(s(0), xts .. nil) <= s(s(s(0))) = true
	s(s(s(xts3))) == xts2 = true => count(s(s(s(xts3))), xts1 .. nil) <= s(s(0)) = true
	s(s(s(xts3))) == xts2 = false => count(s(s(s(xts3))), xts1 .. nil) <= s(s(s(0))) = true
	s(s(0)) == xts2 = true => count(s(s(0)), xts1 .. nil) <= s(s(0)) = true
	s(s(0)) == xts2 = false => count(s(s(0)), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == 0 = false => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts4 == s(xts3) = false => count(s(s(s(xts4))), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	s(0) == xts2 = true => count(s(s(0)), xts1 .. nil) <= s(0) = true
	count(s(s(0)), xts .. nil) <= s(s(0)) = true
	s(0) == xts2 = false => count(s(s(0)), xts1 .. nil) <= s(s(0)) = true
	count(s(s(s(0))), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts3 == xts2 = true => count(s(s(s(xts3))), xts1 .. nil) <= s(s(0)) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	count(x, xs) <= len(xs) -> true
	count(x, xts .. yts) <= s(len(yts)) -> true
	0 == xts = true => count(0, xts .. nil) <= s(0) -> true
	count(x, xts2 .. xts1 .. yts) <= s(s(len(yts))) -> true
	0 == xts = true => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = true => count(s(0), xts .. nil) <= s(0) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = true => count(s(0), xts .. nil) <= s(s(0)) -> true
	s(0) == xts = true => count(s(0), xts .. nil) <= s(0) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(s(0))) -> true
	0 == xts = false => count(s(0), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	s(0) == xts = true => count(s(0), xts .. nil) <= s(s(0)) -> true
	0 == xts = false => count(s(0), xts .. nil) <= s(s(s(0))) -> true
	s(0) == xts = false => count(s(0), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	count(x, xts3 .. xts2 .. xts1 .. yts) <= s(s(s(len(yts)))) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	0 == xts = true => count(0, xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(0)) == xts = true => count(s(s(0)), xts .. nil) <= s(0) -> true
	s(0) == xts = false => count(s(0), xts .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	xts == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	0 == xts = false => count(0, xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(0)) == xts = false => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	xts2 == s(xts1) = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(xts2)) == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(xts2)) == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> yts
	^f0($n0 + 1; yts, xts@) -> xts$n0 .. ^f0($n0; yts, xts@)
	^f1(0; yts) -> len(yts)
	^f1($n1 + 1; yts) -> s(^f1($n1; yts))
	^f136(0; xts) -> xts
	^f136($n136 + 1; xts) -> s(^f136($n136; xts))
+++ }
+++ Lemma(s)           = 
	count(x, xts$n .. ^f0($n; yts, xts@)) <= s(^f1($n; yts)) = true
	xts3 == xts2 = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(0) = true
	xts3 == xts2 = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = true => count(s(^f136($n; xts2)), xts1 .. nil) <= s(0) = true
	xts3 == s(xts2) = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(0) = true
	xts2 == 0 = false => count(s(^f136($n; xts2)), xts1 .. nil) <= s(s(0)) = true
	xts3 == s(xts2) = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true
	xts4 == xts3 = true => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts4 == xts3 = false => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts3 == 0 = true => count(s(^f136($n; xts3)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts4 == s(xts3) = true => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(0)) = true

+++ treating clause
	xts2 == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) = true
+++ inductive narrowing on conjecture
	xts2 == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) = true
... induction variables of
	xts2 == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) = true
... are:
	xts2:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	xts2 == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) = true
... with variable xts2
+++ creating new conjecture
	0 == 0 = false => count(s(s(0)), xts .. nil) <= s(s(s(0))) = true
+++ creating new conjecture
	s(xts2) == 0 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) = true
--- clause
	0 == 0 = false => count(s(s(0)), xts .. nil) <= s(s(s(0))) = true
... reduced in 1 step to
	true = false => count(s(s(0)), xts .. nil) <= s(s(s(0))) = true
--- clause
	true = false => count(s(s(0)), xts .. nil) <= s(s(s(0))) = true
... contains a ground negative condition
	true = false
... and is therefore discarded (false => t is always true)
--- clause
	s(xts2) == 0 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) = true
... reduced in 1 step to
	count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) = true
+++ inductive narrowing succeeded
--- clause
	xts2 == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) = true
... oriented to rule
	xts == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
+++ added new clause(s)
	count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) = true
... to conjectures

+++ Status of the Inference System
--- Conjectures:
	xts3 == s(xts2) = false => count(s(s(xts3)), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == xts2 = true => count(s(s(xts3)), xts1 .. nil) <= s(s(0)) = true
	count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == xts2 = false => count(s(s(xts3)), xts1 .. nil) <= s(s(s(0))) = true
	count(s(0), xts .. nil) <= s(s(s(0))) = true
	s(s(s(xts3))) == xts2 = true => count(s(s(s(xts3))), xts1 .. nil) <= s(s(0)) = true
	s(s(s(xts3))) == xts2 = false => count(s(s(s(xts3))), xts1 .. nil) <= s(s(s(0))) = true
	s(s(0)) == xts2 = true => count(s(s(0)), xts1 .. nil) <= s(s(0)) = true
	s(s(0)) == xts2 = false => count(s(s(0)), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == 0 = false => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts4 == s(xts3) = false => count(s(s(s(xts4))), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	s(0) == xts2 = true => count(s(s(0)), xts1 .. nil) <= s(0) = true
	count(s(s(0)), xts .. nil) <= s(s(0)) = true
	s(0) == xts2 = false => count(s(s(0)), xts1 .. nil) <= s(s(0)) = true
	count(s(s(s(0))), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts3 == xts2 = true => count(s(s(s(xts3))), xts1 .. nil) <= s(s(0)) = true
	count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	count(x, xs) <= len(xs) -> true
	count(x, xts .. yts) <= s(len(yts)) -> true
	0 == xts = true => count(0, xts .. nil) <= s(0) -> true
	count(x, xts2 .. xts1 .. yts) <= s(s(len(yts))) -> true
	0 == xts = true => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = true => count(s(0), xts .. nil) <= s(0) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = true => count(s(0), xts .. nil) <= s(s(0)) -> true
	s(0) == xts = true => count(s(0), xts .. nil) <= s(0) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(s(0))) -> true
	0 == xts = false => count(s(0), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	s(0) == xts = true => count(s(0), xts .. nil) <= s(s(0)) -> true
	0 == xts = false => count(s(0), xts .. nil) <= s(s(s(0))) -> true
	s(0) == xts = false => count(s(0), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	count(x, xts3 .. xts2 .. xts1 .. yts) <= s(s(s(len(yts)))) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	0 == xts = true => count(0, xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(0)) == xts = true => count(s(s(0)), xts .. nil) <= s(0) -> true
	s(0) == xts = false => count(s(0), xts .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	xts == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	0 == xts = false => count(0, xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(0)) == xts = false => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	xts2 == s(xts1) = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(xts2)) == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(xts2)) == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> yts
	^f0($n0 + 1; yts, xts@) -> xts$n0 .. ^f0($n0; yts, xts@)
	^f1(0; yts) -> len(yts)
	^f1($n1 + 1; yts) -> s(^f1($n1; yts))
	^f136(0; xts) -> xts
	^f136($n136 + 1; xts) -> s(^f136($n136; xts))
+++ }
+++ Lemma(s)           = 
	count(x, xts$n .. ^f0($n; yts, xts@)) <= s(^f1($n; yts)) = true
	xts3 == xts2 = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(0) = true
	xts3 == xts2 = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = true => count(s(^f136($n; xts2)), xts1 .. nil) <= s(0) = true
	xts3 == s(xts2) = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(0) = true
	xts2 == 0 = false => count(s(^f136($n; xts2)), xts1 .. nil) <= s(s(0)) = true
	xts3 == s(xts2) = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true
	xts4 == xts3 = true => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts4 == xts3 = false => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts3 == 0 = true => count(s(^f136($n; xts3)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts4 == s(xts3) = true => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(0)) = true

+++ treating clause
	xts3 == s(xts2) = false => count(s(s(xts3)), xts1 .. nil) <= s(s(s(0))) = true
+++ inductive narrowing on conjecture
	xts3 == s(xts2) = false => count(s(s(xts3)), xts1 .. nil) <= s(s(s(0))) = true
... induction variables of
	xts3 == s(xts2) = false => count(s(s(xts3)), xts1 .. nil) <= s(s(s(0))) = true
... are:
	xts3:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	xts3 == s(xts2) = false => count(s(s(xts3)), xts1 .. nil) <= s(s(s(0))) = true
... with variable xts3
+++ creating new conjecture
	0 == s(xts2) = false => count(s(s(0)), xts1 .. nil) <= s(s(s(0))) = true
+++ creating new conjecture
	s(xts3) == s(xts2) = false => count(s(s(s(xts3))), xts1 .. nil) <= s(s(s(0))) = true
--- clause
	0 == s(xts2) = false => count(s(s(0)), xts1 .. nil) <= s(s(s(0))) = true
... reduced in 1 step to
	count(s(s(0)), xts .. nil) <= s(s(s(0))) = true
--- clause
	s(xts3) == s(xts2) = false => count(s(s(s(xts3))), xts1 .. nil) <= s(s(s(0))) = true
... reduced in 1 step to
	xts3 == xts2 = false => count(s(s(s(xts3))), xts1 .. nil) <= s(s(s(0))) = true
--- clause
	count(s(s(0)), xts .. nil) <= s(s(s(0))) = true
... subsumed by an existing conjecture
+++ inductive narrowing succeeded
--- clause
	xts3 == s(xts2) = false => count(s(s(xts3)), xts1 .. nil) <= s(s(s(0))) = true
... oriented to rule
	xts2 == s(xts1) = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
+++ added new clause(s)
	xts3 == xts2 = false => count(s(s(s(xts3))), xts1 .. nil) <= s(s(s(0))) = true
... to conjectures

+++ Status of the Inference System
--- Conjectures:
	xts3 == xts2 = true => count(s(s(xts3)), xts1 .. nil) <= s(s(0)) = true
	count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == xts2 = false => count(s(s(xts3)), xts1 .. nil) <= s(s(s(0))) = true
	count(s(0), xts .. nil) <= s(s(s(0))) = true
	s(s(s(xts3))) == xts2 = true => count(s(s(s(xts3))), xts1 .. nil) <= s(s(0)) = true
	s(s(s(xts3))) == xts2 = false => count(s(s(s(xts3))), xts1 .. nil) <= s(s(s(0))) = true
	s(s(0)) == xts2 = true => count(s(s(0)), xts1 .. nil) <= s(s(0)) = true
	s(s(0)) == xts2 = false => count(s(s(0)), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == 0 = false => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts4 == s(xts3) = false => count(s(s(s(xts4))), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	s(0) == xts2 = true => count(s(s(0)), xts1 .. nil) <= s(0) = true
	count(s(s(0)), xts .. nil) <= s(s(0)) = true
	s(0) == xts2 = false => count(s(s(0)), xts1 .. nil) <= s(s(0)) = true
	count(s(s(s(0))), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts3 == xts2 = true => count(s(s(s(xts3))), xts1 .. nil) <= s(s(0)) = true
	count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == xts2 = false => count(s(s(s(xts3))), xts1 .. nil) <= s(s(s(0))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	count(x, xs) <= len(xs) -> true
	count(x, xts .. yts) <= s(len(yts)) -> true
	0 == xts = true => count(0, xts .. nil) <= s(0) -> true
	count(x, xts2 .. xts1 .. yts) <= s(s(len(yts))) -> true
	0 == xts = true => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = true => count(s(0), xts .. nil) <= s(0) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = true => count(s(0), xts .. nil) <= s(s(0)) -> true
	s(0) == xts = true => count(s(0), xts .. nil) <= s(0) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(s(0))) -> true
	0 == xts = false => count(s(0), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	s(0) == xts = true => count(s(0), xts .. nil) <= s(s(0)) -> true
	0 == xts = false => count(s(0), xts .. nil) <= s(s(s(0))) -> true
	s(0) == xts = false => count(s(0), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	count(x, xts3 .. xts2 .. xts1 .. yts) <= s(s(s(len(yts)))) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	0 == xts = true => count(0, xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(0)) == xts = true => count(s(s(0)), xts .. nil) <= s(0) -> true
	s(0) == xts = false => count(s(0), xts .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	xts == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	0 == xts = false => count(0, xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(0)) == xts = false => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	xts2 == s(xts1) = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(xts2)) == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(xts2)) == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> yts
	^f0($n0 + 1; yts, xts@) -> xts$n0 .. ^f0($n0; yts, xts@)
	^f1(0; yts) -> len(yts)
	^f1($n1 + 1; yts) -> s(^f1($n1; yts))
	^f136(0; xts) -> xts
	^f136($n136 + 1; xts) -> s(^f136($n136; xts))
+++ }
+++ Lemma(s)           = 
	count(x, xts$n .. ^f0($n; yts, xts@)) <= s(^f1($n; yts)) = true
	xts3 == xts2 = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(0) = true
	xts3 == xts2 = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = true => count(s(^f136($n; xts2)), xts1 .. nil) <= s(0) = true
	xts3 == s(xts2) = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(0) = true
	xts2 == 0 = false => count(s(^f136($n; xts2)), xts1 .. nil) <= s(s(0)) = true
	xts3 == s(xts2) = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true
	xts4 == xts3 = true => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts4 == xts3 = false => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts3 == 0 = true => count(s(^f136($n; xts3)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts4 == s(xts3) = true => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(0)) = true

+++ treating clause
	xts3 == xts2 = true => count(s(s(xts3)), xts1 .. nil) <= s(s(0)) = true
+++ inductive narrowing on conjecture
	xts3 == xts2 = true => count(s(s(xts3)), xts1 .. nil) <= s(s(0)) = true
... induction variables of
	xts3 == xts2 = true => count(s(s(xts3)), xts1 .. nil) <= s(s(0)) = true
... are:
	xts2:nat
	xts3:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	xts3 == xts2 = true => count(s(s(xts3)), xts1 .. nil) <= s(s(0)) = true
... with variable xts2
+++ creating new conjecture
	xts2 == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) = true
+++ creating new conjecture
	xts3 == s(xts2) = true => count(s(s(xts3)), xts1 .. nil) <= s(s(0)) = true
+++ inductive narrowing succeeded
--- clause
	xts3 == xts2 = true => count(s(s(xts3)), xts1 .. nil) <= s(s(0)) = true
... oriented to rule
	xts2 == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
+++ added new clause(s)
	xts2 == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) = true
	xts3 == s(xts2) = true => count(s(s(xts3)), xts1 .. nil) <= s(s(0)) = true
... to conjectures

+++ Status of the Inference System
--- Conjectures:
	count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == xts2 = false => count(s(s(xts3)), xts1 .. nil) <= s(s(s(0))) = true
	count(s(0), xts .. nil) <= s(s(s(0))) = true
	s(s(s(xts3))) == xts2 = true => count(s(s(s(xts3))), xts1 .. nil) <= s(s(0)) = true
	s(s(s(xts3))) == xts2 = false => count(s(s(s(xts3))), xts1 .. nil) <= s(s(s(0))) = true
	s(s(0)) == xts2 = true => count(s(s(0)), xts1 .. nil) <= s(s(0)) = true
	s(s(0)) == xts2 = false => count(s(s(0)), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == 0 = false => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts4 == s(xts3) = false => count(s(s(s(xts4))), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	s(0) == xts2 = true => count(s(s(0)), xts1 .. nil) <= s(0) = true
	count(s(s(0)), xts .. nil) <= s(s(0)) = true
	s(0) == xts2 = false => count(s(s(0)), xts1 .. nil) <= s(s(0)) = true
	count(s(s(s(0))), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts3 == xts2 = true => count(s(s(s(xts3))), xts1 .. nil) <= s(s(0)) = true
	count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == xts2 = false => count(s(s(s(xts3))), xts1 .. nil) <= s(s(s(0))) = true
	xts2 == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) = true
	xts3 == s(xts2) = true => count(s(s(xts3)), xts1 .. nil) <= s(s(0)) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	count(x, xs) <= len(xs) -> true
	count(x, xts .. yts) <= s(len(yts)) -> true
	0 == xts = true => count(0, xts .. nil) <= s(0) -> true
	count(x, xts2 .. xts1 .. yts) <= s(s(len(yts))) -> true
	0 == xts = true => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = true => count(s(0), xts .. nil) <= s(0) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = true => count(s(0), xts .. nil) <= s(s(0)) -> true
	s(0) == xts = true => count(s(0), xts .. nil) <= s(0) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(s(0))) -> true
	0 == xts = false => count(s(0), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	s(0) == xts = true => count(s(0), xts .. nil) <= s(s(0)) -> true
	0 == xts = false => count(s(0), xts .. nil) <= s(s(s(0))) -> true
	s(0) == xts = false => count(s(0), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	count(x, xts3 .. xts2 .. xts1 .. yts) <= s(s(s(len(yts)))) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	0 == xts = true => count(0, xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(0)) == xts = true => count(s(s(0)), xts .. nil) <= s(0) -> true
	s(0) == xts = false => count(s(0), xts .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	xts == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	0 == xts = false => count(0, xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(0)) == xts = false => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	xts2 == s(xts1) = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(xts2)) == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(xts2)) == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> yts
	^f0($n0 + 1; yts, xts@) -> xts$n0 .. ^f0($n0; yts, xts@)
	^f1(0; yts) -> len(yts)
	^f1($n1 + 1; yts) -> s(^f1($n1; yts))
	^f136(0; xts) -> xts
	^f136($n136 + 1; xts) -> s(^f136($n136; xts))
+++ }
+++ Lemma(s)           = 
	count(x, xts$n .. ^f0($n; yts, xts@)) <= s(^f1($n; yts)) = true
	xts3 == xts2 = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(0) = true
	xts3 == xts2 = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = true => count(s(^f136($n; xts2)), xts1 .. nil) <= s(0) = true
	xts3 == s(xts2) = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(0) = true
	xts2 == 0 = false => count(s(^f136($n; xts2)), xts1 .. nil) <= s(s(0)) = true
	xts3 == s(xts2) = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true
	xts4 == xts3 = true => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts4 == xts3 = false => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts3 == 0 = true => count(s(^f136($n; xts3)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts4 == s(xts3) = true => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(0)) = true

+++ treating clause
	count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) = true
--- no new clauses created
+++ attempting case rewriting
--- case rewriting generated new conjectures
	s(s(xts2)) == xts1 = true => s(0) <= s(s(s(0))) = true
	s(s(xts2)) == xts1 = false => 0 <= s(s(s(0))) = true
+++ added new clause(s)
	s(s(xts2)) == xts1 = true => s(0) <= s(s(s(0))) = true
	s(s(xts2)) == xts1 = false => 0 <= s(s(s(0))) = true
... to conjectures
--- clause
	s(s(xts2)) == xts1 = true => s(0) <= s(s(s(0))) = true
... reduced to tautology
	s(s(xts2)) == xts1 = true => true = true
--- clause
	s(s(xts2)) == xts1 = false => 0 <= s(s(s(0))) = true
... reduced to tautology
	s(s(xts2)) == xts1 = false => true = true

+++ Status of the Inference System
--- Conjectures:
	xts3 == xts2 = false => count(s(s(xts3)), xts1 .. nil) <= s(s(s(0))) = true
	count(s(0), xts .. nil) <= s(s(s(0))) = true
	s(s(s(xts3))) == xts2 = true => count(s(s(s(xts3))), xts1 .. nil) <= s(s(0)) = true
	s(s(s(xts3))) == xts2 = false => count(s(s(s(xts3))), xts1 .. nil) <= s(s(s(0))) = true
	s(s(0)) == xts2 = true => count(s(s(0)), xts1 .. nil) <= s(s(0)) = true
	s(s(0)) == xts2 = false => count(s(s(0)), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == 0 = false => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts4 == s(xts3) = false => count(s(s(s(xts4))), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	s(0) == xts2 = true => count(s(s(0)), xts1 .. nil) <= s(0) = true
	count(s(s(0)), xts .. nil) <= s(s(0)) = true
	s(0) == xts2 = false => count(s(s(0)), xts1 .. nil) <= s(s(0)) = true
	count(s(s(s(0))), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts3 == xts2 = true => count(s(s(s(xts3))), xts1 .. nil) <= s(s(0)) = true
	count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == xts2 = false => count(s(s(s(xts3))), xts1 .. nil) <= s(s(s(0))) = true
	xts2 == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) = true
	xts3 == s(xts2) = true => count(s(s(xts3)), xts1 .. nil) <= s(s(0)) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	count(x, xs) <= len(xs) -> true
	count(x, xts .. yts) <= s(len(yts)) -> true
	0 == xts = true => count(0, xts .. nil) <= s(0) -> true
	count(x, xts2 .. xts1 .. yts) <= s(s(len(yts))) -> true
	0 == xts = true => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = true => count(s(0), xts .. nil) <= s(0) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = true => count(s(0), xts .. nil) <= s(s(0)) -> true
	s(0) == xts = true => count(s(0), xts .. nil) <= s(0) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(s(0))) -> true
	0 == xts = false => count(s(0), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	s(0) == xts = true => count(s(0), xts .. nil) <= s(s(0)) -> true
	0 == xts = false => count(s(0), xts .. nil) <= s(s(s(0))) -> true
	s(0) == xts = false => count(s(0), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	count(x, xts3 .. xts2 .. xts1 .. yts) <= s(s(s(len(yts)))) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	0 == xts = true => count(0, xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(0)) == xts = true => count(s(s(0)), xts .. nil) <= s(0) -> true
	s(0) == xts = false => count(s(0), xts .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	xts == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	0 == xts = false => count(0, xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(0)) == xts = false => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	xts2 == s(xts1) = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(xts2)) == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(xts2)) == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> yts
	^f0($n0 + 1; yts, xts@) -> xts$n0 .. ^f0($n0; yts, xts@)
	^f1(0; yts) -> len(yts)
	^f1($n1 + 1; yts) -> s(^f1($n1; yts))
	^f136(0; xts) -> xts
	^f136($n136 + 1; xts) -> s(^f136($n136; xts))
+++ }
+++ Lemma(s)           = 
	count(x, xts$n .. ^f0($n; yts, xts@)) <= s(^f1($n; yts)) = true
	xts3 == xts2 = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(0) = true
	xts3 == xts2 = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = true => count(s(^f136($n; xts2)), xts1 .. nil) <= s(0) = true
	xts3 == s(xts2) = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(0) = true
	xts2 == 0 = false => count(s(^f136($n; xts2)), xts1 .. nil) <= s(s(0)) = true
	xts3 == s(xts2) = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true
	xts4 == xts3 = true => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts4 == xts3 = false => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts3 == 0 = true => count(s(^f136($n; xts3)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts4 == s(xts3) = true => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(0)) = true

+++ treating clause
	xts3 == xts2 = false => count(s(s(xts3)), xts1 .. nil) <= s(s(s(0))) = true
+++ inductive narrowing on conjecture
	xts3 == xts2 = false => count(s(s(xts3)), xts1 .. nil) <= s(s(s(0))) = true
... induction variables of
	xts3 == xts2 = false => count(s(s(xts3)), xts1 .. nil) <= s(s(s(0))) = true
... are:
	xts2:nat
	xts3:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	xts3 == xts2 = false => count(s(s(xts3)), xts1 .. nil) <= s(s(s(0))) = true
... with variable xts2
+++ creating new conjecture
	xts2 == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) = true
+++ creating new conjecture
	xts3 == s(xts2) = false => count(s(s(xts3)), xts1 .. nil) <= s(s(s(0))) = true
+++ inductive narrowing succeeded
--- clause
	xts3 == xts2 = false => count(s(s(xts3)), xts1 .. nil) <= s(s(s(0))) = true
... oriented to rule
	xts2 == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
+++ added new clause(s)
	xts2 == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == s(xts2) = false => count(s(s(xts3)), xts1 .. nil) <= s(s(s(0))) = true
... to conjectures

+++ Status of the Inference System
--- Conjectures:
	count(s(0), xts .. nil) <= s(s(s(0))) = true
	s(s(s(xts3))) == xts2 = true => count(s(s(s(xts3))), xts1 .. nil) <= s(s(0)) = true
	s(s(s(xts3))) == xts2 = false => count(s(s(s(xts3))), xts1 .. nil) <= s(s(s(0))) = true
	s(s(0)) == xts2 = true => count(s(s(0)), xts1 .. nil) <= s(s(0)) = true
	s(s(0)) == xts2 = false => count(s(s(0)), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == 0 = false => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts4 == s(xts3) = false => count(s(s(s(xts4))), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	s(0) == xts2 = true => count(s(s(0)), xts1 .. nil) <= s(0) = true
	count(s(s(0)), xts .. nil) <= s(s(0)) = true
	s(0) == xts2 = false => count(s(s(0)), xts1 .. nil) <= s(s(0)) = true
	count(s(s(s(0))), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts3 == xts2 = true => count(s(s(s(xts3))), xts1 .. nil) <= s(s(0)) = true
	count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == xts2 = false => count(s(s(s(xts3))), xts1 .. nil) <= s(s(s(0))) = true
	xts2 == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) = true
	xts3 == s(xts2) = true => count(s(s(xts3)), xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == s(xts2) = false => count(s(s(xts3)), xts1 .. nil) <= s(s(s(0))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	count(x, xs) <= len(xs) -> true
	count(x, xts .. yts) <= s(len(yts)) -> true
	0 == xts = true => count(0, xts .. nil) <= s(0) -> true
	count(x, xts2 .. xts1 .. yts) <= s(s(len(yts))) -> true
	0 == xts = true => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = true => count(s(0), xts .. nil) <= s(0) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = true => count(s(0), xts .. nil) <= s(s(0)) -> true
	s(0) == xts = true => count(s(0), xts .. nil) <= s(0) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(s(0))) -> true
	0 == xts = false => count(s(0), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	s(0) == xts = true => count(s(0), xts .. nil) <= s(s(0)) -> true
	0 == xts = false => count(s(0), xts .. nil) <= s(s(s(0))) -> true
	s(0) == xts = false => count(s(0), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	count(x, xts3 .. xts2 .. xts1 .. yts) <= s(s(s(len(yts)))) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	0 == xts = true => count(0, xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(0)) == xts = true => count(s(s(0)), xts .. nil) <= s(0) -> true
	s(0) == xts = false => count(s(0), xts .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	xts == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	0 == xts = false => count(0, xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(0)) == xts = false => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	xts2 == s(xts1) = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(xts2)) == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(xts2)) == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> yts
	^f0($n0 + 1; yts, xts@) -> xts$n0 .. ^f0($n0; yts, xts@)
	^f1(0; yts) -> len(yts)
	^f1($n1 + 1; yts) -> s(^f1($n1; yts))
	^f136(0; xts) -> xts
	^f136($n136 + 1; xts) -> s(^f136($n136; xts))
+++ }
+++ Lemma(s)           = 
	count(x, xts$n .. ^f0($n; yts, xts@)) <= s(^f1($n; yts)) = true
	xts3 == xts2 = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(0) = true
	xts3 == xts2 = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = true => count(s(^f136($n; xts2)), xts1 .. nil) <= s(0) = true
	xts3 == s(xts2) = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(0) = true
	xts2 == 0 = false => count(s(^f136($n; xts2)), xts1 .. nil) <= s(s(0)) = true
	xts3 == s(xts2) = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true
	xts4 == xts3 = true => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts4 == xts3 = false => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts3 == 0 = true => count(s(^f136($n; xts3)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts4 == s(xts3) = true => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(0)) = true

+++ treating clause
	count(s(0), xts .. nil) <= s(s(s(0))) = true
--- no new clauses created
+++ attempting case rewriting
--- case rewriting generated new conjectures
	s(0) == xts = true => s(0) <= s(s(s(0))) = true
	s(0) == xts = false => 0 <= s(s(s(0))) = true
+++ added new clause(s)
	s(0) == xts = true => s(0) <= s(s(s(0))) = true
	s(0) == xts = false => 0 <= s(s(s(0))) = true
... to conjectures
--- clause
	s(0) == xts = true => s(0) <= s(s(s(0))) = true
... reduced to tautology
	s(0) == xts = true => true = true
--- clause
	s(0) == xts = false => 0 <= s(s(s(0))) = true
... reduced to tautology
	s(0) == xts = false => true = true

+++ Status of the Inference System
--- Conjectures:
	s(s(s(xts3))) == xts2 = true => count(s(s(s(xts3))), xts1 .. nil) <= s(s(0)) = true
	s(s(s(xts3))) == xts2 = false => count(s(s(s(xts3))), xts1 .. nil) <= s(s(s(0))) = true
	s(s(0)) == xts2 = true => count(s(s(0)), xts1 .. nil) <= s(s(0)) = true
	s(s(0)) == xts2 = false => count(s(s(0)), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == 0 = false => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts4 == s(xts3) = false => count(s(s(s(xts4))), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	s(0) == xts2 = true => count(s(s(0)), xts1 .. nil) <= s(0) = true
	count(s(s(0)), xts .. nil) <= s(s(0)) = true
	s(0) == xts2 = false => count(s(s(0)), xts1 .. nil) <= s(s(0)) = true
	count(s(s(s(0))), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts3 == xts2 = true => count(s(s(s(xts3))), xts1 .. nil) <= s(s(0)) = true
	count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == xts2 = false => count(s(s(s(xts3))), xts1 .. nil) <= s(s(s(0))) = true
	xts2 == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) = true
	xts3 == s(xts2) = true => count(s(s(xts3)), xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == s(xts2) = false => count(s(s(xts3)), xts1 .. nil) <= s(s(s(0))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	count(x, xs) <= len(xs) -> true
	count(x, xts .. yts) <= s(len(yts)) -> true
	0 == xts = true => count(0, xts .. nil) <= s(0) -> true
	count(x, xts2 .. xts1 .. yts) <= s(s(len(yts))) -> true
	0 == xts = true => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = true => count(s(0), xts .. nil) <= s(0) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = true => count(s(0), xts .. nil) <= s(s(0)) -> true
	s(0) == xts = true => count(s(0), xts .. nil) <= s(0) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(s(0))) -> true
	0 == xts = false => count(s(0), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	s(0) == xts = true => count(s(0), xts .. nil) <= s(s(0)) -> true
	0 == xts = false => count(s(0), xts .. nil) <= s(s(s(0))) -> true
	s(0) == xts = false => count(s(0), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	count(x, xts3 .. xts2 .. xts1 .. yts) <= s(s(s(len(yts)))) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	0 == xts = true => count(0, xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(0)) == xts = true => count(s(s(0)), xts .. nil) <= s(0) -> true
	s(0) == xts = false => count(s(0), xts .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	xts == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	0 == xts = false => count(0, xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(0)) == xts = false => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	xts2 == s(xts1) = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(xts2)) == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(xts2)) == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> yts
	^f0($n0 + 1; yts, xts@) -> xts$n0 .. ^f0($n0; yts, xts@)
	^f1(0; yts) -> len(yts)
	^f1($n1 + 1; yts) -> s(^f1($n1; yts))
	^f136(0; xts) -> xts
	^f136($n136 + 1; xts) -> s(^f136($n136; xts))
+++ }
+++ Lemma(s)           = 
	count(x, xts$n .. ^f0($n; yts, xts@)) <= s(^f1($n; yts)) = true
	xts3 == xts2 = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(0) = true
	xts3 == xts2 = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = true => count(s(^f136($n; xts2)), xts1 .. nil) <= s(0) = true
	xts3 == s(xts2) = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(0) = true
	xts2 == 0 = false => count(s(^f136($n; xts2)), xts1 .. nil) <= s(s(0)) = true
	xts3 == s(xts2) = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true
	xts4 == xts3 = true => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts4 == xts3 = false => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts3 == 0 = true => count(s(^f136($n; xts3)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts4 == s(xts3) = true => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(0)) = true

+++ treating clause
	s(s(s(xts3))) == xts2 = true => count(s(s(s(xts3))), xts1 .. nil) <= s(s(0)) = true
+++ inductive narrowing on conjecture
	s(s(s(xts3))) == xts2 = true => count(s(s(s(xts3))), xts1 .. nil) <= s(s(0)) = true
... induction variables of
	s(s(s(xts3))) == xts2 = true => count(s(s(s(xts3))), xts1 .. nil) <= s(s(0)) = true
... are:
	xts2:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	s(s(s(xts3))) == xts2 = true => count(s(s(s(xts3))), xts1 .. nil) <= s(s(0)) = true
... with variable xts2
+++ creating new conjecture
	s(s(s(xts2))) == 0 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) = true
+++ creating new conjecture
	s(s(s(xts3))) == s(xts2) = true => count(s(s(s(xts3))), xts1 .. nil) <= s(s(0)) = true
--- clause
	s(s(s(xts2))) == 0 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) = true
... reduced in 1 step to
	false = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) = true
--- clause
	false = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) = true
... contains a ground negative condition
	false = true
... and is therefore discarded (false => t is always true)
--- clause
	s(s(s(xts3))) == s(xts2) = true => count(s(s(s(xts3))), xts1 .. nil) <= s(s(0)) = true
... reduced in 1 step to
	s(s(xts3)) == xts2 = true => count(s(s(s(xts3))), xts1 .. nil) <= s(s(0)) = true
+++ inductive narrowing succeeded
--- clause
	s(s(s(xts3))) == xts2 = true => count(s(s(s(xts3))), xts1 .. nil) <= s(s(0)) = true
... oriented to rule
	s(s(s(xts2))) == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
+++ added new clause(s)
	s(s(xts3)) == xts2 = true => count(s(s(s(xts3))), xts1 .. nil) <= s(s(0)) = true
... to conjectures

+++ Status of the Inference System
--- Conjectures:
	s(s(s(xts3))) == xts2 = false => count(s(s(s(xts3))), xts1 .. nil) <= s(s(s(0))) = true
	s(s(0)) == xts2 = true => count(s(s(0)), xts1 .. nil) <= s(s(0)) = true
	s(s(0)) == xts2 = false => count(s(s(0)), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == 0 = false => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts4 == s(xts3) = false => count(s(s(s(xts4))), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	s(0) == xts2 = true => count(s(s(0)), xts1 .. nil) <= s(0) = true
	count(s(s(0)), xts .. nil) <= s(s(0)) = true
	s(0) == xts2 = false => count(s(s(0)), xts1 .. nil) <= s(s(0)) = true
	count(s(s(s(0))), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts3 == xts2 = true => count(s(s(s(xts3))), xts1 .. nil) <= s(s(0)) = true
	count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == xts2 = false => count(s(s(s(xts3))), xts1 .. nil) <= s(s(s(0))) = true
	xts2 == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) = true
	xts3 == s(xts2) = true => count(s(s(xts3)), xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == s(xts2) = false => count(s(s(xts3)), xts1 .. nil) <= s(s(s(0))) = true
	s(s(xts3)) == xts2 = true => count(s(s(s(xts3))), xts1 .. nil) <= s(s(0)) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	count(x, xs) <= len(xs) -> true
	count(x, xts .. yts) <= s(len(yts)) -> true
	0 == xts = true => count(0, xts .. nil) <= s(0) -> true
	count(x, xts2 .. xts1 .. yts) <= s(s(len(yts))) -> true
	0 == xts = true => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = true => count(s(0), xts .. nil) <= s(0) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = true => count(s(0), xts .. nil) <= s(s(0)) -> true
	s(0) == xts = true => count(s(0), xts .. nil) <= s(0) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(s(0))) -> true
	0 == xts = false => count(s(0), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	s(0) == xts = true => count(s(0), xts .. nil) <= s(s(0)) -> true
	0 == xts = false => count(s(0), xts .. nil) <= s(s(s(0))) -> true
	s(0) == xts = false => count(s(0), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	count(x, xts3 .. xts2 .. xts1 .. yts) <= s(s(s(len(yts)))) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	0 == xts = true => count(0, xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(0)) == xts = true => count(s(s(0)), xts .. nil) <= s(0) -> true
	s(0) == xts = false => count(s(0), xts .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	xts == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	0 == xts = false => count(0, xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(0)) == xts = false => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	xts2 == s(xts1) = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(xts2)) == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(xts2)) == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(s(xts2))) == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> yts
	^f0($n0 + 1; yts, xts@) -> xts$n0 .. ^f0($n0; yts, xts@)
	^f1(0; yts) -> len(yts)
	^f1($n1 + 1; yts) -> s(^f1($n1; yts))
	^f136(0; xts) -> xts
	^f136($n136 + 1; xts) -> s(^f136($n136; xts))
+++ }
+++ Lemma(s)           = 
	count(x, xts$n .. ^f0($n; yts, xts@)) <= s(^f1($n; yts)) = true
	xts3 == xts2 = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(0) = true
	xts3 == xts2 = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = true => count(s(^f136($n; xts2)), xts1 .. nil) <= s(0) = true
	xts3 == s(xts2) = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(0) = true
	xts2 == 0 = false => count(s(^f136($n; xts2)), xts1 .. nil) <= s(s(0)) = true
	xts3 == s(xts2) = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true
	xts4 == xts3 = true => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts4 == xts3 = false => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts3 == 0 = true => count(s(^f136($n; xts3)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts4 == s(xts3) = true => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(0)) = true

+++ treating clause
	s(s(s(xts3))) == xts2 = false => count(s(s(s(xts3))), xts1 .. nil) <= s(s(s(0))) = true
+++ inductive narrowing on conjecture
	s(s(s(xts3))) == xts2 = false => count(s(s(s(xts3))), xts1 .. nil) <= s(s(s(0))) = true
... induction variables of
	s(s(s(xts3))) == xts2 = false => count(s(s(s(xts3))), xts1 .. nil) <= s(s(s(0))) = true
... are:
	xts2:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	s(s(s(xts3))) == xts2 = false => count(s(s(s(xts3))), xts1 .. nil) <= s(s(s(0))) = true
... with variable xts2
+++ creating new conjecture
	s(s(s(xts2))) == 0 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) = true
+++ creating new conjecture
	s(s(s(xts3))) == s(xts2) = false => count(s(s(s(xts3))), xts1 .. nil) <= s(s(s(0))) = true
--- clause
	s(s(s(xts2))) == 0 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) = true
... reduced in 1 step to
	count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) = true
--- clause
	s(s(s(xts3))) == s(xts2) = false => count(s(s(s(xts3))), xts1 .. nil) <= s(s(s(0))) = true
... reduced in 1 step to
	s(s(xts3)) == xts2 = false => count(s(s(s(xts3))), xts1 .. nil) <= s(s(s(0))) = true
--- clause
	count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) = true
... subsumed by an existing conjecture
+++ inductive narrowing succeeded
--- clause
	s(s(s(xts3))) == xts2 = false => count(s(s(s(xts3))), xts1 .. nil) <= s(s(s(0))) = true
... oriented to rule
	s(s(s(xts2))) == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
+++ added new clause(s)
	s(s(xts3)) == xts2 = false => count(s(s(s(xts3))), xts1 .. nil) <= s(s(s(0))) = true
... to conjectures

+++ Status of the Inference System
--- Conjectures:
	s(s(0)) == xts2 = true => count(s(s(0)), xts1 .. nil) <= s(s(0)) = true
	s(s(0)) == xts2 = false => count(s(s(0)), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == 0 = false => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts4 == s(xts3) = false => count(s(s(s(xts4))), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	s(0) == xts2 = true => count(s(s(0)), xts1 .. nil) <= s(0) = true
	count(s(s(0)), xts .. nil) <= s(s(0)) = true
	s(0) == xts2 = false => count(s(s(0)), xts1 .. nil) <= s(s(0)) = true
	count(s(s(s(0))), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts3 == xts2 = true => count(s(s(s(xts3))), xts1 .. nil) <= s(s(0)) = true
	count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == xts2 = false => count(s(s(s(xts3))), xts1 .. nil) <= s(s(s(0))) = true
	xts2 == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) = true
	xts3 == s(xts2) = true => count(s(s(xts3)), xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == s(xts2) = false => count(s(s(xts3)), xts1 .. nil) <= s(s(s(0))) = true
	s(s(xts3)) == xts2 = true => count(s(s(s(xts3))), xts1 .. nil) <= s(s(0)) = true
	s(s(xts3)) == xts2 = false => count(s(s(s(xts3))), xts1 .. nil) <= s(s(s(0))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	count(x, xs) <= len(xs) -> true
	count(x, xts .. yts) <= s(len(yts)) -> true
	0 == xts = true => count(0, xts .. nil) <= s(0) -> true
	count(x, xts2 .. xts1 .. yts) <= s(s(len(yts))) -> true
	0 == xts = true => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = true => count(s(0), xts .. nil) <= s(0) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = true => count(s(0), xts .. nil) <= s(s(0)) -> true
	s(0) == xts = true => count(s(0), xts .. nil) <= s(0) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(s(0))) -> true
	0 == xts = false => count(s(0), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	s(0) == xts = true => count(s(0), xts .. nil) <= s(s(0)) -> true
	0 == xts = false => count(s(0), xts .. nil) <= s(s(s(0))) -> true
	s(0) == xts = false => count(s(0), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	count(x, xts3 .. xts2 .. xts1 .. yts) <= s(s(s(len(yts)))) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	0 == xts = true => count(0, xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(0)) == xts = true => count(s(s(0)), xts .. nil) <= s(0) -> true
	s(0) == xts = false => count(s(0), xts .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	xts == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	0 == xts = false => count(0, xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(0)) == xts = false => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	xts2 == s(xts1) = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(xts2)) == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(xts2)) == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(s(xts2))) == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(s(xts2))) == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> yts
	^f0($n0 + 1; yts, xts@) -> xts$n0 .. ^f0($n0; yts, xts@)
	^f1(0; yts) -> len(yts)
	^f1($n1 + 1; yts) -> s(^f1($n1; yts))
	^f136(0; xts) -> xts
	^f136($n136 + 1; xts) -> s(^f136($n136; xts))
+++ }
+++ Lemma(s)           = 
	count(x, xts$n .. ^f0($n; yts, xts@)) <= s(^f1($n; yts)) = true
	xts3 == xts2 = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(0) = true
	xts3 == xts2 = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = true => count(s(^f136($n; xts2)), xts1 .. nil) <= s(0) = true
	xts3 == s(xts2) = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(0) = true
	xts2 == 0 = false => count(s(^f136($n; xts2)), xts1 .. nil) <= s(s(0)) = true
	xts3 == s(xts2) = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true
	xts4 == xts3 = true => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts4 == xts3 = false => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts3 == 0 = true => count(s(^f136($n; xts3)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts4 == s(xts3) = true => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(0)) = true

+++ treating clause
	s(s(0)) == xts2 = true => count(s(s(0)), xts1 .. nil) <= s(s(0)) = true
+++ inductive narrowing on conjecture
	s(s(0)) == xts2 = true => count(s(s(0)), xts1 .. nil) <= s(s(0)) = true
... induction variables of
	s(s(0)) == xts2 = true => count(s(s(0)), xts1 .. nil) <= s(s(0)) = true
... are:
	xts2:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	s(s(0)) == xts2 = true => count(s(s(0)), xts1 .. nil) <= s(s(0)) = true
... with variable xts2
+++ creating new conjecture
	s(s(0)) == 0 = true => count(s(s(0)), xts .. nil) <= s(s(0)) = true
+++ creating new conjecture
	s(s(0)) == s(xts2) = true => count(s(s(0)), xts1 .. nil) <= s(s(0)) = true
--- clause
	s(s(0)) == 0 = true => count(s(s(0)), xts .. nil) <= s(s(0)) = true
... reduced in 1 step to
	false = true => count(s(s(0)), xts .. nil) <= s(s(0)) = true
--- clause
	false = true => count(s(s(0)), xts .. nil) <= s(s(0)) = true
... contains a ground negative condition
	false = true
... and is therefore discarded (false => t is always true)
--- clause
	s(s(0)) == s(xts2) = true => count(s(s(0)), xts1 .. nil) <= s(s(0)) = true
... reduced in 1 step to
	s(0) == xts2 = true => count(s(s(0)), xts1 .. nil) <= s(s(0)) = true
+++ inductive narrowing succeeded
--- clause
	s(s(0)) == xts2 = true => count(s(s(0)), xts1 .. nil) <= s(s(0)) = true
... oriented to rule
	s(s(0)) == xts = true => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
+++ added new clause(s)
	s(0) == xts2 = true => count(s(s(0)), xts1 .. nil) <= s(s(0)) = true
... to conjectures

+++ Status of the Inference System
--- Conjectures:
	s(s(0)) == xts2 = false => count(s(s(0)), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == 0 = false => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts4 == s(xts3) = false => count(s(s(s(xts4))), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	s(0) == xts2 = true => count(s(s(0)), xts1 .. nil) <= s(0) = true
	count(s(s(0)), xts .. nil) <= s(s(0)) = true
	s(0) == xts2 = false => count(s(s(0)), xts1 .. nil) <= s(s(0)) = true
	count(s(s(s(0))), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts3 == xts2 = true => count(s(s(s(xts3))), xts1 .. nil) <= s(s(0)) = true
	count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == xts2 = false => count(s(s(s(xts3))), xts1 .. nil) <= s(s(s(0))) = true
	xts2 == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) = true
	xts3 == s(xts2) = true => count(s(s(xts3)), xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == s(xts2) = false => count(s(s(xts3)), xts1 .. nil) <= s(s(s(0))) = true
	s(s(xts3)) == xts2 = true => count(s(s(s(xts3))), xts1 .. nil) <= s(s(0)) = true
	s(s(xts3)) == xts2 = false => count(s(s(s(xts3))), xts1 .. nil) <= s(s(s(0))) = true
	s(0) == xts2 = true => count(s(s(0)), xts1 .. nil) <= s(s(0)) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	count(x, xs) <= len(xs) -> true
	count(x, xts .. yts) <= s(len(yts)) -> true
	0 == xts = true => count(0, xts .. nil) <= s(0) -> true
	count(x, xts2 .. xts1 .. yts) <= s(s(len(yts))) -> true
	0 == xts = true => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = true => count(s(0), xts .. nil) <= s(0) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = true => count(s(0), xts .. nil) <= s(s(0)) -> true
	s(0) == xts = true => count(s(0), xts .. nil) <= s(0) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(s(0))) -> true
	0 == xts = false => count(s(0), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	s(0) == xts = true => count(s(0), xts .. nil) <= s(s(0)) -> true
	0 == xts = false => count(s(0), xts .. nil) <= s(s(s(0))) -> true
	s(0) == xts = false => count(s(0), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	count(x, xts3 .. xts2 .. xts1 .. yts) <= s(s(s(len(yts)))) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	0 == xts = true => count(0, xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(0)) == xts = true => count(s(s(0)), xts .. nil) <= s(0) -> true
	s(0) == xts = false => count(s(0), xts .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	xts == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	s(s(0)) == xts = true => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	0 == xts = false => count(0, xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(0)) == xts = false => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	xts2 == s(xts1) = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(xts2)) == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(xts2)) == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(s(xts2))) == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(s(xts2))) == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> yts
	^f0($n0 + 1; yts, xts@) -> xts$n0 .. ^f0($n0; yts, xts@)
	^f1(0; yts) -> len(yts)
	^f1($n1 + 1; yts) -> s(^f1($n1; yts))
	^f136(0; xts) -> xts
	^f136($n136 + 1; xts) -> s(^f136($n136; xts))
+++ }
+++ Lemma(s)           = 
	count(x, xts$n .. ^f0($n; yts, xts@)) <= s(^f1($n; yts)) = true
	xts3 == xts2 = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(0) = true
	xts3 == xts2 = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = true => count(s(^f136($n; xts2)), xts1 .. nil) <= s(0) = true
	xts3 == s(xts2) = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(0) = true
	xts2 == 0 = false => count(s(^f136($n; xts2)), xts1 .. nil) <= s(s(0)) = true
	xts3 == s(xts2) = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true
	xts4 == xts3 = true => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts4 == xts3 = false => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts3 == 0 = true => count(s(^f136($n; xts3)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts4 == s(xts3) = true => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(0)) = true

+++ treating clause
	s(s(0)) == xts2 = false => count(s(s(0)), xts1 .. nil) <= s(s(s(0))) = true
+++ inductive narrowing on conjecture
	s(s(0)) == xts2 = false => count(s(s(0)), xts1 .. nil) <= s(s(s(0))) = true
... induction variables of
	s(s(0)) == xts2 = false => count(s(s(0)), xts1 .. nil) <= s(s(s(0))) = true
... are:
	xts2:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	s(s(0)) == xts2 = false => count(s(s(0)), xts1 .. nil) <= s(s(s(0))) = true
... with variable xts2
+++ creating new conjecture
	s(s(0)) == 0 = false => count(s(s(0)), xts .. nil) <= s(s(s(0))) = true
+++ creating new conjecture
	s(s(0)) == s(xts2) = false => count(s(s(0)), xts1 .. nil) <= s(s(s(0))) = true
--- clause
	s(s(0)) == 0 = false => count(s(s(0)), xts .. nil) <= s(s(s(0))) = true
... reduced in 1 step to
	count(s(s(0)), xts .. nil) <= s(s(s(0))) = true
--- clause
	s(s(0)) == s(xts2) = false => count(s(s(0)), xts1 .. nil) <= s(s(s(0))) = true
... reduced in 1 step to
	s(0) == xts2 = false => count(s(s(0)), xts1 .. nil) <= s(s(s(0))) = true
+++ inductive narrowing succeeded
--- clause
	s(s(0)) == xts2 = false => count(s(s(0)), xts1 .. nil) <= s(s(s(0))) = true
... oriented to rule
	s(s(0)) == xts = false => count(s(s(0)), xts .. nil) <= s(s(s(0))) -> true
+++ added new clause(s)
	count(s(s(0)), xts .. nil) <= s(s(s(0))) = true
	s(0) == xts2 = false => count(s(s(0)), xts1 .. nil) <= s(s(s(0))) = true
... to conjectures

+++ Status of the Inference System
--- Conjectures:
	xts3 == 0 = false => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts4 == s(xts3) = false => count(s(s(s(xts4))), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	s(0) == xts2 = true => count(s(s(0)), xts1 .. nil) <= s(0) = true
	count(s(s(0)), xts .. nil) <= s(s(0)) = true
	s(0) == xts2 = false => count(s(s(0)), xts1 .. nil) <= s(s(0)) = true
	count(s(s(s(0))), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts3 == xts2 = true => count(s(s(s(xts3))), xts1 .. nil) <= s(s(0)) = true
	count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == xts2 = false => count(s(s(s(xts3))), xts1 .. nil) <= s(s(s(0))) = true
	xts2 == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) = true
	xts3 == s(xts2) = true => count(s(s(xts3)), xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == s(xts2) = false => count(s(s(xts3)), xts1 .. nil) <= s(s(s(0))) = true
	s(s(xts3)) == xts2 = true => count(s(s(s(xts3))), xts1 .. nil) <= s(s(0)) = true
	s(s(xts3)) == xts2 = false => count(s(s(s(xts3))), xts1 .. nil) <= s(s(s(0))) = true
	s(0) == xts2 = true => count(s(s(0)), xts1 .. nil) <= s(s(0)) = true
	count(s(s(0)), xts .. nil) <= s(s(s(0))) = true
	s(0) == xts2 = false => count(s(s(0)), xts1 .. nil) <= s(s(s(0))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	count(x, xs) <= len(xs) -> true
	count(x, xts .. yts) <= s(len(yts)) -> true
	0 == xts = true => count(0, xts .. nil) <= s(0) -> true
	count(x, xts2 .. xts1 .. yts) <= s(s(len(yts))) -> true
	0 == xts = true => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = true => count(s(0), xts .. nil) <= s(0) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = true => count(s(0), xts .. nil) <= s(s(0)) -> true
	s(0) == xts = true => count(s(0), xts .. nil) <= s(0) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(s(0))) -> true
	0 == xts = false => count(s(0), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	s(0) == xts = true => count(s(0), xts .. nil) <= s(s(0)) -> true
	0 == xts = false => count(s(0), xts .. nil) <= s(s(s(0))) -> true
	s(0) == xts = false => count(s(0), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	count(x, xts3 .. xts2 .. xts1 .. yts) <= s(s(s(len(yts)))) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	0 == xts = true => count(0, xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(0)) == xts = true => count(s(s(0)), xts .. nil) <= s(0) -> true
	s(0) == xts = false => count(s(0), xts .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	xts == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	s(s(0)) == xts = true => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	0 == xts = false => count(0, xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(0)) == xts = false => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	s(s(0)) == xts = false => count(s(s(0)), xts .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	xts2 == s(xts1) = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(xts2)) == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(xts2)) == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(s(xts2))) == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(s(xts2))) == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> yts
	^f0($n0 + 1; yts, xts@) -> xts$n0 .. ^f0($n0; yts, xts@)
	^f1(0; yts) -> len(yts)
	^f1($n1 + 1; yts) -> s(^f1($n1; yts))
	^f136(0; xts) -> xts
	^f136($n136 + 1; xts) -> s(^f136($n136; xts))
+++ }
+++ Lemma(s)           = 
	count(x, xts$n .. ^f0($n; yts, xts@)) <= s(^f1($n; yts)) = true
	xts3 == xts2 = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(0) = true
	xts3 == xts2 = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = true => count(s(^f136($n; xts2)), xts1 .. nil) <= s(0) = true
	xts3 == s(xts2) = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(0) = true
	xts2 == 0 = false => count(s(^f136($n; xts2)), xts1 .. nil) <= s(s(0)) = true
	xts3 == s(xts2) = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true
	xts4 == xts3 = true => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts4 == xts3 = false => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts3 == 0 = true => count(s(^f136($n; xts3)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts4 == s(xts3) = true => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(0)) = true

+++ treating clause
	xts3 == 0 = false => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
+++ inductive narrowing on conjecture
	xts3 == 0 = false => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
... induction variables of
	xts3 == 0 = false => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
... are:
	xts3:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	xts3 == 0 = false => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
... with variable xts3
+++ creating new conjecture
	0 == 0 = false => count(s(s(s(0))), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
+++ creating new conjecture
	s(xts3) == 0 = false => count(s(s(s(s(xts3)))), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
--- clause
	0 == 0 = false => count(s(s(s(0))), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
... reduced in 1 step to
	true = false => count(s(s(s(0))), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
--- clause
	true = false => count(s(s(s(0))), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
... contains a ground negative condition
	true = false
... and is therefore discarded (false => t is always true)
--- clause
	s(xts3) == 0 = false => count(s(s(s(s(xts3)))), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
... reduced in 1 step to
	count(s(s(s(s(xts3)))), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
+++ inductive narrowing succeeded
--- clause
	xts3 == 0 = false => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
... oriented to rule
	xts == 0 = false => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
+++ added new clause(s)
	count(s(s(s(s(xts3)))), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
... to conjectures
+++ active wrap
	xts3 == 0 = false => count(s(.), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
... with sequence
	xts3 == 0 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts3 == 0 = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts3 == 0 = false => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
+++ primal grammar found for head
	{.., 0, <=, ==, count, false, nil, s, true}
... and wrap
	xts3 == 0 = false => count(s(.), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
+++ Presburger system  = {
	^f136(0; xts) -> xts
	^f136($n136 + 1; xts) -> s(^f136($n136; xts))
+++ }
+++ Lemma(s)           = 
	xts3 == 0 = false => count(s(^f136($n; xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true

+++ Status of the Inference System
--- Conjectures:
	xts4 == s(xts3) = false => count(s(s(s(xts4))), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	s(0) == xts2 = true => count(s(s(0)), xts1 .. nil) <= s(0) = true
	count(s(s(0)), xts .. nil) <= s(s(0)) = true
	s(0) == xts2 = false => count(s(s(0)), xts1 .. nil) <= s(s(0)) = true
	count(s(s(s(0))), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts3 == xts2 = true => count(s(s(s(xts3))), xts1 .. nil) <= s(s(0)) = true
	count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == xts2 = false => count(s(s(s(xts3))), xts1 .. nil) <= s(s(s(0))) = true
	xts2 == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) = true
	xts3 == s(xts2) = true => count(s(s(xts3)), xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == s(xts2) = false => count(s(s(xts3)), xts1 .. nil) <= s(s(s(0))) = true
	s(s(xts3)) == xts2 = true => count(s(s(s(xts3))), xts1 .. nil) <= s(s(0)) = true
	s(s(xts3)) == xts2 = false => count(s(s(s(xts3))), xts1 .. nil) <= s(s(s(0))) = true
	s(0) == xts2 = true => count(s(s(0)), xts1 .. nil) <= s(s(0)) = true
	count(s(s(0)), xts .. nil) <= s(s(s(0))) = true
	s(0) == xts2 = false => count(s(s(0)), xts1 .. nil) <= s(s(s(0))) = true
	count(s(s(s(s(xts3)))), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	count(x, xs) <= len(xs) -> true
	count(x, xts .. yts) <= s(len(yts)) -> true
	0 == xts = true => count(0, xts .. nil) <= s(0) -> true
	count(x, xts2 .. xts1 .. yts) <= s(s(len(yts))) -> true
	0 == xts = true => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = true => count(s(0), xts .. nil) <= s(0) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = true => count(s(0), xts .. nil) <= s(s(0)) -> true
	s(0) == xts = true => count(s(0), xts .. nil) <= s(0) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(s(0))) -> true
	0 == xts = false => count(s(0), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	s(0) == xts = true => count(s(0), xts .. nil) <= s(s(0)) -> true
	0 == xts = false => count(s(0), xts .. nil) <= s(s(s(0))) -> true
	s(0) == xts = false => count(s(0), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	count(x, xts3 .. xts2 .. xts1 .. yts) <= s(s(s(len(yts)))) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	0 == xts = true => count(0, xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(0)) == xts = true => count(s(s(0)), xts .. nil) <= s(0) -> true
	s(0) == xts = false => count(s(0), xts .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	xts == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	s(s(0)) == xts = true => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	0 == xts = false => count(0, xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(0)) == xts = false => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	s(s(0)) == xts = false => count(s(s(0)), xts .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	xts2 == s(xts1) = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(xts2)) == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(xts2)) == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = false => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(s(xts2))) == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(s(xts2))) == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> yts
	^f0($n0 + 1; yts, xts@) -> xts$n0 .. ^f0($n0; yts, xts@)
	^f1(0; yts) -> len(yts)
	^f1($n1 + 1; yts) -> s(^f1($n1; yts))
	^f136(0; xts) -> xts
	^f136($n136 + 1; xts) -> s(^f136($n136; xts))
+++ }
+++ Lemma(s)           = 
	count(x, xts$n .. ^f0($n; yts, xts@)) <= s(^f1($n; yts)) = true
	xts3 == xts2 = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(0) = true
	xts3 == xts2 = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = true => count(s(^f136($n; xts2)), xts1 .. nil) <= s(0) = true
	xts3 == s(xts2) = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(0) = true
	xts2 == 0 = false => count(s(^f136($n; xts2)), xts1 .. nil) <= s(s(0)) = true
	xts3 == s(xts2) = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true
	xts4 == xts3 = true => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts4 == xts3 = false => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts3 == 0 = true => count(s(^f136($n; xts3)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts4 == s(xts3) = true => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts3 == 0 = false => count(s(^f136($n; xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true

+++ treating clause
	xts4 == s(xts3) = false => count(s(s(s(xts4))), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
+++ inductive narrowing on conjecture
	xts4 == s(xts3) = false => count(s(s(s(xts4))), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
... induction variables of
	xts4 == s(xts3) = false => count(s(s(s(xts4))), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
... are:
	xts4:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	xts4 == s(xts3) = false => count(s(s(s(xts4))), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
... with variable xts4
+++ creating new conjecture
	0 == s(xts3) = false => count(s(s(s(0))), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
+++ creating new conjecture
	s(xts4) == s(xts3) = false => count(s(s(s(s(xts4)))), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
--- clause
	0 == s(xts3) = false => count(s(s(s(0))), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
... reduced in 1 step to
	count(s(s(s(0))), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
--- clause
	s(xts4) == s(xts3) = false => count(s(s(s(s(xts4)))), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
... reduced in 1 step to
	xts4 == xts3 = false => count(s(s(s(s(xts4)))), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
--- clause
	xts4 == xts3 = false => count(s(s(s(s(xts4)))), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
... subsumed by lemma
	xts4 == xts3 = false => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
... with substitution
	$n <- 3
+++ inductive narrowing succeeded
--- clause
	xts4 == s(xts3) = false => count(s(s(s(xts4))), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
... oriented to rule
	xts2 == s(xts1) = false => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
+++ added new clause(s)
	count(s(s(s(0))), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
... to conjectures
+++ active wrap
	xts4 == s(xts3) = false => count(s(.), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
... with sequence
	xts4 == s(xts3) = false => count(s(xts4), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts4 == s(xts3) = false => count(s(s(xts4)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts4 == s(xts3) = false => count(s(s(s(xts4))), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
+++ primal grammar found for head
	{.., 0, <=, ==, count, false, nil, s, true}
... and wrap
	xts4 == s(xts3) = false => count(s(.), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
+++ Presburger system  = {
	^f136(0; xts) -> xts
	^f136($n136 + 1; xts) -> s(^f136($n136; xts))
+++ }
+++ Lemma(s)           = 
	xts4 == s(xts3) = false => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true

+++ Status of the Inference System
--- Conjectures:
	s(0) == xts2 = true => count(s(s(0)), xts1 .. nil) <= s(0) = true
	count(s(s(0)), xts .. nil) <= s(s(0)) = true
	s(0) == xts2 = false => count(s(s(0)), xts1 .. nil) <= s(s(0)) = true
	count(s(s(s(0))), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts3 == xts2 = true => count(s(s(s(xts3))), xts1 .. nil) <= s(s(0)) = true
	count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == xts2 = false => count(s(s(s(xts3))), xts1 .. nil) <= s(s(s(0))) = true
	xts2 == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) = true
	xts3 == s(xts2) = true => count(s(s(xts3)), xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == s(xts2) = false => count(s(s(xts3)), xts1 .. nil) <= s(s(s(0))) = true
	s(s(xts3)) == xts2 = true => count(s(s(s(xts3))), xts1 .. nil) <= s(s(0)) = true
	s(s(xts3)) == xts2 = false => count(s(s(s(xts3))), xts1 .. nil) <= s(s(s(0))) = true
	s(0) == xts2 = true => count(s(s(0)), xts1 .. nil) <= s(s(0)) = true
	count(s(s(0)), xts .. nil) <= s(s(s(0))) = true
	s(0) == xts2 = false => count(s(s(0)), xts1 .. nil) <= s(s(s(0))) = true
	count(s(s(s(s(xts3)))), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	count(s(s(s(0))), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	count(x, xs) <= len(xs) -> true
	count(x, xts .. yts) <= s(len(yts)) -> true
	0 == xts = true => count(0, xts .. nil) <= s(0) -> true
	count(x, xts2 .. xts1 .. yts) <= s(s(len(yts))) -> true
	0 == xts = true => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = true => count(s(0), xts .. nil) <= s(0) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = true => count(s(0), xts .. nil) <= s(s(0)) -> true
	s(0) == xts = true => count(s(0), xts .. nil) <= s(0) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(s(0))) -> true
	0 == xts = false => count(s(0), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	s(0) == xts = true => count(s(0), xts .. nil) <= s(s(0)) -> true
	0 == xts = false => count(s(0), xts .. nil) <= s(s(s(0))) -> true
	s(0) == xts = false => count(s(0), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	count(x, xts3 .. xts2 .. xts1 .. yts) <= s(s(s(len(yts)))) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	0 == xts = true => count(0, xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(0)) == xts = true => count(s(s(0)), xts .. nil) <= s(0) -> true
	s(0) == xts = false => count(s(0), xts .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	xts == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	s(s(0)) == xts = true => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	0 == xts = false => count(0, xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(0)) == xts = false => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	s(s(0)) == xts = false => count(s(s(0)), xts .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	xts2 == s(xts1) = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(xts2)) == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(xts2)) == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = false => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(s(xts2))) == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(s(xts2))) == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> yts
	^f0($n0 + 1; yts, xts@) -> xts$n0 .. ^f0($n0; yts, xts@)
	^f1(0; yts) -> len(yts)
	^f1($n1 + 1; yts) -> s(^f1($n1; yts))
	^f136(0; xts) -> xts
	^f136($n136 + 1; xts) -> s(^f136($n136; xts))
+++ }
+++ Lemma(s)           = 
	count(x, xts$n .. ^f0($n; yts, xts@)) <= s(^f1($n; yts)) = true
	xts3 == xts2 = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(0) = true
	xts3 == xts2 = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = true => count(s(^f136($n; xts2)), xts1 .. nil) <= s(0) = true
	xts3 == s(xts2) = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(0) = true
	xts2 == 0 = false => count(s(^f136($n; xts2)), xts1 .. nil) <= s(s(0)) = true
	xts3 == s(xts2) = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true
	xts4 == xts3 = true => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts4 == xts3 = false => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts3 == 0 = true => count(s(^f136($n; xts3)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts4 == s(xts3) = true => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts3 == 0 = false => count(s(^f136($n; xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts4 == s(xts3) = false => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true

+++ treating clause
	s(0) == xts2 = true => count(s(s(0)), xts1 .. nil) <= s(0) = true
+++ inductive narrowing on conjecture
	s(0) == xts2 = true => count(s(s(0)), xts1 .. nil) <= s(0) = true
... induction variables of
	s(0) == xts2 = true => count(s(s(0)), xts1 .. nil) <= s(0) = true
... are:
	xts2:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	s(0) == xts2 = true => count(s(s(0)), xts1 .. nil) <= s(0) = true
... with variable xts2
+++ creating new conjecture
	s(0) == 0 = true => count(s(s(0)), xts .. nil) <= s(0) = true
+++ creating new conjecture
	s(0) == s(xts2) = true => count(s(s(0)), xts1 .. nil) <= s(0) = true
--- clause
	s(0) == 0 = true => count(s(s(0)), xts .. nil) <= s(0) = true
... reduced in 1 step to
	false = true => count(s(s(0)), xts .. nil) <= s(0) = true
--- clause
	false = true => count(s(s(0)), xts .. nil) <= s(0) = true
... contains a ground negative condition
	false = true
... and is therefore discarded (false => t is always true)
--- clause
	s(0) == s(xts2) = true => count(s(s(0)), xts1 .. nil) <= s(0) = true
... reduced in 1 step to
	0 == xts2 = true => count(s(s(0)), xts1 .. nil) <= s(0) = true
+++ inductive narrowing succeeded
--- clause
	s(0) == xts2 = true => count(s(s(0)), xts1 .. nil) <= s(0) = true
... oriented to rule
	s(0) == xts = true => count(s(s(0)), xts .. nil) <= s(0) -> true
+++ added new clause(s)
	0 == xts2 = true => count(s(s(0)), xts1 .. nil) <= s(0) = true
... to conjectures

+++ Status of the Inference System
--- Conjectures:
	count(s(s(0)), xts .. nil) <= s(s(0)) = true
	s(0) == xts2 = false => count(s(s(0)), xts1 .. nil) <= s(s(0)) = true
	count(s(s(s(0))), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts3 == xts2 = true => count(s(s(s(xts3))), xts1 .. nil) <= s(s(0)) = true
	count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == xts2 = false => count(s(s(s(xts3))), xts1 .. nil) <= s(s(s(0))) = true
	xts2 == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) = true
	xts3 == s(xts2) = true => count(s(s(xts3)), xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == s(xts2) = false => count(s(s(xts3)), xts1 .. nil) <= s(s(s(0))) = true
	s(s(xts3)) == xts2 = true => count(s(s(s(xts3))), xts1 .. nil) <= s(s(0)) = true
	s(s(xts3)) == xts2 = false => count(s(s(s(xts3))), xts1 .. nil) <= s(s(s(0))) = true
	s(0) == xts2 = true => count(s(s(0)), xts1 .. nil) <= s(s(0)) = true
	count(s(s(0)), xts .. nil) <= s(s(s(0))) = true
	s(0) == xts2 = false => count(s(s(0)), xts1 .. nil) <= s(s(s(0))) = true
	count(s(s(s(s(xts3)))), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	count(s(s(s(0))), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	0 == xts2 = true => count(s(s(0)), xts1 .. nil) <= s(0) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	count(x, xs) <= len(xs) -> true
	count(x, xts .. yts) <= s(len(yts)) -> true
	0 == xts = true => count(0, xts .. nil) <= s(0) -> true
	count(x, xts2 .. xts1 .. yts) <= s(s(len(yts))) -> true
	0 == xts = true => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = true => count(s(0), xts .. nil) <= s(0) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = true => count(s(0), xts .. nil) <= s(s(0)) -> true
	s(0) == xts = true => count(s(0), xts .. nil) <= s(0) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(s(0))) -> true
	0 == xts = false => count(s(0), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	s(0) == xts = true => count(s(0), xts .. nil) <= s(s(0)) -> true
	s(0) == xts = true => count(s(s(0)), xts .. nil) <= s(0) -> true
	0 == xts = false => count(s(0), xts .. nil) <= s(s(s(0))) -> true
	s(0) == xts = false => count(s(0), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	count(x, xts3 .. xts2 .. xts1 .. yts) <= s(s(s(len(yts)))) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	0 == xts = true => count(0, xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(0)) == xts = true => count(s(s(0)), xts .. nil) <= s(0) -> true
	s(0) == xts = false => count(s(0), xts .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	xts == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	s(s(0)) == xts = true => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	0 == xts = false => count(0, xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(0)) == xts = false => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	s(s(0)) == xts = false => count(s(s(0)), xts .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	xts2 == s(xts1) = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(xts2)) == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(xts2)) == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = false => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(s(xts2))) == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(s(xts2))) == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> yts
	^f0($n0 + 1; yts, xts@) -> xts$n0 .. ^f0($n0; yts, xts@)
	^f1(0; yts) -> len(yts)
	^f1($n1 + 1; yts) -> s(^f1($n1; yts))
	^f136(0; xts) -> xts
	^f136($n136 + 1; xts) -> s(^f136($n136; xts))
+++ }
+++ Lemma(s)           = 
	count(x, xts$n .. ^f0($n; yts, xts@)) <= s(^f1($n; yts)) = true
	xts3 == xts2 = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(0) = true
	xts3 == xts2 = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = true => count(s(^f136($n; xts2)), xts1 .. nil) <= s(0) = true
	xts3 == s(xts2) = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(0) = true
	xts2 == 0 = false => count(s(^f136($n; xts2)), xts1 .. nil) <= s(s(0)) = true
	xts3 == s(xts2) = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true
	xts4 == xts3 = true => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts4 == xts3 = false => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts3 == 0 = true => count(s(^f136($n; xts3)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts4 == s(xts3) = true => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts3 == 0 = false => count(s(^f136($n; xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts4 == s(xts3) = false => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true

+++ treating clause
	count(s(s(0)), xts .. nil) <= s(s(0)) = true
--- no new clauses created
+++ attempting case rewriting
--- case rewriting generated new conjectures
	s(s(0)) == xts = true => s(0) <= s(s(0)) = true
	s(s(0)) == xts = false => 0 <= s(s(0)) = true
+++ added new clause(s)
	s(s(0)) == xts = true => s(0) <= s(s(0)) = true
	s(s(0)) == xts = false => 0 <= s(s(0)) = true
... to conjectures
--- clause
	s(s(0)) == xts = true => s(0) <= s(s(0)) = true
... reduced to tautology
	s(s(0)) == xts = true => true = true
--- clause
	s(s(0)) == xts = false => 0 <= s(s(0)) = true
... reduced to tautology
	s(s(0)) == xts = false => true = true

+++ Status of the Inference System
--- Conjectures:
	s(0) == xts2 = false => count(s(s(0)), xts1 .. nil) <= s(s(0)) = true
	count(s(s(s(0))), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts3 == xts2 = true => count(s(s(s(xts3))), xts1 .. nil) <= s(s(0)) = true
	count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == xts2 = false => count(s(s(s(xts3))), xts1 .. nil) <= s(s(s(0))) = true
	xts2 == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) = true
	xts3 == s(xts2) = true => count(s(s(xts3)), xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == s(xts2) = false => count(s(s(xts3)), xts1 .. nil) <= s(s(s(0))) = true
	s(s(xts3)) == xts2 = true => count(s(s(s(xts3))), xts1 .. nil) <= s(s(0)) = true
	s(s(xts3)) == xts2 = false => count(s(s(s(xts3))), xts1 .. nil) <= s(s(s(0))) = true
	s(0) == xts2 = true => count(s(s(0)), xts1 .. nil) <= s(s(0)) = true
	count(s(s(0)), xts .. nil) <= s(s(s(0))) = true
	s(0) == xts2 = false => count(s(s(0)), xts1 .. nil) <= s(s(s(0))) = true
	count(s(s(s(s(xts3)))), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	count(s(s(s(0))), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	0 == xts2 = true => count(s(s(0)), xts1 .. nil) <= s(0) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	count(x, xs) <= len(xs) -> true
	count(x, xts .. yts) <= s(len(yts)) -> true
	0 == xts = true => count(0, xts .. nil) <= s(0) -> true
	count(x, xts2 .. xts1 .. yts) <= s(s(len(yts))) -> true
	0 == xts = true => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = true => count(s(0), xts .. nil) <= s(0) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = true => count(s(0), xts .. nil) <= s(s(0)) -> true
	s(0) == xts = true => count(s(0), xts .. nil) <= s(0) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(s(0))) -> true
	0 == xts = false => count(s(0), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	s(0) == xts = true => count(s(0), xts .. nil) <= s(s(0)) -> true
	s(0) == xts = true => count(s(s(0)), xts .. nil) <= s(0) -> true
	0 == xts = false => count(s(0), xts .. nil) <= s(s(s(0))) -> true
	s(0) == xts = false => count(s(0), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	count(x, xts3 .. xts2 .. xts1 .. yts) <= s(s(s(len(yts)))) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	0 == xts = true => count(0, xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(0)) == xts = true => count(s(s(0)), xts .. nil) <= s(0) -> true
	s(0) == xts = false => count(s(0), xts .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	xts == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	s(s(0)) == xts = true => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	0 == xts = false => count(0, xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(0)) == xts = false => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	s(s(0)) == xts = false => count(s(s(0)), xts .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	xts2 == s(xts1) = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(xts2)) == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(xts2)) == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = false => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(s(xts2))) == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(s(xts2))) == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> yts
	^f0($n0 + 1; yts, xts@) -> xts$n0 .. ^f0($n0; yts, xts@)
	^f1(0; yts) -> len(yts)
	^f1($n1 + 1; yts) -> s(^f1($n1; yts))
	^f136(0; xts) -> xts
	^f136($n136 + 1; xts) -> s(^f136($n136; xts))
+++ }
+++ Lemma(s)           = 
	count(x, xts$n .. ^f0($n; yts, xts@)) <= s(^f1($n; yts)) = true
	xts3 == xts2 = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(0) = true
	xts3 == xts2 = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = true => count(s(^f136($n; xts2)), xts1 .. nil) <= s(0) = true
	xts3 == s(xts2) = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(0) = true
	xts2 == 0 = false => count(s(^f136($n; xts2)), xts1 .. nil) <= s(s(0)) = true
	xts3 == s(xts2) = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true
	xts4 == xts3 = true => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts4 == xts3 = false => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts3 == 0 = true => count(s(^f136($n; xts3)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts4 == s(xts3) = true => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts3 == 0 = false => count(s(^f136($n; xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts4 == s(xts3) = false => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true

+++ treating clause
	s(0) == xts2 = false => count(s(s(0)), xts1 .. nil) <= s(s(0)) = true
+++ inductive narrowing on conjecture
	s(0) == xts2 = false => count(s(s(0)), xts1 .. nil) <= s(s(0)) = true
... induction variables of
	s(0) == xts2 = false => count(s(s(0)), xts1 .. nil) <= s(s(0)) = true
... are:
	xts2:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	s(0) == xts2 = false => count(s(s(0)), xts1 .. nil) <= s(s(0)) = true
... with variable xts2
+++ creating new conjecture
	s(0) == 0 = false => count(s(s(0)), xts .. nil) <= s(s(0)) = true
+++ creating new conjecture
	s(0) == s(xts2) = false => count(s(s(0)), xts1 .. nil) <= s(s(0)) = true
--- clause
	s(0) == 0 = false => count(s(s(0)), xts .. nil) <= s(s(0)) = true
... reduced in 1 step to
	count(s(s(0)), xts .. nil) <= s(s(0)) = true
--- clause
	s(0) == s(xts2) = false => count(s(s(0)), xts1 .. nil) <= s(s(0)) = true
... reduced in 1 step to
	0 == xts2 = false => count(s(s(0)), xts1 .. nil) <= s(s(0)) = true
+++ inductive narrowing succeeded
--- clause
	s(0) == xts2 = false => count(s(s(0)), xts1 .. nil) <= s(s(0)) = true
... oriented to rule
	s(0) == xts = false => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
+++ added new clause(s)
	count(s(s(0)), xts .. nil) <= s(s(0)) = true
	0 == xts2 = false => count(s(s(0)), xts1 .. nil) <= s(s(0)) = true
... to conjectures

+++ Status of the Inference System
--- Conjectures:
	count(s(s(s(0))), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts3 == xts2 = true => count(s(s(s(xts3))), xts1 .. nil) <= s(s(0)) = true
	count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == xts2 = false => count(s(s(s(xts3))), xts1 .. nil) <= s(s(s(0))) = true
	xts2 == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) = true
	xts3 == s(xts2) = true => count(s(s(xts3)), xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == s(xts2) = false => count(s(s(xts3)), xts1 .. nil) <= s(s(s(0))) = true
	s(s(xts3)) == xts2 = true => count(s(s(s(xts3))), xts1 .. nil) <= s(s(0)) = true
	s(s(xts3)) == xts2 = false => count(s(s(s(xts3))), xts1 .. nil) <= s(s(s(0))) = true
	s(0) == xts2 = true => count(s(s(0)), xts1 .. nil) <= s(s(0)) = true
	count(s(s(0)), xts .. nil) <= s(s(s(0))) = true
	s(0) == xts2 = false => count(s(s(0)), xts1 .. nil) <= s(s(s(0))) = true
	count(s(s(s(s(xts3)))), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	count(s(s(s(0))), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	0 == xts2 = true => count(s(s(0)), xts1 .. nil) <= s(0) = true
	count(s(s(0)), xts .. nil) <= s(s(0)) = true
	0 == xts2 = false => count(s(s(0)), xts1 .. nil) <= s(s(0)) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	count(x, xs) <= len(xs) -> true
	count(x, xts .. yts) <= s(len(yts)) -> true
	0 == xts = true => count(0, xts .. nil) <= s(0) -> true
	count(x, xts2 .. xts1 .. yts) <= s(s(len(yts))) -> true
	0 == xts = true => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = true => count(s(0), xts .. nil) <= s(0) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = true => count(s(0), xts .. nil) <= s(s(0)) -> true
	s(0) == xts = true => count(s(0), xts .. nil) <= s(0) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(s(0))) -> true
	0 == xts = false => count(s(0), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	s(0) == xts = true => count(s(0), xts .. nil) <= s(s(0)) -> true
	s(0) == xts = true => count(s(s(0)), xts .. nil) <= s(0) -> true
	0 == xts = false => count(s(0), xts .. nil) <= s(s(s(0))) -> true
	s(0) == xts = false => count(s(0), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	count(x, xts3 .. xts2 .. xts1 .. yts) <= s(s(s(len(yts)))) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	0 == xts = true => count(0, xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(0)) == xts = true => count(s(s(0)), xts .. nil) <= s(0) -> true
	s(0) == xts = false => count(s(0), xts .. nil) <= s(s(s(0))) -> true
	s(0) == xts = false => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	xts == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	s(s(0)) == xts = true => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	0 == xts = false => count(0, xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(0)) == xts = false => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	s(s(0)) == xts = false => count(s(s(0)), xts .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	xts2 == s(xts1) = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(xts2)) == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(xts2)) == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = false => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(s(xts2))) == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(s(xts2))) == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> yts
	^f0($n0 + 1; yts, xts@) -> xts$n0 .. ^f0($n0; yts, xts@)
	^f1(0; yts) -> len(yts)
	^f1($n1 + 1; yts) -> s(^f1($n1; yts))
	^f136(0; xts) -> xts
	^f136($n136 + 1; xts) -> s(^f136($n136; xts))
+++ }
+++ Lemma(s)           = 
	count(x, xts$n .. ^f0($n; yts, xts@)) <= s(^f1($n; yts)) = true
	xts3 == xts2 = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(0) = true
	xts3 == xts2 = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = true => count(s(^f136($n; xts2)), xts1 .. nil) <= s(0) = true
	xts3 == s(xts2) = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(0) = true
	xts2 == 0 = false => count(s(^f136($n; xts2)), xts1 .. nil) <= s(s(0)) = true
	xts3 == s(xts2) = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true
	xts4 == xts3 = true => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts4 == xts3 = false => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts3 == 0 = true => count(s(^f136($n; xts3)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts4 == s(xts3) = true => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts3 == 0 = false => count(s(^f136($n; xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts4 == s(xts3) = false => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true

+++ treating clause
	count(s(s(s(0))), xts2 .. xts1 .. nil) <= s(s(0)) = true
--- no new clauses created
+++ attempting case rewriting
--- case rewriting generated new conjectures
	s(s(s(0))) == xts2 = true => s(count(s(s(s(0))), xts1 .. nil)) <= s(s(0)) = true
	s(s(s(0))) == xts2 = false => count(s(s(s(0))), xts1 .. nil) <= s(s(0)) = true
+++ added new clause(s)
	s(s(s(0))) == xts2 = true => s(count(s(s(s(0))), xts1 .. nil)) <= s(s(0)) = true
	s(s(s(0))) == xts2 = false => count(s(s(s(0))), xts1 .. nil) <= s(s(0)) = true
... to conjectures
--- clause
	s(s(s(0))) == xts2 = true => s(count(s(s(s(0))), xts1 .. nil)) <= s(s(0)) = true
... reduced in 1 step to
	s(s(s(0))) == xts2 = true => count(s(s(s(0))), xts1 .. nil) <= s(0) = true

+++ Status of the Inference System
--- Conjectures:
	xts3 == xts2 = true => count(s(s(s(xts3))), xts1 .. nil) <= s(s(0)) = true
	count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == xts2 = false => count(s(s(s(xts3))), xts1 .. nil) <= s(s(s(0))) = true
	xts2 == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) = true
	xts3 == s(xts2) = true => count(s(s(xts3)), xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == s(xts2) = false => count(s(s(xts3)), xts1 .. nil) <= s(s(s(0))) = true
	s(s(xts3)) == xts2 = true => count(s(s(s(xts3))), xts1 .. nil) <= s(s(0)) = true
	s(s(xts3)) == xts2 = false => count(s(s(s(xts3))), xts1 .. nil) <= s(s(s(0))) = true
	s(0) == xts2 = true => count(s(s(0)), xts1 .. nil) <= s(s(0)) = true
	count(s(s(0)), xts .. nil) <= s(s(s(0))) = true
	s(0) == xts2 = false => count(s(s(0)), xts1 .. nil) <= s(s(s(0))) = true
	count(s(s(s(s(xts3)))), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	count(s(s(s(0))), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	0 == xts2 = true => count(s(s(0)), xts1 .. nil) <= s(0) = true
	count(s(s(0)), xts .. nil) <= s(s(0)) = true
	0 == xts2 = false => count(s(s(0)), xts1 .. nil) <= s(s(0)) = true
	s(s(s(0))) == xts2 = true => count(s(s(s(0))), xts1 .. nil) <= s(0) = true
	s(s(s(0))) == xts2 = false => count(s(s(s(0))), xts1 .. nil) <= s(s(0)) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	count(x, xs) <= len(xs) -> true
	count(x, xts .. yts) <= s(len(yts)) -> true
	0 == xts = true => count(0, xts .. nil) <= s(0) -> true
	count(x, xts2 .. xts1 .. yts) <= s(s(len(yts))) -> true
	0 == xts = true => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = true => count(s(0), xts .. nil) <= s(0) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = true => count(s(0), xts .. nil) <= s(s(0)) -> true
	s(0) == xts = true => count(s(0), xts .. nil) <= s(0) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(s(0))) -> true
	0 == xts = false => count(s(0), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	s(0) == xts = true => count(s(0), xts .. nil) <= s(s(0)) -> true
	s(0) == xts = true => count(s(s(0)), xts .. nil) <= s(0) -> true
	0 == xts = false => count(s(0), xts .. nil) <= s(s(s(0))) -> true
	s(0) == xts = false => count(s(0), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	count(x, xts3 .. xts2 .. xts1 .. yts) <= s(s(s(len(yts)))) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	0 == xts = true => count(0, xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(0)) == xts = true => count(s(s(0)), xts .. nil) <= s(0) -> true
	s(0) == xts = false => count(s(0), xts .. nil) <= s(s(s(0))) -> true
	s(0) == xts = false => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	xts == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	s(s(0)) == xts = true => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	0 == xts = false => count(0, xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(0)) == xts = false => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	s(s(0)) == xts = false => count(s(s(0)), xts .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	xts2 == s(xts1) = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(xts2)) == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(xts2)) == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = false => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(s(xts2))) == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(s(xts2))) == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> yts
	^f0($n0 + 1; yts, xts@) -> xts$n0 .. ^f0($n0; yts, xts@)
	^f1(0; yts) -> len(yts)
	^f1($n1 + 1; yts) -> s(^f1($n1; yts))
	^f136(0; xts) -> xts
	^f136($n136 + 1; xts) -> s(^f136($n136; xts))
+++ }
+++ Lemma(s)           = 
	count(x, xts$n .. ^f0($n; yts, xts@)) <= s(^f1($n; yts)) = true
	xts3 == xts2 = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(0) = true
	xts3 == xts2 = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = true => count(s(^f136($n; xts2)), xts1 .. nil) <= s(0) = true
	xts3 == s(xts2) = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(0) = true
	xts2 == 0 = false => count(s(^f136($n; xts2)), xts1 .. nil) <= s(s(0)) = true
	xts3 == s(xts2) = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true
	xts4 == xts3 = true => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts4 == xts3 = false => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts3 == 0 = true => count(s(^f136($n; xts3)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts4 == s(xts3) = true => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts3 == 0 = false => count(s(^f136($n; xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts4 == s(xts3) = false => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true

+++ treating clause
	xts3 == xts2 = true => count(s(s(s(xts3))), xts1 .. nil) <= s(s(0)) = true
+++ inductive narrowing on conjecture
	xts3 == xts2 = true => count(s(s(s(xts3))), xts1 .. nil) <= s(s(0)) = true
... induction variables of
	xts3 == xts2 = true => count(s(s(s(xts3))), xts1 .. nil) <= s(s(0)) = true
... are:
	xts2:nat
	xts3:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	xts3 == xts2 = true => count(s(s(s(xts3))), xts1 .. nil) <= s(s(0)) = true
... with variable xts2
+++ creating new conjecture
	xts2 == 0 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) = true
+++ creating new conjecture
	xts3 == s(xts2) = true => count(s(s(s(xts3))), xts1 .. nil) <= s(s(0)) = true
+++ inductive narrowing succeeded
--- clause
	xts3 == xts2 = true => count(s(s(s(xts3))), xts1 .. nil) <= s(s(0)) = true
... oriented to rule
	xts2 == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
+++ added new clause(s)
	xts2 == 0 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) = true
	xts3 == s(xts2) = true => count(s(s(s(xts3))), xts1 .. nil) <= s(s(0)) = true
... to conjectures

+++ Status of the Inference System
--- Conjectures:
	count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == xts2 = false => count(s(s(s(xts3))), xts1 .. nil) <= s(s(s(0))) = true
	xts2 == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) = true
	xts3 == s(xts2) = true => count(s(s(xts3)), xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == s(xts2) = false => count(s(s(xts3)), xts1 .. nil) <= s(s(s(0))) = true
	s(s(xts3)) == xts2 = true => count(s(s(s(xts3))), xts1 .. nil) <= s(s(0)) = true
	s(s(xts3)) == xts2 = false => count(s(s(s(xts3))), xts1 .. nil) <= s(s(s(0))) = true
	s(0) == xts2 = true => count(s(s(0)), xts1 .. nil) <= s(s(0)) = true
	count(s(s(0)), xts .. nil) <= s(s(s(0))) = true
	s(0) == xts2 = false => count(s(s(0)), xts1 .. nil) <= s(s(s(0))) = true
	count(s(s(s(s(xts3)))), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	count(s(s(s(0))), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	0 == xts2 = true => count(s(s(0)), xts1 .. nil) <= s(0) = true
	count(s(s(0)), xts .. nil) <= s(s(0)) = true
	0 == xts2 = false => count(s(s(0)), xts1 .. nil) <= s(s(0)) = true
	s(s(s(0))) == xts2 = true => count(s(s(s(0))), xts1 .. nil) <= s(0) = true
	s(s(s(0))) == xts2 = false => count(s(s(s(0))), xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) = true
	xts3 == s(xts2) = true => count(s(s(s(xts3))), xts1 .. nil) <= s(s(0)) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	count(x, xs) <= len(xs) -> true
	count(x, xts .. yts) <= s(len(yts)) -> true
	0 == xts = true => count(0, xts .. nil) <= s(0) -> true
	count(x, xts2 .. xts1 .. yts) <= s(s(len(yts))) -> true
	0 == xts = true => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = true => count(s(0), xts .. nil) <= s(0) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = true => count(s(0), xts .. nil) <= s(s(0)) -> true
	s(0) == xts = true => count(s(0), xts .. nil) <= s(0) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(s(0))) -> true
	0 == xts = false => count(s(0), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	s(0) == xts = true => count(s(0), xts .. nil) <= s(s(0)) -> true
	s(0) == xts = true => count(s(s(0)), xts .. nil) <= s(0) -> true
	0 == xts = false => count(s(0), xts .. nil) <= s(s(s(0))) -> true
	s(0) == xts = false => count(s(0), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	count(x, xts3 .. xts2 .. xts1 .. yts) <= s(s(s(len(yts)))) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	0 == xts = true => count(0, xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(0)) == xts = true => count(s(s(0)), xts .. nil) <= s(0) -> true
	s(0) == xts = false => count(s(0), xts .. nil) <= s(s(s(0))) -> true
	s(0) == xts = false => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	xts == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	s(s(0)) == xts = true => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	0 == xts = false => count(0, xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(0)) == xts = false => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	s(s(0)) == xts = false => count(s(s(0)), xts .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	xts2 == s(xts1) = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(xts2)) == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(xts2)) == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = false => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(s(xts2))) == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(s(xts2))) == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> yts
	^f0($n0 + 1; yts, xts@) -> xts$n0 .. ^f0($n0; yts, xts@)
	^f1(0; yts) -> len(yts)
	^f1($n1 + 1; yts) -> s(^f1($n1; yts))
	^f136(0; xts) -> xts
	^f136($n136 + 1; xts) -> s(^f136($n136; xts))
+++ }
+++ Lemma(s)           = 
	count(x, xts$n .. ^f0($n; yts, xts@)) <= s(^f1($n; yts)) = true
	xts3 == xts2 = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(0) = true
	xts3 == xts2 = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = true => count(s(^f136($n; xts2)), xts1 .. nil) <= s(0) = true
	xts3 == s(xts2) = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(0) = true
	xts2 == 0 = false => count(s(^f136($n; xts2)), xts1 .. nil) <= s(s(0)) = true
	xts3 == s(xts2) = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true
	xts4 == xts3 = true => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts4 == xts3 = false => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts3 == 0 = true => count(s(^f136($n; xts3)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts4 == s(xts3) = true => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts3 == 0 = false => count(s(^f136($n; xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts4 == s(xts3) = false => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true

+++ treating clause
	count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) = true
--- no new clauses created
+++ attempting case rewriting
--- case rewriting generated new conjectures
	s(s(s(xts2))) == xts1 = true => s(0) <= s(s(s(0))) = true
	s(s(s(xts2))) == xts1 = false => 0 <= s(s(s(0))) = true
+++ added new clause(s)
	s(s(s(xts2))) == xts1 = true => s(0) <= s(s(s(0))) = true
	s(s(s(xts2))) == xts1 = false => 0 <= s(s(s(0))) = true
... to conjectures
--- clause
	s(s(s(xts2))) == xts1 = true => s(0) <= s(s(s(0))) = true
... reduced to tautology
	s(s(s(xts2))) == xts1 = true => true = true
--- clause
	s(s(s(xts2))) == xts1 = false => 0 <= s(s(s(0))) = true
... reduced to tautology
	s(s(s(xts2))) == xts1 = false => true = true

+++ Status of the Inference System
--- Conjectures:
	xts3 == xts2 = false => count(s(s(s(xts3))), xts1 .. nil) <= s(s(s(0))) = true
	xts2 == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) = true
	xts3 == s(xts2) = true => count(s(s(xts3)), xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == s(xts2) = false => count(s(s(xts3)), xts1 .. nil) <= s(s(s(0))) = true
	s(s(xts3)) == xts2 = true => count(s(s(s(xts3))), xts1 .. nil) <= s(s(0)) = true
	s(s(xts3)) == xts2 = false => count(s(s(s(xts3))), xts1 .. nil) <= s(s(s(0))) = true
	s(0) == xts2 = true => count(s(s(0)), xts1 .. nil) <= s(s(0)) = true
	count(s(s(0)), xts .. nil) <= s(s(s(0))) = true
	s(0) == xts2 = false => count(s(s(0)), xts1 .. nil) <= s(s(s(0))) = true
	count(s(s(s(s(xts3)))), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	count(s(s(s(0))), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	0 == xts2 = true => count(s(s(0)), xts1 .. nil) <= s(0) = true
	count(s(s(0)), xts .. nil) <= s(s(0)) = true
	0 == xts2 = false => count(s(s(0)), xts1 .. nil) <= s(s(0)) = true
	s(s(s(0))) == xts2 = true => count(s(s(s(0))), xts1 .. nil) <= s(0) = true
	s(s(s(0))) == xts2 = false => count(s(s(s(0))), xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) = true
	xts3 == s(xts2) = true => count(s(s(s(xts3))), xts1 .. nil) <= s(s(0)) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	count(x, xs) <= len(xs) -> true
	count(x, xts .. yts) <= s(len(yts)) -> true
	0 == xts = true => count(0, xts .. nil) <= s(0) -> true
	count(x, xts2 .. xts1 .. yts) <= s(s(len(yts))) -> true
	0 == xts = true => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = true => count(s(0), xts .. nil) <= s(0) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = true => count(s(0), xts .. nil) <= s(s(0)) -> true
	s(0) == xts = true => count(s(0), xts .. nil) <= s(0) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(s(0))) -> true
	0 == xts = false => count(s(0), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	s(0) == xts = true => count(s(0), xts .. nil) <= s(s(0)) -> true
	s(0) == xts = true => count(s(s(0)), xts .. nil) <= s(0) -> true
	0 == xts = false => count(s(0), xts .. nil) <= s(s(s(0))) -> true
	s(0) == xts = false => count(s(0), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	count(x, xts3 .. xts2 .. xts1 .. yts) <= s(s(s(len(yts)))) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	0 == xts = true => count(0, xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(0)) == xts = true => count(s(s(0)), xts .. nil) <= s(0) -> true
	s(0) == xts = false => count(s(0), xts .. nil) <= s(s(s(0))) -> true
	s(0) == xts = false => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	xts == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	s(s(0)) == xts = true => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	0 == xts = false => count(0, xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(0)) == xts = false => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	s(s(0)) == xts = false => count(s(s(0)), xts .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	xts2 == s(xts1) = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(xts2)) == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(xts2)) == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = false => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(s(xts2))) == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(s(xts2))) == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> yts
	^f0($n0 + 1; yts, xts@) -> xts$n0 .. ^f0($n0; yts, xts@)
	^f1(0; yts) -> len(yts)
	^f1($n1 + 1; yts) -> s(^f1($n1; yts))
	^f136(0; xts) -> xts
	^f136($n136 + 1; xts) -> s(^f136($n136; xts))
+++ }
+++ Lemma(s)           = 
	count(x, xts$n .. ^f0($n; yts, xts@)) <= s(^f1($n; yts)) = true
	xts3 == xts2 = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(0) = true
	xts3 == xts2 = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = true => count(s(^f136($n; xts2)), xts1 .. nil) <= s(0) = true
	xts3 == s(xts2) = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(0) = true
	xts2 == 0 = false => count(s(^f136($n; xts2)), xts1 .. nil) <= s(s(0)) = true
	xts3 == s(xts2) = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true
	xts4 == xts3 = true => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts4 == xts3 = false => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts3 == 0 = true => count(s(^f136($n; xts3)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts4 == s(xts3) = true => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts3 == 0 = false => count(s(^f136($n; xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts4 == s(xts3) = false => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true

+++ treating clause
	xts3 == xts2 = false => count(s(s(s(xts3))), xts1 .. nil) <= s(s(s(0))) = true
+++ inductive narrowing on conjecture
	xts3 == xts2 = false => count(s(s(s(xts3))), xts1 .. nil) <= s(s(s(0))) = true
... induction variables of
	xts3 == xts2 = false => count(s(s(s(xts3))), xts1 .. nil) <= s(s(s(0))) = true
... are:
	xts2:nat
	xts3:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	xts3 == xts2 = false => count(s(s(s(xts3))), xts1 .. nil) <= s(s(s(0))) = true
... with variable xts2
+++ creating new conjecture
	xts2 == 0 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) = true
+++ creating new conjecture
	xts3 == s(xts2) = false => count(s(s(s(xts3))), xts1 .. nil) <= s(s(s(0))) = true
+++ inductive narrowing succeeded
--- clause
	xts3 == xts2 = false => count(s(s(s(xts3))), xts1 .. nil) <= s(s(s(0))) = true
... oriented to rule
	xts2 == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
+++ added new clause(s)
	xts2 == 0 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == s(xts2) = false => count(s(s(s(xts3))), xts1 .. nil) <= s(s(s(0))) = true
... to conjectures

+++ Status of the Inference System
--- Conjectures:
	xts2 == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) = true
	xts3 == s(xts2) = true => count(s(s(xts3)), xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == s(xts2) = false => count(s(s(xts3)), xts1 .. nil) <= s(s(s(0))) = true
	s(s(xts3)) == xts2 = true => count(s(s(s(xts3))), xts1 .. nil) <= s(s(0)) = true
	s(s(xts3)) == xts2 = false => count(s(s(s(xts3))), xts1 .. nil) <= s(s(s(0))) = true
	s(0) == xts2 = true => count(s(s(0)), xts1 .. nil) <= s(s(0)) = true
	count(s(s(0)), xts .. nil) <= s(s(s(0))) = true
	s(0) == xts2 = false => count(s(s(0)), xts1 .. nil) <= s(s(s(0))) = true
	count(s(s(s(s(xts3)))), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	count(s(s(s(0))), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	0 == xts2 = true => count(s(s(0)), xts1 .. nil) <= s(0) = true
	count(s(s(0)), xts .. nil) <= s(s(0)) = true
	0 == xts2 = false => count(s(s(0)), xts1 .. nil) <= s(s(0)) = true
	s(s(s(0))) == xts2 = true => count(s(s(s(0))), xts1 .. nil) <= s(0) = true
	s(s(s(0))) == xts2 = false => count(s(s(s(0))), xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) = true
	xts3 == s(xts2) = true => count(s(s(s(xts3))), xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == s(xts2) = false => count(s(s(s(xts3))), xts1 .. nil) <= s(s(s(0))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	count(x, xs) <= len(xs) -> true
	count(x, xts .. yts) <= s(len(yts)) -> true
	0 == xts = true => count(0, xts .. nil) <= s(0) -> true
	count(x, xts2 .. xts1 .. yts) <= s(s(len(yts))) -> true
	0 == xts = true => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = true => count(s(0), xts .. nil) <= s(0) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = true => count(s(0), xts .. nil) <= s(s(0)) -> true
	s(0) == xts = true => count(s(0), xts .. nil) <= s(0) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(s(0))) -> true
	0 == xts = false => count(s(0), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	s(0) == xts = true => count(s(0), xts .. nil) <= s(s(0)) -> true
	s(0) == xts = true => count(s(s(0)), xts .. nil) <= s(0) -> true
	0 == xts = false => count(s(0), xts .. nil) <= s(s(s(0))) -> true
	s(0) == xts = false => count(s(0), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	count(x, xts3 .. xts2 .. xts1 .. yts) <= s(s(s(len(yts)))) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	0 == xts = true => count(0, xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(0)) == xts = true => count(s(s(0)), xts .. nil) <= s(0) -> true
	s(0) == xts = false => count(s(0), xts .. nil) <= s(s(s(0))) -> true
	s(0) == xts = false => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	xts == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	s(s(0)) == xts = true => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	0 == xts = false => count(0, xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(0)) == xts = false => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	s(s(0)) == xts = false => count(s(s(0)), xts .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	xts2 == s(xts1) = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(xts2)) == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(xts2)) == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = false => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(s(xts2))) == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(s(xts2))) == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> yts
	^f0($n0 + 1; yts, xts@) -> xts$n0 .. ^f0($n0; yts, xts@)
	^f1(0; yts) -> len(yts)
	^f1($n1 + 1; yts) -> s(^f1($n1; yts))
	^f136(0; xts) -> xts
	^f136($n136 + 1; xts) -> s(^f136($n136; xts))
+++ }
+++ Lemma(s)           = 
	count(x, xts$n .. ^f0($n; yts, xts@)) <= s(^f1($n; yts)) = true
	xts3 == xts2 = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(0) = true
	xts3 == xts2 = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = true => count(s(^f136($n; xts2)), xts1 .. nil) <= s(0) = true
	xts3 == s(xts2) = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(0) = true
	xts2 == 0 = false => count(s(^f136($n; xts2)), xts1 .. nil) <= s(s(0)) = true
	xts3 == s(xts2) = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true
	xts4 == xts3 = true => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts4 == xts3 = false => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts3 == 0 = true => count(s(^f136($n; xts3)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts4 == s(xts3) = true => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts3 == 0 = false => count(s(^f136($n; xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts4 == s(xts3) = false => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true

+++ treating clause
	xts2 == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) = true
+++ inductive narrowing on conjecture
	xts2 == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) = true
... induction variables of
	xts2 == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) = true
... are:
	xts2:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	xts2 == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) = true
... with variable xts2
+++ creating new conjecture
	0 == 0 = true => count(s(s(0)), xts .. nil) <= s(s(0)) = true
+++ creating new conjecture
	s(xts2) == 0 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) = true
--- clause
	0 == 0 = true => count(s(s(0)), xts .. nil) <= s(s(0)) = true
... reduced in 1 step to
	count(s(s(0)), xts .. nil) <= s(s(0)) = true
--- clause
	s(xts2) == 0 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) = true
... reduced in 1 step to
	false = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) = true
--- clause
	false = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) = true
... contains a ground negative condition
	false = true
... and is therefore discarded (false => t is always true)
--- clause
	count(s(s(0)), xts .. nil) <= s(s(0)) = true
... subsumed by an existing conjecture
+++ inductive narrowing succeeded
--- clause
	xts2 == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) = true
... oriented to rule
	xts == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true

+++ Status of the Inference System
--- Conjectures:
	xts3 == s(xts2) = true => count(s(s(xts3)), xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == s(xts2) = false => count(s(s(xts3)), xts1 .. nil) <= s(s(s(0))) = true
	s(s(xts3)) == xts2 = true => count(s(s(s(xts3))), xts1 .. nil) <= s(s(0)) = true
	s(s(xts3)) == xts2 = false => count(s(s(s(xts3))), xts1 .. nil) <= s(s(s(0))) = true
	s(0) == xts2 = true => count(s(s(0)), xts1 .. nil) <= s(s(0)) = true
	count(s(s(0)), xts .. nil) <= s(s(s(0))) = true
	s(0) == xts2 = false => count(s(s(0)), xts1 .. nil) <= s(s(s(0))) = true
	count(s(s(s(s(xts3)))), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	count(s(s(s(0))), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	0 == xts2 = true => count(s(s(0)), xts1 .. nil) <= s(0) = true
	count(s(s(0)), xts .. nil) <= s(s(0)) = true
	0 == xts2 = false => count(s(s(0)), xts1 .. nil) <= s(s(0)) = true
	s(s(s(0))) == xts2 = true => count(s(s(s(0))), xts1 .. nil) <= s(0) = true
	s(s(s(0))) == xts2 = false => count(s(s(s(0))), xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) = true
	xts3 == s(xts2) = true => count(s(s(s(xts3))), xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == s(xts2) = false => count(s(s(s(xts3))), xts1 .. nil) <= s(s(s(0))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	count(x, xs) <= len(xs) -> true
	count(x, xts .. yts) <= s(len(yts)) -> true
	0 == xts = true => count(0, xts .. nil) <= s(0) -> true
	count(x, xts2 .. xts1 .. yts) <= s(s(len(yts))) -> true
	0 == xts = true => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = true => count(s(0), xts .. nil) <= s(0) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = true => count(s(0), xts .. nil) <= s(s(0)) -> true
	s(0) == xts = true => count(s(0), xts .. nil) <= s(0) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(s(0))) -> true
	0 == xts = false => count(s(0), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	s(0) == xts = true => count(s(0), xts .. nil) <= s(s(0)) -> true
	s(0) == xts = true => count(s(s(0)), xts .. nil) <= s(0) -> true
	0 == xts = false => count(s(0), xts .. nil) <= s(s(s(0))) -> true
	s(0) == xts = false => count(s(0), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	count(x, xts3 .. xts2 .. xts1 .. yts) <= s(s(s(len(yts)))) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	0 == xts = true => count(0, xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(0)) == xts = true => count(s(s(0)), xts .. nil) <= s(0) -> true
	s(0) == xts = false => count(s(0), xts .. nil) <= s(s(s(0))) -> true
	s(0) == xts = false => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	xts == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	s(s(0)) == xts = true => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	0 == xts = false => count(0, xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(0)) == xts = false => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	s(s(0)) == xts = false => count(s(s(0)), xts .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	xts2 == s(xts1) = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(xts2)) == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(xts2)) == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = false => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(s(xts2))) == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(s(xts2))) == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> yts
	^f0($n0 + 1; yts, xts@) -> xts$n0 .. ^f0($n0; yts, xts@)
	^f1(0; yts) -> len(yts)
	^f1($n1 + 1; yts) -> s(^f1($n1; yts))
	^f136(0; xts) -> xts
	^f136($n136 + 1; xts) -> s(^f136($n136; xts))
+++ }
+++ Lemma(s)           = 
	count(x, xts$n .. ^f0($n; yts, xts@)) <= s(^f1($n; yts)) = true
	xts3 == xts2 = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(0) = true
	xts3 == xts2 = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = true => count(s(^f136($n; xts2)), xts1 .. nil) <= s(0) = true
	xts3 == s(xts2) = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(0) = true
	xts2 == 0 = false => count(s(^f136($n; xts2)), xts1 .. nil) <= s(s(0)) = true
	xts3 == s(xts2) = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true
	xts4 == xts3 = true => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts4 == xts3 = false => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts3 == 0 = true => count(s(^f136($n; xts3)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts4 == s(xts3) = true => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts3 == 0 = false => count(s(^f136($n; xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts4 == s(xts3) = false => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true

+++ treating clause
	xts3 == s(xts2) = true => count(s(s(xts3)), xts1 .. nil) <= s(s(0)) = true
+++ inductive narrowing on conjecture
	xts3 == s(xts2) = true => count(s(s(xts3)), xts1 .. nil) <= s(s(0)) = true
... induction variables of
	xts3 == s(xts2) = true => count(s(s(xts3)), xts1 .. nil) <= s(s(0)) = true
... are:
	xts3:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	xts3 == s(xts2) = true => count(s(s(xts3)), xts1 .. nil) <= s(s(0)) = true
... with variable xts3
+++ creating new conjecture
	0 == s(xts2) = true => count(s(s(0)), xts1 .. nil) <= s(s(0)) = true
+++ creating new conjecture
	s(xts3) == s(xts2) = true => count(s(s(s(xts3))), xts1 .. nil) <= s(s(0)) = true
--- clause
	0 == s(xts2) = true => count(s(s(0)), xts1 .. nil) <= s(s(0)) = true
... reduced in 1 step to
	false = true => count(s(s(0)), xts .. nil) <= s(s(0)) = true
--- clause
	false = true => count(s(s(0)), xts .. nil) <= s(s(0)) = true
... contains a ground negative condition
	false = true
... and is therefore discarded (false => t is always true)
--- clause
	s(xts3) == s(xts2) = true => count(s(s(s(xts3))), xts1 .. nil) <= s(s(0)) = true
... reduced in 1 step to
	xts3 == xts2 = true => count(s(s(s(xts3))), xts1 .. nil) <= s(s(0)) = true
+++ inductive narrowing succeeded
--- clause
	xts3 == s(xts2) = true => count(s(s(xts3)), xts1 .. nil) <= s(s(0)) = true
... oriented to rule
	xts2 == s(xts1) = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
+++ added new clause(s)
	xts3 == xts2 = true => count(s(s(s(xts3))), xts1 .. nil) <= s(s(0)) = true
... to conjectures

+++ Status of the Inference System
--- Conjectures:
	xts2 == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == s(xts2) = false => count(s(s(xts3)), xts1 .. nil) <= s(s(s(0))) = true
	s(s(xts3)) == xts2 = true => count(s(s(s(xts3))), xts1 .. nil) <= s(s(0)) = true
	s(s(xts3)) == xts2 = false => count(s(s(s(xts3))), xts1 .. nil) <= s(s(s(0))) = true
	s(0) == xts2 = true => count(s(s(0)), xts1 .. nil) <= s(s(0)) = true
	count(s(s(0)), xts .. nil) <= s(s(s(0))) = true
	s(0) == xts2 = false => count(s(s(0)), xts1 .. nil) <= s(s(s(0))) = true
	count(s(s(s(s(xts3)))), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	count(s(s(s(0))), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	0 == xts2 = true => count(s(s(0)), xts1 .. nil) <= s(0) = true
	count(s(s(0)), xts .. nil) <= s(s(0)) = true
	0 == xts2 = false => count(s(s(0)), xts1 .. nil) <= s(s(0)) = true
	s(s(s(0))) == xts2 = true => count(s(s(s(0))), xts1 .. nil) <= s(0) = true
	s(s(s(0))) == xts2 = false => count(s(s(s(0))), xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) = true
	xts3 == s(xts2) = true => count(s(s(s(xts3))), xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == s(xts2) = false => count(s(s(s(xts3))), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == xts2 = true => count(s(s(s(xts3))), xts1 .. nil) <= s(s(0)) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	count(x, xs) <= len(xs) -> true
	count(x, xts .. yts) <= s(len(yts)) -> true
	0 == xts = true => count(0, xts .. nil) <= s(0) -> true
	count(x, xts2 .. xts1 .. yts) <= s(s(len(yts))) -> true
	0 == xts = true => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = true => count(s(0), xts .. nil) <= s(0) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = true => count(s(0), xts .. nil) <= s(s(0)) -> true
	s(0) == xts = true => count(s(0), xts .. nil) <= s(0) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(s(0))) -> true
	0 == xts = false => count(s(0), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	s(0) == xts = true => count(s(0), xts .. nil) <= s(s(0)) -> true
	s(0) == xts = true => count(s(s(0)), xts .. nil) <= s(0) -> true
	0 == xts = false => count(s(0), xts .. nil) <= s(s(s(0))) -> true
	s(0) == xts = false => count(s(0), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	count(x, xts3 .. xts2 .. xts1 .. yts) <= s(s(s(len(yts)))) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	0 == xts = true => count(0, xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(0)) == xts = true => count(s(s(0)), xts .. nil) <= s(0) -> true
	s(0) == xts = false => count(s(0), xts .. nil) <= s(s(s(0))) -> true
	s(0) == xts = false => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	xts == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	s(s(0)) == xts = true => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	0 == xts = false => count(0, xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(0)) == xts = false => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	s(s(0)) == xts = false => count(s(s(0)), xts .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	xts2 == s(xts1) = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(xts2)) == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(xts2)) == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = false => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(s(xts2))) == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(s(xts2))) == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> yts
	^f0($n0 + 1; yts, xts@) -> xts$n0 .. ^f0($n0; yts, xts@)
	^f1(0; yts) -> len(yts)
	^f1($n1 + 1; yts) -> s(^f1($n1; yts))
	^f136(0; xts) -> xts
	^f136($n136 + 1; xts) -> s(^f136($n136; xts))
+++ }
+++ Lemma(s)           = 
	count(x, xts$n .. ^f0($n; yts, xts@)) <= s(^f1($n; yts)) = true
	xts3 == xts2 = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(0) = true
	xts3 == xts2 = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = true => count(s(^f136($n; xts2)), xts1 .. nil) <= s(0) = true
	xts3 == s(xts2) = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(0) = true
	xts2 == 0 = false => count(s(^f136($n; xts2)), xts1 .. nil) <= s(s(0)) = true
	xts3 == s(xts2) = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true
	xts4 == xts3 = true => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts4 == xts3 = false => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts3 == 0 = true => count(s(^f136($n; xts3)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts4 == s(xts3) = true => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts3 == 0 = false => count(s(^f136($n; xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts4 == s(xts3) = false => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true

+++ treating clause
	xts2 == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) = true
+++ inductive narrowing on conjecture
	xts2 == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) = true
... induction variables of
	xts2 == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) = true
... are:
	xts2:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	xts2 == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) = true
... with variable xts2
+++ creating new conjecture
	0 == 0 = false => count(s(s(0)), xts .. nil) <= s(s(s(0))) = true
+++ creating new conjecture
	s(xts2) == 0 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) = true
--- clause
	0 == 0 = false => count(s(s(0)), xts .. nil) <= s(s(s(0))) = true
... reduced in 1 step to
	true = false => count(s(s(0)), xts .. nil) <= s(s(s(0))) = true
--- clause
	true = false => count(s(s(0)), xts .. nil) <= s(s(s(0))) = true
... contains a ground negative condition
	true = false
... and is therefore discarded (false => t is always true)
--- clause
	s(xts2) == 0 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) = true
... reduced in 1 step to
	count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) = true
+++ inductive narrowing succeeded
--- clause
	xts2 == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) = true
... oriented to rule
	xts == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
+++ added new clause(s)
	count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) = true
... to conjectures

+++ Status of the Inference System
--- Conjectures:
	xts3 == s(xts2) = false => count(s(s(xts3)), xts1 .. nil) <= s(s(s(0))) = true
	s(s(xts3)) == xts2 = true => count(s(s(s(xts3))), xts1 .. nil) <= s(s(0)) = true
	s(s(xts3)) == xts2 = false => count(s(s(s(xts3))), xts1 .. nil) <= s(s(s(0))) = true
	s(0) == xts2 = true => count(s(s(0)), xts1 .. nil) <= s(s(0)) = true
	count(s(s(0)), xts .. nil) <= s(s(s(0))) = true
	s(0) == xts2 = false => count(s(s(0)), xts1 .. nil) <= s(s(s(0))) = true
	count(s(s(s(s(xts3)))), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	count(s(s(s(0))), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	0 == xts2 = true => count(s(s(0)), xts1 .. nil) <= s(0) = true
	count(s(s(0)), xts .. nil) <= s(s(0)) = true
	0 == xts2 = false => count(s(s(0)), xts1 .. nil) <= s(s(0)) = true
	s(s(s(0))) == xts2 = true => count(s(s(s(0))), xts1 .. nil) <= s(0) = true
	s(s(s(0))) == xts2 = false => count(s(s(s(0))), xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) = true
	xts3 == s(xts2) = true => count(s(s(s(xts3))), xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == s(xts2) = false => count(s(s(s(xts3))), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == xts2 = true => count(s(s(s(xts3))), xts1 .. nil) <= s(s(0)) = true
	count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	count(x, xs) <= len(xs) -> true
	count(x, xts .. yts) <= s(len(yts)) -> true
	0 == xts = true => count(0, xts .. nil) <= s(0) -> true
	count(x, xts2 .. xts1 .. yts) <= s(s(len(yts))) -> true
	0 == xts = true => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = true => count(s(0), xts .. nil) <= s(0) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = true => count(s(0), xts .. nil) <= s(s(0)) -> true
	s(0) == xts = true => count(s(0), xts .. nil) <= s(0) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(s(0))) -> true
	0 == xts = false => count(s(0), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	s(0) == xts = true => count(s(0), xts .. nil) <= s(s(0)) -> true
	s(0) == xts = true => count(s(s(0)), xts .. nil) <= s(0) -> true
	0 == xts = false => count(s(0), xts .. nil) <= s(s(s(0))) -> true
	s(0) == xts = false => count(s(0), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	count(x, xts3 .. xts2 .. xts1 .. yts) <= s(s(s(len(yts)))) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	0 == xts = true => count(0, xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(0)) == xts = true => count(s(s(0)), xts .. nil) <= s(0) -> true
	s(0) == xts = false => count(s(0), xts .. nil) <= s(s(s(0))) -> true
	s(0) == xts = false => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	xts == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	s(s(0)) == xts = true => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	0 == xts = false => count(0, xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(0)) == xts = false => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	s(s(0)) == xts = false => count(s(s(0)), xts .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	xts2 == s(xts1) = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(xts2)) == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(xts2)) == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = false => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(s(xts2))) == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(s(xts2))) == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> yts
	^f0($n0 + 1; yts, xts@) -> xts$n0 .. ^f0($n0; yts, xts@)
	^f1(0; yts) -> len(yts)
	^f1($n1 + 1; yts) -> s(^f1($n1; yts))
	^f136(0; xts) -> xts
	^f136($n136 + 1; xts) -> s(^f136($n136; xts))
+++ }
+++ Lemma(s)           = 
	count(x, xts$n .. ^f0($n; yts, xts@)) <= s(^f1($n; yts)) = true
	xts3 == xts2 = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(0) = true
	xts3 == xts2 = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = true => count(s(^f136($n; xts2)), xts1 .. nil) <= s(0) = true
	xts3 == s(xts2) = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(0) = true
	xts2 == 0 = false => count(s(^f136($n; xts2)), xts1 .. nil) <= s(s(0)) = true
	xts3 == s(xts2) = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true
	xts4 == xts3 = true => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts4 == xts3 = false => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts3 == 0 = true => count(s(^f136($n; xts3)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts4 == s(xts3) = true => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts3 == 0 = false => count(s(^f136($n; xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts4 == s(xts3) = false => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true

+++ treating clause
	xts3 == s(xts2) = false => count(s(s(xts3)), xts1 .. nil) <= s(s(s(0))) = true
+++ inductive narrowing on conjecture
	xts3 == s(xts2) = false => count(s(s(xts3)), xts1 .. nil) <= s(s(s(0))) = true
... induction variables of
	xts3 == s(xts2) = false => count(s(s(xts3)), xts1 .. nil) <= s(s(s(0))) = true
... are:
	xts3:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	xts3 == s(xts2) = false => count(s(s(xts3)), xts1 .. nil) <= s(s(s(0))) = true
... with variable xts3
+++ creating new conjecture
	0 == s(xts2) = false => count(s(s(0)), xts1 .. nil) <= s(s(s(0))) = true
+++ creating new conjecture
	s(xts3) == s(xts2) = false => count(s(s(s(xts3))), xts1 .. nil) <= s(s(s(0))) = true
--- clause
	0 == s(xts2) = false => count(s(s(0)), xts1 .. nil) <= s(s(s(0))) = true
... reduced in 1 step to
	count(s(s(0)), xts .. nil) <= s(s(s(0))) = true
--- clause
	s(xts3) == s(xts2) = false => count(s(s(s(xts3))), xts1 .. nil) <= s(s(s(0))) = true
... reduced in 1 step to
	xts3 == xts2 = false => count(s(s(s(xts3))), xts1 .. nil) <= s(s(s(0))) = true
--- clause
	count(s(s(0)), xts .. nil) <= s(s(s(0))) = true
... subsumed by an existing conjecture
+++ inductive narrowing succeeded
--- clause
	xts3 == s(xts2) = false => count(s(s(xts3)), xts1 .. nil) <= s(s(s(0))) = true
... oriented to rule
	xts2 == s(xts1) = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
+++ added new clause(s)
	xts3 == xts2 = false => count(s(s(s(xts3))), xts1 .. nil) <= s(s(s(0))) = true
... to conjectures

+++ Status of the Inference System
--- Conjectures:
	s(s(xts3)) == xts2 = true => count(s(s(s(xts3))), xts1 .. nil) <= s(s(0)) = true
	s(s(xts3)) == xts2 = false => count(s(s(s(xts3))), xts1 .. nil) <= s(s(s(0))) = true
	s(0) == xts2 = true => count(s(s(0)), xts1 .. nil) <= s(s(0)) = true
	count(s(s(0)), xts .. nil) <= s(s(s(0))) = true
	s(0) == xts2 = false => count(s(s(0)), xts1 .. nil) <= s(s(s(0))) = true
	count(s(s(s(s(xts3)))), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	count(s(s(s(0))), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	0 == xts2 = true => count(s(s(0)), xts1 .. nil) <= s(0) = true
	count(s(s(0)), xts .. nil) <= s(s(0)) = true
	0 == xts2 = false => count(s(s(0)), xts1 .. nil) <= s(s(0)) = true
	s(s(s(0))) == xts2 = true => count(s(s(s(0))), xts1 .. nil) <= s(0) = true
	s(s(s(0))) == xts2 = false => count(s(s(s(0))), xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) = true
	xts3 == s(xts2) = true => count(s(s(s(xts3))), xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == s(xts2) = false => count(s(s(s(xts3))), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == xts2 = true => count(s(s(s(xts3))), xts1 .. nil) <= s(s(0)) = true
	count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == xts2 = false => count(s(s(s(xts3))), xts1 .. nil) <= s(s(s(0))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	count(x, xs) <= len(xs) -> true
	count(x, xts .. yts) <= s(len(yts)) -> true
	0 == xts = true => count(0, xts .. nil) <= s(0) -> true
	count(x, xts2 .. xts1 .. yts) <= s(s(len(yts))) -> true
	0 == xts = true => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = true => count(s(0), xts .. nil) <= s(0) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = true => count(s(0), xts .. nil) <= s(s(0)) -> true
	s(0) == xts = true => count(s(0), xts .. nil) <= s(0) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(s(0))) -> true
	0 == xts = false => count(s(0), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	s(0) == xts = true => count(s(0), xts .. nil) <= s(s(0)) -> true
	s(0) == xts = true => count(s(s(0)), xts .. nil) <= s(0) -> true
	0 == xts = false => count(s(0), xts .. nil) <= s(s(s(0))) -> true
	s(0) == xts = false => count(s(0), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	count(x, xts3 .. xts2 .. xts1 .. yts) <= s(s(s(len(yts)))) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	0 == xts = true => count(0, xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(0)) == xts = true => count(s(s(0)), xts .. nil) <= s(0) -> true
	s(0) == xts = false => count(s(0), xts .. nil) <= s(s(s(0))) -> true
	s(0) == xts = false => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	xts == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	s(s(0)) == xts = true => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	0 == xts = false => count(0, xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(0)) == xts = false => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	s(s(0)) == xts = false => count(s(s(0)), xts .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	xts2 == s(xts1) = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(xts2)) == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(xts2)) == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = false => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(s(xts2))) == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(s(xts2))) == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> yts
	^f0($n0 + 1; yts, xts@) -> xts$n0 .. ^f0($n0; yts, xts@)
	^f1(0; yts) -> len(yts)
	^f1($n1 + 1; yts) -> s(^f1($n1; yts))
	^f136(0; xts) -> xts
	^f136($n136 + 1; xts) -> s(^f136($n136; xts))
+++ }
+++ Lemma(s)           = 
	count(x, xts$n .. ^f0($n; yts, xts@)) <= s(^f1($n; yts)) = true
	xts3 == xts2 = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(0) = true
	xts3 == xts2 = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = true => count(s(^f136($n; xts2)), xts1 .. nil) <= s(0) = true
	xts3 == s(xts2) = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(0) = true
	xts2 == 0 = false => count(s(^f136($n; xts2)), xts1 .. nil) <= s(s(0)) = true
	xts3 == s(xts2) = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true
	xts4 == xts3 = true => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts4 == xts3 = false => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts3 == 0 = true => count(s(^f136($n; xts3)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts4 == s(xts3) = true => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts3 == 0 = false => count(s(^f136($n; xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts4 == s(xts3) = false => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true

+++ treating clause
	s(s(xts3)) == xts2 = true => count(s(s(s(xts3))), xts1 .. nil) <= s(s(0)) = true
+++ inductive narrowing on conjecture
	s(s(xts3)) == xts2 = true => count(s(s(s(xts3))), xts1 .. nil) <= s(s(0)) = true
... induction variables of
	s(s(xts3)) == xts2 = true => count(s(s(s(xts3))), xts1 .. nil) <= s(s(0)) = true
... are:
	xts2:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	s(s(xts3)) == xts2 = true => count(s(s(s(xts3))), xts1 .. nil) <= s(s(0)) = true
... with variable xts2
+++ creating new conjecture
	s(s(xts2)) == 0 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) = true
+++ creating new conjecture
	s(s(xts3)) == s(xts2) = true => count(s(s(s(xts3))), xts1 .. nil) <= s(s(0)) = true
--- clause
	s(s(xts2)) == 0 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) = true
... reduced in 1 step to
	false = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) = true
--- clause
	false = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) = true
... contains a ground negative condition
	false = true
... and is therefore discarded (false => t is always true)
--- clause
	s(s(xts3)) == s(xts2) = true => count(s(s(s(xts3))), xts1 .. nil) <= s(s(0)) = true
... reduced in 1 step to
	s(xts3) == xts2 = true => count(s(s(s(xts3))), xts1 .. nil) <= s(s(0)) = true
+++ inductive narrowing succeeded
--- clause
	s(s(xts3)) == xts2 = true => count(s(s(s(xts3))), xts1 .. nil) <= s(s(0)) = true
... oriented to rule
	s(s(xts2)) == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
+++ added new clause(s)
	s(xts3) == xts2 = true => count(s(s(s(xts3))), xts1 .. nil) <= s(s(0)) = true
... to conjectures

+++ Status of the Inference System
--- Conjectures:
	s(s(xts3)) == xts2 = false => count(s(s(s(xts3))), xts1 .. nil) <= s(s(s(0))) = true
	s(0) == xts2 = true => count(s(s(0)), xts1 .. nil) <= s(s(0)) = true
	count(s(s(0)), xts .. nil) <= s(s(s(0))) = true
	s(0) == xts2 = false => count(s(s(0)), xts1 .. nil) <= s(s(s(0))) = true
	count(s(s(s(s(xts3)))), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	count(s(s(s(0))), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	0 == xts2 = true => count(s(s(0)), xts1 .. nil) <= s(0) = true
	count(s(s(0)), xts .. nil) <= s(s(0)) = true
	0 == xts2 = false => count(s(s(0)), xts1 .. nil) <= s(s(0)) = true
	s(s(s(0))) == xts2 = true => count(s(s(s(0))), xts1 .. nil) <= s(0) = true
	s(s(s(0))) == xts2 = false => count(s(s(s(0))), xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) = true
	xts3 == s(xts2) = true => count(s(s(s(xts3))), xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == s(xts2) = false => count(s(s(s(xts3))), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == xts2 = true => count(s(s(s(xts3))), xts1 .. nil) <= s(s(0)) = true
	count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == xts2 = false => count(s(s(s(xts3))), xts1 .. nil) <= s(s(s(0))) = true
	s(xts3) == xts2 = true => count(s(s(s(xts3))), xts1 .. nil) <= s(s(0)) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	count(x, xs) <= len(xs) -> true
	count(x, xts .. yts) <= s(len(yts)) -> true
	0 == xts = true => count(0, xts .. nil) <= s(0) -> true
	count(x, xts2 .. xts1 .. yts) <= s(s(len(yts))) -> true
	0 == xts = true => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = true => count(s(0), xts .. nil) <= s(0) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = true => count(s(0), xts .. nil) <= s(s(0)) -> true
	s(0) == xts = true => count(s(0), xts .. nil) <= s(0) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(s(0))) -> true
	0 == xts = false => count(s(0), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	s(0) == xts = true => count(s(0), xts .. nil) <= s(s(0)) -> true
	s(0) == xts = true => count(s(s(0)), xts .. nil) <= s(0) -> true
	0 == xts = false => count(s(0), xts .. nil) <= s(s(s(0))) -> true
	s(0) == xts = false => count(s(0), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	count(x, xts3 .. xts2 .. xts1 .. yts) <= s(s(s(len(yts)))) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	0 == xts = true => count(0, xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(0)) == xts = true => count(s(s(0)), xts .. nil) <= s(0) -> true
	s(0) == xts = false => count(s(0), xts .. nil) <= s(s(s(0))) -> true
	s(0) == xts = false => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	xts == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	s(s(0)) == xts = true => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	0 == xts = false => count(0, xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(0)) == xts = false => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	s(s(0)) == xts = false => count(s(s(0)), xts .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	xts2 == s(xts1) = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(xts2)) == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(xts2)) == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(xts2)) == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = false => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(s(xts2))) == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(s(xts2))) == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> yts
	^f0($n0 + 1; yts, xts@) -> xts$n0 .. ^f0($n0; yts, xts@)
	^f1(0; yts) -> len(yts)
	^f1($n1 + 1; yts) -> s(^f1($n1; yts))
	^f136(0; xts) -> xts
	^f136($n136 + 1; xts) -> s(^f136($n136; xts))
+++ }
+++ Lemma(s)           = 
	count(x, xts$n .. ^f0($n; yts, xts@)) <= s(^f1($n; yts)) = true
	xts3 == xts2 = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(0) = true
	xts3 == xts2 = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = true => count(s(^f136($n; xts2)), xts1 .. nil) <= s(0) = true
	xts3 == s(xts2) = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(0) = true
	xts2 == 0 = false => count(s(^f136($n; xts2)), xts1 .. nil) <= s(s(0)) = true
	xts3 == s(xts2) = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true
	xts4 == xts3 = true => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts4 == xts3 = false => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts3 == 0 = true => count(s(^f136($n; xts3)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts4 == s(xts3) = true => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts3 == 0 = false => count(s(^f136($n; xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts4 == s(xts3) = false => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true

+++ treating clause
	s(s(xts3)) == xts2 = false => count(s(s(s(xts3))), xts1 .. nil) <= s(s(s(0))) = true
+++ inductive narrowing on conjecture
	s(s(xts3)) == xts2 = false => count(s(s(s(xts3))), xts1 .. nil) <= s(s(s(0))) = true
... induction variables of
	s(s(xts3)) == xts2 = false => count(s(s(s(xts3))), xts1 .. nil) <= s(s(s(0))) = true
... are:
	xts2:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	s(s(xts3)) == xts2 = false => count(s(s(s(xts3))), xts1 .. nil) <= s(s(s(0))) = true
... with variable xts2
+++ creating new conjecture
	s(s(xts2)) == 0 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) = true
+++ creating new conjecture
	s(s(xts3)) == s(xts2) = false => count(s(s(s(xts3))), xts1 .. nil) <= s(s(s(0))) = true
--- clause
	s(s(xts2)) == 0 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) = true
... reduced in 1 step to
	count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) = true
--- clause
	s(s(xts3)) == s(xts2) = false => count(s(s(s(xts3))), xts1 .. nil) <= s(s(s(0))) = true
... reduced in 1 step to
	s(xts3) == xts2 = false => count(s(s(s(xts3))), xts1 .. nil) <= s(s(s(0))) = true
--- clause
	count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) = true
... subsumed by an existing conjecture
+++ inductive narrowing succeeded
--- clause
	s(s(xts3)) == xts2 = false => count(s(s(s(xts3))), xts1 .. nil) <= s(s(s(0))) = true
... oriented to rule
	s(s(xts2)) == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
+++ added new clause(s)
	s(xts3) == xts2 = false => count(s(s(s(xts3))), xts1 .. nil) <= s(s(s(0))) = true
... to conjectures

+++ Status of the Inference System
--- Conjectures:
	s(0) == xts2 = true => count(s(s(0)), xts1 .. nil) <= s(s(0)) = true
	count(s(s(0)), xts .. nil) <= s(s(s(0))) = true
	s(0) == xts2 = false => count(s(s(0)), xts1 .. nil) <= s(s(s(0))) = true
	count(s(s(s(s(xts3)))), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	count(s(s(s(0))), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	0 == xts2 = true => count(s(s(0)), xts1 .. nil) <= s(0) = true
	count(s(s(0)), xts .. nil) <= s(s(0)) = true
	0 == xts2 = false => count(s(s(0)), xts1 .. nil) <= s(s(0)) = true
	s(s(s(0))) == xts2 = true => count(s(s(s(0))), xts1 .. nil) <= s(0) = true
	s(s(s(0))) == xts2 = false => count(s(s(s(0))), xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) = true
	xts3 == s(xts2) = true => count(s(s(s(xts3))), xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == s(xts2) = false => count(s(s(s(xts3))), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == xts2 = true => count(s(s(s(xts3))), xts1 .. nil) <= s(s(0)) = true
	count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == xts2 = false => count(s(s(s(xts3))), xts1 .. nil) <= s(s(s(0))) = true
	s(xts3) == xts2 = true => count(s(s(s(xts3))), xts1 .. nil) <= s(s(0)) = true
	s(xts3) == xts2 = false => count(s(s(s(xts3))), xts1 .. nil) <= s(s(s(0))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	count(x, xs) <= len(xs) -> true
	count(x, xts .. yts) <= s(len(yts)) -> true
	0 == xts = true => count(0, xts .. nil) <= s(0) -> true
	count(x, xts2 .. xts1 .. yts) <= s(s(len(yts))) -> true
	0 == xts = true => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = true => count(s(0), xts .. nil) <= s(0) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = true => count(s(0), xts .. nil) <= s(s(0)) -> true
	s(0) == xts = true => count(s(0), xts .. nil) <= s(0) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(s(0))) -> true
	0 == xts = false => count(s(0), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	s(0) == xts = true => count(s(0), xts .. nil) <= s(s(0)) -> true
	s(0) == xts = true => count(s(s(0)), xts .. nil) <= s(0) -> true
	0 == xts = false => count(s(0), xts .. nil) <= s(s(s(0))) -> true
	s(0) == xts = false => count(s(0), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	count(x, xts3 .. xts2 .. xts1 .. yts) <= s(s(s(len(yts)))) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	0 == xts = true => count(0, xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(0)) == xts = true => count(s(s(0)), xts .. nil) <= s(0) -> true
	s(0) == xts = false => count(s(0), xts .. nil) <= s(s(s(0))) -> true
	s(0) == xts = false => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	xts == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	s(s(0)) == xts = true => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	0 == xts = false => count(0, xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(0)) == xts = false => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	s(s(0)) == xts = false => count(s(s(0)), xts .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	xts2 == s(xts1) = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(xts2)) == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(xts2)) == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(xts2)) == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = false => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(s(xts2))) == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(xts2)) == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(s(xts2))) == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> yts
	^f0($n0 + 1; yts, xts@) -> xts$n0 .. ^f0($n0; yts, xts@)
	^f1(0; yts) -> len(yts)
	^f1($n1 + 1; yts) -> s(^f1($n1; yts))
	^f136(0; xts) -> xts
	^f136($n136 + 1; xts) -> s(^f136($n136; xts))
+++ }
+++ Lemma(s)           = 
	count(x, xts$n .. ^f0($n; yts, xts@)) <= s(^f1($n; yts)) = true
	xts3 == xts2 = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(0) = true
	xts3 == xts2 = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = true => count(s(^f136($n; xts2)), xts1 .. nil) <= s(0) = true
	xts3 == s(xts2) = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(0) = true
	xts2 == 0 = false => count(s(^f136($n; xts2)), xts1 .. nil) <= s(s(0)) = true
	xts3 == s(xts2) = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true
	xts4 == xts3 = true => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts4 == xts3 = false => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts3 == 0 = true => count(s(^f136($n; xts3)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts4 == s(xts3) = true => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts3 == 0 = false => count(s(^f136($n; xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts4 == s(xts3) = false => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true

+++ treating clause
	s(0) == xts2 = true => count(s(s(0)), xts1 .. nil) <= s(s(0)) = true
+++ inductive narrowing on conjecture
	s(0) == xts2 = true => count(s(s(0)), xts1 .. nil) <= s(s(0)) = true
... induction variables of
	s(0) == xts2 = true => count(s(s(0)), xts1 .. nil) <= s(s(0)) = true
... are:
	xts2:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	s(0) == xts2 = true => count(s(s(0)), xts1 .. nil) <= s(s(0)) = true
... with variable xts2
+++ creating new conjecture
	s(0) == 0 = true => count(s(s(0)), xts .. nil) <= s(s(0)) = true
+++ creating new conjecture
	s(0) == s(xts2) = true => count(s(s(0)), xts1 .. nil) <= s(s(0)) = true
--- clause
	s(0) == 0 = true => count(s(s(0)), xts .. nil) <= s(s(0)) = true
... reduced in 1 step to
	false = true => count(s(s(0)), xts .. nil) <= s(s(0)) = true
--- clause
	false = true => count(s(s(0)), xts .. nil) <= s(s(0)) = true
... contains a ground negative condition
	false = true
... and is therefore discarded (false => t is always true)
--- clause
	s(0) == s(xts2) = true => count(s(s(0)), xts1 .. nil) <= s(s(0)) = true
... reduced in 1 step to
	0 == xts2 = true => count(s(s(0)), xts1 .. nil) <= s(s(0)) = true
+++ inductive narrowing succeeded
--- clause
	s(0) == xts2 = true => count(s(s(0)), xts1 .. nil) <= s(s(0)) = true
... oriented to rule
	s(0) == xts = true => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
+++ added new clause(s)
	0 == xts2 = true => count(s(s(0)), xts1 .. nil) <= s(s(0)) = true
... to conjectures

+++ Status of the Inference System
--- Conjectures:
	count(s(s(0)), xts .. nil) <= s(s(s(0))) = true
	s(0) == xts2 = false => count(s(s(0)), xts1 .. nil) <= s(s(s(0))) = true
	count(s(s(s(s(xts3)))), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	count(s(s(s(0))), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	0 == xts2 = true => count(s(s(0)), xts1 .. nil) <= s(0) = true
	count(s(s(0)), xts .. nil) <= s(s(0)) = true
	0 == xts2 = false => count(s(s(0)), xts1 .. nil) <= s(s(0)) = true
	s(s(s(0))) == xts2 = true => count(s(s(s(0))), xts1 .. nil) <= s(0) = true
	s(s(s(0))) == xts2 = false => count(s(s(s(0))), xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) = true
	xts3 == s(xts2) = true => count(s(s(s(xts3))), xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == s(xts2) = false => count(s(s(s(xts3))), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == xts2 = true => count(s(s(s(xts3))), xts1 .. nil) <= s(s(0)) = true
	count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == xts2 = false => count(s(s(s(xts3))), xts1 .. nil) <= s(s(s(0))) = true
	s(xts3) == xts2 = true => count(s(s(s(xts3))), xts1 .. nil) <= s(s(0)) = true
	s(xts3) == xts2 = false => count(s(s(s(xts3))), xts1 .. nil) <= s(s(s(0))) = true
	0 == xts2 = true => count(s(s(0)), xts1 .. nil) <= s(s(0)) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	count(x, xs) <= len(xs) -> true
	count(x, xts .. yts) <= s(len(yts)) -> true
	0 == xts = true => count(0, xts .. nil) <= s(0) -> true
	count(x, xts2 .. xts1 .. yts) <= s(s(len(yts))) -> true
	0 == xts = true => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = true => count(s(0), xts .. nil) <= s(0) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = true => count(s(0), xts .. nil) <= s(s(0)) -> true
	s(0) == xts = true => count(s(0), xts .. nil) <= s(0) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(s(0))) -> true
	0 == xts = false => count(s(0), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	s(0) == xts = true => count(s(0), xts .. nil) <= s(s(0)) -> true
	s(0) == xts = true => count(s(s(0)), xts .. nil) <= s(0) -> true
	0 == xts = false => count(s(0), xts .. nil) <= s(s(s(0))) -> true
	s(0) == xts = false => count(s(0), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	count(x, xts3 .. xts2 .. xts1 .. yts) <= s(s(s(len(yts)))) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	0 == xts = true => count(0, xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(0) == xts = true => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	s(s(0)) == xts = true => count(s(s(0)), xts .. nil) <= s(0) -> true
	s(0) == xts = false => count(s(0), xts .. nil) <= s(s(s(0))) -> true
	s(0) == xts = false => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	xts == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	s(s(0)) == xts = true => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	0 == xts = false => count(0, xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(0)) == xts = false => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	s(s(0)) == xts = false => count(s(s(0)), xts .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	xts2 == s(xts1) = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(xts2)) == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(xts2)) == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(xts2)) == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = false => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(s(xts2))) == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(xts2)) == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(s(xts2))) == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> yts
	^f0($n0 + 1; yts, xts@) -> xts$n0 .. ^f0($n0; yts, xts@)
	^f1(0; yts) -> len(yts)
	^f1($n1 + 1; yts) -> s(^f1($n1; yts))
	^f136(0; xts) -> xts
	^f136($n136 + 1; xts) -> s(^f136($n136; xts))
+++ }
+++ Lemma(s)           = 
	count(x, xts$n .. ^f0($n; yts, xts@)) <= s(^f1($n; yts)) = true
	xts3 == xts2 = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(0) = true
	xts3 == xts2 = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = true => count(s(^f136($n; xts2)), xts1 .. nil) <= s(0) = true
	xts3 == s(xts2) = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(0) = true
	xts2 == 0 = false => count(s(^f136($n; xts2)), xts1 .. nil) <= s(s(0)) = true
	xts3 == s(xts2) = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true
	xts4 == xts3 = true => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts4 == xts3 = false => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts3 == 0 = true => count(s(^f136($n; xts3)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts4 == s(xts3) = true => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts3 == 0 = false => count(s(^f136($n; xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts4 == s(xts3) = false => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true

+++ treating clause
	count(s(s(0)), xts .. nil) <= s(s(s(0))) = true
--- no new clauses created
+++ attempting case rewriting
--- case rewriting generated new conjectures
	s(s(0)) == xts = true => s(0) <= s(s(s(0))) = true
	s(s(0)) == xts = false => 0 <= s(s(s(0))) = true
+++ added new clause(s)
	s(s(0)) == xts = true => s(0) <= s(s(s(0))) = true
	s(s(0)) == xts = false => 0 <= s(s(s(0))) = true
... to conjectures
--- clause
	s(s(0)) == xts = true => s(0) <= s(s(s(0))) = true
... reduced to tautology
	s(s(0)) == xts = true => true = true
--- clause
	s(s(0)) == xts = false => 0 <= s(s(s(0))) = true
... reduced to tautology
	s(s(0)) == xts = false => true = true

+++ Status of the Inference System
--- Conjectures:
	s(0) == xts2 = false => count(s(s(0)), xts1 .. nil) <= s(s(s(0))) = true
	count(s(s(s(s(xts3)))), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	count(s(s(s(0))), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	0 == xts2 = true => count(s(s(0)), xts1 .. nil) <= s(0) = true
	count(s(s(0)), xts .. nil) <= s(s(0)) = true
	0 == xts2 = false => count(s(s(0)), xts1 .. nil) <= s(s(0)) = true
	s(s(s(0))) == xts2 = true => count(s(s(s(0))), xts1 .. nil) <= s(0) = true
	s(s(s(0))) == xts2 = false => count(s(s(s(0))), xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) = true
	xts3 == s(xts2) = true => count(s(s(s(xts3))), xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == s(xts2) = false => count(s(s(s(xts3))), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == xts2 = true => count(s(s(s(xts3))), xts1 .. nil) <= s(s(0)) = true
	count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == xts2 = false => count(s(s(s(xts3))), xts1 .. nil) <= s(s(s(0))) = true
	s(xts3) == xts2 = true => count(s(s(s(xts3))), xts1 .. nil) <= s(s(0)) = true
	s(xts3) == xts2 = false => count(s(s(s(xts3))), xts1 .. nil) <= s(s(s(0))) = true
	0 == xts2 = true => count(s(s(0)), xts1 .. nil) <= s(s(0)) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	count(x, xs) <= len(xs) -> true
	count(x, xts .. yts) <= s(len(yts)) -> true
	0 == xts = true => count(0, xts .. nil) <= s(0) -> true
	count(x, xts2 .. xts1 .. yts) <= s(s(len(yts))) -> true
	0 == xts = true => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = true => count(s(0), xts .. nil) <= s(0) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = true => count(s(0), xts .. nil) <= s(s(0)) -> true
	s(0) == xts = true => count(s(0), xts .. nil) <= s(0) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(s(0))) -> true
	0 == xts = false => count(s(0), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	s(0) == xts = true => count(s(0), xts .. nil) <= s(s(0)) -> true
	s(0) == xts = true => count(s(s(0)), xts .. nil) <= s(0) -> true
	0 == xts = false => count(s(0), xts .. nil) <= s(s(s(0))) -> true
	s(0) == xts = false => count(s(0), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	count(x, xts3 .. xts2 .. xts1 .. yts) <= s(s(s(len(yts)))) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	0 == xts = true => count(0, xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(0) == xts = true => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	s(s(0)) == xts = true => count(s(s(0)), xts .. nil) <= s(0) -> true
	s(0) == xts = false => count(s(0), xts .. nil) <= s(s(s(0))) -> true
	s(0) == xts = false => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	xts == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	s(s(0)) == xts = true => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	0 == xts = false => count(0, xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(0)) == xts = false => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	s(s(0)) == xts = false => count(s(s(0)), xts .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	xts2 == s(xts1) = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(xts2)) == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(xts2)) == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(xts2)) == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = false => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(s(xts2))) == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(xts2)) == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(s(xts2))) == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> yts
	^f0($n0 + 1; yts, xts@) -> xts$n0 .. ^f0($n0; yts, xts@)
	^f1(0; yts) -> len(yts)
	^f1($n1 + 1; yts) -> s(^f1($n1; yts))
	^f136(0; xts) -> xts
	^f136($n136 + 1; xts) -> s(^f136($n136; xts))
+++ }
+++ Lemma(s)           = 
	count(x, xts$n .. ^f0($n; yts, xts@)) <= s(^f1($n; yts)) = true
	xts3 == xts2 = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(0) = true
	xts3 == xts2 = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = true => count(s(^f136($n; xts2)), xts1 .. nil) <= s(0) = true
	xts3 == s(xts2) = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(0) = true
	xts2 == 0 = false => count(s(^f136($n; xts2)), xts1 .. nil) <= s(s(0)) = true
	xts3 == s(xts2) = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true
	xts4 == xts3 = true => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts4 == xts3 = false => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts3 == 0 = true => count(s(^f136($n; xts3)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts4 == s(xts3) = true => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts3 == 0 = false => count(s(^f136($n; xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts4 == s(xts3) = false => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true

+++ treating clause
	s(0) == xts2 = false => count(s(s(0)), xts1 .. nil) <= s(s(s(0))) = true
+++ inductive narrowing on conjecture
	s(0) == xts2 = false => count(s(s(0)), xts1 .. nil) <= s(s(s(0))) = true
... induction variables of
	s(0) == xts2 = false => count(s(s(0)), xts1 .. nil) <= s(s(s(0))) = true
... are:
	xts2:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	s(0) == xts2 = false => count(s(s(0)), xts1 .. nil) <= s(s(s(0))) = true
... with variable xts2
+++ creating new conjecture
	s(0) == 0 = false => count(s(s(0)), xts .. nil) <= s(s(s(0))) = true
+++ creating new conjecture
	s(0) == s(xts2) = false => count(s(s(0)), xts1 .. nil) <= s(s(s(0))) = true
--- clause
	s(0) == 0 = false => count(s(s(0)), xts .. nil) <= s(s(s(0))) = true
... reduced in 1 step to
	count(s(s(0)), xts .. nil) <= s(s(s(0))) = true
--- clause
	s(0) == s(xts2) = false => count(s(s(0)), xts1 .. nil) <= s(s(s(0))) = true
... reduced in 1 step to
	0 == xts2 = false => count(s(s(0)), xts1 .. nil) <= s(s(s(0))) = true
+++ inductive narrowing succeeded
--- clause
	s(0) == xts2 = false => count(s(s(0)), xts1 .. nil) <= s(s(s(0))) = true
... oriented to rule
	s(0) == xts = false => count(s(s(0)), xts .. nil) <= s(s(s(0))) -> true
+++ added new clause(s)
	count(s(s(0)), xts .. nil) <= s(s(s(0))) = true
	0 == xts2 = false => count(s(s(0)), xts1 .. nil) <= s(s(s(0))) = true
... to conjectures

+++ Status of the Inference System
--- Conjectures:
	count(s(s(s(s(xts3)))), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	count(s(s(s(0))), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	0 == xts2 = true => count(s(s(0)), xts1 .. nil) <= s(0) = true
	count(s(s(0)), xts .. nil) <= s(s(0)) = true
	0 == xts2 = false => count(s(s(0)), xts1 .. nil) <= s(s(0)) = true
	s(s(s(0))) == xts2 = true => count(s(s(s(0))), xts1 .. nil) <= s(0) = true
	s(s(s(0))) == xts2 = false => count(s(s(s(0))), xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) = true
	xts3 == s(xts2) = true => count(s(s(s(xts3))), xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == s(xts2) = false => count(s(s(s(xts3))), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == xts2 = true => count(s(s(s(xts3))), xts1 .. nil) <= s(s(0)) = true
	count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == xts2 = false => count(s(s(s(xts3))), xts1 .. nil) <= s(s(s(0))) = true
	s(xts3) == xts2 = true => count(s(s(s(xts3))), xts1 .. nil) <= s(s(0)) = true
	s(xts3) == xts2 = false => count(s(s(s(xts3))), xts1 .. nil) <= s(s(s(0))) = true
	0 == xts2 = true => count(s(s(0)), xts1 .. nil) <= s(s(0)) = true
	count(s(s(0)), xts .. nil) <= s(s(s(0))) = true
	0 == xts2 = false => count(s(s(0)), xts1 .. nil) <= s(s(s(0))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	count(x, xs) <= len(xs) -> true
	count(x, xts .. yts) <= s(len(yts)) -> true
	0 == xts = true => count(0, xts .. nil) <= s(0) -> true
	count(x, xts2 .. xts1 .. yts) <= s(s(len(yts))) -> true
	0 == xts = true => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = true => count(s(0), xts .. nil) <= s(0) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = true => count(s(0), xts .. nil) <= s(s(0)) -> true
	s(0) == xts = true => count(s(0), xts .. nil) <= s(0) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(s(0))) -> true
	0 == xts = false => count(s(0), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	s(0) == xts = true => count(s(0), xts .. nil) <= s(s(0)) -> true
	s(0) == xts = true => count(s(s(0)), xts .. nil) <= s(0) -> true
	0 == xts = false => count(s(0), xts .. nil) <= s(s(s(0))) -> true
	s(0) == xts = false => count(s(0), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	count(x, xts3 .. xts2 .. xts1 .. yts) <= s(s(s(len(yts)))) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	0 == xts = true => count(0, xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(0) == xts = true => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	s(s(0)) == xts = true => count(s(s(0)), xts .. nil) <= s(0) -> true
	s(0) == xts = false => count(s(0), xts .. nil) <= s(s(s(0))) -> true
	s(0) == xts = false => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	xts == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	s(s(0)) == xts = true => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	0 == xts = false => count(0, xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(0) == xts = false => count(s(s(0)), xts .. nil) <= s(s(s(0))) -> true
	s(s(0)) == xts = false => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	s(s(0)) == xts = false => count(s(s(0)), xts .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	xts2 == s(xts1) = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(xts2)) == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(xts2)) == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(xts2)) == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = false => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(s(xts2))) == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(xts2)) == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(s(xts2))) == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> yts
	^f0($n0 + 1; yts, xts@) -> xts$n0 .. ^f0($n0; yts, xts@)
	^f1(0; yts) -> len(yts)
	^f1($n1 + 1; yts) -> s(^f1($n1; yts))
	^f136(0; xts) -> xts
	^f136($n136 + 1; xts) -> s(^f136($n136; xts))
+++ }
+++ Lemma(s)           = 
	count(x, xts$n .. ^f0($n; yts, xts@)) <= s(^f1($n; yts)) = true
	xts3 == xts2 = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(0) = true
	xts3 == xts2 = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = true => count(s(^f136($n; xts2)), xts1 .. nil) <= s(0) = true
	xts3 == s(xts2) = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(0) = true
	xts2 == 0 = false => count(s(^f136($n; xts2)), xts1 .. nil) <= s(s(0)) = true
	xts3 == s(xts2) = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true
	xts4 == xts3 = true => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts4 == xts3 = false => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts3 == 0 = true => count(s(^f136($n; xts3)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts4 == s(xts3) = true => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts3 == 0 = false => count(s(^f136($n; xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts4 == s(xts3) = false => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true

+++ treating clause
	count(s(s(s(s(xts3)))), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
--- no new clauses created
+++ attempting case rewriting
--- case rewriting generated new conjectures
	s(s(s(s(xts3)))) == xts2 = true => s(count(s(s(s(s(xts3)))), xts1 .. nil)) <= s(s(s(0))) = true
	s(s(s(s(xts3)))) == xts2 = false => count(s(s(s(s(xts3)))), xts1 .. nil) <= s(s(s(0))) = true
+++ added new clause(s)
	s(s(s(s(xts3)))) == xts2 = true => s(count(s(s(s(s(xts3)))), xts1 .. nil)) <= s(s(s(0))) = true
	s(s(s(s(xts3)))) == xts2 = false => count(s(s(s(s(xts3)))), xts1 .. nil) <= s(s(s(0))) = true
... to conjectures
--- clause
	s(s(s(s(xts3)))) == xts2 = true => s(count(s(s(s(s(xts3)))), xts1 .. nil)) <= s(s(s(0))) = true
... reduced in 1 step to
	s(s(s(s(xts3)))) == xts2 = true => count(s(s(s(s(xts3)))), xts1 .. nil) <= s(s(0)) = true

+++ Status of the Inference System
--- Conjectures:
	count(s(s(s(0))), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	0 == xts2 = true => count(s(s(0)), xts1 .. nil) <= s(0) = true
	count(s(s(0)), xts .. nil) <= s(s(0)) = true
	0 == xts2 = false => count(s(s(0)), xts1 .. nil) <= s(s(0)) = true
	s(s(s(0))) == xts2 = true => count(s(s(s(0))), xts1 .. nil) <= s(0) = true
	s(s(s(0))) == xts2 = false => count(s(s(s(0))), xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) = true
	xts3 == s(xts2) = true => count(s(s(s(xts3))), xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == s(xts2) = false => count(s(s(s(xts3))), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == xts2 = true => count(s(s(s(xts3))), xts1 .. nil) <= s(s(0)) = true
	count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == xts2 = false => count(s(s(s(xts3))), xts1 .. nil) <= s(s(s(0))) = true
	s(xts3) == xts2 = true => count(s(s(s(xts3))), xts1 .. nil) <= s(s(0)) = true
	s(xts3) == xts2 = false => count(s(s(s(xts3))), xts1 .. nil) <= s(s(s(0))) = true
	0 == xts2 = true => count(s(s(0)), xts1 .. nil) <= s(s(0)) = true
	count(s(s(0)), xts .. nil) <= s(s(s(0))) = true
	0 == xts2 = false => count(s(s(0)), xts1 .. nil) <= s(s(s(0))) = true
	s(s(s(s(xts3)))) == xts2 = true => count(s(s(s(s(xts3)))), xts1 .. nil) <= s(s(0)) = true
	s(s(s(s(xts3)))) == xts2 = false => count(s(s(s(s(xts3)))), xts1 .. nil) <= s(s(s(0))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	count(x, xs) <= len(xs) -> true
	count(x, xts .. yts) <= s(len(yts)) -> true
	0 == xts = true => count(0, xts .. nil) <= s(0) -> true
	count(x, xts2 .. xts1 .. yts) <= s(s(len(yts))) -> true
	0 == xts = true => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = true => count(s(0), xts .. nil) <= s(0) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = true => count(s(0), xts .. nil) <= s(s(0)) -> true
	s(0) == xts = true => count(s(0), xts .. nil) <= s(0) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(s(0))) -> true
	0 == xts = false => count(s(0), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	s(0) == xts = true => count(s(0), xts .. nil) <= s(s(0)) -> true
	s(0) == xts = true => count(s(s(0)), xts .. nil) <= s(0) -> true
	0 == xts = false => count(s(0), xts .. nil) <= s(s(s(0))) -> true
	s(0) == xts = false => count(s(0), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	count(x, xts3 .. xts2 .. xts1 .. yts) <= s(s(s(len(yts)))) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	0 == xts = true => count(0, xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(0) == xts = true => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	s(s(0)) == xts = true => count(s(s(0)), xts .. nil) <= s(0) -> true
	s(0) == xts = false => count(s(0), xts .. nil) <= s(s(s(0))) -> true
	s(0) == xts = false => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	xts == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	s(s(0)) == xts = true => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	0 == xts = false => count(0, xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(0) == xts = false => count(s(s(0)), xts .. nil) <= s(s(s(0))) -> true
	s(s(0)) == xts = false => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	s(s(0)) == xts = false => count(s(s(0)), xts .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	xts2 == s(xts1) = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(xts2)) == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(xts2)) == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(xts2)) == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = false => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(s(xts2))) == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(xts2)) == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(s(xts2))) == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> yts
	^f0($n0 + 1; yts, xts@) -> xts$n0 .. ^f0($n0; yts, xts@)
	^f1(0; yts) -> len(yts)
	^f1($n1 + 1; yts) -> s(^f1($n1; yts))
	^f136(0; xts) -> xts
	^f136($n136 + 1; xts) -> s(^f136($n136; xts))
+++ }
+++ Lemma(s)           = 
	count(x, xts$n .. ^f0($n; yts, xts@)) <= s(^f1($n; yts)) = true
	xts3 == xts2 = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(0) = true
	xts3 == xts2 = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = true => count(s(^f136($n; xts2)), xts1 .. nil) <= s(0) = true
	xts3 == s(xts2) = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(0) = true
	xts2 == 0 = false => count(s(^f136($n; xts2)), xts1 .. nil) <= s(s(0)) = true
	xts3 == s(xts2) = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true
	xts4 == xts3 = true => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts4 == xts3 = false => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts3 == 0 = true => count(s(^f136($n; xts3)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts4 == s(xts3) = true => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts3 == 0 = false => count(s(^f136($n; xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts4 == s(xts3) = false => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true

+++ treating clause
	count(s(s(s(0))), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
--- no new clauses created
+++ attempting case rewriting
--- case rewriting generated new conjectures
	s(s(s(0))) == xts2 = true => s(count(s(s(s(0))), xts1 .. nil)) <= s(s(s(0))) = true
	s(s(s(0))) == xts2 = false => count(s(s(s(0))), xts1 .. nil) <= s(s(s(0))) = true
+++ added new clause(s)
	s(s(s(0))) == xts2 = true => s(count(s(s(s(0))), xts1 .. nil)) <= s(s(s(0))) = true
	s(s(s(0))) == xts2 = false => count(s(s(s(0))), xts1 .. nil) <= s(s(s(0))) = true
... to conjectures
--- clause
	s(s(s(0))) == xts2 = true => s(count(s(s(s(0))), xts1 .. nil)) <= s(s(s(0))) = true
... reduced in 1 step to
	s(s(s(0))) == xts2 = true => count(s(s(s(0))), xts1 .. nil) <= s(s(0)) = true

+++ Status of the Inference System
--- Conjectures:
	0 == xts2 = true => count(s(s(0)), xts1 .. nil) <= s(0) = true
	count(s(s(0)), xts .. nil) <= s(s(0)) = true
	0 == xts2 = false => count(s(s(0)), xts1 .. nil) <= s(s(0)) = true
	s(s(s(0))) == xts2 = true => count(s(s(s(0))), xts1 .. nil) <= s(0) = true
	s(s(s(0))) == xts2 = false => count(s(s(s(0))), xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) = true
	xts3 == s(xts2) = true => count(s(s(s(xts3))), xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == s(xts2) = false => count(s(s(s(xts3))), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == xts2 = true => count(s(s(s(xts3))), xts1 .. nil) <= s(s(0)) = true
	count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == xts2 = false => count(s(s(s(xts3))), xts1 .. nil) <= s(s(s(0))) = true
	s(xts3) == xts2 = true => count(s(s(s(xts3))), xts1 .. nil) <= s(s(0)) = true
	s(xts3) == xts2 = false => count(s(s(s(xts3))), xts1 .. nil) <= s(s(s(0))) = true
	0 == xts2 = true => count(s(s(0)), xts1 .. nil) <= s(s(0)) = true
	count(s(s(0)), xts .. nil) <= s(s(s(0))) = true
	0 == xts2 = false => count(s(s(0)), xts1 .. nil) <= s(s(s(0))) = true
	s(s(s(s(xts3)))) == xts2 = true => count(s(s(s(s(xts3)))), xts1 .. nil) <= s(s(0)) = true
	s(s(s(s(xts3)))) == xts2 = false => count(s(s(s(s(xts3)))), xts1 .. nil) <= s(s(s(0))) = true
	s(s(s(0))) == xts2 = true => count(s(s(s(0))), xts1 .. nil) <= s(s(0)) = true
	s(s(s(0))) == xts2 = false => count(s(s(s(0))), xts1 .. nil) <= s(s(s(0))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	count(x, xs) <= len(xs) -> true
	count(x, xts .. yts) <= s(len(yts)) -> true
	0 == xts = true => count(0, xts .. nil) <= s(0) -> true
	count(x, xts2 .. xts1 .. yts) <= s(s(len(yts))) -> true
	0 == xts = true => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = true => count(s(0), xts .. nil) <= s(0) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = true => count(s(0), xts .. nil) <= s(s(0)) -> true
	s(0) == xts = true => count(s(0), xts .. nil) <= s(0) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(s(0))) -> true
	0 == xts = false => count(s(0), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	s(0) == xts = true => count(s(0), xts .. nil) <= s(s(0)) -> true
	s(0) == xts = true => count(s(s(0)), xts .. nil) <= s(0) -> true
	0 == xts = false => count(s(0), xts .. nil) <= s(s(s(0))) -> true
	s(0) == xts = false => count(s(0), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	count(x, xts3 .. xts2 .. xts1 .. yts) <= s(s(s(len(yts)))) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	0 == xts = true => count(0, xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(0) == xts = true => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	s(s(0)) == xts = true => count(s(s(0)), xts .. nil) <= s(0) -> true
	s(0) == xts = false => count(s(0), xts .. nil) <= s(s(s(0))) -> true
	s(0) == xts = false => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	xts == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	s(s(0)) == xts = true => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	0 == xts = false => count(0, xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(0) == xts = false => count(s(s(0)), xts .. nil) <= s(s(s(0))) -> true
	s(s(0)) == xts = false => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	s(s(0)) == xts = false => count(s(s(0)), xts .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	xts2 == s(xts1) = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(xts2)) == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(xts2)) == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(xts2)) == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = false => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(s(xts2))) == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(xts2)) == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(s(xts2))) == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> yts
	^f0($n0 + 1; yts, xts@) -> xts$n0 .. ^f0($n0; yts, xts@)
	^f1(0; yts) -> len(yts)
	^f1($n1 + 1; yts) -> s(^f1($n1; yts))
	^f136(0; xts) -> xts
	^f136($n136 + 1; xts) -> s(^f136($n136; xts))
+++ }
+++ Lemma(s)           = 
	count(x, xts$n .. ^f0($n; yts, xts@)) <= s(^f1($n; yts)) = true
	xts3 == xts2 = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(0) = true
	xts3 == xts2 = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = true => count(s(^f136($n; xts2)), xts1 .. nil) <= s(0) = true
	xts3 == s(xts2) = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(0) = true
	xts2 == 0 = false => count(s(^f136($n; xts2)), xts1 .. nil) <= s(s(0)) = true
	xts3 == s(xts2) = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true
	xts4 == xts3 = true => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts4 == xts3 = false => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts3 == 0 = true => count(s(^f136($n; xts3)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts4 == s(xts3) = true => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts3 == 0 = false => count(s(^f136($n; xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts4 == s(xts3) = false => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true

+++ treating clause
	0 == xts2 = true => count(s(s(0)), xts1 .. nil) <= s(0) = true
+++ inductive narrowing on conjecture
	0 == xts2 = true => count(s(s(0)), xts1 .. nil) <= s(0) = true
... induction variables of
	0 == xts2 = true => count(s(s(0)), xts1 .. nil) <= s(0) = true
... are:
	xts2:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	0 == xts2 = true => count(s(s(0)), xts1 .. nil) <= s(0) = true
... with variable xts2
+++ creating new conjecture
	0 == 0 = true => count(s(s(0)), xts .. nil) <= s(0) = true
+++ creating new conjecture
	0 == s(xts2) = true => count(s(s(0)), xts1 .. nil) <= s(0) = true
--- clause
	0 == 0 = true => count(s(s(0)), xts .. nil) <= s(0) = true
... reduced in 1 step to
	count(s(s(0)), xts .. nil) <= s(0) = true
--- clause
	0 == s(xts2) = true => count(s(s(0)), xts1 .. nil) <= s(0) = true
... reduced in 1 step to
	false = true => count(s(s(0)), xts .. nil) <= s(0) = true
--- clause
	false = true => count(s(s(0)), xts .. nil) <= s(0) = true
... contains a ground negative condition
	false = true
... and is therefore discarded (false => t is always true)
+++ inductive narrowing succeeded
--- clause
	0 == xts2 = true => count(s(s(0)), xts1 .. nil) <= s(0) = true
... oriented to rule
	0 == xts = true => count(s(s(0)), xts .. nil) <= s(0) -> true
+++ added new clause(s)
	count(s(s(0)), xts .. nil) <= s(0) = true
... to conjectures
+++ active wrap
	0 == xts2 = true => count(., xts1 .. nil) <= s(0) = true
... with sequence
	0 == xts2 = true => count(0, xts1 .. nil) <= s(0) = true
	0 == xts2 = true => count(s(0), xts1 .. nil) <= s(0) = true
	0 == xts2 = true => count(s(s(0)), xts1 .. nil) <= s(0) = true
+++ primal grammar found for head
	{.., 0, <=, ==, count, nil, s, true}
... and wrap
	0 == xts2 = true => count(., xts1 .. nil) <= s(0) = true
+++ Presburger system  = {
	^f741(0) -> 0
	^f741($n741 + 1) -> s(^f741($n741))
+++ }
+++ Lemma(s)           = 
	0 == xts2 = true => count(^f741($n), xts1 .. nil) <= s(0) = true

+++ Status of the Inference System
--- Conjectures:
	count(s(s(0)), xts .. nil) <= s(s(0)) = true
	0 == xts2 = false => count(s(s(0)), xts1 .. nil) <= s(s(0)) = true
	s(s(s(0))) == xts2 = true => count(s(s(s(0))), xts1 .. nil) <= s(0) = true
	s(s(s(0))) == xts2 = false => count(s(s(s(0))), xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) = true
	xts3 == s(xts2) = true => count(s(s(s(xts3))), xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == s(xts2) = false => count(s(s(s(xts3))), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == xts2 = true => count(s(s(s(xts3))), xts1 .. nil) <= s(s(0)) = true
	count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == xts2 = false => count(s(s(s(xts3))), xts1 .. nil) <= s(s(s(0))) = true
	s(xts3) == xts2 = true => count(s(s(s(xts3))), xts1 .. nil) <= s(s(0)) = true
	s(xts3) == xts2 = false => count(s(s(s(xts3))), xts1 .. nil) <= s(s(s(0))) = true
	0 == xts2 = true => count(s(s(0)), xts1 .. nil) <= s(s(0)) = true
	count(s(s(0)), xts .. nil) <= s(s(s(0))) = true
	0 == xts2 = false => count(s(s(0)), xts1 .. nil) <= s(s(s(0))) = true
	s(s(s(s(xts3)))) == xts2 = true => count(s(s(s(s(xts3)))), xts1 .. nil) <= s(s(0)) = true
	s(s(s(s(xts3)))) == xts2 = false => count(s(s(s(s(xts3)))), xts1 .. nil) <= s(s(s(0))) = true
	s(s(s(0))) == xts2 = true => count(s(s(s(0))), xts1 .. nil) <= s(s(0)) = true
	s(s(s(0))) == xts2 = false => count(s(s(s(0))), xts1 .. nil) <= s(s(s(0))) = true
	count(s(s(0)), xts .. nil) <= s(0) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	count(x, xs) <= len(xs) -> true
	count(x, xts .. yts) <= s(len(yts)) -> true
	0 == xts = true => count(0, xts .. nil) <= s(0) -> true
	count(x, xts2 .. xts1 .. yts) <= s(s(len(yts))) -> true
	0 == xts = true => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = true => count(s(0), xts .. nil) <= s(0) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = true => count(s(0), xts .. nil) <= s(s(0)) -> true
	0 == xts = true => count(s(s(0)), xts .. nil) <= s(0) -> true
	s(0) == xts = true => count(s(0), xts .. nil) <= s(0) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(s(0))) -> true
	0 == xts = false => count(s(0), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	s(0) == xts = true => count(s(0), xts .. nil) <= s(s(0)) -> true
	s(0) == xts = true => count(s(s(0)), xts .. nil) <= s(0) -> true
	0 == xts = false => count(s(0), xts .. nil) <= s(s(s(0))) -> true
	s(0) == xts = false => count(s(0), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	count(x, xts3 .. xts2 .. xts1 .. yts) <= s(s(s(len(yts)))) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	0 == xts = true => count(0, xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(0) == xts = true => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	s(s(0)) == xts = true => count(s(s(0)), xts .. nil) <= s(0) -> true
	s(0) == xts = false => count(s(0), xts .. nil) <= s(s(s(0))) -> true
	s(0) == xts = false => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	xts == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	s(s(0)) == xts = true => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	0 == xts = false => count(0, xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(0) == xts = false => count(s(s(0)), xts .. nil) <= s(s(s(0))) -> true
	s(s(0)) == xts = false => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	s(s(0)) == xts = false => count(s(s(0)), xts .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	xts2 == s(xts1) = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(xts2)) == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(xts2)) == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(xts2)) == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = false => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(s(xts2))) == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(xts2)) == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(s(xts2))) == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> yts
	^f0($n0 + 1; yts, xts@) -> xts$n0 .. ^f0($n0; yts, xts@)
	^f1(0; yts) -> len(yts)
	^f1($n1 + 1; yts) -> s(^f1($n1; yts))
	^f136(0; xts) -> xts
	^f136($n136 + 1; xts) -> s(^f136($n136; xts))
	^f741(0) -> 0
	^f741($n741 + 1) -> s(^f741($n741))
+++ }
+++ Lemma(s)           = 
	count(x, xts$n .. ^f0($n; yts, xts@)) <= s(^f1($n; yts)) = true
	xts3 == xts2 = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(0) = true
	xts3 == xts2 = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = true => count(s(^f136($n; xts2)), xts1 .. nil) <= s(0) = true
	xts3 == s(xts2) = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(0) = true
	xts2 == 0 = false => count(s(^f136($n; xts2)), xts1 .. nil) <= s(s(0)) = true
	xts3 == s(xts2) = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true
	xts4 == xts3 = true => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts4 == xts3 = false => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts3 == 0 = true => count(s(^f136($n; xts3)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts4 == s(xts3) = true => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts3 == 0 = false => count(s(^f136($n; xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts4 == s(xts3) = false => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	0 == xts2 = true => count(^f741($n), xts1 .. nil) <= s(0) = true

+++ treating clause
	count(s(s(0)), xts .. nil) <= s(s(0)) = true
--- no new clauses created
+++ attempting case rewriting
--- case rewriting generated new conjectures
	s(s(0)) == xts = true => s(0) <= s(s(0)) = true
	s(s(0)) == xts = false => 0 <= s(s(0)) = true
+++ added new clause(s)
	s(s(0)) == xts = true => s(0) <= s(s(0)) = true
	s(s(0)) == xts = false => 0 <= s(s(0)) = true
... to conjectures
--- clause
	s(s(0)) == xts = true => s(0) <= s(s(0)) = true
... reduced to tautology
	s(s(0)) == xts = true => true = true
--- clause
	s(s(0)) == xts = false => 0 <= s(s(0)) = true
... reduced to tautology
	s(s(0)) == xts = false => true = true

+++ Status of the Inference System
--- Conjectures:
	0 == xts2 = false => count(s(s(0)), xts1 .. nil) <= s(s(0)) = true
	s(s(s(0))) == xts2 = true => count(s(s(s(0))), xts1 .. nil) <= s(0) = true
	s(s(s(0))) == xts2 = false => count(s(s(s(0))), xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) = true
	xts3 == s(xts2) = true => count(s(s(s(xts3))), xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == s(xts2) = false => count(s(s(s(xts3))), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == xts2 = true => count(s(s(s(xts3))), xts1 .. nil) <= s(s(0)) = true
	count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == xts2 = false => count(s(s(s(xts3))), xts1 .. nil) <= s(s(s(0))) = true
	s(xts3) == xts2 = true => count(s(s(s(xts3))), xts1 .. nil) <= s(s(0)) = true
	s(xts3) == xts2 = false => count(s(s(s(xts3))), xts1 .. nil) <= s(s(s(0))) = true
	0 == xts2 = true => count(s(s(0)), xts1 .. nil) <= s(s(0)) = true
	count(s(s(0)), xts .. nil) <= s(s(s(0))) = true
	0 == xts2 = false => count(s(s(0)), xts1 .. nil) <= s(s(s(0))) = true
	s(s(s(s(xts3)))) == xts2 = true => count(s(s(s(s(xts3)))), xts1 .. nil) <= s(s(0)) = true
	s(s(s(s(xts3)))) == xts2 = false => count(s(s(s(s(xts3)))), xts1 .. nil) <= s(s(s(0))) = true
	s(s(s(0))) == xts2 = true => count(s(s(s(0))), xts1 .. nil) <= s(s(0)) = true
	s(s(s(0))) == xts2 = false => count(s(s(s(0))), xts1 .. nil) <= s(s(s(0))) = true
	count(s(s(0)), xts .. nil) <= s(0) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	count(x, xs) <= len(xs) -> true
	count(x, xts .. yts) <= s(len(yts)) -> true
	0 == xts = true => count(0, xts .. nil) <= s(0) -> true
	count(x, xts2 .. xts1 .. yts) <= s(s(len(yts))) -> true
	0 == xts = true => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = true => count(s(0), xts .. nil) <= s(0) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = true => count(s(0), xts .. nil) <= s(s(0)) -> true
	0 == xts = true => count(s(s(0)), xts .. nil) <= s(0) -> true
	s(0) == xts = true => count(s(0), xts .. nil) <= s(0) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(s(0))) -> true
	0 == xts = false => count(s(0), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	s(0) == xts = true => count(s(0), xts .. nil) <= s(s(0)) -> true
	s(0) == xts = true => count(s(s(0)), xts .. nil) <= s(0) -> true
	0 == xts = false => count(s(0), xts .. nil) <= s(s(s(0))) -> true
	s(0) == xts = false => count(s(0), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	count(x, xts3 .. xts2 .. xts1 .. yts) <= s(s(s(len(yts)))) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	0 == xts = true => count(0, xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(0) == xts = true => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	s(s(0)) == xts = true => count(s(s(0)), xts .. nil) <= s(0) -> true
	s(0) == xts = false => count(s(0), xts .. nil) <= s(s(s(0))) -> true
	s(0) == xts = false => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	xts == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	s(s(0)) == xts = true => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	0 == xts = false => count(0, xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(0) == xts = false => count(s(s(0)), xts .. nil) <= s(s(s(0))) -> true
	s(s(0)) == xts = false => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	s(s(0)) == xts = false => count(s(s(0)), xts .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	xts2 == s(xts1) = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(xts2)) == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(xts2)) == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(xts2)) == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = false => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(s(xts2))) == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(xts2)) == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(s(xts2))) == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> yts
	^f0($n0 + 1; yts, xts@) -> xts$n0 .. ^f0($n0; yts, xts@)
	^f1(0; yts) -> len(yts)
	^f1($n1 + 1; yts) -> s(^f1($n1; yts))
	^f136(0; xts) -> xts
	^f136($n136 + 1; xts) -> s(^f136($n136; xts))
	^f741(0) -> 0
	^f741($n741 + 1) -> s(^f741($n741))
+++ }
+++ Lemma(s)           = 
	count(x, xts$n .. ^f0($n; yts, xts@)) <= s(^f1($n; yts)) = true
	xts3 == xts2 = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(0) = true
	xts3 == xts2 = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = true => count(s(^f136($n; xts2)), xts1 .. nil) <= s(0) = true
	xts3 == s(xts2) = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(0) = true
	xts2 == 0 = false => count(s(^f136($n; xts2)), xts1 .. nil) <= s(s(0)) = true
	xts3 == s(xts2) = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true
	xts4 == xts3 = true => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts4 == xts3 = false => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts3 == 0 = true => count(s(^f136($n; xts3)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts4 == s(xts3) = true => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts3 == 0 = false => count(s(^f136($n; xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts4 == s(xts3) = false => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	0 == xts2 = true => count(^f741($n), xts1 .. nil) <= s(0) = true

+++ treating clause
	0 == xts2 = false => count(s(s(0)), xts1 .. nil) <= s(s(0)) = true
+++ inductive narrowing on conjecture
	0 == xts2 = false => count(s(s(0)), xts1 .. nil) <= s(s(0)) = true
... induction variables of
	0 == xts2 = false => count(s(s(0)), xts1 .. nil) <= s(s(0)) = true
... are:
	xts2:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	0 == xts2 = false => count(s(s(0)), xts1 .. nil) <= s(s(0)) = true
... with variable xts2
+++ creating new conjecture
	0 == 0 = false => count(s(s(0)), xts .. nil) <= s(s(0)) = true
+++ creating new conjecture
	0 == s(xts2) = false => count(s(s(0)), xts1 .. nil) <= s(s(0)) = true
--- clause
	0 == 0 = false => count(s(s(0)), xts .. nil) <= s(s(0)) = true
... reduced in 1 step to
	true = false => count(s(s(0)), xts .. nil) <= s(s(0)) = true
--- clause
	true = false => count(s(s(0)), xts .. nil) <= s(s(0)) = true
... contains a ground negative condition
	true = false
... and is therefore discarded (false => t is always true)
--- clause
	0 == s(xts2) = false => count(s(s(0)), xts1 .. nil) <= s(s(0)) = true
... reduced in 1 step to
	count(s(s(0)), xts .. nil) <= s(s(0)) = true
+++ inductive narrowing succeeded
--- clause
	0 == xts2 = false => count(s(s(0)), xts1 .. nil) <= s(s(0)) = true
... oriented to rule
	0 == xts = false => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
+++ added new clause(s)
	count(s(s(0)), xts .. nil) <= s(s(0)) = true
... to conjectures
+++ active wrap
	0 == xts2 = false => count(., xts1 .. nil) <= s(s(0)) = true
... with sequence
	0 == xts2 = false => count(0, xts1 .. nil) <= s(s(0)) = true
	0 == xts2 = false => count(s(0), xts1 .. nil) <= s(s(0)) = true
	0 == xts2 = false => count(s(s(0)), xts1 .. nil) <= s(s(0)) = true
+++ primal grammar found for head
	{.., 0, <=, ==, count, false, nil, s, true}
... and wrap
	0 == xts2 = false => count(., xts1 .. nil) <= s(s(0)) = true
+++ Presburger system  = {
	^f741(0) -> 0
	^f741($n741 + 1) -> s(^f741($n741))
+++ }
+++ Lemma(s)           = 
	0 == xts2 = false => count(^f741($n), xts1 .. nil) <= s(s(0)) = true

+++ Status of the Inference System
--- Conjectures:
	s(s(s(0))) == xts2 = true => count(s(s(s(0))), xts1 .. nil) <= s(0) = true
	s(s(s(0))) == xts2 = false => count(s(s(s(0))), xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) = true
	xts3 == s(xts2) = true => count(s(s(s(xts3))), xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == s(xts2) = false => count(s(s(s(xts3))), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == xts2 = true => count(s(s(s(xts3))), xts1 .. nil) <= s(s(0)) = true
	count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == xts2 = false => count(s(s(s(xts3))), xts1 .. nil) <= s(s(s(0))) = true
	s(xts3) == xts2 = true => count(s(s(s(xts3))), xts1 .. nil) <= s(s(0)) = true
	s(xts3) == xts2 = false => count(s(s(s(xts3))), xts1 .. nil) <= s(s(s(0))) = true
	0 == xts2 = true => count(s(s(0)), xts1 .. nil) <= s(s(0)) = true
	count(s(s(0)), xts .. nil) <= s(s(s(0))) = true
	0 == xts2 = false => count(s(s(0)), xts1 .. nil) <= s(s(s(0))) = true
	s(s(s(s(xts3)))) == xts2 = true => count(s(s(s(s(xts3)))), xts1 .. nil) <= s(s(0)) = true
	s(s(s(s(xts3)))) == xts2 = false => count(s(s(s(s(xts3)))), xts1 .. nil) <= s(s(s(0))) = true
	s(s(s(0))) == xts2 = true => count(s(s(s(0))), xts1 .. nil) <= s(s(0)) = true
	s(s(s(0))) == xts2 = false => count(s(s(s(0))), xts1 .. nil) <= s(s(s(0))) = true
	count(s(s(0)), xts .. nil) <= s(0) = true
	count(s(s(0)), xts .. nil) <= s(s(0)) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	count(x, xs) <= len(xs) -> true
	count(x, xts .. yts) <= s(len(yts)) -> true
	0 == xts = true => count(0, xts .. nil) <= s(0) -> true
	count(x, xts2 .. xts1 .. yts) <= s(s(len(yts))) -> true
	0 == xts = true => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = true => count(s(0), xts .. nil) <= s(0) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = true => count(s(0), xts .. nil) <= s(s(0)) -> true
	0 == xts = true => count(s(s(0)), xts .. nil) <= s(0) -> true
	s(0) == xts = true => count(s(0), xts .. nil) <= s(0) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(s(0))) -> true
	0 == xts = false => count(s(0), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	s(0) == xts = true => count(s(0), xts .. nil) <= s(s(0)) -> true
	s(0) == xts = true => count(s(s(0)), xts .. nil) <= s(0) -> true
	0 == xts = false => count(s(0), xts .. nil) <= s(s(s(0))) -> true
	0 == xts = false => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	s(0) == xts = false => count(s(0), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	count(x, xts3 .. xts2 .. xts1 .. yts) <= s(s(s(len(yts)))) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	0 == xts = true => count(0, xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(0) == xts = true => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	s(s(0)) == xts = true => count(s(s(0)), xts .. nil) <= s(0) -> true
	s(0) == xts = false => count(s(0), xts .. nil) <= s(s(s(0))) -> true
	s(0) == xts = false => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	xts == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	s(s(0)) == xts = true => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	0 == xts = false => count(0, xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(0) == xts = false => count(s(s(0)), xts .. nil) <= s(s(s(0))) -> true
	s(s(0)) == xts = false => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	s(s(0)) == xts = false => count(s(s(0)), xts .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	xts2 == s(xts1) = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(xts2)) == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(xts2)) == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(xts2)) == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = false => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(s(xts2))) == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(xts2)) == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(s(xts2))) == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> yts
	^f0($n0 + 1; yts, xts@) -> xts$n0 .. ^f0($n0; yts, xts@)
	^f1(0; yts) -> len(yts)
	^f1($n1 + 1; yts) -> s(^f1($n1; yts))
	^f136(0; xts) -> xts
	^f136($n136 + 1; xts) -> s(^f136($n136; xts))
	^f741(0) -> 0
	^f741($n741 + 1) -> s(^f741($n741))
+++ }
+++ Lemma(s)           = 
	count(x, xts$n .. ^f0($n; yts, xts@)) <= s(^f1($n; yts)) = true
	xts3 == xts2 = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(0) = true
	xts3 == xts2 = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = true => count(s(^f136($n; xts2)), xts1 .. nil) <= s(0) = true
	xts3 == s(xts2) = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(0) = true
	xts2 == 0 = false => count(s(^f136($n; xts2)), xts1 .. nil) <= s(s(0)) = true
	xts3 == s(xts2) = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true
	xts4 == xts3 = true => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts4 == xts3 = false => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts3 == 0 = true => count(s(^f136($n; xts3)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts4 == s(xts3) = true => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts3 == 0 = false => count(s(^f136($n; xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts4 == s(xts3) = false => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	0 == xts2 = true => count(^f741($n), xts1 .. nil) <= s(0) = true
	0 == xts2 = false => count(^f741($n), xts1 .. nil) <= s(s(0)) = true

+++ treating clause
	s(s(s(0))) == xts2 = true => count(s(s(s(0))), xts1 .. nil) <= s(0) = true
+++ inductive narrowing on conjecture
	s(s(s(0))) == xts2 = true => count(s(s(s(0))), xts1 .. nil) <= s(0) = true
... induction variables of
	s(s(s(0))) == xts2 = true => count(s(s(s(0))), xts1 .. nil) <= s(0) = true
... are:
	xts2:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	s(s(s(0))) == xts2 = true => count(s(s(s(0))), xts1 .. nil) <= s(0) = true
... with variable xts2
+++ creating new conjecture
	s(s(s(0))) == 0 = true => count(s(s(s(0))), xts .. nil) <= s(0) = true
+++ creating new conjecture
	s(s(s(0))) == s(xts2) = true => count(s(s(s(0))), xts1 .. nil) <= s(0) = true
--- clause
	s(s(s(0))) == 0 = true => count(s(s(s(0))), xts .. nil) <= s(0) = true
... reduced in 1 step to
	false = true => count(s(s(s(0))), xts .. nil) <= s(0) = true
--- clause
	false = true => count(s(s(s(0))), xts .. nil) <= s(0) = true
... contains a ground negative condition
	false = true
... and is therefore discarded (false => t is always true)
--- clause
	s(s(s(0))) == s(xts2) = true => count(s(s(s(0))), xts1 .. nil) <= s(0) = true
... reduced in 1 step to
	s(s(0)) == xts2 = true => count(s(s(s(0))), xts1 .. nil) <= s(0) = true
+++ inductive narrowing succeeded
--- clause
	s(s(s(0))) == xts2 = true => count(s(s(s(0))), xts1 .. nil) <= s(0) = true
... oriented to rule
	s(s(s(0))) == xts = true => count(s(s(s(0))), xts .. nil) <= s(0) -> true
+++ added new clause(s)
	s(s(0)) == xts2 = true => count(s(s(s(0))), xts1 .. nil) <= s(0) = true
... to conjectures

+++ Status of the Inference System
--- Conjectures:
	s(s(s(0))) == xts2 = false => count(s(s(s(0))), xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) = true
	xts3 == s(xts2) = true => count(s(s(s(xts3))), xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == s(xts2) = false => count(s(s(s(xts3))), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == xts2 = true => count(s(s(s(xts3))), xts1 .. nil) <= s(s(0)) = true
	count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == xts2 = false => count(s(s(s(xts3))), xts1 .. nil) <= s(s(s(0))) = true
	s(xts3) == xts2 = true => count(s(s(s(xts3))), xts1 .. nil) <= s(s(0)) = true
	s(xts3) == xts2 = false => count(s(s(s(xts3))), xts1 .. nil) <= s(s(s(0))) = true
	0 == xts2 = true => count(s(s(0)), xts1 .. nil) <= s(s(0)) = true
	count(s(s(0)), xts .. nil) <= s(s(s(0))) = true
	0 == xts2 = false => count(s(s(0)), xts1 .. nil) <= s(s(s(0))) = true
	s(s(s(s(xts3)))) == xts2 = true => count(s(s(s(s(xts3)))), xts1 .. nil) <= s(s(0)) = true
	s(s(s(s(xts3)))) == xts2 = false => count(s(s(s(s(xts3)))), xts1 .. nil) <= s(s(s(0))) = true
	s(s(s(0))) == xts2 = true => count(s(s(s(0))), xts1 .. nil) <= s(s(0)) = true
	s(s(s(0))) == xts2 = false => count(s(s(s(0))), xts1 .. nil) <= s(s(s(0))) = true
	count(s(s(0)), xts .. nil) <= s(0) = true
	count(s(s(0)), xts .. nil) <= s(s(0)) = true
	s(s(0)) == xts2 = true => count(s(s(s(0))), xts1 .. nil) <= s(0) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	count(x, xs) <= len(xs) -> true
	count(x, xts .. yts) <= s(len(yts)) -> true
	0 == xts = true => count(0, xts .. nil) <= s(0) -> true
	count(x, xts2 .. xts1 .. yts) <= s(s(len(yts))) -> true
	0 == xts = true => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = true => count(s(0), xts .. nil) <= s(0) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = true => count(s(0), xts .. nil) <= s(s(0)) -> true
	0 == xts = true => count(s(s(0)), xts .. nil) <= s(0) -> true
	s(0) == xts = true => count(s(0), xts .. nil) <= s(0) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(s(0))) -> true
	0 == xts = false => count(s(0), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	s(0) == xts = true => count(s(0), xts .. nil) <= s(s(0)) -> true
	s(0) == xts = true => count(s(s(0)), xts .. nil) <= s(0) -> true
	0 == xts = false => count(s(0), xts .. nil) <= s(s(s(0))) -> true
	0 == xts = false => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	s(0) == xts = false => count(s(0), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	count(x, xts3 .. xts2 .. xts1 .. yts) <= s(s(s(len(yts)))) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	0 == xts = true => count(0, xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(0) == xts = true => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	s(s(0)) == xts = true => count(s(s(0)), xts .. nil) <= s(0) -> true
	s(0) == xts = false => count(s(0), xts .. nil) <= s(s(s(0))) -> true
	s(0) == xts = false => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	xts == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	s(s(0)) == xts = true => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	0 == xts = false => count(0, xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(0) == xts = false => count(s(s(0)), xts .. nil) <= s(s(s(0))) -> true
	s(s(0)) == xts = false => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(s(s(0))) == xts = true => count(s(s(s(0))), xts .. nil) <= s(0) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	s(s(0)) == xts = false => count(s(s(0)), xts .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	xts2 == s(xts1) = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(xts2)) == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(xts2)) == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(xts2)) == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = false => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(s(xts2))) == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(xts2)) == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(s(xts2))) == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> yts
	^f0($n0 + 1; yts, xts@) -> xts$n0 .. ^f0($n0; yts, xts@)
	^f1(0; yts) -> len(yts)
	^f1($n1 + 1; yts) -> s(^f1($n1; yts))
	^f136(0; xts) -> xts
	^f136($n136 + 1; xts) -> s(^f136($n136; xts))
	^f741(0) -> 0
	^f741($n741 + 1) -> s(^f741($n741))
+++ }
+++ Lemma(s)           = 
	count(x, xts$n .. ^f0($n; yts, xts@)) <= s(^f1($n; yts)) = true
	xts3 == xts2 = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(0) = true
	xts3 == xts2 = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = true => count(s(^f136($n; xts2)), xts1 .. nil) <= s(0) = true
	xts3 == s(xts2) = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(0) = true
	xts2 == 0 = false => count(s(^f136($n; xts2)), xts1 .. nil) <= s(s(0)) = true
	xts3 == s(xts2) = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true
	xts4 == xts3 = true => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts4 == xts3 = false => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts3 == 0 = true => count(s(^f136($n; xts3)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts4 == s(xts3) = true => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts3 == 0 = false => count(s(^f136($n; xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts4 == s(xts3) = false => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	0 == xts2 = true => count(^f741($n), xts1 .. nil) <= s(0) = true
	0 == xts2 = false => count(^f741($n), xts1 .. nil) <= s(s(0)) = true

+++ treating clause
	s(s(s(0))) == xts2 = false => count(s(s(s(0))), xts1 .. nil) <= s(s(0)) = true
+++ inductive narrowing on conjecture
	s(s(s(0))) == xts2 = false => count(s(s(s(0))), xts1 .. nil) <= s(s(0)) = true
... induction variables of
	s(s(s(0))) == xts2 = false => count(s(s(s(0))), xts1 .. nil) <= s(s(0)) = true
... are:
	xts2:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	s(s(s(0))) == xts2 = false => count(s(s(s(0))), xts1 .. nil) <= s(s(0)) = true
... with variable xts2
+++ creating new conjecture
	s(s(s(0))) == 0 = false => count(s(s(s(0))), xts .. nil) <= s(s(0)) = true
+++ creating new conjecture
	s(s(s(0))) == s(xts2) = false => count(s(s(s(0))), xts1 .. nil) <= s(s(0)) = true
--- clause
	s(s(s(0))) == 0 = false => count(s(s(s(0))), xts .. nil) <= s(s(0)) = true
... reduced in 1 step to
	count(s(s(s(0))), xts .. nil) <= s(s(0)) = true
--- clause
	s(s(s(0))) == s(xts2) = false => count(s(s(s(0))), xts1 .. nil) <= s(s(0)) = true
... reduced in 1 step to
	s(s(0)) == xts2 = false => count(s(s(s(0))), xts1 .. nil) <= s(s(0)) = true
+++ inductive narrowing succeeded
--- clause
	s(s(s(0))) == xts2 = false => count(s(s(s(0))), xts1 .. nil) <= s(s(0)) = true
... oriented to rule
	s(s(s(0))) == xts = false => count(s(s(s(0))), xts .. nil) <= s(s(0)) -> true
+++ added new clause(s)
	count(s(s(s(0))), xts .. nil) <= s(s(0)) = true
	s(s(0)) == xts2 = false => count(s(s(s(0))), xts1 .. nil) <= s(s(0)) = true
... to conjectures

+++ Status of the Inference System
--- Conjectures:
	xts2 == 0 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) = true
	xts3 == s(xts2) = true => count(s(s(s(xts3))), xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == s(xts2) = false => count(s(s(s(xts3))), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == xts2 = true => count(s(s(s(xts3))), xts1 .. nil) <= s(s(0)) = true
	count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == xts2 = false => count(s(s(s(xts3))), xts1 .. nil) <= s(s(s(0))) = true
	s(xts3) == xts2 = true => count(s(s(s(xts3))), xts1 .. nil) <= s(s(0)) = true
	s(xts3) == xts2 = false => count(s(s(s(xts3))), xts1 .. nil) <= s(s(s(0))) = true
	0 == xts2 = true => count(s(s(0)), xts1 .. nil) <= s(s(0)) = true
	count(s(s(0)), xts .. nil) <= s(s(s(0))) = true
	0 == xts2 = false => count(s(s(0)), xts1 .. nil) <= s(s(s(0))) = true
	s(s(s(s(xts3)))) == xts2 = true => count(s(s(s(s(xts3)))), xts1 .. nil) <= s(s(0)) = true
	s(s(s(s(xts3)))) == xts2 = false => count(s(s(s(s(xts3)))), xts1 .. nil) <= s(s(s(0))) = true
	s(s(s(0))) == xts2 = true => count(s(s(s(0))), xts1 .. nil) <= s(s(0)) = true
	s(s(s(0))) == xts2 = false => count(s(s(s(0))), xts1 .. nil) <= s(s(s(0))) = true
	count(s(s(0)), xts .. nil) <= s(0) = true
	count(s(s(0)), xts .. nil) <= s(s(0)) = true
	s(s(0)) == xts2 = true => count(s(s(s(0))), xts1 .. nil) <= s(0) = true
	count(s(s(s(0))), xts .. nil) <= s(s(0)) = true
	s(s(0)) == xts2 = false => count(s(s(s(0))), xts1 .. nil) <= s(s(0)) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	count(x, xs) <= len(xs) -> true
	count(x, xts .. yts) <= s(len(yts)) -> true
	0 == xts = true => count(0, xts .. nil) <= s(0) -> true
	count(x, xts2 .. xts1 .. yts) <= s(s(len(yts))) -> true
	0 == xts = true => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = true => count(s(0), xts .. nil) <= s(0) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = true => count(s(0), xts .. nil) <= s(s(0)) -> true
	0 == xts = true => count(s(s(0)), xts .. nil) <= s(0) -> true
	s(0) == xts = true => count(s(0), xts .. nil) <= s(0) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(s(0))) -> true
	0 == xts = false => count(s(0), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	s(0) == xts = true => count(s(0), xts .. nil) <= s(s(0)) -> true
	s(0) == xts = true => count(s(s(0)), xts .. nil) <= s(0) -> true
	0 == xts = false => count(s(0), xts .. nil) <= s(s(s(0))) -> true
	0 == xts = false => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	s(0) == xts = false => count(s(0), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	count(x, xts3 .. xts2 .. xts1 .. yts) <= s(s(s(len(yts)))) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	0 == xts = true => count(0, xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(0) == xts = true => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	s(s(0)) == xts = true => count(s(s(0)), xts .. nil) <= s(0) -> true
	s(0) == xts = false => count(s(0), xts .. nil) <= s(s(s(0))) -> true
	s(0) == xts = false => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	xts == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	s(s(0)) == xts = true => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	0 == xts = false => count(0, xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(0) == xts = false => count(s(s(0)), xts .. nil) <= s(s(s(0))) -> true
	s(s(0)) == xts = false => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(s(s(0))) == xts = true => count(s(s(s(0))), xts .. nil) <= s(0) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	s(s(0)) == xts = false => count(s(s(0)), xts .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	xts2 == s(xts1) = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	s(s(s(0))) == xts = false => count(s(s(s(0))), xts .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(xts2)) == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(xts2)) == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(xts2)) == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = false => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(s(xts2))) == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(xts2)) == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(s(xts2))) == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> yts
	^f0($n0 + 1; yts, xts@) -> xts$n0 .. ^f0($n0; yts, xts@)
	^f1(0; yts) -> len(yts)
	^f1($n1 + 1; yts) -> s(^f1($n1; yts))
	^f136(0; xts) -> xts
	^f136($n136 + 1; xts) -> s(^f136($n136; xts))
	^f741(0) -> 0
	^f741($n741 + 1) -> s(^f741($n741))
+++ }
+++ Lemma(s)           = 
	count(x, xts$n .. ^f0($n; yts, xts@)) <= s(^f1($n; yts)) = true
	xts3 == xts2 = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(0) = true
	xts3 == xts2 = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = true => count(s(^f136($n; xts2)), xts1 .. nil) <= s(0) = true
	xts3 == s(xts2) = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(0) = true
	xts2 == 0 = false => count(s(^f136($n; xts2)), xts1 .. nil) <= s(s(0)) = true
	xts3 == s(xts2) = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true
	xts4 == xts3 = true => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts4 == xts3 = false => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts3 == 0 = true => count(s(^f136($n; xts3)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts4 == s(xts3) = true => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts3 == 0 = false => count(s(^f136($n; xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts4 == s(xts3) = false => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	0 == xts2 = true => count(^f741($n), xts1 .. nil) <= s(0) = true
	0 == xts2 = false => count(^f741($n), xts1 .. nil) <= s(s(0)) = true

+++ treating clause
	xts2 == 0 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) = true
+++ inductive narrowing on conjecture
	xts2 == 0 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) = true
... induction variables of
	xts2 == 0 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) = true
... are:
	xts2:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	xts2 == 0 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) = true
... with variable xts2
+++ creating new conjecture
	0 == 0 = true => count(s(s(s(0))), xts .. nil) <= s(s(0)) = true
+++ creating new conjecture
	s(xts2) == 0 = true => count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(0)) = true
--- clause
	0 == 0 = true => count(s(s(s(0))), xts .. nil) <= s(s(0)) = true
... reduced in 1 step to
	count(s(s(s(0))), xts .. nil) <= s(s(0)) = true
--- clause
	s(xts2) == 0 = true => count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(0)) = true
... reduced in 1 step to
	false = true => count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(0)) = true
--- clause
	false = true => count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(0)) = true
... contains a ground negative condition
	false = true
... and is therefore discarded (false => t is always true)
--- clause
	count(s(s(s(0))), xts .. nil) <= s(s(0)) = true
... subsumed by an existing conjecture
+++ inductive narrowing succeeded
--- clause
	xts2 == 0 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) = true
... oriented to rule
	xts == 0 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true

+++ Status of the Inference System
--- Conjectures:
	xts3 == s(xts2) = true => count(s(s(s(xts3))), xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == s(xts2) = false => count(s(s(s(xts3))), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == xts2 = true => count(s(s(s(xts3))), xts1 .. nil) <= s(s(0)) = true
	count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == xts2 = false => count(s(s(s(xts3))), xts1 .. nil) <= s(s(s(0))) = true
	s(xts3) == xts2 = true => count(s(s(s(xts3))), xts1 .. nil) <= s(s(0)) = true
	s(xts3) == xts2 = false => count(s(s(s(xts3))), xts1 .. nil) <= s(s(s(0))) = true
	0 == xts2 = true => count(s(s(0)), xts1 .. nil) <= s(s(0)) = true
	count(s(s(0)), xts .. nil) <= s(s(s(0))) = true
	0 == xts2 = false => count(s(s(0)), xts1 .. nil) <= s(s(s(0))) = true
	s(s(s(s(xts3)))) == xts2 = true => count(s(s(s(s(xts3)))), xts1 .. nil) <= s(s(0)) = true
	s(s(s(s(xts3)))) == xts2 = false => count(s(s(s(s(xts3)))), xts1 .. nil) <= s(s(s(0))) = true
	s(s(s(0))) == xts2 = true => count(s(s(s(0))), xts1 .. nil) <= s(s(0)) = true
	s(s(s(0))) == xts2 = false => count(s(s(s(0))), xts1 .. nil) <= s(s(s(0))) = true
	count(s(s(0)), xts .. nil) <= s(0) = true
	count(s(s(0)), xts .. nil) <= s(s(0)) = true
	s(s(0)) == xts2 = true => count(s(s(s(0))), xts1 .. nil) <= s(0) = true
	count(s(s(s(0))), xts .. nil) <= s(s(0)) = true
	s(s(0)) == xts2 = false => count(s(s(s(0))), xts1 .. nil) <= s(s(0)) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	count(x, xs) <= len(xs) -> true
	count(x, xts .. yts) <= s(len(yts)) -> true
	0 == xts = true => count(0, xts .. nil) <= s(0) -> true
	count(x, xts2 .. xts1 .. yts) <= s(s(len(yts))) -> true
	0 == xts = true => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = true => count(s(0), xts .. nil) <= s(0) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = true => count(s(0), xts .. nil) <= s(s(0)) -> true
	0 == xts = true => count(s(s(0)), xts .. nil) <= s(0) -> true
	s(0) == xts = true => count(s(0), xts .. nil) <= s(0) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(s(0))) -> true
	0 == xts = false => count(s(0), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	s(0) == xts = true => count(s(0), xts .. nil) <= s(s(0)) -> true
	s(0) == xts = true => count(s(s(0)), xts .. nil) <= s(0) -> true
	0 == xts = false => count(s(0), xts .. nil) <= s(s(s(0))) -> true
	0 == xts = false => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	s(0) == xts = false => count(s(0), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	count(x, xts3 .. xts2 .. xts1 .. yts) <= s(s(s(len(yts)))) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	0 == xts = true => count(0, xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(0) == xts = true => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	s(s(0)) == xts = true => count(s(s(0)), xts .. nil) <= s(0) -> true
	s(0) == xts = false => count(s(0), xts .. nil) <= s(s(s(0))) -> true
	s(0) == xts = false => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	xts == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	s(s(0)) == xts = true => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	0 == xts = false => count(0, xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(0) == xts = false => count(s(s(0)), xts .. nil) <= s(s(s(0))) -> true
	s(s(0)) == xts = false => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(s(s(0))) == xts = true => count(s(s(s(0))), xts .. nil) <= s(0) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	s(s(0)) == xts = false => count(s(s(0)), xts .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	xts2 == s(xts1) = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	s(s(s(0))) == xts = false => count(s(s(s(0))), xts .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(xts2)) == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(xts2)) == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(xts2)) == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = false => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(s(xts2))) == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(xts2)) == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(s(xts2))) == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> yts
	^f0($n0 + 1; yts, xts@) -> xts$n0 .. ^f0($n0; yts, xts@)
	^f1(0; yts) -> len(yts)
	^f1($n1 + 1; yts) -> s(^f1($n1; yts))
	^f136(0; xts) -> xts
	^f136($n136 + 1; xts) -> s(^f136($n136; xts))
	^f741(0) -> 0
	^f741($n741 + 1) -> s(^f741($n741))
+++ }
+++ Lemma(s)           = 
	count(x, xts$n .. ^f0($n; yts, xts@)) <= s(^f1($n; yts)) = true
	xts3 == xts2 = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(0) = true
	xts3 == xts2 = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = true => count(s(^f136($n; xts2)), xts1 .. nil) <= s(0) = true
	xts3 == s(xts2) = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(0) = true
	xts2 == 0 = false => count(s(^f136($n; xts2)), xts1 .. nil) <= s(s(0)) = true
	xts3 == s(xts2) = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true
	xts4 == xts3 = true => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts4 == xts3 = false => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts3 == 0 = true => count(s(^f136($n; xts3)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts4 == s(xts3) = true => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts3 == 0 = false => count(s(^f136($n; xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts4 == s(xts3) = false => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	0 == xts2 = true => count(^f741($n), xts1 .. nil) <= s(0) = true
	0 == xts2 = false => count(^f741($n), xts1 .. nil) <= s(s(0)) = true

+++ treating clause
	xts3 == s(xts2) = true => count(s(s(s(xts3))), xts1 .. nil) <= s(s(0)) = true
+++ inductive narrowing on conjecture
	xts3 == s(xts2) = true => count(s(s(s(xts3))), xts1 .. nil) <= s(s(0)) = true
... induction variables of
	xts3 == s(xts2) = true => count(s(s(s(xts3))), xts1 .. nil) <= s(s(0)) = true
... are:
	xts3:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	xts3 == s(xts2) = true => count(s(s(s(xts3))), xts1 .. nil) <= s(s(0)) = true
... with variable xts3
+++ creating new conjecture
	0 == s(xts2) = true => count(s(s(s(0))), xts1 .. nil) <= s(s(0)) = true
+++ creating new conjecture
	s(xts3) == s(xts2) = true => count(s(s(s(s(xts3)))), xts1 .. nil) <= s(s(0)) = true
--- clause
	0 == s(xts2) = true => count(s(s(s(0))), xts1 .. nil) <= s(s(0)) = true
... reduced in 1 step to
	false = true => count(s(s(s(0))), xts .. nil) <= s(s(0)) = true
--- clause
	false = true => count(s(s(s(0))), xts .. nil) <= s(s(0)) = true
... contains a ground negative condition
	false = true
... and is therefore discarded (false => t is always true)
--- clause
	s(xts3) == s(xts2) = true => count(s(s(s(s(xts3)))), xts1 .. nil) <= s(s(0)) = true
... reduced in 1 step to
	xts3 == xts2 = true => count(s(s(s(s(xts3)))), xts1 .. nil) <= s(s(0)) = true
+++ inductive narrowing succeeded
--- clause
	xts3 == s(xts2) = true => count(s(s(s(xts3))), xts1 .. nil) <= s(s(0)) = true
... oriented to rule
	xts2 == s(xts1) = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
+++ added new clause(s)
	xts3 == xts2 = true => count(s(s(s(s(xts3)))), xts1 .. nil) <= s(s(0)) = true
... to conjectures

+++ Status of the Inference System
--- Conjectures:
	xts2 == 0 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == s(xts2) = false => count(s(s(s(xts3))), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == xts2 = true => count(s(s(s(xts3))), xts1 .. nil) <= s(s(0)) = true
	count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == xts2 = false => count(s(s(s(xts3))), xts1 .. nil) <= s(s(s(0))) = true
	s(xts3) == xts2 = true => count(s(s(s(xts3))), xts1 .. nil) <= s(s(0)) = true
	s(xts3) == xts2 = false => count(s(s(s(xts3))), xts1 .. nil) <= s(s(s(0))) = true
	0 == xts2 = true => count(s(s(0)), xts1 .. nil) <= s(s(0)) = true
	count(s(s(0)), xts .. nil) <= s(s(s(0))) = true
	0 == xts2 = false => count(s(s(0)), xts1 .. nil) <= s(s(s(0))) = true
	s(s(s(s(xts3)))) == xts2 = true => count(s(s(s(s(xts3)))), xts1 .. nil) <= s(s(0)) = true
	s(s(s(s(xts3)))) == xts2 = false => count(s(s(s(s(xts3)))), xts1 .. nil) <= s(s(s(0))) = true
	s(s(s(0))) == xts2 = true => count(s(s(s(0))), xts1 .. nil) <= s(s(0)) = true
	s(s(s(0))) == xts2 = false => count(s(s(s(0))), xts1 .. nil) <= s(s(s(0))) = true
	count(s(s(0)), xts .. nil) <= s(0) = true
	count(s(s(0)), xts .. nil) <= s(s(0)) = true
	s(s(0)) == xts2 = true => count(s(s(s(0))), xts1 .. nil) <= s(0) = true
	count(s(s(s(0))), xts .. nil) <= s(s(0)) = true
	s(s(0)) == xts2 = false => count(s(s(s(0))), xts1 .. nil) <= s(s(0)) = true
	xts3 == xts2 = true => count(s(s(s(s(xts3)))), xts1 .. nil) <= s(s(0)) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	count(x, xs) <= len(xs) -> true
	count(x, xts .. yts) <= s(len(yts)) -> true
	0 == xts = true => count(0, xts .. nil) <= s(0) -> true
	count(x, xts2 .. xts1 .. yts) <= s(s(len(yts))) -> true
	0 == xts = true => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = true => count(s(0), xts .. nil) <= s(0) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = true => count(s(0), xts .. nil) <= s(s(0)) -> true
	0 == xts = true => count(s(s(0)), xts .. nil) <= s(0) -> true
	s(0) == xts = true => count(s(0), xts .. nil) <= s(0) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(s(0))) -> true
	0 == xts = false => count(s(0), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	s(0) == xts = true => count(s(0), xts .. nil) <= s(s(0)) -> true
	s(0) == xts = true => count(s(s(0)), xts .. nil) <= s(0) -> true
	0 == xts = false => count(s(0), xts .. nil) <= s(s(s(0))) -> true
	0 == xts = false => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	s(0) == xts = false => count(s(0), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	count(x, xts3 .. xts2 .. xts1 .. yts) <= s(s(s(len(yts)))) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	0 == xts = true => count(0, xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(0) == xts = true => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	s(s(0)) == xts = true => count(s(s(0)), xts .. nil) <= s(0) -> true
	s(0) == xts = false => count(s(0), xts .. nil) <= s(s(s(0))) -> true
	s(0) == xts = false => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	xts == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	s(s(0)) == xts = true => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	0 == xts = false => count(0, xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(0) == xts = false => count(s(s(0)), xts .. nil) <= s(s(s(0))) -> true
	s(s(0)) == xts = false => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(s(s(0))) == xts = true => count(s(s(s(0))), xts .. nil) <= s(0) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	s(s(0)) == xts = false => count(s(s(0)), xts .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	xts2 == s(xts1) = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	s(s(s(0))) == xts = false => count(s(s(s(0))), xts .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(xts2)) == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(xts2)) == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(xts2)) == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = false => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(s(xts2))) == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(xts2)) == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(s(xts2))) == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> yts
	^f0($n0 + 1; yts, xts@) -> xts$n0 .. ^f0($n0; yts, xts@)
	^f1(0; yts) -> len(yts)
	^f1($n1 + 1; yts) -> s(^f1($n1; yts))
	^f136(0; xts) -> xts
	^f136($n136 + 1; xts) -> s(^f136($n136; xts))
	^f741(0) -> 0
	^f741($n741 + 1) -> s(^f741($n741))
+++ }
+++ Lemma(s)           = 
	count(x, xts$n .. ^f0($n; yts, xts@)) <= s(^f1($n; yts)) = true
	xts3 == xts2 = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(0) = true
	xts3 == xts2 = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = true => count(s(^f136($n; xts2)), xts1 .. nil) <= s(0) = true
	xts3 == s(xts2) = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(0) = true
	xts2 == 0 = false => count(s(^f136($n; xts2)), xts1 .. nil) <= s(s(0)) = true
	xts3 == s(xts2) = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true
	xts4 == xts3 = true => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts4 == xts3 = false => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts3 == 0 = true => count(s(^f136($n; xts3)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts4 == s(xts3) = true => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts3 == 0 = false => count(s(^f136($n; xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts4 == s(xts3) = false => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	0 == xts2 = true => count(^f741($n), xts1 .. nil) <= s(0) = true
	0 == xts2 = false => count(^f741($n), xts1 .. nil) <= s(s(0)) = true

+++ treating clause
	xts2 == 0 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) = true
+++ inductive narrowing on conjecture
	xts2 == 0 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) = true
... induction variables of
	xts2 == 0 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) = true
... are:
	xts2:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	xts2 == 0 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) = true
... with variable xts2
+++ creating new conjecture
	0 == 0 = false => count(s(s(s(0))), xts .. nil) <= s(s(s(0))) = true
+++ creating new conjecture
	s(xts2) == 0 = false => count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(s(0))) = true
--- clause
	0 == 0 = false => count(s(s(s(0))), xts .. nil) <= s(s(s(0))) = true
... reduced in 1 step to
	true = false => count(s(s(s(0))), xts .. nil) <= s(s(s(0))) = true
--- clause
	true = false => count(s(s(s(0))), xts .. nil) <= s(s(s(0))) = true
... contains a ground negative condition
	true = false
... and is therefore discarded (false => t is always true)
--- clause
	s(xts2) == 0 = false => count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(s(0))) = true
... reduced in 1 step to
	count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(s(0))) = true
+++ inductive narrowing succeeded
--- clause
	xts2 == 0 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) = true
... oriented to rule
	xts == 0 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
+++ added new clause(s)
	count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(s(0))) = true
... to conjectures

+++ Status of the Inference System
--- Conjectures:
	xts3 == s(xts2) = false => count(s(s(s(xts3))), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == xts2 = true => count(s(s(s(xts3))), xts1 .. nil) <= s(s(0)) = true
	count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == xts2 = false => count(s(s(s(xts3))), xts1 .. nil) <= s(s(s(0))) = true
	s(xts3) == xts2 = true => count(s(s(s(xts3))), xts1 .. nil) <= s(s(0)) = true
	s(xts3) == xts2 = false => count(s(s(s(xts3))), xts1 .. nil) <= s(s(s(0))) = true
	0 == xts2 = true => count(s(s(0)), xts1 .. nil) <= s(s(0)) = true
	count(s(s(0)), xts .. nil) <= s(s(s(0))) = true
	0 == xts2 = false => count(s(s(0)), xts1 .. nil) <= s(s(s(0))) = true
	s(s(s(s(xts3)))) == xts2 = true => count(s(s(s(s(xts3)))), xts1 .. nil) <= s(s(0)) = true
	s(s(s(s(xts3)))) == xts2 = false => count(s(s(s(s(xts3)))), xts1 .. nil) <= s(s(s(0))) = true
	s(s(s(0))) == xts2 = true => count(s(s(s(0))), xts1 .. nil) <= s(s(0)) = true
	s(s(s(0))) == xts2 = false => count(s(s(s(0))), xts1 .. nil) <= s(s(s(0))) = true
	count(s(s(0)), xts .. nil) <= s(0) = true
	count(s(s(0)), xts .. nil) <= s(s(0)) = true
	s(s(0)) == xts2 = true => count(s(s(s(0))), xts1 .. nil) <= s(0) = true
	count(s(s(s(0))), xts .. nil) <= s(s(0)) = true
	s(s(0)) == xts2 = false => count(s(s(s(0))), xts1 .. nil) <= s(s(0)) = true
	xts3 == xts2 = true => count(s(s(s(s(xts3)))), xts1 .. nil) <= s(s(0)) = true
	count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(s(0))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	count(x, xs) <= len(xs) -> true
	count(x, xts .. yts) <= s(len(yts)) -> true
	0 == xts = true => count(0, xts .. nil) <= s(0) -> true
	count(x, xts2 .. xts1 .. yts) <= s(s(len(yts))) -> true
	0 == xts = true => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = true => count(s(0), xts .. nil) <= s(0) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = true => count(s(0), xts .. nil) <= s(s(0)) -> true
	0 == xts = true => count(s(s(0)), xts .. nil) <= s(0) -> true
	s(0) == xts = true => count(s(0), xts .. nil) <= s(0) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(s(0))) -> true
	0 == xts = false => count(s(0), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	s(0) == xts = true => count(s(0), xts .. nil) <= s(s(0)) -> true
	s(0) == xts = true => count(s(s(0)), xts .. nil) <= s(0) -> true
	0 == xts = false => count(s(0), xts .. nil) <= s(s(s(0))) -> true
	0 == xts = false => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	s(0) == xts = false => count(s(0), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	count(x, xts3 .. xts2 .. xts1 .. yts) <= s(s(s(len(yts)))) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	0 == xts = true => count(0, xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(0) == xts = true => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	s(s(0)) == xts = true => count(s(s(0)), xts .. nil) <= s(0) -> true
	s(0) == xts = false => count(s(0), xts .. nil) <= s(s(s(0))) -> true
	s(0) == xts = false => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	xts == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	s(s(0)) == xts = true => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	0 == xts = false => count(0, xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(0) == xts = false => count(s(s(0)), xts .. nil) <= s(s(s(0))) -> true
	s(s(0)) == xts = false => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(s(s(0))) == xts = true => count(s(s(s(0))), xts .. nil) <= s(0) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	s(s(0)) == xts = false => count(s(s(0)), xts .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	xts2 == s(xts1) = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	s(s(s(0))) == xts = false => count(s(s(s(0))), xts .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(xts2)) == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(xts2)) == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(xts2)) == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = false => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(s(xts2))) == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(xts2)) == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(s(xts2))) == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> yts
	^f0($n0 + 1; yts, xts@) -> xts$n0 .. ^f0($n0; yts, xts@)
	^f1(0; yts) -> len(yts)
	^f1($n1 + 1; yts) -> s(^f1($n1; yts))
	^f136(0; xts) -> xts
	^f136($n136 + 1; xts) -> s(^f136($n136; xts))
	^f741(0) -> 0
	^f741($n741 + 1) -> s(^f741($n741))
+++ }
+++ Lemma(s)           = 
	count(x, xts$n .. ^f0($n; yts, xts@)) <= s(^f1($n; yts)) = true
	xts3 == xts2 = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(0) = true
	xts3 == xts2 = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = true => count(s(^f136($n; xts2)), xts1 .. nil) <= s(0) = true
	xts3 == s(xts2) = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(0) = true
	xts2 == 0 = false => count(s(^f136($n; xts2)), xts1 .. nil) <= s(s(0)) = true
	xts3 == s(xts2) = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true
	xts4 == xts3 = true => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts4 == xts3 = false => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts3 == 0 = true => count(s(^f136($n; xts3)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts4 == s(xts3) = true => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts3 == 0 = false => count(s(^f136($n; xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts4 == s(xts3) = false => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	0 == xts2 = true => count(^f741($n), xts1 .. nil) <= s(0) = true
	0 == xts2 = false => count(^f741($n), xts1 .. nil) <= s(s(0)) = true

+++ treating clause
	xts3 == s(xts2) = false => count(s(s(s(xts3))), xts1 .. nil) <= s(s(s(0))) = true
+++ inductive narrowing on conjecture
	xts3 == s(xts2) = false => count(s(s(s(xts3))), xts1 .. nil) <= s(s(s(0))) = true
... induction variables of
	xts3 == s(xts2) = false => count(s(s(s(xts3))), xts1 .. nil) <= s(s(s(0))) = true
... are:
	xts3:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	xts3 == s(xts2) = false => count(s(s(s(xts3))), xts1 .. nil) <= s(s(s(0))) = true
... with variable xts3
+++ creating new conjecture
	0 == s(xts2) = false => count(s(s(s(0))), xts1 .. nil) <= s(s(s(0))) = true
+++ creating new conjecture
	s(xts3) == s(xts2) = false => count(s(s(s(s(xts3)))), xts1 .. nil) <= s(s(s(0))) = true
--- clause
	0 == s(xts2) = false => count(s(s(s(0))), xts1 .. nil) <= s(s(s(0))) = true
... reduced in 1 step to
	count(s(s(s(0))), xts .. nil) <= s(s(s(0))) = true
--- clause
	s(xts3) == s(xts2) = false => count(s(s(s(s(xts3)))), xts1 .. nil) <= s(s(s(0))) = true
... reduced in 1 step to
	xts3 == xts2 = false => count(s(s(s(s(xts3)))), xts1 .. nil) <= s(s(s(0))) = true
--- clause
	count(s(s(s(0))), xts .. nil) <= s(s(s(0))) = true
... subsumed by an existing conjecture
+++ inductive narrowing succeeded
--- clause
	xts3 == s(xts2) = false => count(s(s(s(xts3))), xts1 .. nil) <= s(s(s(0))) = true
... oriented to rule
	xts2 == s(xts1) = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
+++ added new clause(s)
	xts3 == xts2 = false => count(s(s(s(s(xts3)))), xts1 .. nil) <= s(s(s(0))) = true
... to conjectures

+++ Status of the Inference System
--- Conjectures:
	xts3 == xts2 = true => count(s(s(s(xts3))), xts1 .. nil) <= s(s(0)) = true
	count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == xts2 = false => count(s(s(s(xts3))), xts1 .. nil) <= s(s(s(0))) = true
	s(xts3) == xts2 = true => count(s(s(s(xts3))), xts1 .. nil) <= s(s(0)) = true
	s(xts3) == xts2 = false => count(s(s(s(xts3))), xts1 .. nil) <= s(s(s(0))) = true
	0 == xts2 = true => count(s(s(0)), xts1 .. nil) <= s(s(0)) = true
	count(s(s(0)), xts .. nil) <= s(s(s(0))) = true
	0 == xts2 = false => count(s(s(0)), xts1 .. nil) <= s(s(s(0))) = true
	s(s(s(s(xts3)))) == xts2 = true => count(s(s(s(s(xts3)))), xts1 .. nil) <= s(s(0)) = true
	s(s(s(s(xts3)))) == xts2 = false => count(s(s(s(s(xts3)))), xts1 .. nil) <= s(s(s(0))) = true
	s(s(s(0))) == xts2 = true => count(s(s(s(0))), xts1 .. nil) <= s(s(0)) = true
	s(s(s(0))) == xts2 = false => count(s(s(s(0))), xts1 .. nil) <= s(s(s(0))) = true
	count(s(s(0)), xts .. nil) <= s(0) = true
	count(s(s(0)), xts .. nil) <= s(s(0)) = true
	s(s(0)) == xts2 = true => count(s(s(s(0))), xts1 .. nil) <= s(0) = true
	count(s(s(s(0))), xts .. nil) <= s(s(0)) = true
	s(s(0)) == xts2 = false => count(s(s(s(0))), xts1 .. nil) <= s(s(0)) = true
	xts3 == xts2 = true => count(s(s(s(s(xts3)))), xts1 .. nil) <= s(s(0)) = true
	count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == xts2 = false => count(s(s(s(s(xts3)))), xts1 .. nil) <= s(s(s(0))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	count(x, xs) <= len(xs) -> true
	count(x, xts .. yts) <= s(len(yts)) -> true
	0 == xts = true => count(0, xts .. nil) <= s(0) -> true
	count(x, xts2 .. xts1 .. yts) <= s(s(len(yts))) -> true
	0 == xts = true => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = true => count(s(0), xts .. nil) <= s(0) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = true => count(s(0), xts .. nil) <= s(s(0)) -> true
	0 == xts = true => count(s(s(0)), xts .. nil) <= s(0) -> true
	s(0) == xts = true => count(s(0), xts .. nil) <= s(0) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(s(0))) -> true
	0 == xts = false => count(s(0), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	s(0) == xts = true => count(s(0), xts .. nil) <= s(s(0)) -> true
	s(0) == xts = true => count(s(s(0)), xts .. nil) <= s(0) -> true
	0 == xts = false => count(s(0), xts .. nil) <= s(s(s(0))) -> true
	0 == xts = false => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	s(0) == xts = false => count(s(0), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	count(x, xts3 .. xts2 .. xts1 .. yts) <= s(s(s(len(yts)))) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	0 == xts = true => count(0, xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(0) == xts = true => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	s(s(0)) == xts = true => count(s(s(0)), xts .. nil) <= s(0) -> true
	s(0) == xts = false => count(s(0), xts .. nil) <= s(s(s(0))) -> true
	s(0) == xts = false => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	xts == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	s(s(0)) == xts = true => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	0 == xts = false => count(0, xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(0) == xts = false => count(s(s(0)), xts .. nil) <= s(s(s(0))) -> true
	s(s(0)) == xts = false => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(s(s(0))) == xts = true => count(s(s(s(0))), xts .. nil) <= s(0) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	s(s(0)) == xts = false => count(s(s(0)), xts .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	xts2 == s(xts1) = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	s(s(s(0))) == xts = false => count(s(s(s(0))), xts .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(xts2)) == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(xts2)) == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(xts2)) == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = false => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(s(xts2))) == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(xts2)) == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(s(xts2))) == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> yts
	^f0($n0 + 1; yts, xts@) -> xts$n0 .. ^f0($n0; yts, xts@)
	^f1(0; yts) -> len(yts)
	^f1($n1 + 1; yts) -> s(^f1($n1; yts))
	^f136(0; xts) -> xts
	^f136($n136 + 1; xts) -> s(^f136($n136; xts))
	^f741(0) -> 0
	^f741($n741 + 1) -> s(^f741($n741))
+++ }
+++ Lemma(s)           = 
	count(x, xts$n .. ^f0($n; yts, xts@)) <= s(^f1($n; yts)) = true
	xts3 == xts2 = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(0) = true
	xts3 == xts2 = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = true => count(s(^f136($n; xts2)), xts1 .. nil) <= s(0) = true
	xts3 == s(xts2) = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(0) = true
	xts2 == 0 = false => count(s(^f136($n; xts2)), xts1 .. nil) <= s(s(0)) = true
	xts3 == s(xts2) = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true
	xts4 == xts3 = true => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts4 == xts3 = false => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts3 == 0 = true => count(s(^f136($n; xts3)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts4 == s(xts3) = true => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts3 == 0 = false => count(s(^f136($n; xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts4 == s(xts3) = false => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	0 == xts2 = true => count(^f741($n), xts1 .. nil) <= s(0) = true
	0 == xts2 = false => count(^f741($n), xts1 .. nil) <= s(s(0)) = true

+++ treating clause
	xts3 == xts2 = true => count(s(s(s(xts3))), xts1 .. nil) <= s(s(0)) = true
+++ inductive narrowing on conjecture
	xts3 == xts2 = true => count(s(s(s(xts3))), xts1 .. nil) <= s(s(0)) = true
... induction variables of
	xts3 == xts2 = true => count(s(s(s(xts3))), xts1 .. nil) <= s(s(0)) = true
... are:
	xts2:nat
	xts3:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	xts3 == xts2 = true => count(s(s(s(xts3))), xts1 .. nil) <= s(s(0)) = true
... with variable xts2
+++ creating new conjecture
	xts2 == 0 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) = true
+++ creating new conjecture
	xts3 == s(xts2) = true => count(s(s(s(xts3))), xts1 .. nil) <= s(s(0)) = true
+++ inductive narrowing succeeded
--- clause
	xts3 == xts2 = true => count(s(s(s(xts3))), xts1 .. nil) <= s(s(0)) = true
... oriented to rule
	xts2 == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
+++ added new clause(s)
	xts2 == 0 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) = true
	xts3 == s(xts2) = true => count(s(s(s(xts3))), xts1 .. nil) <= s(s(0)) = true
... to conjectures

+++ Status of the Inference System
--- Conjectures:
	count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == xts2 = false => count(s(s(s(xts3))), xts1 .. nil) <= s(s(s(0))) = true
	s(xts3) == xts2 = true => count(s(s(s(xts3))), xts1 .. nil) <= s(s(0)) = true
	s(xts3) == xts2 = false => count(s(s(s(xts3))), xts1 .. nil) <= s(s(s(0))) = true
	0 == xts2 = true => count(s(s(0)), xts1 .. nil) <= s(s(0)) = true
	count(s(s(0)), xts .. nil) <= s(s(s(0))) = true
	0 == xts2 = false => count(s(s(0)), xts1 .. nil) <= s(s(s(0))) = true
	s(s(s(s(xts3)))) == xts2 = true => count(s(s(s(s(xts3)))), xts1 .. nil) <= s(s(0)) = true
	s(s(s(s(xts3)))) == xts2 = false => count(s(s(s(s(xts3)))), xts1 .. nil) <= s(s(s(0))) = true
	s(s(s(0))) == xts2 = true => count(s(s(s(0))), xts1 .. nil) <= s(s(0)) = true
	s(s(s(0))) == xts2 = false => count(s(s(s(0))), xts1 .. nil) <= s(s(s(0))) = true
	count(s(s(0)), xts .. nil) <= s(0) = true
	count(s(s(0)), xts .. nil) <= s(s(0)) = true
	s(s(0)) == xts2 = true => count(s(s(s(0))), xts1 .. nil) <= s(0) = true
	count(s(s(s(0))), xts .. nil) <= s(s(0)) = true
	s(s(0)) == xts2 = false => count(s(s(s(0))), xts1 .. nil) <= s(s(0)) = true
	xts3 == xts2 = true => count(s(s(s(s(xts3)))), xts1 .. nil) <= s(s(0)) = true
	count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == xts2 = false => count(s(s(s(s(xts3)))), xts1 .. nil) <= s(s(s(0))) = true
	xts2 == 0 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) = true
	xts3 == s(xts2) = true => count(s(s(s(xts3))), xts1 .. nil) <= s(s(0)) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	count(x, xs) <= len(xs) -> true
	count(x, xts .. yts) <= s(len(yts)) -> true
	0 == xts = true => count(0, xts .. nil) <= s(0) -> true
	count(x, xts2 .. xts1 .. yts) <= s(s(len(yts))) -> true
	0 == xts = true => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = true => count(s(0), xts .. nil) <= s(0) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = true => count(s(0), xts .. nil) <= s(s(0)) -> true
	0 == xts = true => count(s(s(0)), xts .. nil) <= s(0) -> true
	s(0) == xts = true => count(s(0), xts .. nil) <= s(0) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(s(0))) -> true
	0 == xts = false => count(s(0), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	s(0) == xts = true => count(s(0), xts .. nil) <= s(s(0)) -> true
	s(0) == xts = true => count(s(s(0)), xts .. nil) <= s(0) -> true
	0 == xts = false => count(s(0), xts .. nil) <= s(s(s(0))) -> true
	0 == xts = false => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	s(0) == xts = false => count(s(0), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	count(x, xts3 .. xts2 .. xts1 .. yts) <= s(s(s(len(yts)))) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	0 == xts = true => count(0, xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(0) == xts = true => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	s(s(0)) == xts = true => count(s(s(0)), xts .. nil) <= s(0) -> true
	s(0) == xts = false => count(s(0), xts .. nil) <= s(s(s(0))) -> true
	s(0) == xts = false => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	xts == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	s(s(0)) == xts = true => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	0 == xts = false => count(0, xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(0) == xts = false => count(s(s(0)), xts .. nil) <= s(s(s(0))) -> true
	s(s(0)) == xts = false => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(s(s(0))) == xts = true => count(s(s(s(0))), xts .. nil) <= s(0) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	s(s(0)) == xts = false => count(s(s(0)), xts .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	xts2 == s(xts1) = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	s(s(s(0))) == xts = false => count(s(s(s(0))), xts .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(xts2)) == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(xts2)) == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(xts2)) == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = false => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(s(xts2))) == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(xts2)) == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(s(xts2))) == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> yts
	^f0($n0 + 1; yts, xts@) -> xts$n0 .. ^f0($n0; yts, xts@)
	^f1(0; yts) -> len(yts)
	^f1($n1 + 1; yts) -> s(^f1($n1; yts))
	^f136(0; xts) -> xts
	^f136($n136 + 1; xts) -> s(^f136($n136; xts))
	^f741(0) -> 0
	^f741($n741 + 1) -> s(^f741($n741))
+++ }
+++ Lemma(s)           = 
	count(x, xts$n .. ^f0($n; yts, xts@)) <= s(^f1($n; yts)) = true
	xts3 == xts2 = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(0) = true
	xts3 == xts2 = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = true => count(s(^f136($n; xts2)), xts1 .. nil) <= s(0) = true
	xts3 == s(xts2) = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(0) = true
	xts2 == 0 = false => count(s(^f136($n; xts2)), xts1 .. nil) <= s(s(0)) = true
	xts3 == s(xts2) = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true
	xts4 == xts3 = true => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts4 == xts3 = false => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts3 == 0 = true => count(s(^f136($n; xts3)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts4 == s(xts3) = true => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts3 == 0 = false => count(s(^f136($n; xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts4 == s(xts3) = false => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	0 == xts2 = true => count(^f741($n), xts1 .. nil) <= s(0) = true
	0 == xts2 = false => count(^f741($n), xts1 .. nil) <= s(s(0)) = true

+++ treating clause
	count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) = true
--- no new clauses created
+++ attempting case rewriting
--- case rewriting generated new conjectures
	s(s(s(xts2))) == xts1 = true => s(0) <= s(s(s(0))) = true
	s(s(s(xts2))) == xts1 = false => 0 <= s(s(s(0))) = true
+++ added new clause(s)
	s(s(s(xts2))) == xts1 = true => s(0) <= s(s(s(0))) = true
	s(s(s(xts2))) == xts1 = false => 0 <= s(s(s(0))) = true
... to conjectures
--- clause
	s(s(s(xts2))) == xts1 = true => s(0) <= s(s(s(0))) = true
... reduced to tautology
	s(s(s(xts2))) == xts1 = true => true = true
--- clause
	s(s(s(xts2))) == xts1 = false => 0 <= s(s(s(0))) = true
... reduced to tautology
	s(s(s(xts2))) == xts1 = false => true = true

+++ Status of the Inference System
--- Conjectures:
	xts3 == xts2 = false => count(s(s(s(xts3))), xts1 .. nil) <= s(s(s(0))) = true
	s(xts3) == xts2 = true => count(s(s(s(xts3))), xts1 .. nil) <= s(s(0)) = true
	s(xts3) == xts2 = false => count(s(s(s(xts3))), xts1 .. nil) <= s(s(s(0))) = true
	0 == xts2 = true => count(s(s(0)), xts1 .. nil) <= s(s(0)) = true
	count(s(s(0)), xts .. nil) <= s(s(s(0))) = true
	0 == xts2 = false => count(s(s(0)), xts1 .. nil) <= s(s(s(0))) = true
	s(s(s(s(xts3)))) == xts2 = true => count(s(s(s(s(xts3)))), xts1 .. nil) <= s(s(0)) = true
	s(s(s(s(xts3)))) == xts2 = false => count(s(s(s(s(xts3)))), xts1 .. nil) <= s(s(s(0))) = true
	s(s(s(0))) == xts2 = true => count(s(s(s(0))), xts1 .. nil) <= s(s(0)) = true
	s(s(s(0))) == xts2 = false => count(s(s(s(0))), xts1 .. nil) <= s(s(s(0))) = true
	count(s(s(0)), xts .. nil) <= s(0) = true
	count(s(s(0)), xts .. nil) <= s(s(0)) = true
	s(s(0)) == xts2 = true => count(s(s(s(0))), xts1 .. nil) <= s(0) = true
	count(s(s(s(0))), xts .. nil) <= s(s(0)) = true
	s(s(0)) == xts2 = false => count(s(s(s(0))), xts1 .. nil) <= s(s(0)) = true
	xts3 == xts2 = true => count(s(s(s(s(xts3)))), xts1 .. nil) <= s(s(0)) = true
	count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == xts2 = false => count(s(s(s(s(xts3)))), xts1 .. nil) <= s(s(s(0))) = true
	xts2 == 0 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) = true
	xts3 == s(xts2) = true => count(s(s(s(xts3))), xts1 .. nil) <= s(s(0)) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	count(x, xs) <= len(xs) -> true
	count(x, xts .. yts) <= s(len(yts)) -> true
	0 == xts = true => count(0, xts .. nil) <= s(0) -> true
	count(x, xts2 .. xts1 .. yts) <= s(s(len(yts))) -> true
	0 == xts = true => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = true => count(s(0), xts .. nil) <= s(0) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = true => count(s(0), xts .. nil) <= s(s(0)) -> true
	0 == xts = true => count(s(s(0)), xts .. nil) <= s(0) -> true
	s(0) == xts = true => count(s(0), xts .. nil) <= s(0) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(s(0))) -> true
	0 == xts = false => count(s(0), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	s(0) == xts = true => count(s(0), xts .. nil) <= s(s(0)) -> true
	s(0) == xts = true => count(s(s(0)), xts .. nil) <= s(0) -> true
	0 == xts = false => count(s(0), xts .. nil) <= s(s(s(0))) -> true
	0 == xts = false => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	s(0) == xts = false => count(s(0), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	count(x, xts3 .. xts2 .. xts1 .. yts) <= s(s(s(len(yts)))) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	0 == xts = true => count(0, xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(0) == xts = true => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	s(s(0)) == xts = true => count(s(s(0)), xts .. nil) <= s(0) -> true
	s(0) == xts = false => count(s(0), xts .. nil) <= s(s(s(0))) -> true
	s(0) == xts = false => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	xts == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	s(s(0)) == xts = true => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	0 == xts = false => count(0, xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(0) == xts = false => count(s(s(0)), xts .. nil) <= s(s(s(0))) -> true
	s(s(0)) == xts = false => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(s(s(0))) == xts = true => count(s(s(s(0))), xts .. nil) <= s(0) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	s(s(0)) == xts = false => count(s(s(0)), xts .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	xts2 == s(xts1) = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	s(s(s(0))) == xts = false => count(s(s(s(0))), xts .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(xts2)) == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(xts2)) == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(xts2)) == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = false => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(s(xts2))) == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(xts2)) == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(s(xts2))) == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> yts
	^f0($n0 + 1; yts, xts@) -> xts$n0 .. ^f0($n0; yts, xts@)
	^f1(0; yts) -> len(yts)
	^f1($n1 + 1; yts) -> s(^f1($n1; yts))
	^f136(0; xts) -> xts
	^f136($n136 + 1; xts) -> s(^f136($n136; xts))
	^f741(0) -> 0
	^f741($n741 + 1) -> s(^f741($n741))
+++ }
+++ Lemma(s)           = 
	count(x, xts$n .. ^f0($n; yts, xts@)) <= s(^f1($n; yts)) = true
	xts3 == xts2 = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(0) = true
	xts3 == xts2 = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = true => count(s(^f136($n; xts2)), xts1 .. nil) <= s(0) = true
	xts3 == s(xts2) = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(0) = true
	xts2 == 0 = false => count(s(^f136($n; xts2)), xts1 .. nil) <= s(s(0)) = true
	xts3 == s(xts2) = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true
	xts4 == xts3 = true => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts4 == xts3 = false => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts3 == 0 = true => count(s(^f136($n; xts3)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts4 == s(xts3) = true => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts3 == 0 = false => count(s(^f136($n; xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts4 == s(xts3) = false => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	0 == xts2 = true => count(^f741($n), xts1 .. nil) <= s(0) = true
	0 == xts2 = false => count(^f741($n), xts1 .. nil) <= s(s(0)) = true

+++ treating clause
	xts3 == xts2 = false => count(s(s(s(xts3))), xts1 .. nil) <= s(s(s(0))) = true
+++ inductive narrowing on conjecture
	xts3 == xts2 = false => count(s(s(s(xts3))), xts1 .. nil) <= s(s(s(0))) = true
... induction variables of
	xts3 == xts2 = false => count(s(s(s(xts3))), xts1 .. nil) <= s(s(s(0))) = true
... are:
	xts2:nat
	xts3:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	xts3 == xts2 = false => count(s(s(s(xts3))), xts1 .. nil) <= s(s(s(0))) = true
... with variable xts2
+++ creating new conjecture
	xts2 == 0 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) = true
+++ creating new conjecture
	xts3 == s(xts2) = false => count(s(s(s(xts3))), xts1 .. nil) <= s(s(s(0))) = true
+++ inductive narrowing succeeded
--- clause
	xts3 == xts2 = false => count(s(s(s(xts3))), xts1 .. nil) <= s(s(s(0))) = true
... oriented to rule
	xts2 == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
+++ added new clause(s)
	xts2 == 0 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == s(xts2) = false => count(s(s(s(xts3))), xts1 .. nil) <= s(s(s(0))) = true
... to conjectures

+++ Status of the Inference System
--- Conjectures:
	s(xts3) == xts2 = true => count(s(s(s(xts3))), xts1 .. nil) <= s(s(0)) = true
	s(xts3) == xts2 = false => count(s(s(s(xts3))), xts1 .. nil) <= s(s(s(0))) = true
	0 == xts2 = true => count(s(s(0)), xts1 .. nil) <= s(s(0)) = true
	count(s(s(0)), xts .. nil) <= s(s(s(0))) = true
	0 == xts2 = false => count(s(s(0)), xts1 .. nil) <= s(s(s(0))) = true
	s(s(s(s(xts3)))) == xts2 = true => count(s(s(s(s(xts3)))), xts1 .. nil) <= s(s(0)) = true
	s(s(s(s(xts3)))) == xts2 = false => count(s(s(s(s(xts3)))), xts1 .. nil) <= s(s(s(0))) = true
	s(s(s(0))) == xts2 = true => count(s(s(s(0))), xts1 .. nil) <= s(s(0)) = true
	s(s(s(0))) == xts2 = false => count(s(s(s(0))), xts1 .. nil) <= s(s(s(0))) = true
	count(s(s(0)), xts .. nil) <= s(0) = true
	count(s(s(0)), xts .. nil) <= s(s(0)) = true
	s(s(0)) == xts2 = true => count(s(s(s(0))), xts1 .. nil) <= s(0) = true
	count(s(s(s(0))), xts .. nil) <= s(s(0)) = true
	s(s(0)) == xts2 = false => count(s(s(s(0))), xts1 .. nil) <= s(s(0)) = true
	xts3 == xts2 = true => count(s(s(s(s(xts3)))), xts1 .. nil) <= s(s(0)) = true
	count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == xts2 = false => count(s(s(s(s(xts3)))), xts1 .. nil) <= s(s(s(0))) = true
	xts2 == 0 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) = true
	xts3 == s(xts2) = true => count(s(s(s(xts3))), xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == s(xts2) = false => count(s(s(s(xts3))), xts1 .. nil) <= s(s(s(0))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	count(x, xs) <= len(xs) -> true
	count(x, xts .. yts) <= s(len(yts)) -> true
	0 == xts = true => count(0, xts .. nil) <= s(0) -> true
	count(x, xts2 .. xts1 .. yts) <= s(s(len(yts))) -> true
	0 == xts = true => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = true => count(s(0), xts .. nil) <= s(0) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = true => count(s(0), xts .. nil) <= s(s(0)) -> true
	0 == xts = true => count(s(s(0)), xts .. nil) <= s(0) -> true
	s(0) == xts = true => count(s(0), xts .. nil) <= s(0) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(s(0))) -> true
	0 == xts = false => count(s(0), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	s(0) == xts = true => count(s(0), xts .. nil) <= s(s(0)) -> true
	s(0) == xts = true => count(s(s(0)), xts .. nil) <= s(0) -> true
	0 == xts = false => count(s(0), xts .. nil) <= s(s(s(0))) -> true
	0 == xts = false => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	s(0) == xts = false => count(s(0), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	count(x, xts3 .. xts2 .. xts1 .. yts) <= s(s(s(len(yts)))) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	0 == xts = true => count(0, xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(0) == xts = true => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	s(s(0)) == xts = true => count(s(s(0)), xts .. nil) <= s(0) -> true
	s(0) == xts = false => count(s(0), xts .. nil) <= s(s(s(0))) -> true
	s(0) == xts = false => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	xts == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	s(s(0)) == xts = true => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	0 == xts = false => count(0, xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(0) == xts = false => count(s(s(0)), xts .. nil) <= s(s(s(0))) -> true
	s(s(0)) == xts = false => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(s(s(0))) == xts = true => count(s(s(s(0))), xts .. nil) <= s(0) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	s(s(0)) == xts = false => count(s(s(0)), xts .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	xts2 == s(xts1) = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	s(s(s(0))) == xts = false => count(s(s(s(0))), xts .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(xts2)) == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(xts2)) == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(xts2)) == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = false => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(s(xts2))) == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(xts2)) == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(s(xts2))) == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> yts
	^f0($n0 + 1; yts, xts@) -> xts$n0 .. ^f0($n0; yts, xts@)
	^f1(0; yts) -> len(yts)
	^f1($n1 + 1; yts) -> s(^f1($n1; yts))
	^f136(0; xts) -> xts
	^f136($n136 + 1; xts) -> s(^f136($n136; xts))
	^f741(0) -> 0
	^f741($n741 + 1) -> s(^f741($n741))
+++ }
+++ Lemma(s)           = 
	count(x, xts$n .. ^f0($n; yts, xts@)) <= s(^f1($n; yts)) = true
	xts3 == xts2 = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(0) = true
	xts3 == xts2 = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = true => count(s(^f136($n; xts2)), xts1 .. nil) <= s(0) = true
	xts3 == s(xts2) = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(0) = true
	xts2 == 0 = false => count(s(^f136($n; xts2)), xts1 .. nil) <= s(s(0)) = true
	xts3 == s(xts2) = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true
	xts4 == xts3 = true => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts4 == xts3 = false => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts3 == 0 = true => count(s(^f136($n; xts3)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts4 == s(xts3) = true => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts3 == 0 = false => count(s(^f136($n; xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts4 == s(xts3) = false => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	0 == xts2 = true => count(^f741($n), xts1 .. nil) <= s(0) = true
	0 == xts2 = false => count(^f741($n), xts1 .. nil) <= s(s(0)) = true

+++ treating clause
	s(xts3) == xts2 = true => count(s(s(s(xts3))), xts1 .. nil) <= s(s(0)) = true
+++ inductive narrowing on conjecture
	s(xts3) == xts2 = true => count(s(s(s(xts3))), xts1 .. nil) <= s(s(0)) = true
... induction variables of
	s(xts3) == xts2 = true => count(s(s(s(xts3))), xts1 .. nil) <= s(s(0)) = true
... are:
	xts2:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	s(xts3) == xts2 = true => count(s(s(s(xts3))), xts1 .. nil) <= s(s(0)) = true
... with variable xts2
+++ creating new conjecture
	s(xts2) == 0 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) = true
+++ creating new conjecture
	s(xts3) == s(xts2) = true => count(s(s(s(xts3))), xts1 .. nil) <= s(s(0)) = true
--- clause
	s(xts2) == 0 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) = true
... reduced in 1 step to
	false = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) = true
--- clause
	false = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) = true
... contains a ground negative condition
	false = true
... and is therefore discarded (false => t is always true)
--- clause
	s(xts3) == s(xts2) = true => count(s(s(s(xts3))), xts1 .. nil) <= s(s(0)) = true
... reduced in 1 step to
	xts3 == xts2 = true => count(s(s(s(xts3))), xts1 .. nil) <= s(s(0)) = true
+++ inductive narrowing succeeded
--- clause
	s(xts3) == xts2 = true => count(s(s(s(xts3))), xts1 .. nil) <= s(s(0)) = true
... oriented to rule
	s(xts2) == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
+++ added new clause(s)
	xts3 == xts2 = true => count(s(s(s(xts3))), xts1 .. nil) <= s(s(0)) = true
... to conjectures
+++ active wrap
	s(xts3) == xts2 = true => count(s(.), xts1 .. nil) <= s(s(0)) = true
... with sequence
	s(xts3) == xts2 = true => count(s(xts3), xts1 .. nil) <= s(s(0)) = true
	s(xts3) == xts2 = true => count(s(s(xts3)), xts1 .. nil) <= s(s(0)) = true
	s(xts3) == xts2 = true => count(s(s(s(xts3))), xts1 .. nil) <= s(s(0)) = true
+++ primal grammar found for head
	{.., 0, <=, ==, count, nil, s, true}
... and wrap
	s(xts3) == xts2 = true => count(s(.), xts1 .. nil) <= s(s(0)) = true
+++ Presburger system  = {
	^f136(0; xts) -> xts
	^f136($n136 + 1; xts) -> s(^f136($n136; xts))
+++ }
+++ Lemma(s)           = 
	s(xts3) == xts2 = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true

+++ Status of the Inference System
--- Conjectures:
	s(xts3) == xts2 = false => count(s(s(s(xts3))), xts1 .. nil) <= s(s(s(0))) = true
	0 == xts2 = true => count(s(s(0)), xts1 .. nil) <= s(s(0)) = true
	count(s(s(0)), xts .. nil) <= s(s(s(0))) = true
	0 == xts2 = false => count(s(s(0)), xts1 .. nil) <= s(s(s(0))) = true
	s(s(s(s(xts3)))) == xts2 = true => count(s(s(s(s(xts3)))), xts1 .. nil) <= s(s(0)) = true
	s(s(s(s(xts3)))) == xts2 = false => count(s(s(s(s(xts3)))), xts1 .. nil) <= s(s(s(0))) = true
	s(s(s(0))) == xts2 = true => count(s(s(s(0))), xts1 .. nil) <= s(s(0)) = true
	s(s(s(0))) == xts2 = false => count(s(s(s(0))), xts1 .. nil) <= s(s(s(0))) = true
	count(s(s(0)), xts .. nil) <= s(0) = true
	count(s(s(0)), xts .. nil) <= s(s(0)) = true
	s(s(0)) == xts2 = true => count(s(s(s(0))), xts1 .. nil) <= s(0) = true
	count(s(s(s(0))), xts .. nil) <= s(s(0)) = true
	s(s(0)) == xts2 = false => count(s(s(s(0))), xts1 .. nil) <= s(s(0)) = true
	xts3 == xts2 = true => count(s(s(s(s(xts3)))), xts1 .. nil) <= s(s(0)) = true
	count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == xts2 = false => count(s(s(s(s(xts3)))), xts1 .. nil) <= s(s(s(0))) = true
	xts2 == 0 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) = true
	xts3 == s(xts2) = true => count(s(s(s(xts3))), xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == s(xts2) = false => count(s(s(s(xts3))), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == xts2 = true => count(s(s(s(xts3))), xts1 .. nil) <= s(s(0)) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	count(x, xs) <= len(xs) -> true
	count(x, xts .. yts) <= s(len(yts)) -> true
	0 == xts = true => count(0, xts .. nil) <= s(0) -> true
	count(x, xts2 .. xts1 .. yts) <= s(s(len(yts))) -> true
	0 == xts = true => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = true => count(s(0), xts .. nil) <= s(0) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = true => count(s(0), xts .. nil) <= s(s(0)) -> true
	0 == xts = true => count(s(s(0)), xts .. nil) <= s(0) -> true
	s(0) == xts = true => count(s(0), xts .. nil) <= s(0) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(s(0))) -> true
	0 == xts = false => count(s(0), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	s(0) == xts = true => count(s(0), xts .. nil) <= s(s(0)) -> true
	s(0) == xts = true => count(s(s(0)), xts .. nil) <= s(0) -> true
	0 == xts = false => count(s(0), xts .. nil) <= s(s(s(0))) -> true
	0 == xts = false => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	s(0) == xts = false => count(s(0), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	count(x, xts3 .. xts2 .. xts1 .. yts) <= s(s(s(len(yts)))) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	0 == xts = true => count(0, xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(0) == xts = true => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	s(s(0)) == xts = true => count(s(s(0)), xts .. nil) <= s(0) -> true
	s(0) == xts = false => count(s(0), xts .. nil) <= s(s(s(0))) -> true
	s(0) == xts = false => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	xts == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	s(s(0)) == xts = true => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	0 == xts = false => count(0, xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(0) == xts = false => count(s(s(0)), xts .. nil) <= s(s(s(0))) -> true
	s(s(0)) == xts = false => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(s(s(0))) == xts = true => count(s(s(s(0))), xts .. nil) <= s(0) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	s(s(0)) == xts = false => count(s(s(0)), xts .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	xts2 == s(xts1) = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	s(s(s(0))) == xts = false => count(s(s(s(0))), xts .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(xts2)) == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(xts2)) == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(xts2)) == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = false => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(s(xts2))) == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(xts2)) == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(s(xts2))) == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> yts
	^f0($n0 + 1; yts, xts@) -> xts$n0 .. ^f0($n0; yts, xts@)
	^f1(0; yts) -> len(yts)
	^f1($n1 + 1; yts) -> s(^f1($n1; yts))
	^f136(0; xts) -> xts
	^f136($n136 + 1; xts) -> s(^f136($n136; xts))
	^f741(0) -> 0
	^f741($n741 + 1) -> s(^f741($n741))
+++ }
+++ Lemma(s)           = 
	count(x, xts$n .. ^f0($n; yts, xts@)) <= s(^f1($n; yts)) = true
	xts3 == xts2 = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(0) = true
	xts3 == xts2 = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = true => count(s(^f136($n; xts2)), xts1 .. nil) <= s(0) = true
	xts3 == s(xts2) = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(0) = true
	xts2 == 0 = false => count(s(^f136($n; xts2)), xts1 .. nil) <= s(s(0)) = true
	xts3 == s(xts2) = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true
	xts4 == xts3 = true => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts4 == xts3 = false => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts3 == 0 = true => count(s(^f136($n; xts3)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts4 == s(xts3) = true => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts3 == 0 = false => count(s(^f136($n; xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts4 == s(xts3) = false => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	0 == xts2 = true => count(^f741($n), xts1 .. nil) <= s(0) = true
	0 == xts2 = false => count(^f741($n), xts1 .. nil) <= s(s(0)) = true
	s(xts3) == xts2 = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true

+++ treating clause
	s(xts3) == xts2 = false => count(s(s(s(xts3))), xts1 .. nil) <= s(s(s(0))) = true
+++ inductive narrowing on conjecture
	s(xts3) == xts2 = false => count(s(s(s(xts3))), xts1 .. nil) <= s(s(s(0))) = true
... induction variables of
	s(xts3) == xts2 = false => count(s(s(s(xts3))), xts1 .. nil) <= s(s(s(0))) = true
... are:
	xts2:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	s(xts3) == xts2 = false => count(s(s(s(xts3))), xts1 .. nil) <= s(s(s(0))) = true
... with variable xts2
+++ creating new conjecture
	s(xts2) == 0 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) = true
+++ creating new conjecture
	s(xts3) == s(xts2) = false => count(s(s(s(xts3))), xts1 .. nil) <= s(s(s(0))) = true
--- clause
	s(xts2) == 0 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) = true
... reduced in 1 step to
	count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) = true
--- clause
	s(xts3) == s(xts2) = false => count(s(s(s(xts3))), xts1 .. nil) <= s(s(s(0))) = true
... reduced in 1 step to
	xts3 == xts2 = false => count(s(s(s(xts3))), xts1 .. nil) <= s(s(s(0))) = true
+++ inductive narrowing succeeded
--- clause
	s(xts3) == xts2 = false => count(s(s(s(xts3))), xts1 .. nil) <= s(s(s(0))) = true
... oriented to rule
	s(xts2) == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
+++ added new clause(s)
	count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == xts2 = false => count(s(s(s(xts3))), xts1 .. nil) <= s(s(s(0))) = true
... to conjectures
+++ active wrap
	s(xts3) == xts2 = false => count(s(.), xts1 .. nil) <= s(s(s(0))) = true
... with sequence
	s(xts3) == xts2 = false => count(s(xts3), xts1 .. nil) <= s(s(s(0))) = true
	s(xts3) == xts2 = false => count(s(s(xts3)), xts1 .. nil) <= s(s(s(0))) = true
	s(xts3) == xts2 = false => count(s(s(s(xts3))), xts1 .. nil) <= s(s(s(0))) = true
+++ primal grammar found for head
	{.., 0, <=, ==, count, false, nil, s, true}
... and wrap
	s(xts3) == xts2 = false => count(s(.), xts1 .. nil) <= s(s(s(0))) = true
+++ Presburger system  = {
	^f136(0; xts) -> xts
	^f136($n136 + 1; xts) -> s(^f136($n136; xts))
+++ }
+++ Lemma(s)           = 
	s(xts3) == xts2 = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(s(0))) = true

+++ Status of the Inference System
--- Conjectures:
	0 == xts2 = true => count(s(s(0)), xts1 .. nil) <= s(s(0)) = true
	count(s(s(0)), xts .. nil) <= s(s(s(0))) = true
	0 == xts2 = false => count(s(s(0)), xts1 .. nil) <= s(s(s(0))) = true
	s(s(s(s(xts3)))) == xts2 = true => count(s(s(s(s(xts3)))), xts1 .. nil) <= s(s(0)) = true
	s(s(s(s(xts3)))) == xts2 = false => count(s(s(s(s(xts3)))), xts1 .. nil) <= s(s(s(0))) = true
	s(s(s(0))) == xts2 = true => count(s(s(s(0))), xts1 .. nil) <= s(s(0)) = true
	s(s(s(0))) == xts2 = false => count(s(s(s(0))), xts1 .. nil) <= s(s(s(0))) = true
	count(s(s(0)), xts .. nil) <= s(0) = true
	count(s(s(0)), xts .. nil) <= s(s(0)) = true
	s(s(0)) == xts2 = true => count(s(s(s(0))), xts1 .. nil) <= s(0) = true
	count(s(s(s(0))), xts .. nil) <= s(s(0)) = true
	s(s(0)) == xts2 = false => count(s(s(s(0))), xts1 .. nil) <= s(s(0)) = true
	xts3 == xts2 = true => count(s(s(s(s(xts3)))), xts1 .. nil) <= s(s(0)) = true
	count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == xts2 = false => count(s(s(s(s(xts3)))), xts1 .. nil) <= s(s(s(0))) = true
	xts2 == 0 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) = true
	xts3 == s(xts2) = true => count(s(s(s(xts3))), xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == s(xts2) = false => count(s(s(s(xts3))), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == xts2 = true => count(s(s(s(xts3))), xts1 .. nil) <= s(s(0)) = true
	count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == xts2 = false => count(s(s(s(xts3))), xts1 .. nil) <= s(s(s(0))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	count(x, xs) <= len(xs) -> true
	count(x, xts .. yts) <= s(len(yts)) -> true
	0 == xts = true => count(0, xts .. nil) <= s(0) -> true
	count(x, xts2 .. xts1 .. yts) <= s(s(len(yts))) -> true
	0 == xts = true => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = true => count(s(0), xts .. nil) <= s(0) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = true => count(s(0), xts .. nil) <= s(s(0)) -> true
	0 == xts = true => count(s(s(0)), xts .. nil) <= s(0) -> true
	s(0) == xts = true => count(s(0), xts .. nil) <= s(0) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(s(0))) -> true
	0 == xts = false => count(s(0), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	s(0) == xts = true => count(s(0), xts .. nil) <= s(s(0)) -> true
	s(0) == xts = true => count(s(s(0)), xts .. nil) <= s(0) -> true
	0 == xts = false => count(s(0), xts .. nil) <= s(s(s(0))) -> true
	0 == xts = false => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	s(0) == xts = false => count(s(0), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	count(x, xts3 .. xts2 .. xts1 .. yts) <= s(s(s(len(yts)))) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	0 == xts = true => count(0, xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(0) == xts = true => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	s(s(0)) == xts = true => count(s(s(0)), xts .. nil) <= s(0) -> true
	s(0) == xts = false => count(s(0), xts .. nil) <= s(s(s(0))) -> true
	s(0) == xts = false => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	xts == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	s(s(0)) == xts = true => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	0 == xts = false => count(0, xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(0) == xts = false => count(s(s(0)), xts .. nil) <= s(s(s(0))) -> true
	s(s(0)) == xts = false => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(s(s(0))) == xts = true => count(s(s(s(0))), xts .. nil) <= s(0) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	s(s(0)) == xts = false => count(s(s(0)), xts .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	xts2 == s(xts1) = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	s(s(s(0))) == xts = false => count(s(s(s(0))), xts .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(xts2)) == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(xts2)) == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(xts2)) == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = false => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(s(xts2))) == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(xts2)) == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(s(xts2))) == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> yts
	^f0($n0 + 1; yts, xts@) -> xts$n0 .. ^f0($n0; yts, xts@)
	^f1(0; yts) -> len(yts)
	^f1($n1 + 1; yts) -> s(^f1($n1; yts))
	^f136(0; xts) -> xts
	^f136($n136 + 1; xts) -> s(^f136($n136; xts))
	^f741(0) -> 0
	^f741($n741 + 1) -> s(^f741($n741))
+++ }
+++ Lemma(s)           = 
	count(x, xts$n .. ^f0($n; yts, xts@)) <= s(^f1($n; yts)) = true
	xts3 == xts2 = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(0) = true
	xts3 == xts2 = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = true => count(s(^f136($n; xts2)), xts1 .. nil) <= s(0) = true
	xts3 == s(xts2) = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(0) = true
	xts2 == 0 = false => count(s(^f136($n; xts2)), xts1 .. nil) <= s(s(0)) = true
	xts3 == s(xts2) = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true
	xts4 == xts3 = true => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts4 == xts3 = false => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts3 == 0 = true => count(s(^f136($n; xts3)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts4 == s(xts3) = true => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts3 == 0 = false => count(s(^f136($n; xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts4 == s(xts3) = false => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	0 == xts2 = true => count(^f741($n), xts1 .. nil) <= s(0) = true
	0 == xts2 = false => count(^f741($n), xts1 .. nil) <= s(s(0)) = true
	s(xts3) == xts2 = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true
	s(xts3) == xts2 = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(s(0))) = true

+++ treating clause
	0 == xts2 = true => count(s(s(0)), xts1 .. nil) <= s(s(0)) = true
+++ inductive narrowing on conjecture
	0 == xts2 = true => count(s(s(0)), xts1 .. nil) <= s(s(0)) = true
... induction variables of
	0 == xts2 = true => count(s(s(0)), xts1 .. nil) <= s(s(0)) = true
... are:
	xts2:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	0 == xts2 = true => count(s(s(0)), xts1 .. nil) <= s(s(0)) = true
... with variable xts2
+++ creating new conjecture
	0 == 0 = true => count(s(s(0)), xts .. nil) <= s(s(0)) = true
+++ creating new conjecture
	0 == s(xts2) = true => count(s(s(0)), xts1 .. nil) <= s(s(0)) = true
--- clause
	0 == 0 = true => count(s(s(0)), xts .. nil) <= s(s(0)) = true
... reduced in 1 step to
	count(s(s(0)), xts .. nil) <= s(s(0)) = true
--- clause
	0 == s(xts2) = true => count(s(s(0)), xts1 .. nil) <= s(s(0)) = true
... reduced in 1 step to
	false = true => count(s(s(0)), xts .. nil) <= s(s(0)) = true
--- clause
	false = true => count(s(s(0)), xts .. nil) <= s(s(0)) = true
... contains a ground negative condition
	false = true
... and is therefore discarded (false => t is always true)
--- clause
	count(s(s(0)), xts .. nil) <= s(s(0)) = true
... subsumed by an existing conjecture
+++ inductive narrowing succeeded
--- clause
	0 == xts2 = true => count(s(s(0)), xts1 .. nil) <= s(s(0)) = true
... oriented to rule
	0 == xts = true => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
+++ active wrap
	0 == xts2 = true => count(., xts1 .. nil) <= s(s(0)) = true
... with sequence
	0 == xts2 = true => count(0, xts1 .. nil) <= s(s(0)) = true
	0 == xts2 = true => count(s(0), xts1 .. nil) <= s(s(0)) = true
	0 == xts2 = true => count(s(s(0)), xts1 .. nil) <= s(s(0)) = true
+++ primal grammar found for head
	{.., 0, <=, ==, count, nil, s, true}
... and wrap
	0 == xts2 = true => count(., xts1 .. nil) <= s(s(0)) = true
+++ Presburger system  = {
	^f741(0) -> 0
	^f741($n741 + 1) -> s(^f741($n741))
+++ }
+++ Lemma(s)           = 
	0 == xts2 = true => count(^f741($n), xts1 .. nil) <= s(s(0)) = true

+++ Status of the Inference System
--- Conjectures:
	count(s(s(0)), xts .. nil) <= s(s(s(0))) = true
	0 == xts2 = false => count(s(s(0)), xts1 .. nil) <= s(s(s(0))) = true
	s(s(s(s(xts3)))) == xts2 = true => count(s(s(s(s(xts3)))), xts1 .. nil) <= s(s(0)) = true
	s(s(s(s(xts3)))) == xts2 = false => count(s(s(s(s(xts3)))), xts1 .. nil) <= s(s(s(0))) = true
	s(s(s(0))) == xts2 = true => count(s(s(s(0))), xts1 .. nil) <= s(s(0)) = true
	s(s(s(0))) == xts2 = false => count(s(s(s(0))), xts1 .. nil) <= s(s(s(0))) = true
	count(s(s(0)), xts .. nil) <= s(0) = true
	count(s(s(0)), xts .. nil) <= s(s(0)) = true
	s(s(0)) == xts2 = true => count(s(s(s(0))), xts1 .. nil) <= s(0) = true
	count(s(s(s(0))), xts .. nil) <= s(s(0)) = true
	s(s(0)) == xts2 = false => count(s(s(s(0))), xts1 .. nil) <= s(s(0)) = true
	xts3 == xts2 = true => count(s(s(s(s(xts3)))), xts1 .. nil) <= s(s(0)) = true
	count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == xts2 = false => count(s(s(s(s(xts3)))), xts1 .. nil) <= s(s(s(0))) = true
	xts2 == 0 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) = true
	xts3 == s(xts2) = true => count(s(s(s(xts3))), xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == s(xts2) = false => count(s(s(s(xts3))), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == xts2 = true => count(s(s(s(xts3))), xts1 .. nil) <= s(s(0)) = true
	count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == xts2 = false => count(s(s(s(xts3))), xts1 .. nil) <= s(s(s(0))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	count(x, xs) <= len(xs) -> true
	count(x, xts .. yts) <= s(len(yts)) -> true
	0 == xts = true => count(0, xts .. nil) <= s(0) -> true
	count(x, xts2 .. xts1 .. yts) <= s(s(len(yts))) -> true
	0 == xts = true => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = true => count(s(0), xts .. nil) <= s(0) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = true => count(s(0), xts .. nil) <= s(s(0)) -> true
	0 == xts = true => count(s(s(0)), xts .. nil) <= s(0) -> true
	s(0) == xts = true => count(s(0), xts .. nil) <= s(0) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(s(0))) -> true
	0 == xts = false => count(s(0), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	0 == xts = true => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	s(0) == xts = true => count(s(0), xts .. nil) <= s(s(0)) -> true
	s(0) == xts = true => count(s(s(0)), xts .. nil) <= s(0) -> true
	0 == xts = false => count(s(0), xts .. nil) <= s(s(s(0))) -> true
	0 == xts = false => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	s(0) == xts = false => count(s(0), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	count(x, xts3 .. xts2 .. xts1 .. yts) <= s(s(s(len(yts)))) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	0 == xts = true => count(0, xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(0) == xts = true => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	s(s(0)) == xts = true => count(s(s(0)), xts .. nil) <= s(0) -> true
	s(0) == xts = false => count(s(0), xts .. nil) <= s(s(s(0))) -> true
	s(0) == xts = false => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	xts == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	s(s(0)) == xts = true => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	0 == xts = false => count(0, xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(0) == xts = false => count(s(s(0)), xts .. nil) <= s(s(s(0))) -> true
	s(s(0)) == xts = false => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(s(s(0))) == xts = true => count(s(s(s(0))), xts .. nil) <= s(0) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	s(s(0)) == xts = false => count(s(s(0)), xts .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	xts2 == s(xts1) = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	s(s(s(0))) == xts = false => count(s(s(s(0))), xts .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(xts2)) == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(xts2)) == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(xts2)) == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = false => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(s(xts2))) == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(xts2)) == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(s(xts2))) == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> yts
	^f0($n0 + 1; yts, xts@) -> xts$n0 .. ^f0($n0; yts, xts@)
	^f1(0; yts) -> len(yts)
	^f1($n1 + 1; yts) -> s(^f1($n1; yts))
	^f136(0; xts) -> xts
	^f136($n136 + 1; xts) -> s(^f136($n136; xts))
	^f741(0) -> 0
	^f741($n741 + 1) -> s(^f741($n741))
+++ }
+++ Lemma(s)           = 
	count(x, xts$n .. ^f0($n; yts, xts@)) <= s(^f1($n; yts)) = true
	xts3 == xts2 = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(0) = true
	xts3 == xts2 = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = true => count(s(^f136($n; xts2)), xts1 .. nil) <= s(0) = true
	xts3 == s(xts2) = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(0) = true
	xts2 == 0 = false => count(s(^f136($n; xts2)), xts1 .. nil) <= s(s(0)) = true
	xts3 == s(xts2) = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true
	xts4 == xts3 = true => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts4 == xts3 = false => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts3 == 0 = true => count(s(^f136($n; xts3)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts4 == s(xts3) = true => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts3 == 0 = false => count(s(^f136($n; xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts4 == s(xts3) = false => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	0 == xts2 = true => count(^f741($n), xts1 .. nil) <= s(0) = true
	0 == xts2 = false => count(^f741($n), xts1 .. nil) <= s(s(0)) = true
	s(xts3) == xts2 = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true
	s(xts3) == xts2 = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(s(0))) = true
	0 == xts2 = true => count(^f741($n), xts1 .. nil) <= s(s(0)) = true

+++ treating clause
	count(s(s(0)), xts .. nil) <= s(s(s(0))) = true
--- no new clauses created
+++ attempting case rewriting
--- case rewriting generated new conjectures
	s(s(0)) == xts = true => s(0) <= s(s(s(0))) = true
	s(s(0)) == xts = false => 0 <= s(s(s(0))) = true
+++ added new clause(s)
	s(s(0)) == xts = true => s(0) <= s(s(s(0))) = true
	s(s(0)) == xts = false => 0 <= s(s(s(0))) = true
... to conjectures
--- clause
	s(s(0)) == xts = true => s(0) <= s(s(s(0))) = true
... reduced to tautology
	s(s(0)) == xts = true => true = true
--- clause
	s(s(0)) == xts = false => 0 <= s(s(s(0))) = true
... reduced to tautology
	s(s(0)) == xts = false => true = true

+++ Status of the Inference System
--- Conjectures:
	0 == xts2 = false => count(s(s(0)), xts1 .. nil) <= s(s(s(0))) = true
	s(s(s(s(xts3)))) == xts2 = true => count(s(s(s(s(xts3)))), xts1 .. nil) <= s(s(0)) = true
	s(s(s(s(xts3)))) == xts2 = false => count(s(s(s(s(xts3)))), xts1 .. nil) <= s(s(s(0))) = true
	s(s(s(0))) == xts2 = true => count(s(s(s(0))), xts1 .. nil) <= s(s(0)) = true
	s(s(s(0))) == xts2 = false => count(s(s(s(0))), xts1 .. nil) <= s(s(s(0))) = true
	count(s(s(0)), xts .. nil) <= s(0) = true
	count(s(s(0)), xts .. nil) <= s(s(0)) = true
	s(s(0)) == xts2 = true => count(s(s(s(0))), xts1 .. nil) <= s(0) = true
	count(s(s(s(0))), xts .. nil) <= s(s(0)) = true
	s(s(0)) == xts2 = false => count(s(s(s(0))), xts1 .. nil) <= s(s(0)) = true
	xts3 == xts2 = true => count(s(s(s(s(xts3)))), xts1 .. nil) <= s(s(0)) = true
	count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == xts2 = false => count(s(s(s(s(xts3)))), xts1 .. nil) <= s(s(s(0))) = true
	xts2 == 0 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) = true
	xts3 == s(xts2) = true => count(s(s(s(xts3))), xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == s(xts2) = false => count(s(s(s(xts3))), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == xts2 = true => count(s(s(s(xts3))), xts1 .. nil) <= s(s(0)) = true
	count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == xts2 = false => count(s(s(s(xts3))), xts1 .. nil) <= s(s(s(0))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	count(x, xs) <= len(xs) -> true
	count(x, xts .. yts) <= s(len(yts)) -> true
	0 == xts = true => count(0, xts .. nil) <= s(0) -> true
	count(x, xts2 .. xts1 .. yts) <= s(s(len(yts))) -> true
	0 == xts = true => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = true => count(s(0), xts .. nil) <= s(0) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = true => count(s(0), xts .. nil) <= s(s(0)) -> true
	0 == xts = true => count(s(s(0)), xts .. nil) <= s(0) -> true
	s(0) == xts = true => count(s(0), xts .. nil) <= s(0) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(s(0))) -> true
	0 == xts = false => count(s(0), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	0 == xts = true => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	s(0) == xts = true => count(s(0), xts .. nil) <= s(s(0)) -> true
	s(0) == xts = true => count(s(s(0)), xts .. nil) <= s(0) -> true
	0 == xts = false => count(s(0), xts .. nil) <= s(s(s(0))) -> true
	0 == xts = false => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	s(0) == xts = false => count(s(0), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	count(x, xts3 .. xts2 .. xts1 .. yts) <= s(s(s(len(yts)))) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	0 == xts = true => count(0, xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(0) == xts = true => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	s(s(0)) == xts = true => count(s(s(0)), xts .. nil) <= s(0) -> true
	s(0) == xts = false => count(s(0), xts .. nil) <= s(s(s(0))) -> true
	s(0) == xts = false => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	xts == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	s(s(0)) == xts = true => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	0 == xts = false => count(0, xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(0) == xts = false => count(s(s(0)), xts .. nil) <= s(s(s(0))) -> true
	s(s(0)) == xts = false => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(s(s(0))) == xts = true => count(s(s(s(0))), xts .. nil) <= s(0) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	s(s(0)) == xts = false => count(s(s(0)), xts .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	xts2 == s(xts1) = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	s(s(s(0))) == xts = false => count(s(s(s(0))), xts .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(xts2)) == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(xts2)) == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(xts2)) == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = false => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(s(xts2))) == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(xts2)) == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(s(xts2))) == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> yts
	^f0($n0 + 1; yts, xts@) -> xts$n0 .. ^f0($n0; yts, xts@)
	^f1(0; yts) -> len(yts)
	^f1($n1 + 1; yts) -> s(^f1($n1; yts))
	^f136(0; xts) -> xts
	^f136($n136 + 1; xts) -> s(^f136($n136; xts))
	^f741(0) -> 0
	^f741($n741 + 1) -> s(^f741($n741))
+++ }
+++ Lemma(s)           = 
	count(x, xts$n .. ^f0($n; yts, xts@)) <= s(^f1($n; yts)) = true
	xts3 == xts2 = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(0) = true
	xts3 == xts2 = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = true => count(s(^f136($n; xts2)), xts1 .. nil) <= s(0) = true
	xts3 == s(xts2) = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(0) = true
	xts2 == 0 = false => count(s(^f136($n; xts2)), xts1 .. nil) <= s(s(0)) = true
	xts3 == s(xts2) = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true
	xts4 == xts3 = true => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts4 == xts3 = false => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts3 == 0 = true => count(s(^f136($n; xts3)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts4 == s(xts3) = true => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts3 == 0 = false => count(s(^f136($n; xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts4 == s(xts3) = false => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	0 == xts2 = true => count(^f741($n), xts1 .. nil) <= s(0) = true
	0 == xts2 = false => count(^f741($n), xts1 .. nil) <= s(s(0)) = true
	s(xts3) == xts2 = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true
	s(xts3) == xts2 = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(s(0))) = true
	0 == xts2 = true => count(^f741($n), xts1 .. nil) <= s(s(0)) = true

+++ treating clause
	0 == xts2 = false => count(s(s(0)), xts1 .. nil) <= s(s(s(0))) = true
+++ inductive narrowing on conjecture
	0 == xts2 = false => count(s(s(0)), xts1 .. nil) <= s(s(s(0))) = true
... induction variables of
	0 == xts2 = false => count(s(s(0)), xts1 .. nil) <= s(s(s(0))) = true
... are:
	xts2:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	0 == xts2 = false => count(s(s(0)), xts1 .. nil) <= s(s(s(0))) = true
... with variable xts2
+++ creating new conjecture
	0 == 0 = false => count(s(s(0)), xts .. nil) <= s(s(s(0))) = true
+++ creating new conjecture
	0 == s(xts2) = false => count(s(s(0)), xts1 .. nil) <= s(s(s(0))) = true
--- clause
	0 == 0 = false => count(s(s(0)), xts .. nil) <= s(s(s(0))) = true
... reduced in 1 step to
	true = false => count(s(s(0)), xts .. nil) <= s(s(s(0))) = true
--- clause
	true = false => count(s(s(0)), xts .. nil) <= s(s(s(0))) = true
... contains a ground negative condition
	true = false
... and is therefore discarded (false => t is always true)
--- clause
	0 == s(xts2) = false => count(s(s(0)), xts1 .. nil) <= s(s(s(0))) = true
... reduced in 1 step to
	count(s(s(0)), xts .. nil) <= s(s(s(0))) = true
+++ inductive narrowing succeeded
--- clause
	0 == xts2 = false => count(s(s(0)), xts1 .. nil) <= s(s(s(0))) = true
... oriented to rule
	0 == xts = false => count(s(s(0)), xts .. nil) <= s(s(s(0))) -> true
+++ added new clause(s)
	count(s(s(0)), xts .. nil) <= s(s(s(0))) = true
... to conjectures
+++ active wrap
	0 == xts2 = false => count(., xts1 .. nil) <= s(s(s(0))) = true
... with sequence
	0 == xts2 = false => count(0, xts1 .. nil) <= s(s(s(0))) = true
	0 == xts2 = false => count(s(0), xts1 .. nil) <= s(s(s(0))) = true
	0 == xts2 = false => count(s(s(0)), xts1 .. nil) <= s(s(s(0))) = true
+++ primal grammar found for head
	{.., 0, <=, ==, count, false, nil, s, true}
... and wrap
	0 == xts2 = false => count(., xts1 .. nil) <= s(s(s(0))) = true
+++ Presburger system  = {
	^f741(0) -> 0
	^f741($n741 + 1) -> s(^f741($n741))
+++ }
+++ Lemma(s)           = 
	0 == xts2 = false => count(^f741($n), xts1 .. nil) <= s(s(s(0))) = true

+++ Status of the Inference System
--- Conjectures:
	s(s(s(s(xts3)))) == xts2 = true => count(s(s(s(s(xts3)))), xts1 .. nil) <= s(s(0)) = true
	s(s(s(s(xts3)))) == xts2 = false => count(s(s(s(s(xts3)))), xts1 .. nil) <= s(s(s(0))) = true
	s(s(s(0))) == xts2 = true => count(s(s(s(0))), xts1 .. nil) <= s(s(0)) = true
	s(s(s(0))) == xts2 = false => count(s(s(s(0))), xts1 .. nil) <= s(s(s(0))) = true
	count(s(s(0)), xts .. nil) <= s(0) = true
	count(s(s(0)), xts .. nil) <= s(s(0)) = true
	s(s(0)) == xts2 = true => count(s(s(s(0))), xts1 .. nil) <= s(0) = true
	count(s(s(s(0))), xts .. nil) <= s(s(0)) = true
	s(s(0)) == xts2 = false => count(s(s(s(0))), xts1 .. nil) <= s(s(0)) = true
	xts3 == xts2 = true => count(s(s(s(s(xts3)))), xts1 .. nil) <= s(s(0)) = true
	count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == xts2 = false => count(s(s(s(s(xts3)))), xts1 .. nil) <= s(s(s(0))) = true
	xts2 == 0 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) = true
	xts3 == s(xts2) = true => count(s(s(s(xts3))), xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == s(xts2) = false => count(s(s(s(xts3))), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == xts2 = true => count(s(s(s(xts3))), xts1 .. nil) <= s(s(0)) = true
	count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == xts2 = false => count(s(s(s(xts3))), xts1 .. nil) <= s(s(s(0))) = true
	count(s(s(0)), xts .. nil) <= s(s(s(0))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	count(x, xs) <= len(xs) -> true
	count(x, xts .. yts) <= s(len(yts)) -> true
	0 == xts = true => count(0, xts .. nil) <= s(0) -> true
	count(x, xts2 .. xts1 .. yts) <= s(s(len(yts))) -> true
	0 == xts = true => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = true => count(s(0), xts .. nil) <= s(0) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = true => count(s(0), xts .. nil) <= s(s(0)) -> true
	0 == xts = true => count(s(s(0)), xts .. nil) <= s(0) -> true
	s(0) == xts = true => count(s(0), xts .. nil) <= s(0) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(s(0))) -> true
	0 == xts = false => count(s(0), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	0 == xts = true => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	s(0) == xts = true => count(s(0), xts .. nil) <= s(s(0)) -> true
	s(0) == xts = true => count(s(s(0)), xts .. nil) <= s(0) -> true
	0 == xts = false => count(s(0), xts .. nil) <= s(s(s(0))) -> true
	0 == xts = false => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	s(0) == xts = false => count(s(0), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	count(x, xts3 .. xts2 .. xts1 .. yts) <= s(s(s(len(yts)))) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	0 == xts = true => count(0, xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(0) == xts = true => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	s(s(0)) == xts = true => count(s(s(0)), xts .. nil) <= s(0) -> true
	0 == xts = false => count(s(s(0)), xts .. nil) <= s(s(s(0))) -> true
	s(0) == xts = false => count(s(0), xts .. nil) <= s(s(s(0))) -> true
	s(0) == xts = false => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	xts == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	s(s(0)) == xts = true => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	0 == xts = false => count(0, xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(0) == xts = false => count(s(s(0)), xts .. nil) <= s(s(s(0))) -> true
	s(s(0)) == xts = false => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(s(s(0))) == xts = true => count(s(s(s(0))), xts .. nil) <= s(0) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	s(s(0)) == xts = false => count(s(s(0)), xts .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	xts2 == s(xts1) = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	s(s(s(0))) == xts = false => count(s(s(s(0))), xts .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(xts2)) == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(xts2)) == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(xts2)) == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = false => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(s(xts2))) == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(xts2)) == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(s(xts2))) == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> yts
	^f0($n0 + 1; yts, xts@) -> xts$n0 .. ^f0($n0; yts, xts@)
	^f1(0; yts) -> len(yts)
	^f1($n1 + 1; yts) -> s(^f1($n1; yts))
	^f136(0; xts) -> xts
	^f136($n136 + 1; xts) -> s(^f136($n136; xts))
	^f741(0) -> 0
	^f741($n741 + 1) -> s(^f741($n741))
+++ }
+++ Lemma(s)           = 
	count(x, xts$n .. ^f0($n; yts, xts@)) <= s(^f1($n; yts)) = true
	xts3 == xts2 = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(0) = true
	xts3 == xts2 = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = true => count(s(^f136($n; xts2)), xts1 .. nil) <= s(0) = true
	xts3 == s(xts2) = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(0) = true
	xts2 == 0 = false => count(s(^f136($n; xts2)), xts1 .. nil) <= s(s(0)) = true
	xts3 == s(xts2) = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true
	xts4 == xts3 = true => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts4 == xts3 = false => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts3 == 0 = true => count(s(^f136($n; xts3)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts4 == s(xts3) = true => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts3 == 0 = false => count(s(^f136($n; xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts4 == s(xts3) = false => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	0 == xts2 = true => count(^f741($n), xts1 .. nil) <= s(0) = true
	0 == xts2 = false => count(^f741($n), xts1 .. nil) <= s(s(0)) = true
	s(xts3) == xts2 = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true
	s(xts3) == xts2 = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(s(0))) = true
	0 == xts2 = true => count(^f741($n), xts1 .. nil) <= s(s(0)) = true
	0 == xts2 = false => count(^f741($n), xts1 .. nil) <= s(s(s(0))) = true

+++ treating clause
	s(s(s(s(xts3)))) == xts2 = true => count(s(s(s(s(xts3)))), xts1 .. nil) <= s(s(0)) = true
+++ inductive narrowing on conjecture
	s(s(s(s(xts3)))) == xts2 = true => count(s(s(s(s(xts3)))), xts1 .. nil) <= s(s(0)) = true
... induction variables of
	s(s(s(s(xts3)))) == xts2 = true => count(s(s(s(s(xts3)))), xts1 .. nil) <= s(s(0)) = true
... are:
	xts2:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	s(s(s(s(xts3)))) == xts2 = true => count(s(s(s(s(xts3)))), xts1 .. nil) <= s(s(0)) = true
... with variable xts2
+++ creating new conjecture
	s(s(s(s(xts2)))) == 0 = true => count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(0)) = true
+++ creating new conjecture
	s(s(s(s(xts3)))) == s(xts2) = true => count(s(s(s(s(xts3)))), xts1 .. nil) <= s(s(0)) = true
--- clause
	s(s(s(s(xts2)))) == 0 = true => count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(0)) = true
... reduced in 1 step to
	false = true => count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(0)) = true
--- clause
	false = true => count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(0)) = true
... contains a ground negative condition
	false = true
... and is therefore discarded (false => t is always true)
--- clause
	s(s(s(s(xts3)))) == s(xts2) = true => count(s(s(s(s(xts3)))), xts1 .. nil) <= s(s(0)) = true
... reduced in 1 step to
	s(s(s(xts3))) == xts2 = true => count(s(s(s(s(xts3)))), xts1 .. nil) <= s(s(0)) = true
+++ inductive narrowing succeeded
--- clause
	s(s(s(s(xts3)))) == xts2 = true => count(s(s(s(s(xts3)))), xts1 .. nil) <= s(s(0)) = true
... oriented to rule
	s(s(s(s(xts2)))) == xts1 = true => count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(0)) -> true
+++ added new clause(s)
	s(s(s(xts3))) == xts2 = true => count(s(s(s(s(xts3)))), xts1 .. nil) <= s(s(0)) = true
... to conjectures

+++ Status of the Inference System
--- Conjectures:
	s(s(s(s(xts3)))) == xts2 = false => count(s(s(s(s(xts3)))), xts1 .. nil) <= s(s(s(0))) = true
	s(s(s(0))) == xts2 = true => count(s(s(s(0))), xts1 .. nil) <= s(s(0)) = true
	s(s(s(0))) == xts2 = false => count(s(s(s(0))), xts1 .. nil) <= s(s(s(0))) = true
	count(s(s(0)), xts .. nil) <= s(0) = true
	count(s(s(0)), xts .. nil) <= s(s(0)) = true
	s(s(0)) == xts2 = true => count(s(s(s(0))), xts1 .. nil) <= s(0) = true
	count(s(s(s(0))), xts .. nil) <= s(s(0)) = true
	s(s(0)) == xts2 = false => count(s(s(s(0))), xts1 .. nil) <= s(s(0)) = true
	xts3 == xts2 = true => count(s(s(s(s(xts3)))), xts1 .. nil) <= s(s(0)) = true
	count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == xts2 = false => count(s(s(s(s(xts3)))), xts1 .. nil) <= s(s(s(0))) = true
	xts2 == 0 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) = true
	xts3 == s(xts2) = true => count(s(s(s(xts3))), xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == s(xts2) = false => count(s(s(s(xts3))), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == xts2 = true => count(s(s(s(xts3))), xts1 .. nil) <= s(s(0)) = true
	count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == xts2 = false => count(s(s(s(xts3))), xts1 .. nil) <= s(s(s(0))) = true
	count(s(s(0)), xts .. nil) <= s(s(s(0))) = true
	s(s(s(xts3))) == xts2 = true => count(s(s(s(s(xts3)))), xts1 .. nil) <= s(s(0)) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	count(x, xs) <= len(xs) -> true
	count(x, xts .. yts) <= s(len(yts)) -> true
	0 == xts = true => count(0, xts .. nil) <= s(0) -> true
	count(x, xts2 .. xts1 .. yts) <= s(s(len(yts))) -> true
	0 == xts = true => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = true => count(s(0), xts .. nil) <= s(0) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = true => count(s(0), xts .. nil) <= s(s(0)) -> true
	0 == xts = true => count(s(s(0)), xts .. nil) <= s(0) -> true
	s(0) == xts = true => count(s(0), xts .. nil) <= s(0) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(s(0))) -> true
	0 == xts = false => count(s(0), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	0 == xts = true => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	s(0) == xts = true => count(s(0), xts .. nil) <= s(s(0)) -> true
	s(0) == xts = true => count(s(s(0)), xts .. nil) <= s(0) -> true
	0 == xts = false => count(s(0), xts .. nil) <= s(s(s(0))) -> true
	0 == xts = false => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	s(0) == xts = false => count(s(0), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	count(x, xts3 .. xts2 .. xts1 .. yts) <= s(s(s(len(yts)))) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	0 == xts = true => count(0, xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(0) == xts = true => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	s(s(0)) == xts = true => count(s(s(0)), xts .. nil) <= s(0) -> true
	0 == xts = false => count(s(s(0)), xts .. nil) <= s(s(s(0))) -> true
	s(0) == xts = false => count(s(0), xts .. nil) <= s(s(s(0))) -> true
	s(0) == xts = false => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	xts == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	s(s(0)) == xts = true => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	0 == xts = false => count(0, xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(0) == xts = false => count(s(s(0)), xts .. nil) <= s(s(s(0))) -> true
	s(s(0)) == xts = false => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(s(s(0))) == xts = true => count(s(s(s(0))), xts .. nil) <= s(0) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	s(s(0)) == xts = false => count(s(s(0)), xts .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	xts2 == s(xts1) = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	s(s(s(0))) == xts = false => count(s(s(s(0))), xts .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(xts2)) == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(xts2)) == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(xts2)) == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = false => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(s(xts2))) == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(xts2)) == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(s(xts2))) == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	s(s(s(s(xts2)))) == xts1 = true => count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> yts
	^f0($n0 + 1; yts, xts@) -> xts$n0 .. ^f0($n0; yts, xts@)
	^f1(0; yts) -> len(yts)
	^f1($n1 + 1; yts) -> s(^f1($n1; yts))
	^f136(0; xts) -> xts
	^f136($n136 + 1; xts) -> s(^f136($n136; xts))
	^f741(0) -> 0
	^f741($n741 + 1) -> s(^f741($n741))
+++ }
+++ Lemma(s)           = 
	count(x, xts$n .. ^f0($n; yts, xts@)) <= s(^f1($n; yts)) = true
	xts3 == xts2 = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(0) = true
	xts3 == xts2 = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = true => count(s(^f136($n; xts2)), xts1 .. nil) <= s(0) = true
	xts3 == s(xts2) = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(0) = true
	xts2 == 0 = false => count(s(^f136($n; xts2)), xts1 .. nil) <= s(s(0)) = true
	xts3 == s(xts2) = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true
	xts4 == xts3 = true => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts4 == xts3 = false => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts3 == 0 = true => count(s(^f136($n; xts3)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts4 == s(xts3) = true => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts3 == 0 = false => count(s(^f136($n; xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts4 == s(xts3) = false => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	0 == xts2 = true => count(^f741($n), xts1 .. nil) <= s(0) = true
	0 == xts2 = false => count(^f741($n), xts1 .. nil) <= s(s(0)) = true
	s(xts3) == xts2 = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true
	s(xts3) == xts2 = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(s(0))) = true
	0 == xts2 = true => count(^f741($n), xts1 .. nil) <= s(s(0)) = true
	0 == xts2 = false => count(^f741($n), xts1 .. nil) <= s(s(s(0))) = true

+++ treating clause
	s(s(s(s(xts3)))) == xts2 = false => count(s(s(s(s(xts3)))), xts1 .. nil) <= s(s(s(0))) = true
+++ inductive narrowing on conjecture
	s(s(s(s(xts3)))) == xts2 = false => count(s(s(s(s(xts3)))), xts1 .. nil) <= s(s(s(0))) = true
... induction variables of
	s(s(s(s(xts3)))) == xts2 = false => count(s(s(s(s(xts3)))), xts1 .. nil) <= s(s(s(0))) = true
... are:
	xts2:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	s(s(s(s(xts3)))) == xts2 = false => count(s(s(s(s(xts3)))), xts1 .. nil) <= s(s(s(0))) = true
... with variable xts2
+++ creating new conjecture
	s(s(s(s(xts2)))) == 0 = false => count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(s(0))) = true
+++ creating new conjecture
	s(s(s(s(xts3)))) == s(xts2) = false => count(s(s(s(s(xts3)))), xts1 .. nil) <= s(s(s(0))) = true
--- clause
	s(s(s(s(xts2)))) == 0 = false => count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(s(0))) = true
... reduced in 1 step to
	count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(s(0))) = true
--- clause
	s(s(s(s(xts3)))) == s(xts2) = false => count(s(s(s(s(xts3)))), xts1 .. nil) <= s(s(s(0))) = true
... reduced in 1 step to
	s(s(s(xts3))) == xts2 = false => count(s(s(s(s(xts3)))), xts1 .. nil) <= s(s(s(0))) = true
--- clause
	count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(s(0))) = true
... subsumed by an existing conjecture
+++ inductive narrowing succeeded
--- clause
	s(s(s(s(xts3)))) == xts2 = false => count(s(s(s(s(xts3)))), xts1 .. nil) <= s(s(s(0))) = true
... oriented to rule
	s(s(s(s(xts2)))) == xts1 = false => count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(s(0))) -> true
+++ added new clause(s)
	s(s(s(xts3))) == xts2 = false => count(s(s(s(s(xts3)))), xts1 .. nil) <= s(s(s(0))) = true
... to conjectures

+++ Status of the Inference System
--- Conjectures:
	s(s(s(0))) == xts2 = true => count(s(s(s(0))), xts1 .. nil) <= s(s(0)) = true
	s(s(s(0))) == xts2 = false => count(s(s(s(0))), xts1 .. nil) <= s(s(s(0))) = true
	count(s(s(0)), xts .. nil) <= s(0) = true
	count(s(s(0)), xts .. nil) <= s(s(0)) = true
	s(s(0)) == xts2 = true => count(s(s(s(0))), xts1 .. nil) <= s(0) = true
	count(s(s(s(0))), xts .. nil) <= s(s(0)) = true
	s(s(0)) == xts2 = false => count(s(s(s(0))), xts1 .. nil) <= s(s(0)) = true
	xts3 == xts2 = true => count(s(s(s(s(xts3)))), xts1 .. nil) <= s(s(0)) = true
	count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == xts2 = false => count(s(s(s(s(xts3)))), xts1 .. nil) <= s(s(s(0))) = true
	xts2 == 0 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) = true
	xts3 == s(xts2) = true => count(s(s(s(xts3))), xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == s(xts2) = false => count(s(s(s(xts3))), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == xts2 = true => count(s(s(s(xts3))), xts1 .. nil) <= s(s(0)) = true
	count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == xts2 = false => count(s(s(s(xts3))), xts1 .. nil) <= s(s(s(0))) = true
	count(s(s(0)), xts .. nil) <= s(s(s(0))) = true
	s(s(s(xts3))) == xts2 = true => count(s(s(s(s(xts3)))), xts1 .. nil) <= s(s(0)) = true
	s(s(s(xts3))) == xts2 = false => count(s(s(s(s(xts3)))), xts1 .. nil) <= s(s(s(0))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	count(x, xs) <= len(xs) -> true
	count(x, xts .. yts) <= s(len(yts)) -> true
	0 == xts = true => count(0, xts .. nil) <= s(0) -> true
	count(x, xts2 .. xts1 .. yts) <= s(s(len(yts))) -> true
	0 == xts = true => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = true => count(s(0), xts .. nil) <= s(0) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = true => count(s(0), xts .. nil) <= s(s(0)) -> true
	0 == xts = true => count(s(s(0)), xts .. nil) <= s(0) -> true
	s(0) == xts = true => count(s(0), xts .. nil) <= s(0) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(s(0))) -> true
	0 == xts = false => count(s(0), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	0 == xts = true => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	s(0) == xts = true => count(s(0), xts .. nil) <= s(s(0)) -> true
	s(0) == xts = true => count(s(s(0)), xts .. nil) <= s(0) -> true
	0 == xts = false => count(s(0), xts .. nil) <= s(s(s(0))) -> true
	0 == xts = false => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	s(0) == xts = false => count(s(0), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	count(x, xts3 .. xts2 .. xts1 .. yts) <= s(s(s(len(yts)))) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	0 == xts = true => count(0, xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(0) == xts = true => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	s(s(0)) == xts = true => count(s(s(0)), xts .. nil) <= s(0) -> true
	0 == xts = false => count(s(s(0)), xts .. nil) <= s(s(s(0))) -> true
	s(0) == xts = false => count(s(0), xts .. nil) <= s(s(s(0))) -> true
	s(0) == xts = false => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	xts == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	s(s(0)) == xts = true => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	0 == xts = false => count(0, xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(0) == xts = false => count(s(s(0)), xts .. nil) <= s(s(s(0))) -> true
	s(s(0)) == xts = false => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(s(s(0))) == xts = true => count(s(s(s(0))), xts .. nil) <= s(0) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	s(s(0)) == xts = false => count(s(s(0)), xts .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	xts2 == s(xts1) = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	s(s(s(0))) == xts = false => count(s(s(s(0))), xts .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(xts2)) == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(xts2)) == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(xts2)) == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = false => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(s(xts2))) == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(xts2)) == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(s(xts2))) == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	s(s(s(s(xts2)))) == xts1 = true => count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(s(s(xts2)))) == xts1 = false => count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(s(0))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> yts
	^f0($n0 + 1; yts, xts@) -> xts$n0 .. ^f0($n0; yts, xts@)
	^f1(0; yts) -> len(yts)
	^f1($n1 + 1; yts) -> s(^f1($n1; yts))
	^f136(0; xts) -> xts
	^f136($n136 + 1; xts) -> s(^f136($n136; xts))
	^f741(0) -> 0
	^f741($n741 + 1) -> s(^f741($n741))
+++ }
+++ Lemma(s)           = 
	count(x, xts$n .. ^f0($n; yts, xts@)) <= s(^f1($n; yts)) = true
	xts3 == xts2 = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(0) = true
	xts3 == xts2 = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = true => count(s(^f136($n; xts2)), xts1 .. nil) <= s(0) = true
	xts3 == s(xts2) = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(0) = true
	xts2 == 0 = false => count(s(^f136($n; xts2)), xts1 .. nil) <= s(s(0)) = true
	xts3 == s(xts2) = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true
	xts4 == xts3 = true => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts4 == xts3 = false => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts3 == 0 = true => count(s(^f136($n; xts3)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts4 == s(xts3) = true => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts3 == 0 = false => count(s(^f136($n; xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts4 == s(xts3) = false => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	0 == xts2 = true => count(^f741($n), xts1 .. nil) <= s(0) = true
	0 == xts2 = false => count(^f741($n), xts1 .. nil) <= s(s(0)) = true
	s(xts3) == xts2 = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true
	s(xts3) == xts2 = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(s(0))) = true
	0 == xts2 = true => count(^f741($n), xts1 .. nil) <= s(s(0)) = true
	0 == xts2 = false => count(^f741($n), xts1 .. nil) <= s(s(s(0))) = true

+++ treating clause
	s(s(s(0))) == xts2 = true => count(s(s(s(0))), xts1 .. nil) <= s(s(0)) = true
+++ inductive narrowing on conjecture
	s(s(s(0))) == xts2 = true => count(s(s(s(0))), xts1 .. nil) <= s(s(0)) = true
... induction variables of
	s(s(s(0))) == xts2 = true => count(s(s(s(0))), xts1 .. nil) <= s(s(0)) = true
... are:
	xts2:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	s(s(s(0))) == xts2 = true => count(s(s(s(0))), xts1 .. nil) <= s(s(0)) = true
... with variable xts2
+++ creating new conjecture
	s(s(s(0))) == 0 = true => count(s(s(s(0))), xts .. nil) <= s(s(0)) = true
+++ creating new conjecture
	s(s(s(0))) == s(xts2) = true => count(s(s(s(0))), xts1 .. nil) <= s(s(0)) = true
--- clause
	s(s(s(0))) == 0 = true => count(s(s(s(0))), xts .. nil) <= s(s(0)) = true
... reduced in 1 step to
	false = true => count(s(s(s(0))), xts .. nil) <= s(s(0)) = true
--- clause
	false = true => count(s(s(s(0))), xts .. nil) <= s(s(0)) = true
... contains a ground negative condition
	false = true
... and is therefore discarded (false => t is always true)
--- clause
	s(s(s(0))) == s(xts2) = true => count(s(s(s(0))), xts1 .. nil) <= s(s(0)) = true
... reduced in 1 step to
	s(s(0)) == xts2 = true => count(s(s(s(0))), xts1 .. nil) <= s(s(0)) = true
+++ inductive narrowing succeeded
--- clause
	s(s(s(0))) == xts2 = true => count(s(s(s(0))), xts1 .. nil) <= s(s(0)) = true
... oriented to rule
	s(s(s(0))) == xts = true => count(s(s(s(0))), xts .. nil) <= s(s(0)) -> true
+++ added new clause(s)
	s(s(0)) == xts2 = true => count(s(s(s(0))), xts1 .. nil) <= s(s(0)) = true
... to conjectures

+++ Status of the Inference System
--- Conjectures:
	s(s(s(0))) == xts2 = false => count(s(s(s(0))), xts1 .. nil) <= s(s(s(0))) = true
	count(s(s(0)), xts .. nil) <= s(0) = true
	count(s(s(0)), xts .. nil) <= s(s(0)) = true
	s(s(0)) == xts2 = true => count(s(s(s(0))), xts1 .. nil) <= s(0) = true
	count(s(s(s(0))), xts .. nil) <= s(s(0)) = true
	s(s(0)) == xts2 = false => count(s(s(s(0))), xts1 .. nil) <= s(s(0)) = true
	xts3 == xts2 = true => count(s(s(s(s(xts3)))), xts1 .. nil) <= s(s(0)) = true
	count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == xts2 = false => count(s(s(s(s(xts3)))), xts1 .. nil) <= s(s(s(0))) = true
	xts2 == 0 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) = true
	xts3 == s(xts2) = true => count(s(s(s(xts3))), xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == s(xts2) = false => count(s(s(s(xts3))), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == xts2 = true => count(s(s(s(xts3))), xts1 .. nil) <= s(s(0)) = true
	count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == xts2 = false => count(s(s(s(xts3))), xts1 .. nil) <= s(s(s(0))) = true
	count(s(s(0)), xts .. nil) <= s(s(s(0))) = true
	s(s(s(xts3))) == xts2 = true => count(s(s(s(s(xts3)))), xts1 .. nil) <= s(s(0)) = true
	s(s(s(xts3))) == xts2 = false => count(s(s(s(s(xts3)))), xts1 .. nil) <= s(s(s(0))) = true
	s(s(0)) == xts2 = true => count(s(s(s(0))), xts1 .. nil) <= s(s(0)) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	count(x, xs) <= len(xs) -> true
	count(x, xts .. yts) <= s(len(yts)) -> true
	0 == xts = true => count(0, xts .. nil) <= s(0) -> true
	count(x, xts2 .. xts1 .. yts) <= s(s(len(yts))) -> true
	0 == xts = true => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = true => count(s(0), xts .. nil) <= s(0) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = true => count(s(0), xts .. nil) <= s(s(0)) -> true
	0 == xts = true => count(s(s(0)), xts .. nil) <= s(0) -> true
	s(0) == xts = true => count(s(0), xts .. nil) <= s(0) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(s(0))) -> true
	0 == xts = false => count(s(0), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	0 == xts = true => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	s(0) == xts = true => count(s(0), xts .. nil) <= s(s(0)) -> true
	s(0) == xts = true => count(s(s(0)), xts .. nil) <= s(0) -> true
	0 == xts = false => count(s(0), xts .. nil) <= s(s(s(0))) -> true
	0 == xts = false => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	s(0) == xts = false => count(s(0), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	count(x, xts3 .. xts2 .. xts1 .. yts) <= s(s(s(len(yts)))) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	0 == xts = true => count(0, xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(0) == xts = true => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	s(s(0)) == xts = true => count(s(s(0)), xts .. nil) <= s(0) -> true
	0 == xts = false => count(s(s(0)), xts .. nil) <= s(s(s(0))) -> true
	s(0) == xts = false => count(s(0), xts .. nil) <= s(s(s(0))) -> true
	s(0) == xts = false => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	xts == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	s(s(0)) == xts = true => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	0 == xts = false => count(0, xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(0) == xts = false => count(s(s(0)), xts .. nil) <= s(s(s(0))) -> true
	s(s(0)) == xts = false => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(s(s(0))) == xts = true => count(s(s(s(0))), xts .. nil) <= s(0) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	s(s(0)) == xts = false => count(s(s(0)), xts .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	xts2 == s(xts1) = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	s(s(s(0))) == xts = true => count(s(s(s(0))), xts .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	s(s(s(0))) == xts = false => count(s(s(s(0))), xts .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(xts2)) == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(xts2)) == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(xts2)) == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = false => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(s(xts2))) == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(xts2)) == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(s(xts2))) == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	s(s(s(s(xts2)))) == xts1 = true => count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(s(s(xts2)))) == xts1 = false => count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(s(0))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> yts
	^f0($n0 + 1; yts, xts@) -> xts$n0 .. ^f0($n0; yts, xts@)
	^f1(0; yts) -> len(yts)
	^f1($n1 + 1; yts) -> s(^f1($n1; yts))
	^f136(0; xts) -> xts
	^f136($n136 + 1; xts) -> s(^f136($n136; xts))
	^f741(0) -> 0
	^f741($n741 + 1) -> s(^f741($n741))
+++ }
+++ Lemma(s)           = 
	count(x, xts$n .. ^f0($n; yts, xts@)) <= s(^f1($n; yts)) = true
	xts3 == xts2 = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(0) = true
	xts3 == xts2 = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = true => count(s(^f136($n; xts2)), xts1 .. nil) <= s(0) = true
	xts3 == s(xts2) = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(0) = true
	xts2 == 0 = false => count(s(^f136($n; xts2)), xts1 .. nil) <= s(s(0)) = true
	xts3 == s(xts2) = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true
	xts4 == xts3 = true => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts4 == xts3 = false => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts3 == 0 = true => count(s(^f136($n; xts3)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts4 == s(xts3) = true => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts3 == 0 = false => count(s(^f136($n; xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts4 == s(xts3) = false => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	0 == xts2 = true => count(^f741($n), xts1 .. nil) <= s(0) = true
	0 == xts2 = false => count(^f741($n), xts1 .. nil) <= s(s(0)) = true
	s(xts3) == xts2 = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true
	s(xts3) == xts2 = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(s(0))) = true
	0 == xts2 = true => count(^f741($n), xts1 .. nil) <= s(s(0)) = true
	0 == xts2 = false => count(^f741($n), xts1 .. nil) <= s(s(s(0))) = true

+++ treating clause
	s(s(s(0))) == xts2 = false => count(s(s(s(0))), xts1 .. nil) <= s(s(s(0))) = true
+++ inductive narrowing on conjecture
	s(s(s(0))) == xts2 = false => count(s(s(s(0))), xts1 .. nil) <= s(s(s(0))) = true
... induction variables of
	s(s(s(0))) == xts2 = false => count(s(s(s(0))), xts1 .. nil) <= s(s(s(0))) = true
... are:
	xts2:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	s(s(s(0))) == xts2 = false => count(s(s(s(0))), xts1 .. nil) <= s(s(s(0))) = true
... with variable xts2
+++ creating new conjecture
	s(s(s(0))) == 0 = false => count(s(s(s(0))), xts .. nil) <= s(s(s(0))) = true
+++ creating new conjecture
	s(s(s(0))) == s(xts2) = false => count(s(s(s(0))), xts1 .. nil) <= s(s(s(0))) = true
--- clause
	s(s(s(0))) == 0 = false => count(s(s(s(0))), xts .. nil) <= s(s(s(0))) = true
... reduced in 1 step to
	count(s(s(s(0))), xts .. nil) <= s(s(s(0))) = true
--- clause
	s(s(s(0))) == s(xts2) = false => count(s(s(s(0))), xts1 .. nil) <= s(s(s(0))) = true
... reduced in 1 step to
	s(s(0)) == xts2 = false => count(s(s(s(0))), xts1 .. nil) <= s(s(s(0))) = true
--- clause
	count(s(s(s(0))), xts .. nil) <= s(s(s(0))) = true
... subsumed by an existing conjecture
+++ inductive narrowing succeeded
--- clause
	s(s(s(0))) == xts2 = false => count(s(s(s(0))), xts1 .. nil) <= s(s(s(0))) = true
... oriented to rule
	s(s(s(0))) == xts = false => count(s(s(s(0))), xts .. nil) <= s(s(s(0))) -> true
+++ added new clause(s)
	s(s(0)) == xts2 = false => count(s(s(s(0))), xts1 .. nil) <= s(s(s(0))) = true
... to conjectures

+++ Status of the Inference System
--- Conjectures:
	count(s(s(0)), xts .. nil) <= s(0) = true
	count(s(s(0)), xts .. nil) <= s(s(0)) = true
	s(s(0)) == xts2 = true => count(s(s(s(0))), xts1 .. nil) <= s(0) = true
	count(s(s(s(0))), xts .. nil) <= s(s(0)) = true
	s(s(0)) == xts2 = false => count(s(s(s(0))), xts1 .. nil) <= s(s(0)) = true
	xts3 == xts2 = true => count(s(s(s(s(xts3)))), xts1 .. nil) <= s(s(0)) = true
	count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == xts2 = false => count(s(s(s(s(xts3)))), xts1 .. nil) <= s(s(s(0))) = true
	xts2 == 0 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) = true
	xts3 == s(xts2) = true => count(s(s(s(xts3))), xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == s(xts2) = false => count(s(s(s(xts3))), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == xts2 = true => count(s(s(s(xts3))), xts1 .. nil) <= s(s(0)) = true
	count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == xts2 = false => count(s(s(s(xts3))), xts1 .. nil) <= s(s(s(0))) = true
	count(s(s(0)), xts .. nil) <= s(s(s(0))) = true
	s(s(s(xts3))) == xts2 = true => count(s(s(s(s(xts3)))), xts1 .. nil) <= s(s(0)) = true
	s(s(s(xts3))) == xts2 = false => count(s(s(s(s(xts3)))), xts1 .. nil) <= s(s(s(0))) = true
	s(s(0)) == xts2 = true => count(s(s(s(0))), xts1 .. nil) <= s(s(0)) = true
	s(s(0)) == xts2 = false => count(s(s(s(0))), xts1 .. nil) <= s(s(s(0))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	count(x, xs) <= len(xs) -> true
	count(x, xts .. yts) <= s(len(yts)) -> true
	0 == xts = true => count(0, xts .. nil) <= s(0) -> true
	count(x, xts2 .. xts1 .. yts) <= s(s(len(yts))) -> true
	0 == xts = true => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = true => count(s(0), xts .. nil) <= s(0) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = true => count(s(0), xts .. nil) <= s(s(0)) -> true
	0 == xts = true => count(s(s(0)), xts .. nil) <= s(0) -> true
	s(0) == xts = true => count(s(0), xts .. nil) <= s(0) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(s(0))) -> true
	0 == xts = false => count(s(0), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	0 == xts = true => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	s(0) == xts = true => count(s(0), xts .. nil) <= s(s(0)) -> true
	s(0) == xts = true => count(s(s(0)), xts .. nil) <= s(0) -> true
	0 == xts = false => count(s(0), xts .. nil) <= s(s(s(0))) -> true
	0 == xts = false => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	s(0) == xts = false => count(s(0), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	count(x, xts3 .. xts2 .. xts1 .. yts) <= s(s(s(len(yts)))) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	0 == xts = true => count(0, xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(0) == xts = true => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	s(s(0)) == xts = true => count(s(s(0)), xts .. nil) <= s(0) -> true
	0 == xts = false => count(s(s(0)), xts .. nil) <= s(s(s(0))) -> true
	s(0) == xts = false => count(s(0), xts .. nil) <= s(s(s(0))) -> true
	s(0) == xts = false => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	xts == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	s(s(0)) == xts = true => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	0 == xts = false => count(0, xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(0) == xts = false => count(s(s(0)), xts .. nil) <= s(s(s(0))) -> true
	s(s(0)) == xts = false => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(s(s(0))) == xts = true => count(s(s(s(0))), xts .. nil) <= s(0) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	s(s(0)) == xts = false => count(s(s(0)), xts .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	xts2 == s(xts1) = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	s(s(s(0))) == xts = true => count(s(s(s(0))), xts .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	s(s(s(0))) == xts = false => count(s(s(s(0))), xts .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(xts2)) == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	s(s(s(0))) == xts = false => count(s(s(s(0))), xts .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(xts2)) == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(xts2)) == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = false => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(s(xts2))) == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(xts2)) == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(s(xts2))) == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	s(s(s(s(xts2)))) == xts1 = true => count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(s(s(xts2)))) == xts1 = false => count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(s(0))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> yts
	^f0($n0 + 1; yts, xts@) -> xts$n0 .. ^f0($n0; yts, xts@)
	^f1(0; yts) -> len(yts)
	^f1($n1 + 1; yts) -> s(^f1($n1; yts))
	^f136(0; xts) -> xts
	^f136($n136 + 1; xts) -> s(^f136($n136; xts))
	^f741(0) -> 0
	^f741($n741 + 1) -> s(^f741($n741))
+++ }
+++ Lemma(s)           = 
	count(x, xts$n .. ^f0($n; yts, xts@)) <= s(^f1($n; yts)) = true
	xts3 == xts2 = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(0) = true
	xts3 == xts2 = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = true => count(s(^f136($n; xts2)), xts1 .. nil) <= s(0) = true
	xts3 == s(xts2) = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(0) = true
	xts2 == 0 = false => count(s(^f136($n; xts2)), xts1 .. nil) <= s(s(0)) = true
	xts3 == s(xts2) = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true
	xts4 == xts3 = true => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts4 == xts3 = false => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts3 == 0 = true => count(s(^f136($n; xts3)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts4 == s(xts3) = true => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts3 == 0 = false => count(s(^f136($n; xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts4 == s(xts3) = false => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	0 == xts2 = true => count(^f741($n), xts1 .. nil) <= s(0) = true
	0 == xts2 = false => count(^f741($n), xts1 .. nil) <= s(s(0)) = true
	s(xts3) == xts2 = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true
	s(xts3) == xts2 = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(s(0))) = true
	0 == xts2 = true => count(^f741($n), xts1 .. nil) <= s(s(0)) = true
	0 == xts2 = false => count(^f741($n), xts1 .. nil) <= s(s(s(0))) = true

+++ treating clause
	count(s(s(0)), xts .. nil) <= s(0) = true
--- no new clauses created
+++ attempting case rewriting
--- case rewriting generated new conjectures
	s(s(0)) == xts = true => s(0) <= s(0) = true
	s(s(0)) == xts = false => 0 <= s(0) = true
+++ added new clause(s)
	s(s(0)) == xts = true => s(0) <= s(0) = true
	s(s(0)) == xts = false => 0 <= s(0) = true
... to conjectures
--- clause
	s(s(0)) == xts = true => s(0) <= s(0) = true
... reduced to tautology
	s(s(0)) == xts = true => true = true
--- clause
	s(s(0)) == xts = false => 0 <= s(0) = true
... reduced to tautology
	s(s(0)) == xts = false => true = true

+++ Status of the Inference System
--- Conjectures:
	count(s(s(0)), xts .. nil) <= s(s(0)) = true
	s(s(0)) == xts2 = true => count(s(s(s(0))), xts1 .. nil) <= s(0) = true
	count(s(s(s(0))), xts .. nil) <= s(s(0)) = true
	s(s(0)) == xts2 = false => count(s(s(s(0))), xts1 .. nil) <= s(s(0)) = true
	xts3 == xts2 = true => count(s(s(s(s(xts3)))), xts1 .. nil) <= s(s(0)) = true
	count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == xts2 = false => count(s(s(s(s(xts3)))), xts1 .. nil) <= s(s(s(0))) = true
	xts2 == 0 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) = true
	xts3 == s(xts2) = true => count(s(s(s(xts3))), xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == s(xts2) = false => count(s(s(s(xts3))), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == xts2 = true => count(s(s(s(xts3))), xts1 .. nil) <= s(s(0)) = true
	count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == xts2 = false => count(s(s(s(xts3))), xts1 .. nil) <= s(s(s(0))) = true
	count(s(s(0)), xts .. nil) <= s(s(s(0))) = true
	s(s(s(xts3))) == xts2 = true => count(s(s(s(s(xts3)))), xts1 .. nil) <= s(s(0)) = true
	s(s(s(xts3))) == xts2 = false => count(s(s(s(s(xts3)))), xts1 .. nil) <= s(s(s(0))) = true
	s(s(0)) == xts2 = true => count(s(s(s(0))), xts1 .. nil) <= s(s(0)) = true
	s(s(0)) == xts2 = false => count(s(s(s(0))), xts1 .. nil) <= s(s(s(0))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	count(x, xs) <= len(xs) -> true
	count(x, xts .. yts) <= s(len(yts)) -> true
	0 == xts = true => count(0, xts .. nil) <= s(0) -> true
	count(x, xts2 .. xts1 .. yts) <= s(s(len(yts))) -> true
	0 == xts = true => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = true => count(s(0), xts .. nil) <= s(0) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = true => count(s(0), xts .. nil) <= s(s(0)) -> true
	0 == xts = true => count(s(s(0)), xts .. nil) <= s(0) -> true
	s(0) == xts = true => count(s(0), xts .. nil) <= s(0) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(s(0))) -> true
	0 == xts = false => count(s(0), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	0 == xts = true => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	s(0) == xts = true => count(s(0), xts .. nil) <= s(s(0)) -> true
	s(0) == xts = true => count(s(s(0)), xts .. nil) <= s(0) -> true
	0 == xts = false => count(s(0), xts .. nil) <= s(s(s(0))) -> true
	0 == xts = false => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	s(0) == xts = false => count(s(0), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	count(x, xts3 .. xts2 .. xts1 .. yts) <= s(s(s(len(yts)))) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	0 == xts = true => count(0, xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(0) == xts = true => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	s(s(0)) == xts = true => count(s(s(0)), xts .. nil) <= s(0) -> true
	0 == xts = false => count(s(s(0)), xts .. nil) <= s(s(s(0))) -> true
	s(0) == xts = false => count(s(0), xts .. nil) <= s(s(s(0))) -> true
	s(0) == xts = false => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	xts == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	s(s(0)) == xts = true => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	0 == xts = false => count(0, xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(0) == xts = false => count(s(s(0)), xts .. nil) <= s(s(s(0))) -> true
	s(s(0)) == xts = false => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(s(s(0))) == xts = true => count(s(s(s(0))), xts .. nil) <= s(0) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	s(s(0)) == xts = false => count(s(s(0)), xts .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	xts2 == s(xts1) = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	s(s(s(0))) == xts = true => count(s(s(s(0))), xts .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	s(s(s(0))) == xts = false => count(s(s(s(0))), xts .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(xts2)) == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	s(s(s(0))) == xts = false => count(s(s(s(0))), xts .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(xts2)) == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(xts2)) == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = false => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(s(xts2))) == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(xts2)) == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(s(xts2))) == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	s(s(s(s(xts2)))) == xts1 = true => count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(s(s(xts2)))) == xts1 = false => count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(s(0))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> yts
	^f0($n0 + 1; yts, xts@) -> xts$n0 .. ^f0($n0; yts, xts@)
	^f1(0; yts) -> len(yts)
	^f1($n1 + 1; yts) -> s(^f1($n1; yts))
	^f136(0; xts) -> xts
	^f136($n136 + 1; xts) -> s(^f136($n136; xts))
	^f741(0) -> 0
	^f741($n741 + 1) -> s(^f741($n741))
+++ }
+++ Lemma(s)           = 
	count(x, xts$n .. ^f0($n; yts, xts@)) <= s(^f1($n; yts)) = true
	xts3 == xts2 = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(0) = true
	xts3 == xts2 = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = true => count(s(^f136($n; xts2)), xts1 .. nil) <= s(0) = true
	xts3 == s(xts2) = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(0) = true
	xts2 == 0 = false => count(s(^f136($n; xts2)), xts1 .. nil) <= s(s(0)) = true
	xts3 == s(xts2) = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true
	xts4 == xts3 = true => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts4 == xts3 = false => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts3 == 0 = true => count(s(^f136($n; xts3)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts4 == s(xts3) = true => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts3 == 0 = false => count(s(^f136($n; xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts4 == s(xts3) = false => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	0 == xts2 = true => count(^f741($n), xts1 .. nil) <= s(0) = true
	0 == xts2 = false => count(^f741($n), xts1 .. nil) <= s(s(0)) = true
	s(xts3) == xts2 = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true
	s(xts3) == xts2 = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(s(0))) = true
	0 == xts2 = true => count(^f741($n), xts1 .. nil) <= s(s(0)) = true
	0 == xts2 = false => count(^f741($n), xts1 .. nil) <= s(s(s(0))) = true

+++ treating clause
	count(s(s(0)), xts .. nil) <= s(s(0)) = true
--- no new clauses created
+++ attempting case rewriting
--- case rewriting generated new conjectures
	s(s(0)) == xts = true => s(0) <= s(s(0)) = true
	s(s(0)) == xts = false => 0 <= s(s(0)) = true
+++ added new clause(s)
	s(s(0)) == xts = true => s(0) <= s(s(0)) = true
	s(s(0)) == xts = false => 0 <= s(s(0)) = true
... to conjectures
--- clause
	s(s(0)) == xts = true => s(0) <= s(s(0)) = true
... reduced to tautology
	s(s(0)) == xts = true => true = true
--- clause
	s(s(0)) == xts = false => 0 <= s(s(0)) = true
... reduced to tautology
	s(s(0)) == xts = false => true = true

+++ Status of the Inference System
--- Conjectures:
	s(s(0)) == xts2 = true => count(s(s(s(0))), xts1 .. nil) <= s(0) = true
	count(s(s(s(0))), xts .. nil) <= s(s(0)) = true
	s(s(0)) == xts2 = false => count(s(s(s(0))), xts1 .. nil) <= s(s(0)) = true
	xts3 == xts2 = true => count(s(s(s(s(xts3)))), xts1 .. nil) <= s(s(0)) = true
	count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == xts2 = false => count(s(s(s(s(xts3)))), xts1 .. nil) <= s(s(s(0))) = true
	xts2 == 0 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) = true
	xts3 == s(xts2) = true => count(s(s(s(xts3))), xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == s(xts2) = false => count(s(s(s(xts3))), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == xts2 = true => count(s(s(s(xts3))), xts1 .. nil) <= s(s(0)) = true
	count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == xts2 = false => count(s(s(s(xts3))), xts1 .. nil) <= s(s(s(0))) = true
	count(s(s(0)), xts .. nil) <= s(s(s(0))) = true
	s(s(s(xts3))) == xts2 = true => count(s(s(s(s(xts3)))), xts1 .. nil) <= s(s(0)) = true
	s(s(s(xts3))) == xts2 = false => count(s(s(s(s(xts3)))), xts1 .. nil) <= s(s(s(0))) = true
	s(s(0)) == xts2 = true => count(s(s(s(0))), xts1 .. nil) <= s(s(0)) = true
	s(s(0)) == xts2 = false => count(s(s(s(0))), xts1 .. nil) <= s(s(s(0))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	count(x, xs) <= len(xs) -> true
	count(x, xts .. yts) <= s(len(yts)) -> true
	0 == xts = true => count(0, xts .. nil) <= s(0) -> true
	count(x, xts2 .. xts1 .. yts) <= s(s(len(yts))) -> true
	0 == xts = true => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = true => count(s(0), xts .. nil) <= s(0) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = true => count(s(0), xts .. nil) <= s(s(0)) -> true
	0 == xts = true => count(s(s(0)), xts .. nil) <= s(0) -> true
	s(0) == xts = true => count(s(0), xts .. nil) <= s(0) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(s(0))) -> true
	0 == xts = false => count(s(0), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	0 == xts = true => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	s(0) == xts = true => count(s(0), xts .. nil) <= s(s(0)) -> true
	s(0) == xts = true => count(s(s(0)), xts .. nil) <= s(0) -> true
	0 == xts = false => count(s(0), xts .. nil) <= s(s(s(0))) -> true
	0 == xts = false => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	s(0) == xts = false => count(s(0), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	count(x, xts3 .. xts2 .. xts1 .. yts) <= s(s(s(len(yts)))) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	0 == xts = true => count(0, xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(0) == xts = true => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	s(s(0)) == xts = true => count(s(s(0)), xts .. nil) <= s(0) -> true
	0 == xts = false => count(s(s(0)), xts .. nil) <= s(s(s(0))) -> true
	s(0) == xts = false => count(s(0), xts .. nil) <= s(s(s(0))) -> true
	s(0) == xts = false => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	xts == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	s(s(0)) == xts = true => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	0 == xts = false => count(0, xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(0) == xts = false => count(s(s(0)), xts .. nil) <= s(s(s(0))) -> true
	s(s(0)) == xts = false => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(s(s(0))) == xts = true => count(s(s(s(0))), xts .. nil) <= s(0) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	s(s(0)) == xts = false => count(s(s(0)), xts .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	xts2 == s(xts1) = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	s(s(s(0))) == xts = true => count(s(s(s(0))), xts .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	s(s(s(0))) == xts = false => count(s(s(s(0))), xts .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(xts2)) == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	s(s(s(0))) == xts = false => count(s(s(s(0))), xts .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(xts2)) == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(xts2)) == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = false => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(s(xts2))) == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(xts2)) == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(s(xts2))) == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	s(s(s(s(xts2)))) == xts1 = true => count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(s(s(xts2)))) == xts1 = false => count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(s(0))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> yts
	^f0($n0 + 1; yts, xts@) -> xts$n0 .. ^f0($n0; yts, xts@)
	^f1(0; yts) -> len(yts)
	^f1($n1 + 1; yts) -> s(^f1($n1; yts))
	^f136(0; xts) -> xts
	^f136($n136 + 1; xts) -> s(^f136($n136; xts))
	^f741(0) -> 0
	^f741($n741 + 1) -> s(^f741($n741))
+++ }
+++ Lemma(s)           = 
	count(x, xts$n .. ^f0($n; yts, xts@)) <= s(^f1($n; yts)) = true
	xts3 == xts2 = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(0) = true
	xts3 == xts2 = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = true => count(s(^f136($n; xts2)), xts1 .. nil) <= s(0) = true
	xts3 == s(xts2) = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(0) = true
	xts2 == 0 = false => count(s(^f136($n; xts2)), xts1 .. nil) <= s(s(0)) = true
	xts3 == s(xts2) = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true
	xts4 == xts3 = true => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts4 == xts3 = false => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts3 == 0 = true => count(s(^f136($n; xts3)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts4 == s(xts3) = true => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts3 == 0 = false => count(s(^f136($n; xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts4 == s(xts3) = false => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	0 == xts2 = true => count(^f741($n), xts1 .. nil) <= s(0) = true
	0 == xts2 = false => count(^f741($n), xts1 .. nil) <= s(s(0)) = true
	s(xts3) == xts2 = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true
	s(xts3) == xts2 = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(s(0))) = true
	0 == xts2 = true => count(^f741($n), xts1 .. nil) <= s(s(0)) = true
	0 == xts2 = false => count(^f741($n), xts1 .. nil) <= s(s(s(0))) = true

+++ treating clause
	s(s(0)) == xts2 = true => count(s(s(s(0))), xts1 .. nil) <= s(0) = true
+++ inductive narrowing on conjecture
	s(s(0)) == xts2 = true => count(s(s(s(0))), xts1 .. nil) <= s(0) = true
... induction variables of
	s(s(0)) == xts2 = true => count(s(s(s(0))), xts1 .. nil) <= s(0) = true
... are:
	xts2:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	s(s(0)) == xts2 = true => count(s(s(s(0))), xts1 .. nil) <= s(0) = true
... with variable xts2
+++ creating new conjecture
	s(s(0)) == 0 = true => count(s(s(s(0))), xts .. nil) <= s(0) = true
+++ creating new conjecture
	s(s(0)) == s(xts2) = true => count(s(s(s(0))), xts1 .. nil) <= s(0) = true
--- clause
	s(s(0)) == 0 = true => count(s(s(s(0))), xts .. nil) <= s(0) = true
... reduced in 1 step to
	false = true => count(s(s(s(0))), xts .. nil) <= s(0) = true
--- clause
	false = true => count(s(s(s(0))), xts .. nil) <= s(0) = true
... contains a ground negative condition
	false = true
... and is therefore discarded (false => t is always true)
--- clause
	s(s(0)) == s(xts2) = true => count(s(s(s(0))), xts1 .. nil) <= s(0) = true
... reduced in 1 step to
	s(0) == xts2 = true => count(s(s(s(0))), xts1 .. nil) <= s(0) = true
+++ inductive narrowing succeeded
--- clause
	s(s(0)) == xts2 = true => count(s(s(s(0))), xts1 .. nil) <= s(0) = true
... oriented to rule
	s(s(0)) == xts = true => count(s(s(s(0))), xts .. nil) <= s(0) -> true
+++ added new clause(s)
	s(0) == xts2 = true => count(s(s(s(0))), xts1 .. nil) <= s(0) = true
... to conjectures

+++ Status of the Inference System
--- Conjectures:
	count(s(s(s(0))), xts .. nil) <= s(s(0)) = true
	s(s(0)) == xts2 = false => count(s(s(s(0))), xts1 .. nil) <= s(s(0)) = true
	xts3 == xts2 = true => count(s(s(s(s(xts3)))), xts1 .. nil) <= s(s(0)) = true
	count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == xts2 = false => count(s(s(s(s(xts3)))), xts1 .. nil) <= s(s(s(0))) = true
	xts2 == 0 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) = true
	xts3 == s(xts2) = true => count(s(s(s(xts3))), xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == s(xts2) = false => count(s(s(s(xts3))), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == xts2 = true => count(s(s(s(xts3))), xts1 .. nil) <= s(s(0)) = true
	count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == xts2 = false => count(s(s(s(xts3))), xts1 .. nil) <= s(s(s(0))) = true
	count(s(s(0)), xts .. nil) <= s(s(s(0))) = true
	s(s(s(xts3))) == xts2 = true => count(s(s(s(s(xts3)))), xts1 .. nil) <= s(s(0)) = true
	s(s(s(xts3))) == xts2 = false => count(s(s(s(s(xts3)))), xts1 .. nil) <= s(s(s(0))) = true
	s(s(0)) == xts2 = true => count(s(s(s(0))), xts1 .. nil) <= s(s(0)) = true
	s(s(0)) == xts2 = false => count(s(s(s(0))), xts1 .. nil) <= s(s(s(0))) = true
	s(0) == xts2 = true => count(s(s(s(0))), xts1 .. nil) <= s(0) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	count(x, xs) <= len(xs) -> true
	count(x, xts .. yts) <= s(len(yts)) -> true
	0 == xts = true => count(0, xts .. nil) <= s(0) -> true
	count(x, xts2 .. xts1 .. yts) <= s(s(len(yts))) -> true
	0 == xts = true => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = true => count(s(0), xts .. nil) <= s(0) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = true => count(s(0), xts .. nil) <= s(s(0)) -> true
	0 == xts = true => count(s(s(0)), xts .. nil) <= s(0) -> true
	s(0) == xts = true => count(s(0), xts .. nil) <= s(0) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(s(0))) -> true
	0 == xts = false => count(s(0), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	0 == xts = true => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	s(0) == xts = true => count(s(0), xts .. nil) <= s(s(0)) -> true
	s(0) == xts = true => count(s(s(0)), xts .. nil) <= s(0) -> true
	0 == xts = false => count(s(0), xts .. nil) <= s(s(s(0))) -> true
	0 == xts = false => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	s(0) == xts = false => count(s(0), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	count(x, xts3 .. xts2 .. xts1 .. yts) <= s(s(s(len(yts)))) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	0 == xts = true => count(0, xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(0) == xts = true => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	s(s(0)) == xts = true => count(s(s(0)), xts .. nil) <= s(0) -> true
	0 == xts = false => count(s(s(0)), xts .. nil) <= s(s(s(0))) -> true
	s(0) == xts = false => count(s(0), xts .. nil) <= s(s(s(0))) -> true
	s(0) == xts = false => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	xts == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	s(s(0)) == xts = true => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	s(s(0)) == xts = true => count(s(s(s(0))), xts .. nil) <= s(0) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	0 == xts = false => count(0, xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(0) == xts = false => count(s(s(0)), xts .. nil) <= s(s(s(0))) -> true
	s(s(0)) == xts = false => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(s(s(0))) == xts = true => count(s(s(s(0))), xts .. nil) <= s(0) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	s(s(0)) == xts = false => count(s(s(0)), xts .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	xts2 == s(xts1) = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	s(s(s(0))) == xts = true => count(s(s(s(0))), xts .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	s(s(s(0))) == xts = false => count(s(s(s(0))), xts .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(xts2)) == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	s(s(s(0))) == xts = false => count(s(s(s(0))), xts .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(xts2)) == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(xts2)) == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = false => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(s(xts2))) == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(xts2)) == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(s(xts2))) == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	s(s(s(s(xts2)))) == xts1 = true => count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(s(s(xts2)))) == xts1 = false => count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(s(0))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> yts
	^f0($n0 + 1; yts, xts@) -> xts$n0 .. ^f0($n0; yts, xts@)
	^f1(0; yts) -> len(yts)
	^f1($n1 + 1; yts) -> s(^f1($n1; yts))
	^f136(0; xts) -> xts
	^f136($n136 + 1; xts) -> s(^f136($n136; xts))
	^f741(0) -> 0
	^f741($n741 + 1) -> s(^f741($n741))
+++ }
+++ Lemma(s)           = 
	count(x, xts$n .. ^f0($n; yts, xts@)) <= s(^f1($n; yts)) = true
	xts3 == xts2 = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(0) = true
	xts3 == xts2 = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = true => count(s(^f136($n; xts2)), xts1 .. nil) <= s(0) = true
	xts3 == s(xts2) = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(0) = true
	xts2 == 0 = false => count(s(^f136($n; xts2)), xts1 .. nil) <= s(s(0)) = true
	xts3 == s(xts2) = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true
	xts4 == xts3 = true => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts4 == xts3 = false => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts3 == 0 = true => count(s(^f136($n; xts3)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts4 == s(xts3) = true => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts3 == 0 = false => count(s(^f136($n; xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts4 == s(xts3) = false => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	0 == xts2 = true => count(^f741($n), xts1 .. nil) <= s(0) = true
	0 == xts2 = false => count(^f741($n), xts1 .. nil) <= s(s(0)) = true
	s(xts3) == xts2 = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true
	s(xts3) == xts2 = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(s(0))) = true
	0 == xts2 = true => count(^f741($n), xts1 .. nil) <= s(s(0)) = true
	0 == xts2 = false => count(^f741($n), xts1 .. nil) <= s(s(s(0))) = true

+++ treating clause
	count(s(s(s(0))), xts .. nil) <= s(s(0)) = true
--- no new clauses created
+++ attempting case rewriting
--- case rewriting generated new conjectures
	s(s(s(0))) == xts = true => s(0) <= s(s(0)) = true
	s(s(s(0))) == xts = false => 0 <= s(s(0)) = true
+++ added new clause(s)
	s(s(s(0))) == xts = true => s(0) <= s(s(0)) = true
	s(s(s(0))) == xts = false => 0 <= s(s(0)) = true
... to conjectures
--- clause
	s(s(s(0))) == xts = true => s(0) <= s(s(0)) = true
... reduced to tautology
	s(s(s(0))) == xts = true => true = true
--- clause
	s(s(s(0))) == xts = false => 0 <= s(s(0)) = true
... reduced to tautology
	s(s(s(0))) == xts = false => true = true

+++ Status of the Inference System
--- Conjectures:
	s(s(0)) == xts2 = false => count(s(s(s(0))), xts1 .. nil) <= s(s(0)) = true
	xts3 == xts2 = true => count(s(s(s(s(xts3)))), xts1 .. nil) <= s(s(0)) = true
	count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == xts2 = false => count(s(s(s(s(xts3)))), xts1 .. nil) <= s(s(s(0))) = true
	xts2 == 0 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) = true
	xts3 == s(xts2) = true => count(s(s(s(xts3))), xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == s(xts2) = false => count(s(s(s(xts3))), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == xts2 = true => count(s(s(s(xts3))), xts1 .. nil) <= s(s(0)) = true
	count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == xts2 = false => count(s(s(s(xts3))), xts1 .. nil) <= s(s(s(0))) = true
	count(s(s(0)), xts .. nil) <= s(s(s(0))) = true
	s(s(s(xts3))) == xts2 = true => count(s(s(s(s(xts3)))), xts1 .. nil) <= s(s(0)) = true
	s(s(s(xts3))) == xts2 = false => count(s(s(s(s(xts3)))), xts1 .. nil) <= s(s(s(0))) = true
	s(s(0)) == xts2 = true => count(s(s(s(0))), xts1 .. nil) <= s(s(0)) = true
	s(s(0)) == xts2 = false => count(s(s(s(0))), xts1 .. nil) <= s(s(s(0))) = true
	s(0) == xts2 = true => count(s(s(s(0))), xts1 .. nil) <= s(0) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	count(x, xs) <= len(xs) -> true
	count(x, xts .. yts) <= s(len(yts)) -> true
	0 == xts = true => count(0, xts .. nil) <= s(0) -> true
	count(x, xts2 .. xts1 .. yts) <= s(s(len(yts))) -> true
	0 == xts = true => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = true => count(s(0), xts .. nil) <= s(0) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = true => count(s(0), xts .. nil) <= s(s(0)) -> true
	0 == xts = true => count(s(s(0)), xts .. nil) <= s(0) -> true
	s(0) == xts = true => count(s(0), xts .. nil) <= s(0) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(s(0))) -> true
	0 == xts = false => count(s(0), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	0 == xts = true => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	s(0) == xts = true => count(s(0), xts .. nil) <= s(s(0)) -> true
	s(0) == xts = true => count(s(s(0)), xts .. nil) <= s(0) -> true
	0 == xts = false => count(s(0), xts .. nil) <= s(s(s(0))) -> true
	0 == xts = false => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	s(0) == xts = false => count(s(0), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	count(x, xts3 .. xts2 .. xts1 .. yts) <= s(s(s(len(yts)))) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	0 == xts = true => count(0, xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(0) == xts = true => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	s(s(0)) == xts = true => count(s(s(0)), xts .. nil) <= s(0) -> true
	0 == xts = false => count(s(s(0)), xts .. nil) <= s(s(s(0))) -> true
	s(0) == xts = false => count(s(0), xts .. nil) <= s(s(s(0))) -> true
	s(0) == xts = false => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	xts == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	s(s(0)) == xts = true => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	s(s(0)) == xts = true => count(s(s(s(0))), xts .. nil) <= s(0) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	0 == xts = false => count(0, xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(0) == xts = false => count(s(s(0)), xts .. nil) <= s(s(s(0))) -> true
	s(s(0)) == xts = false => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(s(s(0))) == xts = true => count(s(s(s(0))), xts .. nil) <= s(0) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	s(s(0)) == xts = false => count(s(s(0)), xts .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	xts2 == s(xts1) = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	s(s(s(0))) == xts = true => count(s(s(s(0))), xts .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	s(s(s(0))) == xts = false => count(s(s(s(0))), xts .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(xts2)) == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	s(s(s(0))) == xts = false => count(s(s(s(0))), xts .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(xts2)) == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(xts2)) == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = false => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(s(xts2))) == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(xts2)) == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(s(xts2))) == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	s(s(s(s(xts2)))) == xts1 = true => count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(s(s(xts2)))) == xts1 = false => count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(s(0))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> yts
	^f0($n0 + 1; yts, xts@) -> xts$n0 .. ^f0($n0; yts, xts@)
	^f1(0; yts) -> len(yts)
	^f1($n1 + 1; yts) -> s(^f1($n1; yts))
	^f136(0; xts) -> xts
	^f136($n136 + 1; xts) -> s(^f136($n136; xts))
	^f741(0) -> 0
	^f741($n741 + 1) -> s(^f741($n741))
+++ }
+++ Lemma(s)           = 
	count(x, xts$n .. ^f0($n; yts, xts@)) <= s(^f1($n; yts)) = true
	xts3 == xts2 = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(0) = true
	xts3 == xts2 = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = true => count(s(^f136($n; xts2)), xts1 .. nil) <= s(0) = true
	xts3 == s(xts2) = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(0) = true
	xts2 == 0 = false => count(s(^f136($n; xts2)), xts1 .. nil) <= s(s(0)) = true
	xts3 == s(xts2) = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true
	xts4 == xts3 = true => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts4 == xts3 = false => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts3 == 0 = true => count(s(^f136($n; xts3)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts4 == s(xts3) = true => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts3 == 0 = false => count(s(^f136($n; xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts4 == s(xts3) = false => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	0 == xts2 = true => count(^f741($n), xts1 .. nil) <= s(0) = true
	0 == xts2 = false => count(^f741($n), xts1 .. nil) <= s(s(0)) = true
	s(xts3) == xts2 = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true
	s(xts3) == xts2 = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(s(0))) = true
	0 == xts2 = true => count(^f741($n), xts1 .. nil) <= s(s(0)) = true
	0 == xts2 = false => count(^f741($n), xts1 .. nil) <= s(s(s(0))) = true

+++ treating clause
	s(s(0)) == xts2 = false => count(s(s(s(0))), xts1 .. nil) <= s(s(0)) = true
+++ inductive narrowing on conjecture
	s(s(0)) == xts2 = false => count(s(s(s(0))), xts1 .. nil) <= s(s(0)) = true
... induction variables of
	s(s(0)) == xts2 = false => count(s(s(s(0))), xts1 .. nil) <= s(s(0)) = true
... are:
	xts2:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	s(s(0)) == xts2 = false => count(s(s(s(0))), xts1 .. nil) <= s(s(0)) = true
... with variable xts2
+++ creating new conjecture
	s(s(0)) == 0 = false => count(s(s(s(0))), xts .. nil) <= s(s(0)) = true
+++ creating new conjecture
	s(s(0)) == s(xts2) = false => count(s(s(s(0))), xts1 .. nil) <= s(s(0)) = true
--- clause
	s(s(0)) == 0 = false => count(s(s(s(0))), xts .. nil) <= s(s(0)) = true
... reduced in 1 step to
	count(s(s(s(0))), xts .. nil) <= s(s(0)) = true
--- clause
	s(s(0)) == s(xts2) = false => count(s(s(s(0))), xts1 .. nil) <= s(s(0)) = true
... reduced in 1 step to
	s(0) == xts2 = false => count(s(s(s(0))), xts1 .. nil) <= s(s(0)) = true
+++ inductive narrowing succeeded
--- clause
	s(s(0)) == xts2 = false => count(s(s(s(0))), xts1 .. nil) <= s(s(0)) = true
... oriented to rule
	s(s(0)) == xts = false => count(s(s(s(0))), xts .. nil) <= s(s(0)) -> true
+++ added new clause(s)
	count(s(s(s(0))), xts .. nil) <= s(s(0)) = true
	s(0) == xts2 = false => count(s(s(s(0))), xts1 .. nil) <= s(s(0)) = true
... to conjectures

+++ Status of the Inference System
--- Conjectures:
	xts3 == xts2 = true => count(s(s(s(s(xts3)))), xts1 .. nil) <= s(s(0)) = true
	count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == xts2 = false => count(s(s(s(s(xts3)))), xts1 .. nil) <= s(s(s(0))) = true
	xts2 == 0 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) = true
	xts3 == s(xts2) = true => count(s(s(s(xts3))), xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == s(xts2) = false => count(s(s(s(xts3))), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == xts2 = true => count(s(s(s(xts3))), xts1 .. nil) <= s(s(0)) = true
	count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == xts2 = false => count(s(s(s(xts3))), xts1 .. nil) <= s(s(s(0))) = true
	count(s(s(0)), xts .. nil) <= s(s(s(0))) = true
	s(s(s(xts3))) == xts2 = true => count(s(s(s(s(xts3)))), xts1 .. nil) <= s(s(0)) = true
	s(s(s(xts3))) == xts2 = false => count(s(s(s(s(xts3)))), xts1 .. nil) <= s(s(s(0))) = true
	s(s(0)) == xts2 = true => count(s(s(s(0))), xts1 .. nil) <= s(s(0)) = true
	s(s(0)) == xts2 = false => count(s(s(s(0))), xts1 .. nil) <= s(s(s(0))) = true
	s(0) == xts2 = true => count(s(s(s(0))), xts1 .. nil) <= s(0) = true
	count(s(s(s(0))), xts .. nil) <= s(s(0)) = true
	s(0) == xts2 = false => count(s(s(s(0))), xts1 .. nil) <= s(s(0)) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	count(x, xs) <= len(xs) -> true
	count(x, xts .. yts) <= s(len(yts)) -> true
	0 == xts = true => count(0, xts .. nil) <= s(0) -> true
	count(x, xts2 .. xts1 .. yts) <= s(s(len(yts))) -> true
	0 == xts = true => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = true => count(s(0), xts .. nil) <= s(0) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = true => count(s(0), xts .. nil) <= s(s(0)) -> true
	0 == xts = true => count(s(s(0)), xts .. nil) <= s(0) -> true
	s(0) == xts = true => count(s(0), xts .. nil) <= s(0) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(s(0))) -> true
	0 == xts = false => count(s(0), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	0 == xts = true => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	s(0) == xts = true => count(s(0), xts .. nil) <= s(s(0)) -> true
	s(0) == xts = true => count(s(s(0)), xts .. nil) <= s(0) -> true
	0 == xts = false => count(s(0), xts .. nil) <= s(s(s(0))) -> true
	0 == xts = false => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	s(0) == xts = false => count(s(0), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	count(x, xts3 .. xts2 .. xts1 .. yts) <= s(s(s(len(yts)))) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	0 == xts = true => count(0, xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(0) == xts = true => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	s(s(0)) == xts = true => count(s(s(0)), xts .. nil) <= s(0) -> true
	0 == xts = false => count(s(s(0)), xts .. nil) <= s(s(s(0))) -> true
	s(0) == xts = false => count(s(0), xts .. nil) <= s(s(s(0))) -> true
	s(0) == xts = false => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	xts == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	s(s(0)) == xts = true => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	s(s(0)) == xts = true => count(s(s(s(0))), xts .. nil) <= s(0) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	0 == xts = false => count(0, xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(0) == xts = false => count(s(s(0)), xts .. nil) <= s(s(s(0))) -> true
	s(s(0)) == xts = false => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(s(s(0))) == xts = true => count(s(s(s(0))), xts .. nil) <= s(0) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	s(s(0)) == xts = false => count(s(s(0)), xts .. nil) <= s(s(s(0))) -> true
	s(s(0)) == xts = false => count(s(s(s(0))), xts .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	xts2 == s(xts1) = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	s(s(s(0))) == xts = true => count(s(s(s(0))), xts .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	s(s(s(0))) == xts = false => count(s(s(s(0))), xts .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(xts2)) == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	s(s(s(0))) == xts = false => count(s(s(s(0))), xts .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(xts2)) == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(xts2)) == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = false => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(s(xts2))) == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(xts2)) == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(s(xts2))) == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	s(s(s(s(xts2)))) == xts1 = true => count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(s(s(xts2)))) == xts1 = false => count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(s(0))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> yts
	^f0($n0 + 1; yts, xts@) -> xts$n0 .. ^f0($n0; yts, xts@)
	^f1(0; yts) -> len(yts)
	^f1($n1 + 1; yts) -> s(^f1($n1; yts))
	^f136(0; xts) -> xts
	^f136($n136 + 1; xts) -> s(^f136($n136; xts))
	^f741(0) -> 0
	^f741($n741 + 1) -> s(^f741($n741))
+++ }
+++ Lemma(s)           = 
	count(x, xts$n .. ^f0($n; yts, xts@)) <= s(^f1($n; yts)) = true
	xts3 == xts2 = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(0) = true
	xts3 == xts2 = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = true => count(s(^f136($n; xts2)), xts1 .. nil) <= s(0) = true
	xts3 == s(xts2) = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(0) = true
	xts2 == 0 = false => count(s(^f136($n; xts2)), xts1 .. nil) <= s(s(0)) = true
	xts3 == s(xts2) = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true
	xts4 == xts3 = true => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts4 == xts3 = false => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts3 == 0 = true => count(s(^f136($n; xts3)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts4 == s(xts3) = true => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts3 == 0 = false => count(s(^f136($n; xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts4 == s(xts3) = false => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	0 == xts2 = true => count(^f741($n), xts1 .. nil) <= s(0) = true
	0 == xts2 = false => count(^f741($n), xts1 .. nil) <= s(s(0)) = true
	s(xts3) == xts2 = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true
	s(xts3) == xts2 = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(s(0))) = true
	0 == xts2 = true => count(^f741($n), xts1 .. nil) <= s(s(0)) = true
	0 == xts2 = false => count(^f741($n), xts1 .. nil) <= s(s(s(0))) = true

+++ treating clause
	xts3 == xts2 = true => count(s(s(s(s(xts3)))), xts1 .. nil) <= s(s(0)) = true
+++ inductive narrowing on conjecture
	xts3 == xts2 = true => count(s(s(s(s(xts3)))), xts1 .. nil) <= s(s(0)) = true
... induction variables of
	xts3 == xts2 = true => count(s(s(s(s(xts3)))), xts1 .. nil) <= s(s(0)) = true
... are:
	xts2:nat
	xts3:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	xts3 == xts2 = true => count(s(s(s(s(xts3)))), xts1 .. nil) <= s(s(0)) = true
... with variable xts2
+++ creating new conjecture
	xts2 == 0 = true => count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(0)) = true
+++ creating new conjecture
	xts3 == s(xts2) = true => count(s(s(s(s(xts3)))), xts1 .. nil) <= s(s(0)) = true
+++ inductive narrowing succeeded
--- clause
	xts3 == xts2 = true => count(s(s(s(s(xts3)))), xts1 .. nil) <= s(s(0)) = true
... oriented to rule
	xts2 == xts1 = true => count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(0)) -> true
+++ added new clause(s)
	xts2 == 0 = true => count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(0)) = true
	xts3 == s(xts2) = true => count(s(s(s(s(xts3)))), xts1 .. nil) <= s(s(0)) = true
... to conjectures

+++ Status of the Inference System
--- Conjectures:
	count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == xts2 = false => count(s(s(s(s(xts3)))), xts1 .. nil) <= s(s(s(0))) = true
	xts2 == 0 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) = true
	xts3 == s(xts2) = true => count(s(s(s(xts3))), xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == s(xts2) = false => count(s(s(s(xts3))), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == xts2 = true => count(s(s(s(xts3))), xts1 .. nil) <= s(s(0)) = true
	count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == xts2 = false => count(s(s(s(xts3))), xts1 .. nil) <= s(s(s(0))) = true
	count(s(s(0)), xts .. nil) <= s(s(s(0))) = true
	s(s(s(xts3))) == xts2 = true => count(s(s(s(s(xts3)))), xts1 .. nil) <= s(s(0)) = true
	s(s(s(xts3))) == xts2 = false => count(s(s(s(s(xts3)))), xts1 .. nil) <= s(s(s(0))) = true
	s(s(0)) == xts2 = true => count(s(s(s(0))), xts1 .. nil) <= s(s(0)) = true
	s(s(0)) == xts2 = false => count(s(s(s(0))), xts1 .. nil) <= s(s(s(0))) = true
	s(0) == xts2 = true => count(s(s(s(0))), xts1 .. nil) <= s(0) = true
	count(s(s(s(0))), xts .. nil) <= s(s(0)) = true
	s(0) == xts2 = false => count(s(s(s(0))), xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = true => count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(0)) = true
	xts3 == s(xts2) = true => count(s(s(s(s(xts3)))), xts1 .. nil) <= s(s(0)) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	count(x, xs) <= len(xs) -> true
	count(x, xts .. yts) <= s(len(yts)) -> true
	0 == xts = true => count(0, xts .. nil) <= s(0) -> true
	count(x, xts2 .. xts1 .. yts) <= s(s(len(yts))) -> true
	0 == xts = true => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = true => count(s(0), xts .. nil) <= s(0) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = true => count(s(0), xts .. nil) <= s(s(0)) -> true
	0 == xts = true => count(s(s(0)), xts .. nil) <= s(0) -> true
	s(0) == xts = true => count(s(0), xts .. nil) <= s(0) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(s(0))) -> true
	0 == xts = false => count(s(0), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	0 == xts = true => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	s(0) == xts = true => count(s(0), xts .. nil) <= s(s(0)) -> true
	s(0) == xts = true => count(s(s(0)), xts .. nil) <= s(0) -> true
	0 == xts = false => count(s(0), xts .. nil) <= s(s(s(0))) -> true
	0 == xts = false => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	s(0) == xts = false => count(s(0), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	count(x, xts3 .. xts2 .. xts1 .. yts) <= s(s(s(len(yts)))) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	0 == xts = true => count(0, xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(0) == xts = true => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	s(s(0)) == xts = true => count(s(s(0)), xts .. nil) <= s(0) -> true
	0 == xts = false => count(s(s(0)), xts .. nil) <= s(s(s(0))) -> true
	s(0) == xts = false => count(s(0), xts .. nil) <= s(s(s(0))) -> true
	s(0) == xts = false => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	xts == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	s(s(0)) == xts = true => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	s(s(0)) == xts = true => count(s(s(s(0))), xts .. nil) <= s(0) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	0 == xts = false => count(0, xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(0) == xts = false => count(s(s(0)), xts .. nil) <= s(s(s(0))) -> true
	s(s(0)) == xts = false => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(s(s(0))) == xts = true => count(s(s(s(0))), xts .. nil) <= s(0) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	s(s(0)) == xts = false => count(s(s(0)), xts .. nil) <= s(s(s(0))) -> true
	s(s(0)) == xts = false => count(s(s(s(0))), xts .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	xts2 == s(xts1) = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	s(s(s(0))) == xts = true => count(s(s(s(0))), xts .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	s(s(s(0))) == xts = false => count(s(s(s(0))), xts .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(xts2)) == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	s(s(s(0))) == xts = false => count(s(s(s(0))), xts .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(xts2)) == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(xts2)) == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = false => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(s(xts2))) == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(xts2)) == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(s(xts2))) == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	s(s(s(s(xts2)))) == xts1 = true => count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(s(s(xts2)))) == xts1 = false => count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(s(0))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> yts
	^f0($n0 + 1; yts, xts@) -> xts$n0 .. ^f0($n0; yts, xts@)
	^f1(0; yts) -> len(yts)
	^f1($n1 + 1; yts) -> s(^f1($n1; yts))
	^f136(0; xts) -> xts
	^f136($n136 + 1; xts) -> s(^f136($n136; xts))
	^f741(0) -> 0
	^f741($n741 + 1) -> s(^f741($n741))
+++ }
+++ Lemma(s)           = 
	count(x, xts$n .. ^f0($n; yts, xts@)) <= s(^f1($n; yts)) = true
	xts3 == xts2 = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(0) = true
	xts3 == xts2 = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = true => count(s(^f136($n; xts2)), xts1 .. nil) <= s(0) = true
	xts3 == s(xts2) = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(0) = true
	xts2 == 0 = false => count(s(^f136($n; xts2)), xts1 .. nil) <= s(s(0)) = true
	xts3 == s(xts2) = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true
	xts4 == xts3 = true => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts4 == xts3 = false => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts3 == 0 = true => count(s(^f136($n; xts3)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts4 == s(xts3) = true => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts3 == 0 = false => count(s(^f136($n; xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts4 == s(xts3) = false => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	0 == xts2 = true => count(^f741($n), xts1 .. nil) <= s(0) = true
	0 == xts2 = false => count(^f741($n), xts1 .. nil) <= s(s(0)) = true
	s(xts3) == xts2 = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true
	s(xts3) == xts2 = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(s(0))) = true
	0 == xts2 = true => count(^f741($n), xts1 .. nil) <= s(s(0)) = true
	0 == xts2 = false => count(^f741($n), xts1 .. nil) <= s(s(s(0))) = true

+++ treating clause
	count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(s(0))) = true
--- no new clauses created
+++ attempting case rewriting
--- case rewriting generated new conjectures
	s(s(s(s(xts2)))) == xts1 = true => s(0) <= s(s(s(0))) = true
	s(s(s(s(xts2)))) == xts1 = false => 0 <= s(s(s(0))) = true
+++ added new clause(s)
	s(s(s(s(xts2)))) == xts1 = true => s(0) <= s(s(s(0))) = true
	s(s(s(s(xts2)))) == xts1 = false => 0 <= s(s(s(0))) = true
... to conjectures
--- clause
	s(s(s(s(xts2)))) == xts1 = true => s(0) <= s(s(s(0))) = true
... reduced to tautology
	s(s(s(s(xts2)))) == xts1 = true => true = true
--- clause
	s(s(s(s(xts2)))) == xts1 = false => 0 <= s(s(s(0))) = true
... reduced to tautology
	s(s(s(s(xts2)))) == xts1 = false => true = true

+++ Status of the Inference System
--- Conjectures:
	xts3 == xts2 = false => count(s(s(s(s(xts3)))), xts1 .. nil) <= s(s(s(0))) = true
	xts2 == 0 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) = true
	xts3 == s(xts2) = true => count(s(s(s(xts3))), xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == s(xts2) = false => count(s(s(s(xts3))), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == xts2 = true => count(s(s(s(xts3))), xts1 .. nil) <= s(s(0)) = true
	count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == xts2 = false => count(s(s(s(xts3))), xts1 .. nil) <= s(s(s(0))) = true
	count(s(s(0)), xts .. nil) <= s(s(s(0))) = true
	s(s(s(xts3))) == xts2 = true => count(s(s(s(s(xts3)))), xts1 .. nil) <= s(s(0)) = true
	s(s(s(xts3))) == xts2 = false => count(s(s(s(s(xts3)))), xts1 .. nil) <= s(s(s(0))) = true
	s(s(0)) == xts2 = true => count(s(s(s(0))), xts1 .. nil) <= s(s(0)) = true
	s(s(0)) == xts2 = false => count(s(s(s(0))), xts1 .. nil) <= s(s(s(0))) = true
	s(0) == xts2 = true => count(s(s(s(0))), xts1 .. nil) <= s(0) = true
	count(s(s(s(0))), xts .. nil) <= s(s(0)) = true
	s(0) == xts2 = false => count(s(s(s(0))), xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = true => count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(0)) = true
	xts3 == s(xts2) = true => count(s(s(s(s(xts3)))), xts1 .. nil) <= s(s(0)) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	count(x, xs) <= len(xs) -> true
	count(x, xts .. yts) <= s(len(yts)) -> true
	0 == xts = true => count(0, xts .. nil) <= s(0) -> true
	count(x, xts2 .. xts1 .. yts) <= s(s(len(yts))) -> true
	0 == xts = true => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = true => count(s(0), xts .. nil) <= s(0) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = true => count(s(0), xts .. nil) <= s(s(0)) -> true
	0 == xts = true => count(s(s(0)), xts .. nil) <= s(0) -> true
	s(0) == xts = true => count(s(0), xts .. nil) <= s(0) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(s(0))) -> true
	0 == xts = false => count(s(0), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	0 == xts = true => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	s(0) == xts = true => count(s(0), xts .. nil) <= s(s(0)) -> true
	s(0) == xts = true => count(s(s(0)), xts .. nil) <= s(0) -> true
	0 == xts = false => count(s(0), xts .. nil) <= s(s(s(0))) -> true
	0 == xts = false => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	s(0) == xts = false => count(s(0), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	count(x, xts3 .. xts2 .. xts1 .. yts) <= s(s(s(len(yts)))) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	0 == xts = true => count(0, xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(0) == xts = true => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	s(s(0)) == xts = true => count(s(s(0)), xts .. nil) <= s(0) -> true
	0 == xts = false => count(s(s(0)), xts .. nil) <= s(s(s(0))) -> true
	s(0) == xts = false => count(s(0), xts .. nil) <= s(s(s(0))) -> true
	s(0) == xts = false => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	xts == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	s(s(0)) == xts = true => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	s(s(0)) == xts = true => count(s(s(s(0))), xts .. nil) <= s(0) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	0 == xts = false => count(0, xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(0) == xts = false => count(s(s(0)), xts .. nil) <= s(s(s(0))) -> true
	s(s(0)) == xts = false => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(s(s(0))) == xts = true => count(s(s(s(0))), xts .. nil) <= s(0) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	s(s(0)) == xts = false => count(s(s(0)), xts .. nil) <= s(s(s(0))) -> true
	s(s(0)) == xts = false => count(s(s(s(0))), xts .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	xts2 == s(xts1) = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	s(s(s(0))) == xts = true => count(s(s(s(0))), xts .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	s(s(s(0))) == xts = false => count(s(s(s(0))), xts .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(xts2)) == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	s(s(s(0))) == xts = false => count(s(s(s(0))), xts .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(xts2)) == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(xts2)) == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = false => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(s(xts2))) == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(xts2)) == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(s(xts2))) == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	s(s(s(s(xts2)))) == xts1 = true => count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(s(s(xts2)))) == xts1 = false => count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(s(0))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> yts
	^f0($n0 + 1; yts, xts@) -> xts$n0 .. ^f0($n0; yts, xts@)
	^f1(0; yts) -> len(yts)
	^f1($n1 + 1; yts) -> s(^f1($n1; yts))
	^f136(0; xts) -> xts
	^f136($n136 + 1; xts) -> s(^f136($n136; xts))
	^f741(0) -> 0
	^f741($n741 + 1) -> s(^f741($n741))
+++ }
+++ Lemma(s)           = 
	count(x, xts$n .. ^f0($n; yts, xts@)) <= s(^f1($n; yts)) = true
	xts3 == xts2 = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(0) = true
	xts3 == xts2 = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = true => count(s(^f136($n; xts2)), xts1 .. nil) <= s(0) = true
	xts3 == s(xts2) = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(0) = true
	xts2 == 0 = false => count(s(^f136($n; xts2)), xts1 .. nil) <= s(s(0)) = true
	xts3 == s(xts2) = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true
	xts4 == xts3 = true => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts4 == xts3 = false => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts3 == 0 = true => count(s(^f136($n; xts3)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts4 == s(xts3) = true => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts3 == 0 = false => count(s(^f136($n; xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts4 == s(xts3) = false => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	0 == xts2 = true => count(^f741($n), xts1 .. nil) <= s(0) = true
	0 == xts2 = false => count(^f741($n), xts1 .. nil) <= s(s(0)) = true
	s(xts3) == xts2 = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true
	s(xts3) == xts2 = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(s(0))) = true
	0 == xts2 = true => count(^f741($n), xts1 .. nil) <= s(s(0)) = true
	0 == xts2 = false => count(^f741($n), xts1 .. nil) <= s(s(s(0))) = true

+++ treating clause
	xts3 == xts2 = false => count(s(s(s(s(xts3)))), xts1 .. nil) <= s(s(s(0))) = true
+++ inductive narrowing on conjecture
	xts3 == xts2 = false => count(s(s(s(s(xts3)))), xts1 .. nil) <= s(s(s(0))) = true
... induction variables of
	xts3 == xts2 = false => count(s(s(s(s(xts3)))), xts1 .. nil) <= s(s(s(0))) = true
... are:
	xts2:nat
	xts3:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	xts3 == xts2 = false => count(s(s(s(s(xts3)))), xts1 .. nil) <= s(s(s(0))) = true
... with variable xts2
+++ creating new conjecture
	xts2 == 0 = false => count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(s(0))) = true
+++ creating new conjecture
	xts3 == s(xts2) = false => count(s(s(s(s(xts3)))), xts1 .. nil) <= s(s(s(0))) = true
+++ inductive narrowing succeeded
--- clause
	xts3 == xts2 = false => count(s(s(s(s(xts3)))), xts1 .. nil) <= s(s(s(0))) = true
... oriented to rule
	xts2 == xts1 = false => count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(s(0))) -> true
+++ added new clause(s)
	xts2 == 0 = false => count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == s(xts2) = false => count(s(s(s(s(xts3)))), xts1 .. nil) <= s(s(s(0))) = true
... to conjectures
+++ active wrap
	xts3 == xts2 = false => count(s(s(.)), xts1 .. nil) <= s(s(s(0))) = true
... with sequence
	xts3 == xts2 = false => count(s(s(xts3)), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == xts2 = false => count(s(s(s(xts3))), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == xts2 = false => count(s(s(s(xts3))), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == xts2 = false => count(s(s(s(s(xts3)))), xts1 .. nil) <= s(s(s(0))) = true
+++ primal grammar found for head
	{.., 0, <=, ==, count, false, nil, s, true}
... and wrap
	xts3 == xts2 = false => count(s(s(.)), xts1 .. nil) <= s(s(s(0))) = true
+++ Presburger system  = {
	^f964(0; xts) -> xts
	^f964($n964 + 1; xts) -> s(^f964($n964; xts))
+++ }
+++ Lemma(s)           = 
	xts3 == xts2 = false => count(s(s(^f964($n; xts3))), xts1 .. nil) <= s(s(s(0))) = true
--- clause
	xts3 == xts2 = false => count(s(s(s(xts3))), xts1 .. nil) <= s(s(s(0))) = true
... subsumed by lemma
	xts3 == xts2 = false => count(s(s(^f964($n; xts3))), xts1 .. nil) <= s(s(s(0))) = true
... with substitution
	$n <- 1

+++ Status of the Inference System
--- Conjectures:
	xts2 == 0 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) = true
	xts3 == s(xts2) = true => count(s(s(s(xts3))), xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == s(xts2) = false => count(s(s(s(xts3))), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == xts2 = true => count(s(s(s(xts3))), xts1 .. nil) <= s(s(0)) = true
	count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) = true
	count(s(s(0)), xts .. nil) <= s(s(s(0))) = true
	s(s(s(xts3))) == xts2 = true => count(s(s(s(s(xts3)))), xts1 .. nil) <= s(s(0)) = true
	s(s(s(xts3))) == xts2 = false => count(s(s(s(s(xts3)))), xts1 .. nil) <= s(s(s(0))) = true
	s(s(0)) == xts2 = true => count(s(s(s(0))), xts1 .. nil) <= s(s(0)) = true
	s(s(0)) == xts2 = false => count(s(s(s(0))), xts1 .. nil) <= s(s(s(0))) = true
	s(0) == xts2 = true => count(s(s(s(0))), xts1 .. nil) <= s(0) = true
	count(s(s(s(0))), xts .. nil) <= s(s(0)) = true
	s(0) == xts2 = false => count(s(s(s(0))), xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = true => count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(0)) = true
	xts3 == s(xts2) = true => count(s(s(s(s(xts3)))), xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = false => count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == s(xts2) = false => count(s(s(s(s(xts3)))), xts1 .. nil) <= s(s(s(0))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	count(x, xs) <= len(xs) -> true
	count(x, xts .. yts) <= s(len(yts)) -> true
	0 == xts = true => count(0, xts .. nil) <= s(0) -> true
	count(x, xts2 .. xts1 .. yts) <= s(s(len(yts))) -> true
	0 == xts = true => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = true => count(s(0), xts .. nil) <= s(0) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = true => count(s(0), xts .. nil) <= s(s(0)) -> true
	0 == xts = true => count(s(s(0)), xts .. nil) <= s(0) -> true
	s(0) == xts = true => count(s(0), xts .. nil) <= s(0) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(s(0))) -> true
	0 == xts = false => count(s(0), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	0 == xts = true => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	s(0) == xts = true => count(s(0), xts .. nil) <= s(s(0)) -> true
	s(0) == xts = true => count(s(s(0)), xts .. nil) <= s(0) -> true
	0 == xts = false => count(s(0), xts .. nil) <= s(s(s(0))) -> true
	0 == xts = false => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	s(0) == xts = false => count(s(0), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	count(x, xts3 .. xts2 .. xts1 .. yts) <= s(s(s(len(yts)))) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	0 == xts = true => count(0, xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(0) == xts = true => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	s(s(0)) == xts = true => count(s(s(0)), xts .. nil) <= s(0) -> true
	0 == xts = false => count(s(s(0)), xts .. nil) <= s(s(s(0))) -> true
	s(0) == xts = false => count(s(0), xts .. nil) <= s(s(s(0))) -> true
	s(0) == xts = false => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	xts == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	s(s(0)) == xts = true => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	s(s(0)) == xts = true => count(s(s(s(0))), xts .. nil) <= s(0) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	0 == xts = false => count(0, xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(0) == xts = false => count(s(s(0)), xts .. nil) <= s(s(s(0))) -> true
	s(s(0)) == xts = false => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(s(s(0))) == xts = true => count(s(s(s(0))), xts .. nil) <= s(0) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	s(s(0)) == xts = false => count(s(s(0)), xts .. nil) <= s(s(s(0))) -> true
	s(s(0)) == xts = false => count(s(s(s(0))), xts .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	xts2 == s(xts1) = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	s(s(s(0))) == xts = true => count(s(s(s(0))), xts .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	s(s(s(0))) == xts = false => count(s(s(s(0))), xts .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(xts2)) == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	s(s(s(0))) == xts = false => count(s(s(s(0))), xts .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(xts2)) == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(xts2)) == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = false => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(s(xts2))) == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(xts2)) == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(s(xts2))) == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	s(s(s(s(xts2)))) == xts1 = true => count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(s(s(xts2)))) == xts1 = false => count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(s(0))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> yts
	^f0($n0 + 1; yts, xts@) -> xts$n0 .. ^f0($n0; yts, xts@)
	^f1(0; yts) -> len(yts)
	^f1($n1 + 1; yts) -> s(^f1($n1; yts))
	^f136(0; xts) -> xts
	^f136($n136 + 1; xts) -> s(^f136($n136; xts))
	^f741(0) -> 0
	^f741($n741 + 1) -> s(^f741($n741))
	^f964(0; xts) -> xts
	^f964($n964 + 1; xts) -> s(^f964($n964; xts))
+++ }
+++ Lemma(s)           = 
	count(x, xts$n .. ^f0($n; yts, xts@)) <= s(^f1($n; yts)) = true
	xts3 == xts2 = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(0) = true
	xts3 == xts2 = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = true => count(s(^f136($n; xts2)), xts1 .. nil) <= s(0) = true
	xts3 == s(xts2) = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(0) = true
	xts2 == 0 = false => count(s(^f136($n; xts2)), xts1 .. nil) <= s(s(0)) = true
	xts3 == s(xts2) = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true
	xts4 == xts3 = true => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts4 == xts3 = false => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts3 == 0 = true => count(s(^f136($n; xts3)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts4 == s(xts3) = true => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts3 == 0 = false => count(s(^f136($n; xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts4 == s(xts3) = false => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	0 == xts2 = true => count(^f741($n), xts1 .. nil) <= s(0) = true
	0 == xts2 = false => count(^f741($n), xts1 .. nil) <= s(s(0)) = true
	s(xts3) == xts2 = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true
	s(xts3) == xts2 = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(s(0))) = true
	0 == xts2 = true => count(^f741($n), xts1 .. nil) <= s(s(0)) = true
	0 == xts2 = false => count(^f741($n), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == xts2 = false => count(s(s(^f964($n; xts3))), xts1 .. nil) <= s(s(s(0))) = true

+++ treating clause
	xts2 == 0 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) = true
+++ inductive narrowing on conjecture
	xts2 == 0 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) = true
... induction variables of
	xts2 == 0 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) = true
... are:
	xts2:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	xts2 == 0 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) = true
... with variable xts2
+++ creating new conjecture
	0 == 0 = true => count(s(s(s(0))), xts .. nil) <= s(s(0)) = true
+++ creating new conjecture
	s(xts2) == 0 = true => count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(0)) = true
--- clause
	0 == 0 = true => count(s(s(s(0))), xts .. nil) <= s(s(0)) = true
... reduced in 1 step to
	count(s(s(s(0))), xts .. nil) <= s(s(0)) = true
--- clause
	s(xts2) == 0 = true => count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(0)) = true
... reduced in 1 step to
	false = true => count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(0)) = true
--- clause
	false = true => count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(0)) = true
... contains a ground negative condition
	false = true
... and is therefore discarded (false => t is always true)
--- clause
	count(s(s(s(0))), xts .. nil) <= s(s(0)) = true
... subsumed by an existing conjecture
+++ inductive narrowing succeeded
--- clause
	xts2 == 0 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) = true
... oriented to rule
	xts == 0 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
+++ active wrap
	xts2 == 0 = true => count(s(s(.)), xts1 .. nil) <= s(s(0)) = true
... with sequence
	xts2 == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) = true
+++ primal grammar found for head
	{.., 0, <=, ==, count, nil, s, true}
... and wrap
	xts2 == 0 = true => count(s(s(.)), xts1 .. nil) <= s(s(0)) = true
+++ Presburger system  = {
	^f964(0; xts) -> xts
	^f964($n964 + 1; xts) -> s(^f964($n964; xts))
+++ }
+++ Lemma(s)           = 
	xts2 == 0 = true => count(s(s(^f964($n; xts2))), xts1 .. nil) <= s(s(0)) = true
--- clause
	xts2 == 0 = true => count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(0)) = true
... subsumed by lemma
	xts2 == 0 = true => count(s(s(^f964($n; xts2))), xts1 .. nil) <= s(s(0)) = true
... with substitution
	$n <- 2

+++ Status of the Inference System
--- Conjectures:
	xts3 == s(xts2) = true => count(s(s(s(xts3))), xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == s(xts2) = false => count(s(s(s(xts3))), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == xts2 = true => count(s(s(s(xts3))), xts1 .. nil) <= s(s(0)) = true
	count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) = true
	count(s(s(0)), xts .. nil) <= s(s(s(0))) = true
	s(s(s(xts3))) == xts2 = true => count(s(s(s(s(xts3)))), xts1 .. nil) <= s(s(0)) = true
	s(s(s(xts3))) == xts2 = false => count(s(s(s(s(xts3)))), xts1 .. nil) <= s(s(s(0))) = true
	s(s(0)) == xts2 = true => count(s(s(s(0))), xts1 .. nil) <= s(s(0)) = true
	s(s(0)) == xts2 = false => count(s(s(s(0))), xts1 .. nil) <= s(s(s(0))) = true
	s(0) == xts2 = true => count(s(s(s(0))), xts1 .. nil) <= s(0) = true
	count(s(s(s(0))), xts .. nil) <= s(s(0)) = true
	s(0) == xts2 = false => count(s(s(s(0))), xts1 .. nil) <= s(s(0)) = true
	xts3 == s(xts2) = true => count(s(s(s(s(xts3)))), xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = false => count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == s(xts2) = false => count(s(s(s(s(xts3)))), xts1 .. nil) <= s(s(s(0))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	count(x, xs) <= len(xs) -> true
	count(x, xts .. yts) <= s(len(yts)) -> true
	0 == xts = true => count(0, xts .. nil) <= s(0) -> true
	count(x, xts2 .. xts1 .. yts) <= s(s(len(yts))) -> true
	0 == xts = true => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = true => count(s(0), xts .. nil) <= s(0) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = true => count(s(0), xts .. nil) <= s(s(0)) -> true
	0 == xts = true => count(s(s(0)), xts .. nil) <= s(0) -> true
	s(0) == xts = true => count(s(0), xts .. nil) <= s(0) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(s(0))) -> true
	0 == xts = false => count(s(0), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	0 == xts = true => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	s(0) == xts = true => count(s(0), xts .. nil) <= s(s(0)) -> true
	s(0) == xts = true => count(s(s(0)), xts .. nil) <= s(0) -> true
	0 == xts = false => count(s(0), xts .. nil) <= s(s(s(0))) -> true
	0 == xts = false => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	s(0) == xts = false => count(s(0), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	count(x, xts3 .. xts2 .. xts1 .. yts) <= s(s(s(len(yts)))) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	0 == xts = true => count(0, xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(0) == xts = true => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	s(s(0)) == xts = true => count(s(s(0)), xts .. nil) <= s(0) -> true
	0 == xts = false => count(s(s(0)), xts .. nil) <= s(s(s(0))) -> true
	s(0) == xts = false => count(s(0), xts .. nil) <= s(s(s(0))) -> true
	s(0) == xts = false => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	xts == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	s(s(0)) == xts = true => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	s(s(0)) == xts = true => count(s(s(s(0))), xts .. nil) <= s(0) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	0 == xts = false => count(0, xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(0) == xts = false => count(s(s(0)), xts .. nil) <= s(s(s(0))) -> true
	s(s(0)) == xts = false => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(s(s(0))) == xts = true => count(s(s(s(0))), xts .. nil) <= s(0) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	s(s(0)) == xts = false => count(s(s(0)), xts .. nil) <= s(s(s(0))) -> true
	s(s(0)) == xts = false => count(s(s(s(0))), xts .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	xts2 == s(xts1) = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	s(s(s(0))) == xts = true => count(s(s(s(0))), xts .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	s(s(s(0))) == xts = false => count(s(s(s(0))), xts .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(xts2)) == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	s(s(s(0))) == xts = false => count(s(s(s(0))), xts .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(xts2)) == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(xts2)) == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = false => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(s(xts2))) == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(xts2)) == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(s(xts2))) == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	s(s(s(s(xts2)))) == xts1 = true => count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(s(s(xts2)))) == xts1 = false => count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(s(0))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> yts
	^f0($n0 + 1; yts, xts@) -> xts$n0 .. ^f0($n0; yts, xts@)
	^f1(0; yts) -> len(yts)
	^f1($n1 + 1; yts) -> s(^f1($n1; yts))
	^f136(0; xts) -> xts
	^f136($n136 + 1; xts) -> s(^f136($n136; xts))
	^f741(0) -> 0
	^f741($n741 + 1) -> s(^f741($n741))
	^f964(0; xts) -> xts
	^f964($n964 + 1; xts) -> s(^f964($n964; xts))
+++ }
+++ Lemma(s)           = 
	count(x, xts$n .. ^f0($n; yts, xts@)) <= s(^f1($n; yts)) = true
	xts3 == xts2 = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(0) = true
	xts3 == xts2 = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = true => count(s(^f136($n; xts2)), xts1 .. nil) <= s(0) = true
	xts3 == s(xts2) = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(0) = true
	xts2 == 0 = false => count(s(^f136($n; xts2)), xts1 .. nil) <= s(s(0)) = true
	xts3 == s(xts2) = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true
	xts4 == xts3 = true => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts4 == xts3 = false => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts3 == 0 = true => count(s(^f136($n; xts3)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts4 == s(xts3) = true => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts3 == 0 = false => count(s(^f136($n; xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts4 == s(xts3) = false => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	0 == xts2 = true => count(^f741($n), xts1 .. nil) <= s(0) = true
	0 == xts2 = false => count(^f741($n), xts1 .. nil) <= s(s(0)) = true
	s(xts3) == xts2 = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true
	s(xts3) == xts2 = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(s(0))) = true
	0 == xts2 = true => count(^f741($n), xts1 .. nil) <= s(s(0)) = true
	0 == xts2 = false => count(^f741($n), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == xts2 = false => count(s(s(^f964($n; xts3))), xts1 .. nil) <= s(s(s(0))) = true
	xts2 == 0 = true => count(s(s(^f964($n; xts2))), xts1 .. nil) <= s(s(0)) = true

+++ treating clause
	xts3 == s(xts2) = true => count(s(s(s(xts3))), xts1 .. nil) <= s(s(0)) = true
+++ inductive narrowing on conjecture
	xts3 == s(xts2) = true => count(s(s(s(xts3))), xts1 .. nil) <= s(s(0)) = true
... induction variables of
	xts3 == s(xts2) = true => count(s(s(s(xts3))), xts1 .. nil) <= s(s(0)) = true
... are:
	xts3:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	xts3 == s(xts2) = true => count(s(s(s(xts3))), xts1 .. nil) <= s(s(0)) = true
... with variable xts3
+++ creating new conjecture
	0 == s(xts2) = true => count(s(s(s(0))), xts1 .. nil) <= s(s(0)) = true
+++ creating new conjecture
	s(xts3) == s(xts2) = true => count(s(s(s(s(xts3)))), xts1 .. nil) <= s(s(0)) = true
--- clause
	0 == s(xts2) = true => count(s(s(s(0))), xts1 .. nil) <= s(s(0)) = true
... reduced in 1 step to
	false = true => count(s(s(s(0))), xts .. nil) <= s(s(0)) = true
--- clause
	false = true => count(s(s(s(0))), xts .. nil) <= s(s(0)) = true
... contains a ground negative condition
	false = true
... and is therefore discarded (false => t is always true)
--- clause
	s(xts3) == s(xts2) = true => count(s(s(s(s(xts3)))), xts1 .. nil) <= s(s(0)) = true
... reduced in 1 step to
	xts3 == xts2 = true => count(s(s(s(s(xts3)))), xts1 .. nil) <= s(s(0)) = true
+++ inductive narrowing succeeded
--- clause
	xts3 == s(xts2) = true => count(s(s(s(xts3))), xts1 .. nil) <= s(s(0)) = true
... oriented to rule
	xts2 == s(xts1) = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
+++ added new clause(s)
	xts3 == xts2 = true => count(s(s(s(s(xts3)))), xts1 .. nil) <= s(s(0)) = true
... to conjectures
+++ active wrap
	xts3 == xts2 = true => count(s(s(.)), xts1 .. nil) <= s(s(0)) = true
... with sequence
	xts3 == xts2 = true => count(s(s(xts3)), xts1 .. nil) <= s(s(0)) = true
	xts3 == xts2 = true => count(s(s(s(xts3))), xts1 .. nil) <= s(s(0)) = true
	xts3 == xts2 = true => count(s(s(s(xts3))), xts1 .. nil) <= s(s(0)) = true
	xts3 == xts2 = true => count(s(s(s(s(xts3)))), xts1 .. nil) <= s(s(0)) = true
+++ primal grammar found for head
	{.., 0, <=, ==, count, nil, s, true}
... and wrap
	xts3 == xts2 = true => count(s(s(.)), xts1 .. nil) <= s(s(0)) = true
+++ Presburger system  = {
	^f964(0; xts) -> xts
	^f964($n964 + 1; xts) -> s(^f964($n964; xts))
+++ }
+++ Lemma(s)           = 
	xts3 == xts2 = true => count(s(s(^f964($n; xts3))), xts1 .. nil) <= s(s(0)) = true
--- clause
	xts3 == xts2 = true => count(s(s(s(xts3))), xts1 .. nil) <= s(s(0)) = true
... subsumed by lemma
	xts3 == xts2 = true => count(s(s(^f964($n; xts3))), xts1 .. nil) <= s(s(0)) = true
... with substitution
	$n <- 1
--- clause
	xts3 == xts2 = true => count(s(s(s(s(xts3)))), xts1 .. nil) <= s(s(0)) = true
... subsumed by lemma
	xts3 == xts2 = true => count(s(s(^f964($n; xts3))), xts1 .. nil) <= s(s(0)) = true
... with substitution
	$n <- 2

+++ Status of the Inference System
--- Conjectures:
	xts2 == 0 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == s(xts2) = false => count(s(s(s(xts3))), xts1 .. nil) <= s(s(s(0))) = true
	count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) = true
	count(s(s(0)), xts .. nil) <= s(s(s(0))) = true
	s(s(s(xts3))) == xts2 = true => count(s(s(s(s(xts3)))), xts1 .. nil) <= s(s(0)) = true
	s(s(s(xts3))) == xts2 = false => count(s(s(s(s(xts3)))), xts1 .. nil) <= s(s(s(0))) = true
	s(s(0)) == xts2 = true => count(s(s(s(0))), xts1 .. nil) <= s(s(0)) = true
	s(s(0)) == xts2 = false => count(s(s(s(0))), xts1 .. nil) <= s(s(s(0))) = true
	s(0) == xts2 = true => count(s(s(s(0))), xts1 .. nil) <= s(0) = true
	count(s(s(s(0))), xts .. nil) <= s(s(0)) = true
	s(0) == xts2 = false => count(s(s(s(0))), xts1 .. nil) <= s(s(0)) = true
	xts3 == s(xts2) = true => count(s(s(s(s(xts3)))), xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = false => count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == s(xts2) = false => count(s(s(s(s(xts3)))), xts1 .. nil) <= s(s(s(0))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	count(x, xs) <= len(xs) -> true
	count(x, xts .. yts) <= s(len(yts)) -> true
	0 == xts = true => count(0, xts .. nil) <= s(0) -> true
	count(x, xts2 .. xts1 .. yts) <= s(s(len(yts))) -> true
	0 == xts = true => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = true => count(s(0), xts .. nil) <= s(0) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = true => count(s(0), xts .. nil) <= s(s(0)) -> true
	0 == xts = true => count(s(s(0)), xts .. nil) <= s(0) -> true
	s(0) == xts = true => count(s(0), xts .. nil) <= s(0) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(s(0))) -> true
	0 == xts = false => count(s(0), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	0 == xts = true => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	s(0) == xts = true => count(s(0), xts .. nil) <= s(s(0)) -> true
	s(0) == xts = true => count(s(s(0)), xts .. nil) <= s(0) -> true
	0 == xts = false => count(s(0), xts .. nil) <= s(s(s(0))) -> true
	0 == xts = false => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	s(0) == xts = false => count(s(0), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	count(x, xts3 .. xts2 .. xts1 .. yts) <= s(s(s(len(yts)))) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	0 == xts = true => count(0, xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(0) == xts = true => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	s(s(0)) == xts = true => count(s(s(0)), xts .. nil) <= s(0) -> true
	0 == xts = false => count(s(s(0)), xts .. nil) <= s(s(s(0))) -> true
	s(0) == xts = false => count(s(0), xts .. nil) <= s(s(s(0))) -> true
	s(0) == xts = false => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	xts == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	s(s(0)) == xts = true => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	s(s(0)) == xts = true => count(s(s(s(0))), xts .. nil) <= s(0) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	0 == xts = false => count(0, xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(0) == xts = false => count(s(s(0)), xts .. nil) <= s(s(s(0))) -> true
	s(s(0)) == xts = false => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(s(s(0))) == xts = true => count(s(s(s(0))), xts .. nil) <= s(0) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	s(s(0)) == xts = false => count(s(s(0)), xts .. nil) <= s(s(s(0))) -> true
	s(s(0)) == xts = false => count(s(s(s(0))), xts .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	xts2 == s(xts1) = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	s(s(s(0))) == xts = true => count(s(s(s(0))), xts .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	s(s(s(0))) == xts = false => count(s(s(s(0))), xts .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(xts2)) == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	s(s(s(0))) == xts = false => count(s(s(s(0))), xts .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(xts2)) == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(xts2)) == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = false => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(s(xts2))) == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(xts2)) == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(s(xts2))) == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	s(s(s(s(xts2)))) == xts1 = true => count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(s(s(xts2)))) == xts1 = false => count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(s(0))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> yts
	^f0($n0 + 1; yts, xts@) -> xts$n0 .. ^f0($n0; yts, xts@)
	^f1(0; yts) -> len(yts)
	^f1($n1 + 1; yts) -> s(^f1($n1; yts))
	^f136(0; xts) -> xts
	^f136($n136 + 1; xts) -> s(^f136($n136; xts))
	^f741(0) -> 0
	^f741($n741 + 1) -> s(^f741($n741))
	^f964(0; xts) -> xts
	^f964($n964 + 1; xts) -> s(^f964($n964; xts))
+++ }
+++ Lemma(s)           = 
	count(x, xts$n .. ^f0($n; yts, xts@)) <= s(^f1($n; yts)) = true
	xts3 == xts2 = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(0) = true
	xts3 == xts2 = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = true => count(s(^f136($n; xts2)), xts1 .. nil) <= s(0) = true
	xts3 == s(xts2) = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(0) = true
	xts2 == 0 = false => count(s(^f136($n; xts2)), xts1 .. nil) <= s(s(0)) = true
	xts3 == s(xts2) = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true
	xts4 == xts3 = true => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts4 == xts3 = false => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts3 == 0 = true => count(s(^f136($n; xts3)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts4 == s(xts3) = true => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts3 == 0 = false => count(s(^f136($n; xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts4 == s(xts3) = false => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	0 == xts2 = true => count(^f741($n), xts1 .. nil) <= s(0) = true
	0 == xts2 = false => count(^f741($n), xts1 .. nil) <= s(s(0)) = true
	s(xts3) == xts2 = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true
	s(xts3) == xts2 = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(s(0))) = true
	0 == xts2 = true => count(^f741($n), xts1 .. nil) <= s(s(0)) = true
	0 == xts2 = false => count(^f741($n), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == xts2 = false => count(s(s(^f964($n; xts3))), xts1 .. nil) <= s(s(s(0))) = true
	xts2 == 0 = true => count(s(s(^f964($n; xts2))), xts1 .. nil) <= s(s(0)) = true
	xts3 == xts2 = true => count(s(s(^f964($n; xts3))), xts1 .. nil) <= s(s(0)) = true

+++ treating clause
	xts2 == 0 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) = true
+++ inductive narrowing on conjecture
	xts2 == 0 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) = true
... induction variables of
	xts2 == 0 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) = true
... are:
	xts2:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	xts2 == 0 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) = true
... with variable xts2
+++ creating new conjecture
	0 == 0 = false => count(s(s(s(0))), xts .. nil) <= s(s(s(0))) = true
+++ creating new conjecture
	s(xts2) == 0 = false => count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(s(0))) = true
--- clause
	0 == 0 = false => count(s(s(s(0))), xts .. nil) <= s(s(s(0))) = true
... reduced in 1 step to
	true = false => count(s(s(s(0))), xts .. nil) <= s(s(s(0))) = true
--- clause
	true = false => count(s(s(s(0))), xts .. nil) <= s(s(s(0))) = true
... contains a ground negative condition
	true = false
... and is therefore discarded (false => t is always true)
--- clause
	s(xts2) == 0 = false => count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(s(0))) = true
... reduced in 1 step to
	count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(s(0))) = true
+++ inductive narrowing succeeded
--- clause
	xts2 == 0 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) = true
... oriented to rule
	xts == 0 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
+++ added new clause(s)
	count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(s(0))) = true
... to conjectures
+++ active wrap
	xts2 == 0 = false => count(s(s(.)), xts1 .. nil) <= s(s(s(0))) = true
... with sequence
	xts2 == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) = true
	xts2 == 0 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) = true
	xts2 == 0 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) = true
+++ primal grammar found for head
	{.., 0, <=, ==, count, false, nil, s, true}
... and wrap
	xts2 == 0 = false => count(s(s(.)), xts1 .. nil) <= s(s(s(0))) = true
+++ Presburger system  = {
	^f964(0; xts) -> xts
	^f964($n964 + 1; xts) -> s(^f964($n964; xts))
+++ }
+++ Lemma(s)           = 
	xts2 == 0 = false => count(s(s(^f964($n; xts2))), xts1 .. nil) <= s(s(s(0))) = true
--- clause
	xts2 == 0 = false => count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(s(0))) = true
... subsumed by lemma
	xts2 == 0 = false => count(s(s(^f964($n; xts2))), xts1 .. nil) <= s(s(s(0))) = true
... with substitution
	$n <- 2

+++ Status of the Inference System
--- Conjectures:
	xts3 == s(xts2) = false => count(s(s(s(xts3))), xts1 .. nil) <= s(s(s(0))) = true
	count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) = true
	count(s(s(0)), xts .. nil) <= s(s(s(0))) = true
	s(s(s(xts3))) == xts2 = true => count(s(s(s(s(xts3)))), xts1 .. nil) <= s(s(0)) = true
	s(s(s(xts3))) == xts2 = false => count(s(s(s(s(xts3)))), xts1 .. nil) <= s(s(s(0))) = true
	s(s(0)) == xts2 = true => count(s(s(s(0))), xts1 .. nil) <= s(s(0)) = true
	s(s(0)) == xts2 = false => count(s(s(s(0))), xts1 .. nil) <= s(s(s(0))) = true
	s(0) == xts2 = true => count(s(s(s(0))), xts1 .. nil) <= s(0) = true
	count(s(s(s(0))), xts .. nil) <= s(s(0)) = true
	s(0) == xts2 = false => count(s(s(s(0))), xts1 .. nil) <= s(s(0)) = true
	xts3 == s(xts2) = true => count(s(s(s(s(xts3)))), xts1 .. nil) <= s(s(0)) = true
	xts3 == s(xts2) = false => count(s(s(s(s(xts3)))), xts1 .. nil) <= s(s(s(0))) = true
	count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(s(0))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	count(x, xs) <= len(xs) -> true
	count(x, xts .. yts) <= s(len(yts)) -> true
	0 == xts = true => count(0, xts .. nil) <= s(0) -> true
	count(x, xts2 .. xts1 .. yts) <= s(s(len(yts))) -> true
	0 == xts = true => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = true => count(s(0), xts .. nil) <= s(0) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = true => count(s(0), xts .. nil) <= s(s(0)) -> true
	0 == xts = true => count(s(s(0)), xts .. nil) <= s(0) -> true
	s(0) == xts = true => count(s(0), xts .. nil) <= s(0) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(s(0))) -> true
	0 == xts = false => count(s(0), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	0 == xts = true => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	s(0) == xts = true => count(s(0), xts .. nil) <= s(s(0)) -> true
	s(0) == xts = true => count(s(s(0)), xts .. nil) <= s(0) -> true
	0 == xts = false => count(s(0), xts .. nil) <= s(s(s(0))) -> true
	0 == xts = false => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	s(0) == xts = false => count(s(0), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	count(x, xts3 .. xts2 .. xts1 .. yts) <= s(s(s(len(yts)))) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	0 == xts = true => count(0, xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(0) == xts = true => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	s(s(0)) == xts = true => count(s(s(0)), xts .. nil) <= s(0) -> true
	0 == xts = false => count(s(s(0)), xts .. nil) <= s(s(s(0))) -> true
	s(0) == xts = false => count(s(0), xts .. nil) <= s(s(s(0))) -> true
	s(0) == xts = false => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	xts == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	s(s(0)) == xts = true => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	s(s(0)) == xts = true => count(s(s(s(0))), xts .. nil) <= s(0) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	0 == xts = false => count(0, xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(0) == xts = false => count(s(s(0)), xts .. nil) <= s(s(s(0))) -> true
	s(s(0)) == xts = false => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(s(s(0))) == xts = true => count(s(s(s(0))), xts .. nil) <= s(0) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	s(s(0)) == xts = false => count(s(s(0)), xts .. nil) <= s(s(s(0))) -> true
	s(s(0)) == xts = false => count(s(s(s(0))), xts .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	xts2 == s(xts1) = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	s(s(s(0))) == xts = true => count(s(s(s(0))), xts .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	s(s(s(0))) == xts = false => count(s(s(s(0))), xts .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(xts2)) == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	s(s(s(0))) == xts = false => count(s(s(s(0))), xts .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(xts2)) == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(xts2)) == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = false => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(s(xts2))) == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(xts2)) == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(s(xts2))) == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	s(s(s(s(xts2)))) == xts1 = true => count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(s(s(xts2)))) == xts1 = false => count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(s(0))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> yts
	^f0($n0 + 1; yts, xts@) -> xts$n0 .. ^f0($n0; yts, xts@)
	^f1(0; yts) -> len(yts)
	^f1($n1 + 1; yts) -> s(^f1($n1; yts))
	^f136(0; xts) -> xts
	^f136($n136 + 1; xts) -> s(^f136($n136; xts))
	^f741(0) -> 0
	^f741($n741 + 1) -> s(^f741($n741))
	^f964(0; xts) -> xts
	^f964($n964 + 1; xts) -> s(^f964($n964; xts))
+++ }
+++ Lemma(s)           = 
	count(x, xts$n .. ^f0($n; yts, xts@)) <= s(^f1($n; yts)) = true
	xts3 == xts2 = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(0) = true
	xts3 == xts2 = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = true => count(s(^f136($n; xts2)), xts1 .. nil) <= s(0) = true
	xts3 == s(xts2) = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(0) = true
	xts2 == 0 = false => count(s(^f136($n; xts2)), xts1 .. nil) <= s(s(0)) = true
	xts3 == s(xts2) = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true
	xts4 == xts3 = true => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts4 == xts3 = false => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts3 == 0 = true => count(s(^f136($n; xts3)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts4 == s(xts3) = true => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts3 == 0 = false => count(s(^f136($n; xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts4 == s(xts3) = false => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	0 == xts2 = true => count(^f741($n), xts1 .. nil) <= s(0) = true
	0 == xts2 = false => count(^f741($n), xts1 .. nil) <= s(s(0)) = true
	s(xts3) == xts2 = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true
	s(xts3) == xts2 = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(s(0))) = true
	0 == xts2 = true => count(^f741($n), xts1 .. nil) <= s(s(0)) = true
	0 == xts2 = false => count(^f741($n), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == xts2 = false => count(s(s(^f964($n; xts3))), xts1 .. nil) <= s(s(s(0))) = true
	xts2 == 0 = true => count(s(s(^f964($n; xts2))), xts1 .. nil) <= s(s(0)) = true
	xts3 == xts2 = true => count(s(s(^f964($n; xts3))), xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = false => count(s(s(^f964($n; xts2))), xts1 .. nil) <= s(s(s(0))) = true

+++ treating clause
	xts3 == s(xts2) = false => count(s(s(s(xts3))), xts1 .. nil) <= s(s(s(0))) = true
+++ inductive narrowing on conjecture
	xts3 == s(xts2) = false => count(s(s(s(xts3))), xts1 .. nil) <= s(s(s(0))) = true
... induction variables of
	xts3 == s(xts2) = false => count(s(s(s(xts3))), xts1 .. nil) <= s(s(s(0))) = true
... are:
	xts3:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	xts3 == s(xts2) = false => count(s(s(s(xts3))), xts1 .. nil) <= s(s(s(0))) = true
... with variable xts3
+++ creating new conjecture
	0 == s(xts2) = false => count(s(s(s(0))), xts1 .. nil) <= s(s(s(0))) = true
+++ creating new conjecture
	s(xts3) == s(xts2) = false => count(s(s(s(s(xts3)))), xts1 .. nil) <= s(s(s(0))) = true
--- clause
	0 == s(xts2) = false => count(s(s(s(0))), xts1 .. nil) <= s(s(s(0))) = true
... reduced in 1 step to
	count(s(s(s(0))), xts .. nil) <= s(s(s(0))) = true
--- clause
	s(xts3) == s(xts2) = false => count(s(s(s(s(xts3)))), xts1 .. nil) <= s(s(s(0))) = true
... reduced in 1 step to
	xts3 == xts2 = false => count(s(s(s(s(xts3)))), xts1 .. nil) <= s(s(s(0))) = true
--- clause
	xts3 == xts2 = false => count(s(s(s(s(xts3)))), xts1 .. nil) <= s(s(s(0))) = true
... subsumed by lemma
	xts3 == xts2 = false => count(s(s(^f964($n; xts3))), xts1 .. nil) <= s(s(s(0))) = true
... with substitution
	$n <- 2
--- clause
	count(s(s(s(0))), xts .. nil) <= s(s(s(0))) = true
... subsumed by an existing conjecture
+++ inductive narrowing succeeded
--- clause
	xts3 == s(xts2) = false => count(s(s(s(xts3))), xts1 .. nil) <= s(s(s(0))) = true
... oriented to rule
	xts2 == s(xts1) = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
+++ active wrap
	xts3 == s(xts2) = false => count(s(s(.)), xts1 .. nil) <= s(s(s(0))) = true
... with sequence
	xts3 == s(xts2) = false => count(s(s(xts3)), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == s(xts2) = false => count(s(s(s(xts3))), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == s(xts2) = false => count(s(s(s(xts3))), xts1 .. nil) <= s(s(s(0))) = true
+++ primal grammar found for head
	{.., 0, <=, ==, count, false, nil, s, true}
... and wrap
	xts3 == s(xts2) = false => count(s(s(.)), xts1 .. nil) <= s(s(s(0))) = true
+++ Presburger system  = {
	^f964(0; xts) -> xts
	^f964($n964 + 1; xts) -> s(^f964($n964; xts))
+++ }
+++ Lemma(s)           = 
	xts3 == s(xts2) = false => count(s(s(^f964($n; xts3))), xts1 .. nil) <= s(s(s(0))) = true
--- clause
	xts3 == s(xts2) = false => count(s(s(s(s(xts3)))), xts1 .. nil) <= s(s(s(0))) = true
... subsumed by lemma
	xts3 == s(xts2) = false => count(s(s(^f964($n; xts3))), xts1 .. nil) <= s(s(s(0))) = true
... with substitution
	$n <- 2

+++ Status of the Inference System
--- Conjectures:
	count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) = true
	count(s(s(0)), xts .. nil) <= s(s(s(0))) = true
	s(s(s(xts3))) == xts2 = true => count(s(s(s(s(xts3)))), xts1 .. nil) <= s(s(0)) = true
	s(s(s(xts3))) == xts2 = false => count(s(s(s(s(xts3)))), xts1 .. nil) <= s(s(s(0))) = true
	s(s(0)) == xts2 = true => count(s(s(s(0))), xts1 .. nil) <= s(s(0)) = true
	s(s(0)) == xts2 = false => count(s(s(s(0))), xts1 .. nil) <= s(s(s(0))) = true
	s(0) == xts2 = true => count(s(s(s(0))), xts1 .. nil) <= s(0) = true
	count(s(s(s(0))), xts .. nil) <= s(s(0)) = true
	s(0) == xts2 = false => count(s(s(s(0))), xts1 .. nil) <= s(s(0)) = true
	xts3 == s(xts2) = true => count(s(s(s(s(xts3)))), xts1 .. nil) <= s(s(0)) = true
	count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(s(0))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	count(x, xs) <= len(xs) -> true
	count(x, xts .. yts) <= s(len(yts)) -> true
	0 == xts = true => count(0, xts .. nil) <= s(0) -> true
	count(x, xts2 .. xts1 .. yts) <= s(s(len(yts))) -> true
	0 == xts = true => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = true => count(s(0), xts .. nil) <= s(0) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = true => count(s(0), xts .. nil) <= s(s(0)) -> true
	0 == xts = true => count(s(s(0)), xts .. nil) <= s(0) -> true
	s(0) == xts = true => count(s(0), xts .. nil) <= s(0) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(s(0))) -> true
	0 == xts = false => count(s(0), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	0 == xts = true => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	s(0) == xts = true => count(s(0), xts .. nil) <= s(s(0)) -> true
	s(0) == xts = true => count(s(s(0)), xts .. nil) <= s(0) -> true
	0 == xts = false => count(s(0), xts .. nil) <= s(s(s(0))) -> true
	0 == xts = false => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	s(0) == xts = false => count(s(0), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	count(x, xts3 .. xts2 .. xts1 .. yts) <= s(s(s(len(yts)))) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	0 == xts = true => count(0, xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(0) == xts = true => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	s(s(0)) == xts = true => count(s(s(0)), xts .. nil) <= s(0) -> true
	0 == xts = false => count(s(s(0)), xts .. nil) <= s(s(s(0))) -> true
	s(0) == xts = false => count(s(0), xts .. nil) <= s(s(s(0))) -> true
	s(0) == xts = false => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	xts == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	s(s(0)) == xts = true => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	s(s(0)) == xts = true => count(s(s(s(0))), xts .. nil) <= s(0) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	0 == xts = false => count(0, xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(0) == xts = false => count(s(s(0)), xts .. nil) <= s(s(s(0))) -> true
	s(s(0)) == xts = false => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(s(s(0))) == xts = true => count(s(s(s(0))), xts .. nil) <= s(0) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	s(s(0)) == xts = false => count(s(s(0)), xts .. nil) <= s(s(s(0))) -> true
	s(s(0)) == xts = false => count(s(s(s(0))), xts .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	xts2 == s(xts1) = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	s(s(s(0))) == xts = true => count(s(s(s(0))), xts .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	s(s(s(0))) == xts = false => count(s(s(s(0))), xts .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(xts2)) == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	s(s(s(0))) == xts = false => count(s(s(s(0))), xts .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(xts2)) == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(xts2)) == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = false => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(s(xts2))) == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(xts2)) == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(s(xts2))) == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	s(s(s(s(xts2)))) == xts1 = true => count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(s(s(xts2)))) == xts1 = false => count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(s(0))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> yts
	^f0($n0 + 1; yts, xts@) -> xts$n0 .. ^f0($n0; yts, xts@)
	^f1(0; yts) -> len(yts)
	^f1($n1 + 1; yts) -> s(^f1($n1; yts))
	^f136(0; xts) -> xts
	^f136($n136 + 1; xts) -> s(^f136($n136; xts))
	^f741(0) -> 0
	^f741($n741 + 1) -> s(^f741($n741))
	^f964(0; xts) -> xts
	^f964($n964 + 1; xts) -> s(^f964($n964; xts))
+++ }
+++ Lemma(s)           = 
	count(x, xts$n .. ^f0($n; yts, xts@)) <= s(^f1($n; yts)) = true
	xts3 == xts2 = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(0) = true
	xts3 == xts2 = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = true => count(s(^f136($n; xts2)), xts1 .. nil) <= s(0) = true
	xts3 == s(xts2) = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(0) = true
	xts2 == 0 = false => count(s(^f136($n; xts2)), xts1 .. nil) <= s(s(0)) = true
	xts3 == s(xts2) = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true
	xts4 == xts3 = true => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts4 == xts3 = false => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts3 == 0 = true => count(s(^f136($n; xts3)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts4 == s(xts3) = true => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts3 == 0 = false => count(s(^f136($n; xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts4 == s(xts3) = false => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	0 == xts2 = true => count(^f741($n), xts1 .. nil) <= s(0) = true
	0 == xts2 = false => count(^f741($n), xts1 .. nil) <= s(s(0)) = true
	s(xts3) == xts2 = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true
	s(xts3) == xts2 = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(s(0))) = true
	0 == xts2 = true => count(^f741($n), xts1 .. nil) <= s(s(0)) = true
	0 == xts2 = false => count(^f741($n), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == xts2 = false => count(s(s(^f964($n; xts3))), xts1 .. nil) <= s(s(s(0))) = true
	xts2 == 0 = true => count(s(s(^f964($n; xts2))), xts1 .. nil) <= s(s(0)) = true
	xts3 == xts2 = true => count(s(s(^f964($n; xts3))), xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = false => count(s(s(^f964($n; xts2))), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == s(xts2) = false => count(s(s(^f964($n; xts3))), xts1 .. nil) <= s(s(s(0))) = true

+++ treating clause
	count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) = true
--- no new clauses created
+++ attempting case rewriting
--- case rewriting generated new conjectures
	s(s(s(xts2))) == xts1 = true => s(0) <= s(s(s(0))) = true
	s(s(s(xts2))) == xts1 = false => 0 <= s(s(s(0))) = true
+++ added new clause(s)
	s(s(s(xts2))) == xts1 = true => s(0) <= s(s(s(0))) = true
	s(s(s(xts2))) == xts1 = false => 0 <= s(s(s(0))) = true
... to conjectures
--- clause
	s(s(s(xts2))) == xts1 = true => s(0) <= s(s(s(0))) = true
... reduced to tautology
	s(s(s(xts2))) == xts1 = true => true = true
--- clause
	s(s(s(xts2))) == xts1 = false => 0 <= s(s(s(0))) = true
... reduced to tautology
	s(s(s(xts2))) == xts1 = false => true = true
+++ active wrap
	xts3 == s(xts2) = true => count(s(s(.)), xts1 .. nil) <= s(s(0)) = true
... with sequence
	xts3 == s(xts2) = true => count(s(s(xts3)), xts1 .. nil) <= s(s(0)) = true
	xts3 == s(xts2) = true => count(s(s(s(xts3))), xts1 .. nil) <= s(s(0)) = true
	xts3 == s(xts2) = true => count(s(s(s(xts3))), xts1 .. nil) <= s(s(0)) = true
+++ primal grammar found for head
	{.., 0, <=, ==, count, nil, s, true}
... and wrap
	xts3 == s(xts2) = true => count(s(s(.)), xts1 .. nil) <= s(s(0)) = true
+++ Presburger system  = {
	^f964(0; xts) -> xts
	^f964($n964 + 1; xts) -> s(^f964($n964; xts))
+++ }
+++ Lemma(s)           = 
	xts3 == s(xts2) = true => count(s(s(^f964($n; xts3))), xts1 .. nil) <= s(s(0)) = true
--- clause
	xts3 == s(xts2) = true => count(s(s(s(s(xts3)))), xts1 .. nil) <= s(s(0)) = true
... subsumed by lemma
	xts3 == s(xts2) = true => count(s(s(^f964($n; xts3))), xts1 .. nil) <= s(s(0)) = true
... with substitution
	$n <- 2

+++ Status of the Inference System
--- Conjectures:
	count(s(s(0)), xts .. nil) <= s(s(s(0))) = true
	s(s(s(xts3))) == xts2 = true => count(s(s(s(s(xts3)))), xts1 .. nil) <= s(s(0)) = true
	s(s(s(xts3))) == xts2 = false => count(s(s(s(s(xts3)))), xts1 .. nil) <= s(s(s(0))) = true
	s(s(0)) == xts2 = true => count(s(s(s(0))), xts1 .. nil) <= s(s(0)) = true
	s(s(0)) == xts2 = false => count(s(s(s(0))), xts1 .. nil) <= s(s(s(0))) = true
	s(0) == xts2 = true => count(s(s(s(0))), xts1 .. nil) <= s(0) = true
	count(s(s(s(0))), xts .. nil) <= s(s(0)) = true
	s(0) == xts2 = false => count(s(s(s(0))), xts1 .. nil) <= s(s(0)) = true
	count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(s(0))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	count(x, xs) <= len(xs) -> true
	count(x, xts .. yts) <= s(len(yts)) -> true
	0 == xts = true => count(0, xts .. nil) <= s(0) -> true
	count(x, xts2 .. xts1 .. yts) <= s(s(len(yts))) -> true
	0 == xts = true => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = true => count(s(0), xts .. nil) <= s(0) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = true => count(s(0), xts .. nil) <= s(s(0)) -> true
	0 == xts = true => count(s(s(0)), xts .. nil) <= s(0) -> true
	s(0) == xts = true => count(s(0), xts .. nil) <= s(0) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(s(0))) -> true
	0 == xts = false => count(s(0), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	0 == xts = true => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	s(0) == xts = true => count(s(0), xts .. nil) <= s(s(0)) -> true
	s(0) == xts = true => count(s(s(0)), xts .. nil) <= s(0) -> true
	0 == xts = false => count(s(0), xts .. nil) <= s(s(s(0))) -> true
	0 == xts = false => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	s(0) == xts = false => count(s(0), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	count(x, xts3 .. xts2 .. xts1 .. yts) <= s(s(s(len(yts)))) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	0 == xts = true => count(0, xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(0) == xts = true => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	s(s(0)) == xts = true => count(s(s(0)), xts .. nil) <= s(0) -> true
	0 == xts = false => count(s(s(0)), xts .. nil) <= s(s(s(0))) -> true
	s(0) == xts = false => count(s(0), xts .. nil) <= s(s(s(0))) -> true
	s(0) == xts = false => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	xts == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	s(s(0)) == xts = true => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	s(s(0)) == xts = true => count(s(s(s(0))), xts .. nil) <= s(0) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	0 == xts = false => count(0, xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(0) == xts = false => count(s(s(0)), xts .. nil) <= s(s(s(0))) -> true
	s(s(0)) == xts = false => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(s(s(0))) == xts = true => count(s(s(s(0))), xts .. nil) <= s(0) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	s(s(0)) == xts = false => count(s(s(0)), xts .. nil) <= s(s(s(0))) -> true
	s(s(0)) == xts = false => count(s(s(s(0))), xts .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	xts2 == s(xts1) = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	s(s(s(0))) == xts = true => count(s(s(s(0))), xts .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	s(s(s(0))) == xts = false => count(s(s(s(0))), xts .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(xts2)) == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	s(s(s(0))) == xts = false => count(s(s(s(0))), xts .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(xts2)) == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(xts2)) == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = false => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(s(xts2))) == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(xts2)) == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(s(xts2))) == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	s(s(s(s(xts2)))) == xts1 = true => count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(s(s(xts2)))) == xts1 = false => count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(s(0))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> yts
	^f0($n0 + 1; yts, xts@) -> xts$n0 .. ^f0($n0; yts, xts@)
	^f1(0; yts) -> len(yts)
	^f1($n1 + 1; yts) -> s(^f1($n1; yts))
	^f136(0; xts) -> xts
	^f136($n136 + 1; xts) -> s(^f136($n136; xts))
	^f741(0) -> 0
	^f741($n741 + 1) -> s(^f741($n741))
	^f964(0; xts) -> xts
	^f964($n964 + 1; xts) -> s(^f964($n964; xts))
+++ }
+++ Lemma(s)           = 
	count(x, xts$n .. ^f0($n; yts, xts@)) <= s(^f1($n; yts)) = true
	xts3 == xts2 = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(0) = true
	xts3 == xts2 = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = true => count(s(^f136($n; xts2)), xts1 .. nil) <= s(0) = true
	xts3 == s(xts2) = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(0) = true
	xts2 == 0 = false => count(s(^f136($n; xts2)), xts1 .. nil) <= s(s(0)) = true
	xts3 == s(xts2) = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true
	xts4 == xts3 = true => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts4 == xts3 = false => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts3 == 0 = true => count(s(^f136($n; xts3)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts4 == s(xts3) = true => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts3 == 0 = false => count(s(^f136($n; xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts4 == s(xts3) = false => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	0 == xts2 = true => count(^f741($n), xts1 .. nil) <= s(0) = true
	0 == xts2 = false => count(^f741($n), xts1 .. nil) <= s(s(0)) = true
	s(xts3) == xts2 = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true
	s(xts3) == xts2 = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(s(0))) = true
	0 == xts2 = true => count(^f741($n), xts1 .. nil) <= s(s(0)) = true
	0 == xts2 = false => count(^f741($n), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == xts2 = false => count(s(s(^f964($n; xts3))), xts1 .. nil) <= s(s(s(0))) = true
	xts2 == 0 = true => count(s(s(^f964($n; xts2))), xts1 .. nil) <= s(s(0)) = true
	xts3 == xts2 = true => count(s(s(^f964($n; xts3))), xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = false => count(s(s(^f964($n; xts2))), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == s(xts2) = false => count(s(s(^f964($n; xts3))), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == s(xts2) = true => count(s(s(^f964($n; xts3))), xts1 .. nil) <= s(s(0)) = true

+++ treating clause
	count(s(s(0)), xts .. nil) <= s(s(s(0))) = true
--- no new clauses created
+++ attempting case rewriting
--- case rewriting generated new conjectures
	s(s(0)) == xts = true => s(0) <= s(s(s(0))) = true
	s(s(0)) == xts = false => 0 <= s(s(s(0))) = true
+++ added new clause(s)
	s(s(0)) == xts = true => s(0) <= s(s(s(0))) = true
	s(s(0)) == xts = false => 0 <= s(s(s(0))) = true
... to conjectures
--- clause
	s(s(0)) == xts = true => s(0) <= s(s(s(0))) = true
... reduced to tautology
	s(s(0)) == xts = true => true = true
--- clause
	s(s(0)) == xts = false => 0 <= s(s(s(0))) = true
... reduced to tautology
	s(s(0)) == xts = false => true = true

+++ Status of the Inference System
--- Conjectures:
	s(s(s(xts3))) == xts2 = true => count(s(s(s(s(xts3)))), xts1 .. nil) <= s(s(0)) = true
	s(s(s(xts3))) == xts2 = false => count(s(s(s(s(xts3)))), xts1 .. nil) <= s(s(s(0))) = true
	s(s(0)) == xts2 = true => count(s(s(s(0))), xts1 .. nil) <= s(s(0)) = true
	s(s(0)) == xts2 = false => count(s(s(s(0))), xts1 .. nil) <= s(s(s(0))) = true
	s(0) == xts2 = true => count(s(s(s(0))), xts1 .. nil) <= s(0) = true
	count(s(s(s(0))), xts .. nil) <= s(s(0)) = true
	s(0) == xts2 = false => count(s(s(s(0))), xts1 .. nil) <= s(s(0)) = true
	count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(s(0))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	count(x, xs) <= len(xs) -> true
	count(x, xts .. yts) <= s(len(yts)) -> true
	0 == xts = true => count(0, xts .. nil) <= s(0) -> true
	count(x, xts2 .. xts1 .. yts) <= s(s(len(yts))) -> true
	0 == xts = true => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = true => count(s(0), xts .. nil) <= s(0) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = true => count(s(0), xts .. nil) <= s(s(0)) -> true
	0 == xts = true => count(s(s(0)), xts .. nil) <= s(0) -> true
	s(0) == xts = true => count(s(0), xts .. nil) <= s(0) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(s(0))) -> true
	0 == xts = false => count(s(0), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	0 == xts = true => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	s(0) == xts = true => count(s(0), xts .. nil) <= s(s(0)) -> true
	s(0) == xts = true => count(s(s(0)), xts .. nil) <= s(0) -> true
	0 == xts = false => count(s(0), xts .. nil) <= s(s(s(0))) -> true
	0 == xts = false => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	s(0) == xts = false => count(s(0), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	count(x, xts3 .. xts2 .. xts1 .. yts) <= s(s(s(len(yts)))) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	0 == xts = true => count(0, xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(0) == xts = true => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	s(s(0)) == xts = true => count(s(s(0)), xts .. nil) <= s(0) -> true
	0 == xts = false => count(s(s(0)), xts .. nil) <= s(s(s(0))) -> true
	s(0) == xts = false => count(s(0), xts .. nil) <= s(s(s(0))) -> true
	s(0) == xts = false => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	xts == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	s(s(0)) == xts = true => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	s(s(0)) == xts = true => count(s(s(s(0))), xts .. nil) <= s(0) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	0 == xts = false => count(0, xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(0) == xts = false => count(s(s(0)), xts .. nil) <= s(s(s(0))) -> true
	s(s(0)) == xts = false => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(s(s(0))) == xts = true => count(s(s(s(0))), xts .. nil) <= s(0) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	s(s(0)) == xts = false => count(s(s(0)), xts .. nil) <= s(s(s(0))) -> true
	s(s(0)) == xts = false => count(s(s(s(0))), xts .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	xts2 == s(xts1) = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	s(s(s(0))) == xts = true => count(s(s(s(0))), xts .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	s(s(s(0))) == xts = false => count(s(s(s(0))), xts .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(xts2)) == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	s(s(s(0))) == xts = false => count(s(s(s(0))), xts .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(xts2)) == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(xts2)) == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = false => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(s(xts2))) == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(xts2)) == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(s(xts2))) == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	s(s(s(s(xts2)))) == xts1 = true => count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(s(s(xts2)))) == xts1 = false => count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(s(0))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> yts
	^f0($n0 + 1; yts, xts@) -> xts$n0 .. ^f0($n0; yts, xts@)
	^f1(0; yts) -> len(yts)
	^f1($n1 + 1; yts) -> s(^f1($n1; yts))
	^f136(0; xts) -> xts
	^f136($n136 + 1; xts) -> s(^f136($n136; xts))
	^f741(0) -> 0
	^f741($n741 + 1) -> s(^f741($n741))
	^f964(0; xts) -> xts
	^f964($n964 + 1; xts) -> s(^f964($n964; xts))
+++ }
+++ Lemma(s)           = 
	count(x, xts$n .. ^f0($n; yts, xts@)) <= s(^f1($n; yts)) = true
	xts3 == xts2 = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(0) = true
	xts3 == xts2 = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = true => count(s(^f136($n; xts2)), xts1 .. nil) <= s(0) = true
	xts3 == s(xts2) = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(0) = true
	xts2 == 0 = false => count(s(^f136($n; xts2)), xts1 .. nil) <= s(s(0)) = true
	xts3 == s(xts2) = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true
	xts4 == xts3 = true => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts4 == xts3 = false => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts3 == 0 = true => count(s(^f136($n; xts3)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts4 == s(xts3) = true => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts3 == 0 = false => count(s(^f136($n; xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts4 == s(xts3) = false => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	0 == xts2 = true => count(^f741($n), xts1 .. nil) <= s(0) = true
	0 == xts2 = false => count(^f741($n), xts1 .. nil) <= s(s(0)) = true
	s(xts3) == xts2 = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true
	s(xts3) == xts2 = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(s(0))) = true
	0 == xts2 = true => count(^f741($n), xts1 .. nil) <= s(s(0)) = true
	0 == xts2 = false => count(^f741($n), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == xts2 = false => count(s(s(^f964($n; xts3))), xts1 .. nil) <= s(s(s(0))) = true
	xts2 == 0 = true => count(s(s(^f964($n; xts2))), xts1 .. nil) <= s(s(0)) = true
	xts3 == xts2 = true => count(s(s(^f964($n; xts3))), xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = false => count(s(s(^f964($n; xts2))), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == s(xts2) = false => count(s(s(^f964($n; xts3))), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == s(xts2) = true => count(s(s(^f964($n; xts3))), xts1 .. nil) <= s(s(0)) = true

+++ treating clause
	s(s(s(xts3))) == xts2 = true => count(s(s(s(s(xts3)))), xts1 .. nil) <= s(s(0)) = true
+++ inductive narrowing on conjecture
	s(s(s(xts3))) == xts2 = true => count(s(s(s(s(xts3)))), xts1 .. nil) <= s(s(0)) = true
... induction variables of
	s(s(s(xts3))) == xts2 = true => count(s(s(s(s(xts3)))), xts1 .. nil) <= s(s(0)) = true
... are:
	xts2:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	s(s(s(xts3))) == xts2 = true => count(s(s(s(s(xts3)))), xts1 .. nil) <= s(s(0)) = true
... with variable xts2
+++ creating new conjecture
	s(s(s(xts2))) == 0 = true => count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(0)) = true
+++ creating new conjecture
	s(s(s(xts3))) == s(xts2) = true => count(s(s(s(s(xts3)))), xts1 .. nil) <= s(s(0)) = true
--- clause
	s(s(s(xts2))) == 0 = true => count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(0)) = true
... reduced in 1 step to
	false = true => count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(0)) = true
--- clause
	false = true => count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(0)) = true
... contains a ground negative condition
	false = true
... and is therefore discarded (false => t is always true)
--- clause
	s(s(s(xts3))) == s(xts2) = true => count(s(s(s(s(xts3)))), xts1 .. nil) <= s(s(0)) = true
... reduced in 1 step to
	s(s(xts3)) == xts2 = true => count(s(s(s(s(xts3)))), xts1 .. nil) <= s(s(0)) = true
+++ inductive narrowing succeeded
--- clause
	s(s(s(xts3))) == xts2 = true => count(s(s(s(s(xts3)))), xts1 .. nil) <= s(s(0)) = true
... oriented to rule
	s(s(s(xts2))) == xts1 = true => count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(0)) -> true
+++ added new clause(s)
	s(s(xts3)) == xts2 = true => count(s(s(s(s(xts3)))), xts1 .. nil) <= s(s(0)) = true
... to conjectures

+++ Status of the Inference System
--- Conjectures:
	s(s(s(xts3))) == xts2 = false => count(s(s(s(s(xts3)))), xts1 .. nil) <= s(s(s(0))) = true
	s(s(0)) == xts2 = true => count(s(s(s(0))), xts1 .. nil) <= s(s(0)) = true
	s(s(0)) == xts2 = false => count(s(s(s(0))), xts1 .. nil) <= s(s(s(0))) = true
	s(0) == xts2 = true => count(s(s(s(0))), xts1 .. nil) <= s(0) = true
	count(s(s(s(0))), xts .. nil) <= s(s(0)) = true
	s(0) == xts2 = false => count(s(s(s(0))), xts1 .. nil) <= s(s(0)) = true
	count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(s(0))) = true
	s(s(xts3)) == xts2 = true => count(s(s(s(s(xts3)))), xts1 .. nil) <= s(s(0)) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	count(x, xs) <= len(xs) -> true
	count(x, xts .. yts) <= s(len(yts)) -> true
	0 == xts = true => count(0, xts .. nil) <= s(0) -> true
	count(x, xts2 .. xts1 .. yts) <= s(s(len(yts))) -> true
	0 == xts = true => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = true => count(s(0), xts .. nil) <= s(0) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = true => count(s(0), xts .. nil) <= s(s(0)) -> true
	0 == xts = true => count(s(s(0)), xts .. nil) <= s(0) -> true
	s(0) == xts = true => count(s(0), xts .. nil) <= s(0) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(s(0))) -> true
	0 == xts = false => count(s(0), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	0 == xts = true => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	s(0) == xts = true => count(s(0), xts .. nil) <= s(s(0)) -> true
	s(0) == xts = true => count(s(s(0)), xts .. nil) <= s(0) -> true
	0 == xts = false => count(s(0), xts .. nil) <= s(s(s(0))) -> true
	0 == xts = false => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	s(0) == xts = false => count(s(0), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	count(x, xts3 .. xts2 .. xts1 .. yts) <= s(s(s(len(yts)))) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	0 == xts = true => count(0, xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(0) == xts = true => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	s(s(0)) == xts = true => count(s(s(0)), xts .. nil) <= s(0) -> true
	0 == xts = false => count(s(s(0)), xts .. nil) <= s(s(s(0))) -> true
	s(0) == xts = false => count(s(0), xts .. nil) <= s(s(s(0))) -> true
	s(0) == xts = false => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	xts == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	s(s(0)) == xts = true => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	s(s(0)) == xts = true => count(s(s(s(0))), xts .. nil) <= s(0) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	0 == xts = false => count(0, xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(0) == xts = false => count(s(s(0)), xts .. nil) <= s(s(s(0))) -> true
	s(s(0)) == xts = false => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(s(s(0))) == xts = true => count(s(s(s(0))), xts .. nil) <= s(0) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	s(s(0)) == xts = false => count(s(s(0)), xts .. nil) <= s(s(s(0))) -> true
	s(s(0)) == xts = false => count(s(s(s(0))), xts .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	xts2 == s(xts1) = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	s(s(s(0))) == xts = true => count(s(s(s(0))), xts .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	s(s(s(0))) == xts = false => count(s(s(s(0))), xts .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(xts2)) == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	s(s(s(0))) == xts = false => count(s(s(s(0))), xts .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(xts2)) == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(xts2)) == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = false => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(s(xts2))) == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(xts2)) == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(s(xts2))) == xts1 = true => count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(s(xts2))) == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	s(s(s(s(xts2)))) == xts1 = true => count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(s(s(xts2)))) == xts1 = false => count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(s(0))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> yts
	^f0($n0 + 1; yts, xts@) -> xts$n0 .. ^f0($n0; yts, xts@)
	^f1(0; yts) -> len(yts)
	^f1($n1 + 1; yts) -> s(^f1($n1; yts))
	^f136(0; xts) -> xts
	^f136($n136 + 1; xts) -> s(^f136($n136; xts))
	^f741(0) -> 0
	^f741($n741 + 1) -> s(^f741($n741))
	^f964(0; xts) -> xts
	^f964($n964 + 1; xts) -> s(^f964($n964; xts))
+++ }
+++ Lemma(s)           = 
	count(x, xts$n .. ^f0($n; yts, xts@)) <= s(^f1($n; yts)) = true
	xts3 == xts2 = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(0) = true
	xts3 == xts2 = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = true => count(s(^f136($n; xts2)), xts1 .. nil) <= s(0) = true
	xts3 == s(xts2) = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(0) = true
	xts2 == 0 = false => count(s(^f136($n; xts2)), xts1 .. nil) <= s(s(0)) = true
	xts3 == s(xts2) = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true
	xts4 == xts3 = true => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts4 == xts3 = false => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts3 == 0 = true => count(s(^f136($n; xts3)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts4 == s(xts3) = true => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts3 == 0 = false => count(s(^f136($n; xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts4 == s(xts3) = false => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	0 == xts2 = true => count(^f741($n), xts1 .. nil) <= s(0) = true
	0 == xts2 = false => count(^f741($n), xts1 .. nil) <= s(s(0)) = true
	s(xts3) == xts2 = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true
	s(xts3) == xts2 = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(s(0))) = true
	0 == xts2 = true => count(^f741($n), xts1 .. nil) <= s(s(0)) = true
	0 == xts2 = false => count(^f741($n), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == xts2 = false => count(s(s(^f964($n; xts3))), xts1 .. nil) <= s(s(s(0))) = true
	xts2 == 0 = true => count(s(s(^f964($n; xts2))), xts1 .. nil) <= s(s(0)) = true
	xts3 == xts2 = true => count(s(s(^f964($n; xts3))), xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = false => count(s(s(^f964($n; xts2))), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == s(xts2) = false => count(s(s(^f964($n; xts3))), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == s(xts2) = true => count(s(s(^f964($n; xts3))), xts1 .. nil) <= s(s(0)) = true

+++ treating clause
	s(s(s(xts3))) == xts2 = false => count(s(s(s(s(xts3)))), xts1 .. nil) <= s(s(s(0))) = true
+++ inductive narrowing on conjecture
	s(s(s(xts3))) == xts2 = false => count(s(s(s(s(xts3)))), xts1 .. nil) <= s(s(s(0))) = true
... induction variables of
	s(s(s(xts3))) == xts2 = false => count(s(s(s(s(xts3)))), xts1 .. nil) <= s(s(s(0))) = true
... are:
	xts2:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	s(s(s(xts3))) == xts2 = false => count(s(s(s(s(xts3)))), xts1 .. nil) <= s(s(s(0))) = true
... with variable xts2
+++ creating new conjecture
	s(s(s(xts2))) == 0 = false => count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(s(0))) = true
+++ creating new conjecture
	s(s(s(xts3))) == s(xts2) = false => count(s(s(s(s(xts3)))), xts1 .. nil) <= s(s(s(0))) = true
--- clause
	s(s(s(xts2))) == 0 = false => count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(s(0))) = true
... reduced in 1 step to
	count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(s(0))) = true
--- clause
	s(s(s(xts3))) == s(xts2) = false => count(s(s(s(s(xts3)))), xts1 .. nil) <= s(s(s(0))) = true
... reduced in 1 step to
	s(s(xts3)) == xts2 = false => count(s(s(s(s(xts3)))), xts1 .. nil) <= s(s(s(0))) = true
--- clause
	count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(s(0))) = true
... subsumed by an existing conjecture
+++ inductive narrowing succeeded
--- clause
	s(s(s(xts3))) == xts2 = false => count(s(s(s(s(xts3)))), xts1 .. nil) <= s(s(s(0))) = true
... oriented to rule
	s(s(s(xts2))) == xts1 = false => count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(s(0))) -> true
+++ added new clause(s)
	s(s(xts3)) == xts2 = false => count(s(s(s(s(xts3)))), xts1 .. nil) <= s(s(s(0))) = true
... to conjectures

+++ Status of the Inference System
--- Conjectures:
	s(s(0)) == xts2 = true => count(s(s(s(0))), xts1 .. nil) <= s(s(0)) = true
	s(s(0)) == xts2 = false => count(s(s(s(0))), xts1 .. nil) <= s(s(s(0))) = true
	s(0) == xts2 = true => count(s(s(s(0))), xts1 .. nil) <= s(0) = true
	count(s(s(s(0))), xts .. nil) <= s(s(0)) = true
	s(0) == xts2 = false => count(s(s(s(0))), xts1 .. nil) <= s(s(0)) = true
	count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(s(0))) = true
	s(s(xts3)) == xts2 = true => count(s(s(s(s(xts3)))), xts1 .. nil) <= s(s(0)) = true
	s(s(xts3)) == xts2 = false => count(s(s(s(s(xts3)))), xts1 .. nil) <= s(s(s(0))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	count(x, xs) <= len(xs) -> true
	count(x, xts .. yts) <= s(len(yts)) -> true
	0 == xts = true => count(0, xts .. nil) <= s(0) -> true
	count(x, xts2 .. xts1 .. yts) <= s(s(len(yts))) -> true
	0 == xts = true => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = true => count(s(0), xts .. nil) <= s(0) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = true => count(s(0), xts .. nil) <= s(s(0)) -> true
	0 == xts = true => count(s(s(0)), xts .. nil) <= s(0) -> true
	s(0) == xts = true => count(s(0), xts .. nil) <= s(0) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(s(0))) -> true
	0 == xts = false => count(s(0), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	0 == xts = true => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	s(0) == xts = true => count(s(0), xts .. nil) <= s(s(0)) -> true
	s(0) == xts = true => count(s(s(0)), xts .. nil) <= s(0) -> true
	0 == xts = false => count(s(0), xts .. nil) <= s(s(s(0))) -> true
	0 == xts = false => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	s(0) == xts = false => count(s(0), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	count(x, xts3 .. xts2 .. xts1 .. yts) <= s(s(s(len(yts)))) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	0 == xts = true => count(0, xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(0) == xts = true => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	s(s(0)) == xts = true => count(s(s(0)), xts .. nil) <= s(0) -> true
	0 == xts = false => count(s(s(0)), xts .. nil) <= s(s(s(0))) -> true
	s(0) == xts = false => count(s(0), xts .. nil) <= s(s(s(0))) -> true
	s(0) == xts = false => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	xts == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	s(s(0)) == xts = true => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	s(s(0)) == xts = true => count(s(s(s(0))), xts .. nil) <= s(0) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	0 == xts = false => count(0, xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(0) == xts = false => count(s(s(0)), xts .. nil) <= s(s(s(0))) -> true
	s(s(0)) == xts = false => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(s(s(0))) == xts = true => count(s(s(s(0))), xts .. nil) <= s(0) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	s(s(0)) == xts = false => count(s(s(0)), xts .. nil) <= s(s(s(0))) -> true
	s(s(0)) == xts = false => count(s(s(s(0))), xts .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	xts2 == s(xts1) = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	s(s(s(0))) == xts = true => count(s(s(s(0))), xts .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	s(s(s(0))) == xts = false => count(s(s(s(0))), xts .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(xts2)) == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	s(s(s(0))) == xts = false => count(s(s(s(0))), xts .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(xts2)) == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(xts2)) == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = false => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(s(xts2))) == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(xts2)) == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(s(xts2))) == xts1 = true => count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(s(xts2))) == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	s(s(s(s(xts2)))) == xts1 = true => count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(s(xts2))) == xts1 = false => count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(s(0))) -> true
	s(s(s(s(xts2)))) == xts1 = false => count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(s(0))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> yts
	^f0($n0 + 1; yts, xts@) -> xts$n0 .. ^f0($n0; yts, xts@)
	^f1(0; yts) -> len(yts)
	^f1($n1 + 1; yts) -> s(^f1($n1; yts))
	^f136(0; xts) -> xts
	^f136($n136 + 1; xts) -> s(^f136($n136; xts))
	^f741(0) -> 0
	^f741($n741 + 1) -> s(^f741($n741))
	^f964(0; xts) -> xts
	^f964($n964 + 1; xts) -> s(^f964($n964; xts))
+++ }
+++ Lemma(s)           = 
	count(x, xts$n .. ^f0($n; yts, xts@)) <= s(^f1($n; yts)) = true
	xts3 == xts2 = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(0) = true
	xts3 == xts2 = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = true => count(s(^f136($n; xts2)), xts1 .. nil) <= s(0) = true
	xts3 == s(xts2) = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(0) = true
	xts2 == 0 = false => count(s(^f136($n; xts2)), xts1 .. nil) <= s(s(0)) = true
	xts3 == s(xts2) = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true
	xts4 == xts3 = true => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts4 == xts3 = false => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts3 == 0 = true => count(s(^f136($n; xts3)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts4 == s(xts3) = true => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts3 == 0 = false => count(s(^f136($n; xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts4 == s(xts3) = false => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	0 == xts2 = true => count(^f741($n), xts1 .. nil) <= s(0) = true
	0 == xts2 = false => count(^f741($n), xts1 .. nil) <= s(s(0)) = true
	s(xts3) == xts2 = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true
	s(xts3) == xts2 = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(s(0))) = true
	0 == xts2 = true => count(^f741($n), xts1 .. nil) <= s(s(0)) = true
	0 == xts2 = false => count(^f741($n), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == xts2 = false => count(s(s(^f964($n; xts3))), xts1 .. nil) <= s(s(s(0))) = true
	xts2 == 0 = true => count(s(s(^f964($n; xts2))), xts1 .. nil) <= s(s(0)) = true
	xts3 == xts2 = true => count(s(s(^f964($n; xts3))), xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = false => count(s(s(^f964($n; xts2))), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == s(xts2) = false => count(s(s(^f964($n; xts3))), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == s(xts2) = true => count(s(s(^f964($n; xts3))), xts1 .. nil) <= s(s(0)) = true

+++ treating clause
	s(s(0)) == xts2 = true => count(s(s(s(0))), xts1 .. nil) <= s(s(0)) = true
+++ inductive narrowing on conjecture
	s(s(0)) == xts2 = true => count(s(s(s(0))), xts1 .. nil) <= s(s(0)) = true
... induction variables of
	s(s(0)) == xts2 = true => count(s(s(s(0))), xts1 .. nil) <= s(s(0)) = true
... are:
	xts2:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	s(s(0)) == xts2 = true => count(s(s(s(0))), xts1 .. nil) <= s(s(0)) = true
... with variable xts2
+++ creating new conjecture
	s(s(0)) == 0 = true => count(s(s(s(0))), xts .. nil) <= s(s(0)) = true
+++ creating new conjecture
	s(s(0)) == s(xts2) = true => count(s(s(s(0))), xts1 .. nil) <= s(s(0)) = true
--- clause
	s(s(0)) == 0 = true => count(s(s(s(0))), xts .. nil) <= s(s(0)) = true
... reduced in 1 step to
	false = true => count(s(s(s(0))), xts .. nil) <= s(s(0)) = true
--- clause
	false = true => count(s(s(s(0))), xts .. nil) <= s(s(0)) = true
... contains a ground negative condition
	false = true
... and is therefore discarded (false => t is always true)
--- clause
	s(s(0)) == s(xts2) = true => count(s(s(s(0))), xts1 .. nil) <= s(s(0)) = true
... reduced in 1 step to
	s(0) == xts2 = true => count(s(s(s(0))), xts1 .. nil) <= s(s(0)) = true
+++ inductive narrowing succeeded
--- clause
	s(s(0)) == xts2 = true => count(s(s(s(0))), xts1 .. nil) <= s(s(0)) = true
... oriented to rule
	s(s(0)) == xts = true => count(s(s(s(0))), xts .. nil) <= s(s(0)) -> true
+++ added new clause(s)
	s(0) == xts2 = true => count(s(s(s(0))), xts1 .. nil) <= s(s(0)) = true
... to conjectures

+++ Status of the Inference System
--- Conjectures:
	s(s(0)) == xts2 = false => count(s(s(s(0))), xts1 .. nil) <= s(s(s(0))) = true
	s(0) == xts2 = true => count(s(s(s(0))), xts1 .. nil) <= s(0) = true
	count(s(s(s(0))), xts .. nil) <= s(s(0)) = true
	s(0) == xts2 = false => count(s(s(s(0))), xts1 .. nil) <= s(s(0)) = true
	count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(s(0))) = true
	s(s(xts3)) == xts2 = true => count(s(s(s(s(xts3)))), xts1 .. nil) <= s(s(0)) = true
	s(s(xts3)) == xts2 = false => count(s(s(s(s(xts3)))), xts1 .. nil) <= s(s(s(0))) = true
	s(0) == xts2 = true => count(s(s(s(0))), xts1 .. nil) <= s(s(0)) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	count(x, xs) <= len(xs) -> true
	count(x, xts .. yts) <= s(len(yts)) -> true
	0 == xts = true => count(0, xts .. nil) <= s(0) -> true
	count(x, xts2 .. xts1 .. yts) <= s(s(len(yts))) -> true
	0 == xts = true => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = true => count(s(0), xts .. nil) <= s(0) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = true => count(s(0), xts .. nil) <= s(s(0)) -> true
	0 == xts = true => count(s(s(0)), xts .. nil) <= s(0) -> true
	s(0) == xts = true => count(s(0), xts .. nil) <= s(0) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(s(0))) -> true
	0 == xts = false => count(s(0), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	0 == xts = true => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	s(0) == xts = true => count(s(0), xts .. nil) <= s(s(0)) -> true
	s(0) == xts = true => count(s(s(0)), xts .. nil) <= s(0) -> true
	0 == xts = false => count(s(0), xts .. nil) <= s(s(s(0))) -> true
	0 == xts = false => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	s(0) == xts = false => count(s(0), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	count(x, xts3 .. xts2 .. xts1 .. yts) <= s(s(s(len(yts)))) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	0 == xts = true => count(0, xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(0) == xts = true => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	s(s(0)) == xts = true => count(s(s(0)), xts .. nil) <= s(0) -> true
	0 == xts = false => count(s(s(0)), xts .. nil) <= s(s(s(0))) -> true
	s(0) == xts = false => count(s(0), xts .. nil) <= s(s(s(0))) -> true
	s(0) == xts = false => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	xts == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	s(s(0)) == xts = true => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	s(s(0)) == xts = true => count(s(s(s(0))), xts .. nil) <= s(0) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	0 == xts = false => count(0, xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(0) == xts = false => count(s(s(0)), xts .. nil) <= s(s(s(0))) -> true
	s(s(0)) == xts = false => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(s(0)) == xts = true => count(s(s(s(0))), xts .. nil) <= s(s(0)) -> true
	s(s(s(0))) == xts = true => count(s(s(s(0))), xts .. nil) <= s(0) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	s(s(0)) == xts = false => count(s(s(0)), xts .. nil) <= s(s(s(0))) -> true
	s(s(0)) == xts = false => count(s(s(s(0))), xts .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	xts2 == s(xts1) = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	s(s(s(0))) == xts = true => count(s(s(s(0))), xts .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	s(s(s(0))) == xts = false => count(s(s(s(0))), xts .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(xts2)) == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	s(s(s(0))) == xts = false => count(s(s(s(0))), xts .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(xts2)) == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(xts2)) == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = false => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(s(xts2))) == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(xts2)) == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(s(xts2))) == xts1 = true => count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(s(xts2))) == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	s(s(s(s(xts2)))) == xts1 = true => count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(s(xts2))) == xts1 = false => count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(s(0))) -> true
	s(s(s(s(xts2)))) == xts1 = false => count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(s(0))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> yts
	^f0($n0 + 1; yts, xts@) -> xts$n0 .. ^f0($n0; yts, xts@)
	^f1(0; yts) -> len(yts)
	^f1($n1 + 1; yts) -> s(^f1($n1; yts))
	^f136(0; xts) -> xts
	^f136($n136 + 1; xts) -> s(^f136($n136; xts))
	^f741(0) -> 0
	^f741($n741 + 1) -> s(^f741($n741))
	^f964(0; xts) -> xts
	^f964($n964 + 1; xts) -> s(^f964($n964; xts))
+++ }
+++ Lemma(s)           = 
	count(x, xts$n .. ^f0($n; yts, xts@)) <= s(^f1($n; yts)) = true
	xts3 == xts2 = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(0) = true
	xts3 == xts2 = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = true => count(s(^f136($n; xts2)), xts1 .. nil) <= s(0) = true
	xts3 == s(xts2) = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(0) = true
	xts2 == 0 = false => count(s(^f136($n; xts2)), xts1 .. nil) <= s(s(0)) = true
	xts3 == s(xts2) = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true
	xts4 == xts3 = true => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts4 == xts3 = false => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts3 == 0 = true => count(s(^f136($n; xts3)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts4 == s(xts3) = true => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts3 == 0 = false => count(s(^f136($n; xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts4 == s(xts3) = false => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	0 == xts2 = true => count(^f741($n), xts1 .. nil) <= s(0) = true
	0 == xts2 = false => count(^f741($n), xts1 .. nil) <= s(s(0)) = true
	s(xts3) == xts2 = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true
	s(xts3) == xts2 = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(s(0))) = true
	0 == xts2 = true => count(^f741($n), xts1 .. nil) <= s(s(0)) = true
	0 == xts2 = false => count(^f741($n), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == xts2 = false => count(s(s(^f964($n; xts3))), xts1 .. nil) <= s(s(s(0))) = true
	xts2 == 0 = true => count(s(s(^f964($n; xts2))), xts1 .. nil) <= s(s(0)) = true
	xts3 == xts2 = true => count(s(s(^f964($n; xts3))), xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = false => count(s(s(^f964($n; xts2))), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == s(xts2) = false => count(s(s(^f964($n; xts3))), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == s(xts2) = true => count(s(s(^f964($n; xts3))), xts1 .. nil) <= s(s(0)) = true

+++ treating clause
	s(s(0)) == xts2 = false => count(s(s(s(0))), xts1 .. nil) <= s(s(s(0))) = true
+++ inductive narrowing on conjecture
	s(s(0)) == xts2 = false => count(s(s(s(0))), xts1 .. nil) <= s(s(s(0))) = true
... induction variables of
	s(s(0)) == xts2 = false => count(s(s(s(0))), xts1 .. nil) <= s(s(s(0))) = true
... are:
	xts2:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	s(s(0)) == xts2 = false => count(s(s(s(0))), xts1 .. nil) <= s(s(s(0))) = true
... with variable xts2
+++ creating new conjecture
	s(s(0)) == 0 = false => count(s(s(s(0))), xts .. nil) <= s(s(s(0))) = true
+++ creating new conjecture
	s(s(0)) == s(xts2) = false => count(s(s(s(0))), xts1 .. nil) <= s(s(s(0))) = true
--- clause
	s(s(0)) == 0 = false => count(s(s(s(0))), xts .. nil) <= s(s(s(0))) = true
... reduced in 1 step to
	count(s(s(s(0))), xts .. nil) <= s(s(s(0))) = true
--- clause
	s(s(0)) == s(xts2) = false => count(s(s(s(0))), xts1 .. nil) <= s(s(s(0))) = true
... reduced in 1 step to
	s(0) == xts2 = false => count(s(s(s(0))), xts1 .. nil) <= s(s(s(0))) = true
+++ inductive narrowing succeeded
--- clause
	s(s(0)) == xts2 = false => count(s(s(s(0))), xts1 .. nil) <= s(s(s(0))) = true
... oriented to rule
	s(s(0)) == xts = false => count(s(s(s(0))), xts .. nil) <= s(s(s(0))) -> true
+++ added new clause(s)
	count(s(s(s(0))), xts .. nil) <= s(s(s(0))) = true
	s(0) == xts2 = false => count(s(s(s(0))), xts1 .. nil) <= s(s(s(0))) = true
... to conjectures

+++ Status of the Inference System
--- Conjectures:
	s(0) == xts2 = true => count(s(s(s(0))), xts1 .. nil) <= s(0) = true
	count(s(s(s(0))), xts .. nil) <= s(s(0)) = true
	s(0) == xts2 = false => count(s(s(s(0))), xts1 .. nil) <= s(s(0)) = true
	count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(s(0))) = true
	s(s(xts3)) == xts2 = true => count(s(s(s(s(xts3)))), xts1 .. nil) <= s(s(0)) = true
	s(s(xts3)) == xts2 = false => count(s(s(s(s(xts3)))), xts1 .. nil) <= s(s(s(0))) = true
	s(0) == xts2 = true => count(s(s(s(0))), xts1 .. nil) <= s(s(0)) = true
	count(s(s(s(0))), xts .. nil) <= s(s(s(0))) = true
	s(0) == xts2 = false => count(s(s(s(0))), xts1 .. nil) <= s(s(s(0))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	count(x, xs) <= len(xs) -> true
	count(x, xts .. yts) <= s(len(yts)) -> true
	0 == xts = true => count(0, xts .. nil) <= s(0) -> true
	count(x, xts2 .. xts1 .. yts) <= s(s(len(yts))) -> true
	0 == xts = true => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = true => count(s(0), xts .. nil) <= s(0) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = true => count(s(0), xts .. nil) <= s(s(0)) -> true
	0 == xts = true => count(s(s(0)), xts .. nil) <= s(0) -> true
	s(0) == xts = true => count(s(0), xts .. nil) <= s(0) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(s(0))) -> true
	0 == xts = false => count(s(0), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	0 == xts = true => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	s(0) == xts = true => count(s(0), xts .. nil) <= s(s(0)) -> true
	s(0) == xts = true => count(s(s(0)), xts .. nil) <= s(0) -> true
	0 == xts = false => count(s(0), xts .. nil) <= s(s(s(0))) -> true
	0 == xts = false => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	s(0) == xts = false => count(s(0), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	count(x, xts3 .. xts2 .. xts1 .. yts) <= s(s(s(len(yts)))) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	0 == xts = true => count(0, xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(0) == xts = true => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	s(s(0)) == xts = true => count(s(s(0)), xts .. nil) <= s(0) -> true
	0 == xts = false => count(s(s(0)), xts .. nil) <= s(s(s(0))) -> true
	s(0) == xts = false => count(s(0), xts .. nil) <= s(s(s(0))) -> true
	s(0) == xts = false => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	xts == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	s(s(0)) == xts = true => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	s(s(0)) == xts = true => count(s(s(s(0))), xts .. nil) <= s(0) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	0 == xts = false => count(0, xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(0) == xts = false => count(s(s(0)), xts .. nil) <= s(s(s(0))) -> true
	s(s(0)) == xts = false => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(s(0)) == xts = true => count(s(s(s(0))), xts .. nil) <= s(s(0)) -> true
	s(s(s(0))) == xts = true => count(s(s(s(0))), xts .. nil) <= s(0) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	s(s(0)) == xts = false => count(s(s(0)), xts .. nil) <= s(s(s(0))) -> true
	s(s(0)) == xts = false => count(s(s(s(0))), xts .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	xts2 == s(xts1) = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	s(s(s(0))) == xts = true => count(s(s(s(0))), xts .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	s(s(0)) == xts = false => count(s(s(s(0))), xts .. nil) <= s(s(s(0))) -> true
	s(s(s(0))) == xts = false => count(s(s(s(0))), xts .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(xts2)) == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	s(s(s(0))) == xts = false => count(s(s(s(0))), xts .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(xts2)) == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(xts2)) == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = false => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(s(xts2))) == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(xts2)) == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(s(xts2))) == xts1 = true => count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(s(xts2))) == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	s(s(s(s(xts2)))) == xts1 = true => count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(s(xts2))) == xts1 = false => count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(s(0))) -> true
	s(s(s(s(xts2)))) == xts1 = false => count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(s(0))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> yts
	^f0($n0 + 1; yts, xts@) -> xts$n0 .. ^f0($n0; yts, xts@)
	^f1(0; yts) -> len(yts)
	^f1($n1 + 1; yts) -> s(^f1($n1; yts))
	^f136(0; xts) -> xts
	^f136($n136 + 1; xts) -> s(^f136($n136; xts))
	^f741(0) -> 0
	^f741($n741 + 1) -> s(^f741($n741))
	^f964(0; xts) -> xts
	^f964($n964 + 1; xts) -> s(^f964($n964; xts))
+++ }
+++ Lemma(s)           = 
	count(x, xts$n .. ^f0($n; yts, xts@)) <= s(^f1($n; yts)) = true
	xts3 == xts2 = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(0) = true
	xts3 == xts2 = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = true => count(s(^f136($n; xts2)), xts1 .. nil) <= s(0) = true
	xts3 == s(xts2) = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(0) = true
	xts2 == 0 = false => count(s(^f136($n; xts2)), xts1 .. nil) <= s(s(0)) = true
	xts3 == s(xts2) = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true
	xts4 == xts3 = true => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts4 == xts3 = false => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts3 == 0 = true => count(s(^f136($n; xts3)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts4 == s(xts3) = true => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts3 == 0 = false => count(s(^f136($n; xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts4 == s(xts3) = false => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	0 == xts2 = true => count(^f741($n), xts1 .. nil) <= s(0) = true
	0 == xts2 = false => count(^f741($n), xts1 .. nil) <= s(s(0)) = true
	s(xts3) == xts2 = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true
	s(xts3) == xts2 = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(s(0))) = true
	0 == xts2 = true => count(^f741($n), xts1 .. nil) <= s(s(0)) = true
	0 == xts2 = false => count(^f741($n), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == xts2 = false => count(s(s(^f964($n; xts3))), xts1 .. nil) <= s(s(s(0))) = true
	xts2 == 0 = true => count(s(s(^f964($n; xts2))), xts1 .. nil) <= s(s(0)) = true
	xts3 == xts2 = true => count(s(s(^f964($n; xts3))), xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = false => count(s(s(^f964($n; xts2))), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == s(xts2) = false => count(s(s(^f964($n; xts3))), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == s(xts2) = true => count(s(s(^f964($n; xts3))), xts1 .. nil) <= s(s(0)) = true

+++ treating clause
	s(0) == xts2 = true => count(s(s(s(0))), xts1 .. nil) <= s(0) = true
+++ inductive narrowing on conjecture
	s(0) == xts2 = true => count(s(s(s(0))), xts1 .. nil) <= s(0) = true
... induction variables of
	s(0) == xts2 = true => count(s(s(s(0))), xts1 .. nil) <= s(0) = true
... are:
	xts2:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	s(0) == xts2 = true => count(s(s(s(0))), xts1 .. nil) <= s(0) = true
... with variable xts2
+++ creating new conjecture
	s(0) == 0 = true => count(s(s(s(0))), xts .. nil) <= s(0) = true
+++ creating new conjecture
	s(0) == s(xts2) = true => count(s(s(s(0))), xts1 .. nil) <= s(0) = true
--- clause
	s(0) == 0 = true => count(s(s(s(0))), xts .. nil) <= s(0) = true
... reduced in 1 step to
	false = true => count(s(s(s(0))), xts .. nil) <= s(0) = true
--- clause
	false = true => count(s(s(s(0))), xts .. nil) <= s(0) = true
... contains a ground negative condition
	false = true
... and is therefore discarded (false => t is always true)
--- clause
	s(0) == s(xts2) = true => count(s(s(s(0))), xts1 .. nil) <= s(0) = true
... reduced in 1 step to
	0 == xts2 = true => count(s(s(s(0))), xts1 .. nil) <= s(0) = true
--- clause
	0 == xts2 = true => count(s(s(s(0))), xts1 .. nil) <= s(0) = true
... subsumed by lemma
	0 == xts2 = true => count(^f741($n), xts1 .. nil) <= s(0) = true
... with substitution
	$n <- 3
+++ inductive narrowing succeeded
--- clause
	s(0) == xts2 = true => count(s(s(s(0))), xts1 .. nil) <= s(0) = true
... oriented to rule
	s(0) == xts = true => count(s(s(s(0))), xts .. nil) <= s(0) -> true
+++ active wrap
	s(0) == xts2 = true => count(s(.), xts1 .. nil) <= s(0) = true
... with sequence
	s(0) == xts2 = true => count(s(0), xts1 .. nil) <= s(0) = true
	s(0) == xts2 = true => count(s(s(0)), xts1 .. nil) <= s(0) = true
	s(0) == xts2 = true => count(s(s(s(0))), xts1 .. nil) <= s(0) = true
+++ primal grammar found for head
	{.., 0, <=, ==, count, nil, s, true}
... and wrap
	s(0) == xts2 = true => count(s(.), xts1 .. nil) <= s(0) = true
+++ Presburger system  = {
	^f741(0) -> 0
	^f741($n741 + 1) -> s(^f741($n741))
+++ }
+++ Lemma(s)           = 
	s(0) == xts2 = true => count(s(^f741($n)), xts1 .. nil) <= s(0) = true

+++ Status of the Inference System
--- Conjectures:
	count(s(s(s(0))), xts .. nil) <= s(s(0)) = true
	s(0) == xts2 = false => count(s(s(s(0))), xts1 .. nil) <= s(s(0)) = true
	count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(s(0))) = true
	s(s(xts3)) == xts2 = true => count(s(s(s(s(xts3)))), xts1 .. nil) <= s(s(0)) = true
	s(s(xts3)) == xts2 = false => count(s(s(s(s(xts3)))), xts1 .. nil) <= s(s(s(0))) = true
	s(0) == xts2 = true => count(s(s(s(0))), xts1 .. nil) <= s(s(0)) = true
	count(s(s(s(0))), xts .. nil) <= s(s(s(0))) = true
	s(0) == xts2 = false => count(s(s(s(0))), xts1 .. nil) <= s(s(s(0))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	count(x, xs) <= len(xs) -> true
	count(x, xts .. yts) <= s(len(yts)) -> true
	0 == xts = true => count(0, xts .. nil) <= s(0) -> true
	count(x, xts2 .. xts1 .. yts) <= s(s(len(yts))) -> true
	0 == xts = true => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = true => count(s(0), xts .. nil) <= s(0) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = true => count(s(0), xts .. nil) <= s(s(0)) -> true
	0 == xts = true => count(s(s(0)), xts .. nil) <= s(0) -> true
	s(0) == xts = true => count(s(0), xts .. nil) <= s(0) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(s(0))) -> true
	0 == xts = false => count(s(0), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	0 == xts = true => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	s(0) == xts = true => count(s(0), xts .. nil) <= s(s(0)) -> true
	s(0) == xts = true => count(s(s(0)), xts .. nil) <= s(0) -> true
	0 == xts = false => count(s(0), xts .. nil) <= s(s(s(0))) -> true
	0 == xts = false => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	s(0) == xts = false => count(s(0), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	count(x, xts3 .. xts2 .. xts1 .. yts) <= s(s(s(len(yts)))) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	0 == xts = true => count(0, xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(0) == xts = true => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	s(0) == xts = true => count(s(s(s(0))), xts .. nil) <= s(0) -> true
	s(s(0)) == xts = true => count(s(s(0)), xts .. nil) <= s(0) -> true
	0 == xts = false => count(s(s(0)), xts .. nil) <= s(s(s(0))) -> true
	s(0) == xts = false => count(s(0), xts .. nil) <= s(s(s(0))) -> true
	s(0) == xts = false => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	xts == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	s(s(0)) == xts = true => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	s(s(0)) == xts = true => count(s(s(s(0))), xts .. nil) <= s(0) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	0 == xts = false => count(0, xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(0) == xts = false => count(s(s(0)), xts .. nil) <= s(s(s(0))) -> true
	s(s(0)) == xts = false => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(s(0)) == xts = true => count(s(s(s(0))), xts .. nil) <= s(s(0)) -> true
	s(s(s(0))) == xts = true => count(s(s(s(0))), xts .. nil) <= s(0) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	s(s(0)) == xts = false => count(s(s(0)), xts .. nil) <= s(s(s(0))) -> true
	s(s(0)) == xts = false => count(s(s(s(0))), xts .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	xts2 == s(xts1) = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	s(s(s(0))) == xts = true => count(s(s(s(0))), xts .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	s(s(0)) == xts = false => count(s(s(s(0))), xts .. nil) <= s(s(s(0))) -> true
	s(s(s(0))) == xts = false => count(s(s(s(0))), xts .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(xts2)) == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	s(s(s(0))) == xts = false => count(s(s(s(0))), xts .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(xts2)) == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(xts2)) == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = false => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(s(xts2))) == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(xts2)) == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(s(xts2))) == xts1 = true => count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(s(xts2))) == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	s(s(s(s(xts2)))) == xts1 = true => count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(s(xts2))) == xts1 = false => count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(s(0))) -> true
	s(s(s(s(xts2)))) == xts1 = false => count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(s(0))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> yts
	^f0($n0 + 1; yts, xts@) -> xts$n0 .. ^f0($n0; yts, xts@)
	^f1(0; yts) -> len(yts)
	^f1($n1 + 1; yts) -> s(^f1($n1; yts))
	^f136(0; xts) -> xts
	^f136($n136 + 1; xts) -> s(^f136($n136; xts))
	^f741(0) -> 0
	^f741($n741 + 1) -> s(^f741($n741))
	^f964(0; xts) -> xts
	^f964($n964 + 1; xts) -> s(^f964($n964; xts))
+++ }
+++ Lemma(s)           = 
	count(x, xts$n .. ^f0($n; yts, xts@)) <= s(^f1($n; yts)) = true
	xts3 == xts2 = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(0) = true
	xts3 == xts2 = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = true => count(s(^f136($n; xts2)), xts1 .. nil) <= s(0) = true
	xts3 == s(xts2) = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(0) = true
	xts2 == 0 = false => count(s(^f136($n; xts2)), xts1 .. nil) <= s(s(0)) = true
	xts3 == s(xts2) = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true
	xts4 == xts3 = true => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts4 == xts3 = false => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts3 == 0 = true => count(s(^f136($n; xts3)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts4 == s(xts3) = true => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts3 == 0 = false => count(s(^f136($n; xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts4 == s(xts3) = false => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	0 == xts2 = true => count(^f741($n), xts1 .. nil) <= s(0) = true
	0 == xts2 = false => count(^f741($n), xts1 .. nil) <= s(s(0)) = true
	s(xts3) == xts2 = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true
	s(xts3) == xts2 = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(s(0))) = true
	0 == xts2 = true => count(^f741($n), xts1 .. nil) <= s(s(0)) = true
	0 == xts2 = false => count(^f741($n), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == xts2 = false => count(s(s(^f964($n; xts3))), xts1 .. nil) <= s(s(s(0))) = true
	xts2 == 0 = true => count(s(s(^f964($n; xts2))), xts1 .. nil) <= s(s(0)) = true
	xts3 == xts2 = true => count(s(s(^f964($n; xts3))), xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = false => count(s(s(^f964($n; xts2))), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == s(xts2) = false => count(s(s(^f964($n; xts3))), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == s(xts2) = true => count(s(s(^f964($n; xts3))), xts1 .. nil) <= s(s(0)) = true
	s(0) == xts2 = true => count(s(^f741($n)), xts1 .. nil) <= s(0) = true

+++ treating clause
	count(s(s(s(0))), xts .. nil) <= s(s(0)) = true
--- no new clauses created
+++ attempting case rewriting
--- case rewriting generated new conjectures
	s(s(s(0))) == xts = true => s(0) <= s(s(0)) = true
	s(s(s(0))) == xts = false => 0 <= s(s(0)) = true
+++ added new clause(s)
	s(s(s(0))) == xts = true => s(0) <= s(s(0)) = true
	s(s(s(0))) == xts = false => 0 <= s(s(0)) = true
... to conjectures
--- clause
	s(s(s(0))) == xts = true => s(0) <= s(s(0)) = true
... reduced to tautology
	s(s(s(0))) == xts = true => true = true
--- clause
	s(s(s(0))) == xts = false => 0 <= s(s(0)) = true
... reduced to tautology
	s(s(s(0))) == xts = false => true = true

+++ Status of the Inference System
--- Conjectures:
	s(0) == xts2 = false => count(s(s(s(0))), xts1 .. nil) <= s(s(0)) = true
	count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(s(0))) = true
	s(s(xts3)) == xts2 = true => count(s(s(s(s(xts3)))), xts1 .. nil) <= s(s(0)) = true
	s(s(xts3)) == xts2 = false => count(s(s(s(s(xts3)))), xts1 .. nil) <= s(s(s(0))) = true
	s(0) == xts2 = true => count(s(s(s(0))), xts1 .. nil) <= s(s(0)) = true
	count(s(s(s(0))), xts .. nil) <= s(s(s(0))) = true
	s(0) == xts2 = false => count(s(s(s(0))), xts1 .. nil) <= s(s(s(0))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	count(x, xs) <= len(xs) -> true
	count(x, xts .. yts) <= s(len(yts)) -> true
	0 == xts = true => count(0, xts .. nil) <= s(0) -> true
	count(x, xts2 .. xts1 .. yts) <= s(s(len(yts))) -> true
	0 == xts = true => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = true => count(s(0), xts .. nil) <= s(0) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = true => count(s(0), xts .. nil) <= s(s(0)) -> true
	0 == xts = true => count(s(s(0)), xts .. nil) <= s(0) -> true
	s(0) == xts = true => count(s(0), xts .. nil) <= s(0) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(s(0))) -> true
	0 == xts = false => count(s(0), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	0 == xts = true => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	s(0) == xts = true => count(s(0), xts .. nil) <= s(s(0)) -> true
	s(0) == xts = true => count(s(s(0)), xts .. nil) <= s(0) -> true
	0 == xts = false => count(s(0), xts .. nil) <= s(s(s(0))) -> true
	0 == xts = false => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	s(0) == xts = false => count(s(0), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	count(x, xts3 .. xts2 .. xts1 .. yts) <= s(s(s(len(yts)))) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	0 == xts = true => count(0, xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(0) == xts = true => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	s(0) == xts = true => count(s(s(s(0))), xts .. nil) <= s(0) -> true
	s(s(0)) == xts = true => count(s(s(0)), xts .. nil) <= s(0) -> true
	0 == xts = false => count(s(s(0)), xts .. nil) <= s(s(s(0))) -> true
	s(0) == xts = false => count(s(0), xts .. nil) <= s(s(s(0))) -> true
	s(0) == xts = false => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	xts == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	s(s(0)) == xts = true => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	s(s(0)) == xts = true => count(s(s(s(0))), xts .. nil) <= s(0) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	0 == xts = false => count(0, xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(0) == xts = false => count(s(s(0)), xts .. nil) <= s(s(s(0))) -> true
	s(s(0)) == xts = false => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(s(0)) == xts = true => count(s(s(s(0))), xts .. nil) <= s(s(0)) -> true
	s(s(s(0))) == xts = true => count(s(s(s(0))), xts .. nil) <= s(0) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	s(s(0)) == xts = false => count(s(s(0)), xts .. nil) <= s(s(s(0))) -> true
	s(s(0)) == xts = false => count(s(s(s(0))), xts .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	xts2 == s(xts1) = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	s(s(s(0))) == xts = true => count(s(s(s(0))), xts .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	s(s(0)) == xts = false => count(s(s(s(0))), xts .. nil) <= s(s(s(0))) -> true
	s(s(s(0))) == xts = false => count(s(s(s(0))), xts .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(xts2)) == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	s(s(s(0))) == xts = false => count(s(s(s(0))), xts .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(xts2)) == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(xts2)) == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = false => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(s(xts2))) == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(xts2)) == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(s(xts2))) == xts1 = true => count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(s(xts2))) == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	s(s(s(s(xts2)))) == xts1 = true => count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(s(xts2))) == xts1 = false => count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(s(0))) -> true
	s(s(s(s(xts2)))) == xts1 = false => count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(s(0))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> yts
	^f0($n0 + 1; yts, xts@) -> xts$n0 .. ^f0($n0; yts, xts@)
	^f1(0; yts) -> len(yts)
	^f1($n1 + 1; yts) -> s(^f1($n1; yts))
	^f136(0; xts) -> xts
	^f136($n136 + 1; xts) -> s(^f136($n136; xts))
	^f741(0) -> 0
	^f741($n741 + 1) -> s(^f741($n741))
	^f964(0; xts) -> xts
	^f964($n964 + 1; xts) -> s(^f964($n964; xts))
+++ }
+++ Lemma(s)           = 
	count(x, xts$n .. ^f0($n; yts, xts@)) <= s(^f1($n; yts)) = true
	xts3 == xts2 = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(0) = true
	xts3 == xts2 = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = true => count(s(^f136($n; xts2)), xts1 .. nil) <= s(0) = true
	xts3 == s(xts2) = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(0) = true
	xts2 == 0 = false => count(s(^f136($n; xts2)), xts1 .. nil) <= s(s(0)) = true
	xts3 == s(xts2) = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true
	xts4 == xts3 = true => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts4 == xts3 = false => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts3 == 0 = true => count(s(^f136($n; xts3)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts4 == s(xts3) = true => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts3 == 0 = false => count(s(^f136($n; xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts4 == s(xts3) = false => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	0 == xts2 = true => count(^f741($n), xts1 .. nil) <= s(0) = true
	0 == xts2 = false => count(^f741($n), xts1 .. nil) <= s(s(0)) = true
	s(xts3) == xts2 = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true
	s(xts3) == xts2 = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(s(0))) = true
	0 == xts2 = true => count(^f741($n), xts1 .. nil) <= s(s(0)) = true
	0 == xts2 = false => count(^f741($n), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == xts2 = false => count(s(s(^f964($n; xts3))), xts1 .. nil) <= s(s(s(0))) = true
	xts2 == 0 = true => count(s(s(^f964($n; xts2))), xts1 .. nil) <= s(s(0)) = true
	xts3 == xts2 = true => count(s(s(^f964($n; xts3))), xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = false => count(s(s(^f964($n; xts2))), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == s(xts2) = false => count(s(s(^f964($n; xts3))), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == s(xts2) = true => count(s(s(^f964($n; xts3))), xts1 .. nil) <= s(s(0)) = true
	s(0) == xts2 = true => count(s(^f741($n)), xts1 .. nil) <= s(0) = true

+++ treating clause
	s(0) == xts2 = false => count(s(s(s(0))), xts1 .. nil) <= s(s(0)) = true
+++ inductive narrowing on conjecture
	s(0) == xts2 = false => count(s(s(s(0))), xts1 .. nil) <= s(s(0)) = true
... induction variables of
	s(0) == xts2 = false => count(s(s(s(0))), xts1 .. nil) <= s(s(0)) = true
... are:
	xts2:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	s(0) == xts2 = false => count(s(s(s(0))), xts1 .. nil) <= s(s(0)) = true
... with variable xts2
+++ creating new conjecture
	s(0) == 0 = false => count(s(s(s(0))), xts .. nil) <= s(s(0)) = true
+++ creating new conjecture
	s(0) == s(xts2) = false => count(s(s(s(0))), xts1 .. nil) <= s(s(0)) = true
--- clause
	s(0) == 0 = false => count(s(s(s(0))), xts .. nil) <= s(s(0)) = true
... reduced in 1 step to
	count(s(s(s(0))), xts .. nil) <= s(s(0)) = true
--- clause
	s(0) == s(xts2) = false => count(s(s(s(0))), xts1 .. nil) <= s(s(0)) = true
... reduced in 1 step to
	0 == xts2 = false => count(s(s(s(0))), xts1 .. nil) <= s(s(0)) = true
--- clause
	0 == xts2 = false => count(s(s(s(0))), xts1 .. nil) <= s(s(0)) = true
... subsumed by lemma
	0 == xts2 = false => count(^f741($n), xts1 .. nil) <= s(s(0)) = true
... with substitution
	$n <- 3
+++ inductive narrowing succeeded
--- clause
	s(0) == xts2 = false => count(s(s(s(0))), xts1 .. nil) <= s(s(0)) = true
... oriented to rule
	s(0) == xts = false => count(s(s(s(0))), xts .. nil) <= s(s(0)) -> true
+++ added new clause(s)
	count(s(s(s(0))), xts .. nil) <= s(s(0)) = true
... to conjectures
+++ active wrap
	s(0) == xts2 = false => count(s(.), xts1 .. nil) <= s(s(0)) = true
... with sequence
	s(0) == xts2 = false => count(s(0), xts1 .. nil) <= s(s(0)) = true
	s(0) == xts2 = false => count(s(s(0)), xts1 .. nil) <= s(s(0)) = true
	s(0) == xts2 = false => count(s(s(s(0))), xts1 .. nil) <= s(s(0)) = true
+++ primal grammar found for head
	{.., 0, <=, ==, count, false, nil, s, true}
... and wrap
	s(0) == xts2 = false => count(s(.), xts1 .. nil) <= s(s(0)) = true
+++ Presburger system  = {
	^f741(0) -> 0
	^f741($n741 + 1) -> s(^f741($n741))
+++ }
+++ Lemma(s)           = 
	s(0) == xts2 = false => count(s(^f741($n)), xts1 .. nil) <= s(s(0)) = true

+++ Status of the Inference System
--- Conjectures:
	count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(s(0))) = true
	s(s(xts3)) == xts2 = true => count(s(s(s(s(xts3)))), xts1 .. nil) <= s(s(0)) = true
	s(s(xts3)) == xts2 = false => count(s(s(s(s(xts3)))), xts1 .. nil) <= s(s(s(0))) = true
	s(0) == xts2 = true => count(s(s(s(0))), xts1 .. nil) <= s(s(0)) = true
	count(s(s(s(0))), xts .. nil) <= s(s(s(0))) = true
	s(0) == xts2 = false => count(s(s(s(0))), xts1 .. nil) <= s(s(s(0))) = true
	count(s(s(s(0))), xts .. nil) <= s(s(0)) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	count(x, xs) <= len(xs) -> true
	count(x, xts .. yts) <= s(len(yts)) -> true
	0 == xts = true => count(0, xts .. nil) <= s(0) -> true
	count(x, xts2 .. xts1 .. yts) <= s(s(len(yts))) -> true
	0 == xts = true => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = true => count(s(0), xts .. nil) <= s(0) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = true => count(s(0), xts .. nil) <= s(s(0)) -> true
	0 == xts = true => count(s(s(0)), xts .. nil) <= s(0) -> true
	s(0) == xts = true => count(s(0), xts .. nil) <= s(0) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(s(0))) -> true
	0 == xts = false => count(s(0), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	0 == xts = true => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	s(0) == xts = true => count(s(0), xts .. nil) <= s(s(0)) -> true
	s(0) == xts = true => count(s(s(0)), xts .. nil) <= s(0) -> true
	0 == xts = false => count(s(0), xts .. nil) <= s(s(s(0))) -> true
	0 == xts = false => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	s(0) == xts = false => count(s(0), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	count(x, xts3 .. xts2 .. xts1 .. yts) <= s(s(s(len(yts)))) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	0 == xts = true => count(0, xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(0) == xts = true => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	s(0) == xts = true => count(s(s(s(0))), xts .. nil) <= s(0) -> true
	s(s(0)) == xts = true => count(s(s(0)), xts .. nil) <= s(0) -> true
	0 == xts = false => count(s(s(0)), xts .. nil) <= s(s(s(0))) -> true
	s(0) == xts = false => count(s(0), xts .. nil) <= s(s(s(0))) -> true
	s(0) == xts = false => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	xts == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	s(s(0)) == xts = true => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	s(s(0)) == xts = true => count(s(s(s(0))), xts .. nil) <= s(0) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	0 == xts = false => count(0, xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(0) == xts = false => count(s(s(0)), xts .. nil) <= s(s(s(0))) -> true
	s(0) == xts = false => count(s(s(s(0))), xts .. nil) <= s(s(0)) -> true
	s(s(0)) == xts = false => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(s(0)) == xts = true => count(s(s(s(0))), xts .. nil) <= s(s(0)) -> true
	s(s(s(0))) == xts = true => count(s(s(s(0))), xts .. nil) <= s(0) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	s(s(0)) == xts = false => count(s(s(0)), xts .. nil) <= s(s(s(0))) -> true
	s(s(0)) == xts = false => count(s(s(s(0))), xts .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	xts2 == s(xts1) = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	s(s(s(0))) == xts = true => count(s(s(s(0))), xts .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	s(s(0)) == xts = false => count(s(s(s(0))), xts .. nil) <= s(s(s(0))) -> true
	s(s(s(0))) == xts = false => count(s(s(s(0))), xts .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(xts2)) == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	s(s(s(0))) == xts = false => count(s(s(s(0))), xts .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(xts2)) == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(xts2)) == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = false => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(s(xts2))) == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(xts2)) == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(s(xts2))) == xts1 = true => count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(s(xts2))) == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	s(s(s(s(xts2)))) == xts1 = true => count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(s(xts2))) == xts1 = false => count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(s(0))) -> true
	s(s(s(s(xts2)))) == xts1 = false => count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(s(0))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> yts
	^f0($n0 + 1; yts, xts@) -> xts$n0 .. ^f0($n0; yts, xts@)
	^f1(0; yts) -> len(yts)
	^f1($n1 + 1; yts) -> s(^f1($n1; yts))
	^f136(0; xts) -> xts
	^f136($n136 + 1; xts) -> s(^f136($n136; xts))
	^f741(0) -> 0
	^f741($n741 + 1) -> s(^f741($n741))
	^f964(0; xts) -> xts
	^f964($n964 + 1; xts) -> s(^f964($n964; xts))
+++ }
+++ Lemma(s)           = 
	count(x, xts$n .. ^f0($n; yts, xts@)) <= s(^f1($n; yts)) = true
	xts3 == xts2 = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(0) = true
	xts3 == xts2 = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = true => count(s(^f136($n; xts2)), xts1 .. nil) <= s(0) = true
	xts3 == s(xts2) = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(0) = true
	xts2 == 0 = false => count(s(^f136($n; xts2)), xts1 .. nil) <= s(s(0)) = true
	xts3 == s(xts2) = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true
	xts4 == xts3 = true => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts4 == xts3 = false => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts3 == 0 = true => count(s(^f136($n; xts3)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts4 == s(xts3) = true => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts3 == 0 = false => count(s(^f136($n; xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts4 == s(xts3) = false => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	0 == xts2 = true => count(^f741($n), xts1 .. nil) <= s(0) = true
	0 == xts2 = false => count(^f741($n), xts1 .. nil) <= s(s(0)) = true
	s(xts3) == xts2 = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true
	s(xts3) == xts2 = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(s(0))) = true
	0 == xts2 = true => count(^f741($n), xts1 .. nil) <= s(s(0)) = true
	0 == xts2 = false => count(^f741($n), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == xts2 = false => count(s(s(^f964($n; xts3))), xts1 .. nil) <= s(s(s(0))) = true
	xts2 == 0 = true => count(s(s(^f964($n; xts2))), xts1 .. nil) <= s(s(0)) = true
	xts3 == xts2 = true => count(s(s(^f964($n; xts3))), xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = false => count(s(s(^f964($n; xts2))), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == s(xts2) = false => count(s(s(^f964($n; xts3))), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == s(xts2) = true => count(s(s(^f964($n; xts3))), xts1 .. nil) <= s(s(0)) = true
	s(0) == xts2 = true => count(s(^f741($n)), xts1 .. nil) <= s(0) = true
	s(0) == xts2 = false => count(s(^f741($n)), xts1 .. nil) <= s(s(0)) = true

+++ treating clause
	count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(s(0))) = true
--- no new clauses created
+++ attempting case rewriting
--- case rewriting generated new conjectures
	s(s(s(s(xts2)))) == xts1 = true => s(0) <= s(s(s(0))) = true
	s(s(s(s(xts2)))) == xts1 = false => 0 <= s(s(s(0))) = true
+++ added new clause(s)
	s(s(s(s(xts2)))) == xts1 = true => s(0) <= s(s(s(0))) = true
	s(s(s(s(xts2)))) == xts1 = false => 0 <= s(s(s(0))) = true
... to conjectures
--- clause
	s(s(s(s(xts2)))) == xts1 = true => s(0) <= s(s(s(0))) = true
... reduced to tautology
	s(s(s(s(xts2)))) == xts1 = true => true = true
--- clause
	s(s(s(s(xts2)))) == xts1 = false => 0 <= s(s(s(0))) = true
... reduced to tautology
	s(s(s(s(xts2)))) == xts1 = false => true = true

+++ Status of the Inference System
--- Conjectures:
	s(s(xts3)) == xts2 = true => count(s(s(s(s(xts3)))), xts1 .. nil) <= s(s(0)) = true
	s(s(xts3)) == xts2 = false => count(s(s(s(s(xts3)))), xts1 .. nil) <= s(s(s(0))) = true
	s(0) == xts2 = true => count(s(s(s(0))), xts1 .. nil) <= s(s(0)) = true
	count(s(s(s(0))), xts .. nil) <= s(s(s(0))) = true
	s(0) == xts2 = false => count(s(s(s(0))), xts1 .. nil) <= s(s(s(0))) = true
	count(s(s(s(0))), xts .. nil) <= s(s(0)) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	count(x, xs) <= len(xs) -> true
	count(x, xts .. yts) <= s(len(yts)) -> true
	0 == xts = true => count(0, xts .. nil) <= s(0) -> true
	count(x, xts2 .. xts1 .. yts) <= s(s(len(yts))) -> true
	0 == xts = true => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = true => count(s(0), xts .. nil) <= s(0) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = true => count(s(0), xts .. nil) <= s(s(0)) -> true
	0 == xts = true => count(s(s(0)), xts .. nil) <= s(0) -> true
	s(0) == xts = true => count(s(0), xts .. nil) <= s(0) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(s(0))) -> true
	0 == xts = false => count(s(0), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	0 == xts = true => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	s(0) == xts = true => count(s(0), xts .. nil) <= s(s(0)) -> true
	s(0) == xts = true => count(s(s(0)), xts .. nil) <= s(0) -> true
	0 == xts = false => count(s(0), xts .. nil) <= s(s(s(0))) -> true
	0 == xts = false => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	s(0) == xts = false => count(s(0), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	count(x, xts3 .. xts2 .. xts1 .. yts) <= s(s(s(len(yts)))) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	0 == xts = true => count(0, xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(0) == xts = true => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	s(0) == xts = true => count(s(s(s(0))), xts .. nil) <= s(0) -> true
	s(s(0)) == xts = true => count(s(s(0)), xts .. nil) <= s(0) -> true
	0 == xts = false => count(s(s(0)), xts .. nil) <= s(s(s(0))) -> true
	s(0) == xts = false => count(s(0), xts .. nil) <= s(s(s(0))) -> true
	s(0) == xts = false => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	xts == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	s(s(0)) == xts = true => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	s(s(0)) == xts = true => count(s(s(s(0))), xts .. nil) <= s(0) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	0 == xts = false => count(0, xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(0) == xts = false => count(s(s(0)), xts .. nil) <= s(s(s(0))) -> true
	s(0) == xts = false => count(s(s(s(0))), xts .. nil) <= s(s(0)) -> true
	s(s(0)) == xts = false => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(s(0)) == xts = true => count(s(s(s(0))), xts .. nil) <= s(s(0)) -> true
	s(s(s(0))) == xts = true => count(s(s(s(0))), xts .. nil) <= s(0) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	s(s(0)) == xts = false => count(s(s(0)), xts .. nil) <= s(s(s(0))) -> true
	s(s(0)) == xts = false => count(s(s(s(0))), xts .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	xts2 == s(xts1) = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	s(s(s(0))) == xts = true => count(s(s(s(0))), xts .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	s(s(0)) == xts = false => count(s(s(s(0))), xts .. nil) <= s(s(s(0))) -> true
	s(s(s(0))) == xts = false => count(s(s(s(0))), xts .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(xts2)) == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	s(s(s(0))) == xts = false => count(s(s(s(0))), xts .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(xts2)) == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(xts2)) == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = false => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(s(xts2))) == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(xts2)) == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(s(xts2))) == xts1 = true => count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(s(xts2))) == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	s(s(s(s(xts2)))) == xts1 = true => count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(s(xts2))) == xts1 = false => count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(s(0))) -> true
	s(s(s(s(xts2)))) == xts1 = false => count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(s(0))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> yts
	^f0($n0 + 1; yts, xts@) -> xts$n0 .. ^f0($n0; yts, xts@)
	^f1(0; yts) -> len(yts)
	^f1($n1 + 1; yts) -> s(^f1($n1; yts))
	^f136(0; xts) -> xts
	^f136($n136 + 1; xts) -> s(^f136($n136; xts))
	^f741(0) -> 0
	^f741($n741 + 1) -> s(^f741($n741))
	^f964(0; xts) -> xts
	^f964($n964 + 1; xts) -> s(^f964($n964; xts))
+++ }
+++ Lemma(s)           = 
	count(x, xts$n .. ^f0($n; yts, xts@)) <= s(^f1($n; yts)) = true
	xts3 == xts2 = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(0) = true
	xts3 == xts2 = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = true => count(s(^f136($n; xts2)), xts1 .. nil) <= s(0) = true
	xts3 == s(xts2) = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(0) = true
	xts2 == 0 = false => count(s(^f136($n; xts2)), xts1 .. nil) <= s(s(0)) = true
	xts3 == s(xts2) = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true
	xts4 == xts3 = true => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts4 == xts3 = false => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts3 == 0 = true => count(s(^f136($n; xts3)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts4 == s(xts3) = true => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts3 == 0 = false => count(s(^f136($n; xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts4 == s(xts3) = false => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	0 == xts2 = true => count(^f741($n), xts1 .. nil) <= s(0) = true
	0 == xts2 = false => count(^f741($n), xts1 .. nil) <= s(s(0)) = true
	s(xts3) == xts2 = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true
	s(xts3) == xts2 = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(s(0))) = true
	0 == xts2 = true => count(^f741($n), xts1 .. nil) <= s(s(0)) = true
	0 == xts2 = false => count(^f741($n), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == xts2 = false => count(s(s(^f964($n; xts3))), xts1 .. nil) <= s(s(s(0))) = true
	xts2 == 0 = true => count(s(s(^f964($n; xts2))), xts1 .. nil) <= s(s(0)) = true
	xts3 == xts2 = true => count(s(s(^f964($n; xts3))), xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = false => count(s(s(^f964($n; xts2))), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == s(xts2) = false => count(s(s(^f964($n; xts3))), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == s(xts2) = true => count(s(s(^f964($n; xts3))), xts1 .. nil) <= s(s(0)) = true
	s(0) == xts2 = true => count(s(^f741($n)), xts1 .. nil) <= s(0) = true
	s(0) == xts2 = false => count(s(^f741($n)), xts1 .. nil) <= s(s(0)) = true

+++ treating clause
	s(s(xts3)) == xts2 = true => count(s(s(s(s(xts3)))), xts1 .. nil) <= s(s(0)) = true
+++ inductive narrowing on conjecture
	s(s(xts3)) == xts2 = true => count(s(s(s(s(xts3)))), xts1 .. nil) <= s(s(0)) = true
... induction variables of
	s(s(xts3)) == xts2 = true => count(s(s(s(s(xts3)))), xts1 .. nil) <= s(s(0)) = true
... are:
	xts2:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	s(s(xts3)) == xts2 = true => count(s(s(s(s(xts3)))), xts1 .. nil) <= s(s(0)) = true
... with variable xts2
+++ creating new conjecture
	s(s(xts2)) == 0 = true => count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(0)) = true
+++ creating new conjecture
	s(s(xts3)) == s(xts2) = true => count(s(s(s(s(xts3)))), xts1 .. nil) <= s(s(0)) = true
--- clause
	s(s(xts2)) == 0 = true => count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(0)) = true
... reduced in 1 step to
	false = true => count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(0)) = true
--- clause
	false = true => count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(0)) = true
... contains a ground negative condition
	false = true
... and is therefore discarded (false => t is always true)
--- clause
	s(s(xts3)) == s(xts2) = true => count(s(s(s(s(xts3)))), xts1 .. nil) <= s(s(0)) = true
... reduced in 1 step to
	s(xts3) == xts2 = true => count(s(s(s(s(xts3)))), xts1 .. nil) <= s(s(0)) = true
--- clause
	s(xts3) == xts2 = true => count(s(s(s(s(xts3)))), xts1 .. nil) <= s(s(0)) = true
... subsumed by lemma
	s(xts3) == xts2 = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true
... with substitution
	$n <- 3
+++ inductive narrowing succeeded
--- clause
	s(s(xts3)) == xts2 = true => count(s(s(s(s(xts3)))), xts1 .. nil) <= s(s(0)) = true
... oriented to rule
	s(s(xts2)) == xts1 = true => count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(0)) -> true
+++ active wrap
	s(s(xts3)) == xts2 = true => count(s(s(.)), xts1 .. nil) <= s(s(0)) = true
... with sequence
	s(s(xts3)) == xts2 = true => count(s(s(xts3)), xts1 .. nil) <= s(s(0)) = true
	s(s(xts3)) == xts2 = true => count(s(s(s(xts3))), xts1 .. nil) <= s(s(0)) = true
	s(s(xts3)) == xts2 = true => count(s(s(s(s(xts3)))), xts1 .. nil) <= s(s(0)) = true
+++ primal grammar found for head
	{.., 0, <=, ==, count, nil, s, true}
... and wrap
	s(s(xts3)) == xts2 = true => count(s(s(.)), xts1 .. nil) <= s(s(0)) = true
+++ Presburger system  = {
	^f136(0; xts) -> xts
	^f136($n136 + 1; xts) -> s(^f136($n136; xts))
+++ }
+++ Lemma(s)           = 
	s(s(xts3)) == xts2 = true => count(s(s(^f136($n; xts3))), xts1 .. nil) <= s(s(0)) = true

+++ Status of the Inference System
--- Conjectures:
	s(s(xts3)) == xts2 = false => count(s(s(s(s(xts3)))), xts1 .. nil) <= s(s(s(0))) = true
	s(0) == xts2 = true => count(s(s(s(0))), xts1 .. nil) <= s(s(0)) = true
	count(s(s(s(0))), xts .. nil) <= s(s(s(0))) = true
	s(0) == xts2 = false => count(s(s(s(0))), xts1 .. nil) <= s(s(s(0))) = true
	count(s(s(s(0))), xts .. nil) <= s(s(0)) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	count(x, xs) <= len(xs) -> true
	count(x, xts .. yts) <= s(len(yts)) -> true
	0 == xts = true => count(0, xts .. nil) <= s(0) -> true
	count(x, xts2 .. xts1 .. yts) <= s(s(len(yts))) -> true
	0 == xts = true => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = true => count(s(0), xts .. nil) <= s(0) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = true => count(s(0), xts .. nil) <= s(s(0)) -> true
	0 == xts = true => count(s(s(0)), xts .. nil) <= s(0) -> true
	s(0) == xts = true => count(s(0), xts .. nil) <= s(0) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(s(0))) -> true
	0 == xts = false => count(s(0), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	0 == xts = true => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	s(0) == xts = true => count(s(0), xts .. nil) <= s(s(0)) -> true
	s(0) == xts = true => count(s(s(0)), xts .. nil) <= s(0) -> true
	0 == xts = false => count(s(0), xts .. nil) <= s(s(s(0))) -> true
	0 == xts = false => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	s(0) == xts = false => count(s(0), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	count(x, xts3 .. xts2 .. xts1 .. yts) <= s(s(s(len(yts)))) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	0 == xts = true => count(0, xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(0) == xts = true => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	s(0) == xts = true => count(s(s(s(0))), xts .. nil) <= s(0) -> true
	s(s(0)) == xts = true => count(s(s(0)), xts .. nil) <= s(0) -> true
	0 == xts = false => count(s(s(0)), xts .. nil) <= s(s(s(0))) -> true
	s(0) == xts = false => count(s(0), xts .. nil) <= s(s(s(0))) -> true
	s(0) == xts = false => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	xts == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	s(s(0)) == xts = true => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	s(s(0)) == xts = true => count(s(s(s(0))), xts .. nil) <= s(0) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	0 == xts = false => count(0, xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(0) == xts = false => count(s(s(0)), xts .. nil) <= s(s(s(0))) -> true
	s(0) == xts = false => count(s(s(s(0))), xts .. nil) <= s(s(0)) -> true
	s(s(0)) == xts = false => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(s(0)) == xts = true => count(s(s(s(0))), xts .. nil) <= s(s(0)) -> true
	s(s(s(0))) == xts = true => count(s(s(s(0))), xts .. nil) <= s(0) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	s(s(0)) == xts = false => count(s(s(0)), xts .. nil) <= s(s(s(0))) -> true
	s(s(0)) == xts = false => count(s(s(s(0))), xts .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	xts2 == s(xts1) = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	s(s(s(0))) == xts = true => count(s(s(s(0))), xts .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	s(s(0)) == xts = false => count(s(s(s(0))), xts .. nil) <= s(s(s(0))) -> true
	s(s(s(0))) == xts = false => count(s(s(s(0))), xts .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(xts2)) == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	s(s(s(0))) == xts = false => count(s(s(s(0))), xts .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(xts2)) == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(xts2)) == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = false => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(s(xts2))) == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	s(s(xts2)) == xts1 = true => count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(xts2)) == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(s(xts2))) == xts1 = true => count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(s(xts2))) == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	s(s(s(s(xts2)))) == xts1 = true => count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(s(xts2))) == xts1 = false => count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(s(0))) -> true
	s(s(s(s(xts2)))) == xts1 = false => count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(s(0))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> yts
	^f0($n0 + 1; yts, xts@) -> xts$n0 .. ^f0($n0; yts, xts@)
	^f1(0; yts) -> len(yts)
	^f1($n1 + 1; yts) -> s(^f1($n1; yts))
	^f136(0; xts) -> xts
	^f136($n136 + 1; xts) -> s(^f136($n136; xts))
	^f741(0) -> 0
	^f741($n741 + 1) -> s(^f741($n741))
	^f964(0; xts) -> xts
	^f964($n964 + 1; xts) -> s(^f964($n964; xts))
+++ }
+++ Lemma(s)           = 
	count(x, xts$n .. ^f0($n; yts, xts@)) <= s(^f1($n; yts)) = true
	xts3 == xts2 = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(0) = true
	xts3 == xts2 = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = true => count(s(^f136($n; xts2)), xts1 .. nil) <= s(0) = true
	xts3 == s(xts2) = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(0) = true
	xts2 == 0 = false => count(s(^f136($n; xts2)), xts1 .. nil) <= s(s(0)) = true
	xts3 == s(xts2) = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true
	xts4 == xts3 = true => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts4 == xts3 = false => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts3 == 0 = true => count(s(^f136($n; xts3)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts4 == s(xts3) = true => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts3 == 0 = false => count(s(^f136($n; xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts4 == s(xts3) = false => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	0 == xts2 = true => count(^f741($n), xts1 .. nil) <= s(0) = true
	0 == xts2 = false => count(^f741($n), xts1 .. nil) <= s(s(0)) = true
	s(xts3) == xts2 = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true
	s(xts3) == xts2 = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(s(0))) = true
	0 == xts2 = true => count(^f741($n), xts1 .. nil) <= s(s(0)) = true
	0 == xts2 = false => count(^f741($n), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == xts2 = false => count(s(s(^f964($n; xts3))), xts1 .. nil) <= s(s(s(0))) = true
	xts2 == 0 = true => count(s(s(^f964($n; xts2))), xts1 .. nil) <= s(s(0)) = true
	xts3 == xts2 = true => count(s(s(^f964($n; xts3))), xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = false => count(s(s(^f964($n; xts2))), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == s(xts2) = false => count(s(s(^f964($n; xts3))), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == s(xts2) = true => count(s(s(^f964($n; xts3))), xts1 .. nil) <= s(s(0)) = true
	s(0) == xts2 = true => count(s(^f741($n)), xts1 .. nil) <= s(0) = true
	s(0) == xts2 = false => count(s(^f741($n)), xts1 .. nil) <= s(s(0)) = true
	s(s(xts3)) == xts2 = true => count(s(s(^f136($n; xts3))), xts1 .. nil) <= s(s(0)) = true

+++ treating clause
	s(s(xts3)) == xts2 = false => count(s(s(s(s(xts3)))), xts1 .. nil) <= s(s(s(0))) = true
+++ inductive narrowing on conjecture
	s(s(xts3)) == xts2 = false => count(s(s(s(s(xts3)))), xts1 .. nil) <= s(s(s(0))) = true
... induction variables of
	s(s(xts3)) == xts2 = false => count(s(s(s(s(xts3)))), xts1 .. nil) <= s(s(s(0))) = true
... are:
	xts2:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	s(s(xts3)) == xts2 = false => count(s(s(s(s(xts3)))), xts1 .. nil) <= s(s(s(0))) = true
... with variable xts2
+++ creating new conjecture
	s(s(xts2)) == 0 = false => count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(s(0))) = true
+++ creating new conjecture
	s(s(xts3)) == s(xts2) = false => count(s(s(s(s(xts3)))), xts1 .. nil) <= s(s(s(0))) = true
--- clause
	s(s(xts2)) == 0 = false => count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(s(0))) = true
... reduced in 1 step to
	count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(s(0))) = true
--- clause
	s(s(xts3)) == s(xts2) = false => count(s(s(s(s(xts3)))), xts1 .. nil) <= s(s(s(0))) = true
... reduced in 1 step to
	s(xts3) == xts2 = false => count(s(s(s(s(xts3)))), xts1 .. nil) <= s(s(s(0))) = true
--- clause
	s(xts3) == xts2 = false => count(s(s(s(s(xts3)))), xts1 .. nil) <= s(s(s(0))) = true
... subsumed by lemma
	s(xts3) == xts2 = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(s(0))) = true
... with substitution
	$n <- 3
+++ inductive narrowing succeeded
--- clause
	s(s(xts3)) == xts2 = false => count(s(s(s(s(xts3)))), xts1 .. nil) <= s(s(s(0))) = true
... oriented to rule
	s(s(xts2)) == xts1 = false => count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(s(0))) -> true
+++ added new clause(s)
	count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(s(0))) = true
... to conjectures
+++ active wrap
	s(s(xts3)) == xts2 = false => count(s(s(.)), xts1 .. nil) <= s(s(s(0))) = true
... with sequence
	s(s(xts3)) == xts2 = false => count(s(s(xts3)), xts1 .. nil) <= s(s(s(0))) = true
	s(s(xts3)) == xts2 = false => count(s(s(s(xts3))), xts1 .. nil) <= s(s(s(0))) = true
	s(s(xts3)) == xts2 = false => count(s(s(s(s(xts3)))), xts1 .. nil) <= s(s(s(0))) = true
+++ primal grammar found for head
	{.., 0, <=, ==, count, false, nil, s, true}
... and wrap
	s(s(xts3)) == xts2 = false => count(s(s(.)), xts1 .. nil) <= s(s(s(0))) = true
+++ Presburger system  = {
	^f136(0; xts) -> xts
	^f136($n136 + 1; xts) -> s(^f136($n136; xts))
+++ }
+++ Lemma(s)           = 
	s(s(xts3)) == xts2 = false => count(s(s(^f136($n; xts3))), xts1 .. nil) <= s(s(s(0))) = true

+++ Status of the Inference System
--- Conjectures:
	s(0) == xts2 = true => count(s(s(s(0))), xts1 .. nil) <= s(s(0)) = true
	count(s(s(s(0))), xts .. nil) <= s(s(s(0))) = true
	s(0) == xts2 = false => count(s(s(s(0))), xts1 .. nil) <= s(s(s(0))) = true
	count(s(s(s(0))), xts .. nil) <= s(s(0)) = true
	count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(s(0))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	count(x, xs) <= len(xs) -> true
	count(x, xts .. yts) <= s(len(yts)) -> true
	0 == xts = true => count(0, xts .. nil) <= s(0) -> true
	count(x, xts2 .. xts1 .. yts) <= s(s(len(yts))) -> true
	0 == xts = true => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = true => count(s(0), xts .. nil) <= s(0) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = true => count(s(0), xts .. nil) <= s(s(0)) -> true
	0 == xts = true => count(s(s(0)), xts .. nil) <= s(0) -> true
	s(0) == xts = true => count(s(0), xts .. nil) <= s(0) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(s(0))) -> true
	0 == xts = false => count(s(0), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	0 == xts = true => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	s(0) == xts = true => count(s(0), xts .. nil) <= s(s(0)) -> true
	s(0) == xts = true => count(s(s(0)), xts .. nil) <= s(0) -> true
	0 == xts = false => count(s(0), xts .. nil) <= s(s(s(0))) -> true
	0 == xts = false => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	s(0) == xts = false => count(s(0), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	count(x, xts3 .. xts2 .. xts1 .. yts) <= s(s(s(len(yts)))) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	0 == xts = true => count(0, xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(0) == xts = true => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	s(0) == xts = true => count(s(s(s(0))), xts .. nil) <= s(0) -> true
	s(s(0)) == xts = true => count(s(s(0)), xts .. nil) <= s(0) -> true
	0 == xts = false => count(s(s(0)), xts .. nil) <= s(s(s(0))) -> true
	s(0) == xts = false => count(s(0), xts .. nil) <= s(s(s(0))) -> true
	s(0) == xts = false => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	xts == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	s(s(0)) == xts = true => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	s(s(0)) == xts = true => count(s(s(s(0))), xts .. nil) <= s(0) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	0 == xts = false => count(0, xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(0) == xts = false => count(s(s(0)), xts .. nil) <= s(s(s(0))) -> true
	s(0) == xts = false => count(s(s(s(0))), xts .. nil) <= s(s(0)) -> true
	s(s(0)) == xts = false => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(s(0)) == xts = true => count(s(s(s(0))), xts .. nil) <= s(s(0)) -> true
	s(s(s(0))) == xts = true => count(s(s(s(0))), xts .. nil) <= s(0) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	s(s(0)) == xts = false => count(s(s(0)), xts .. nil) <= s(s(s(0))) -> true
	s(s(0)) == xts = false => count(s(s(s(0))), xts .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	xts2 == s(xts1) = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	s(s(s(0))) == xts = true => count(s(s(s(0))), xts .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	s(s(0)) == xts = false => count(s(s(s(0))), xts .. nil) <= s(s(s(0))) -> true
	s(s(s(0))) == xts = false => count(s(s(s(0))), xts .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(xts2)) == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	s(s(s(0))) == xts = false => count(s(s(s(0))), xts .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(xts2)) == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(xts2)) == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = false => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(s(xts2))) == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	s(s(xts2)) == xts1 = true => count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(xts2)) == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(s(xts2))) == xts1 = true => count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(s(xts2))) == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	s(s(xts2)) == xts1 = false => count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(s(0))) -> true
	s(s(s(s(xts2)))) == xts1 = true => count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(s(xts2))) == xts1 = false => count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(s(0))) -> true
	s(s(s(s(xts2)))) == xts1 = false => count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(s(0))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> yts
	^f0($n0 + 1; yts, xts@) -> xts$n0 .. ^f0($n0; yts, xts@)
	^f1(0; yts) -> len(yts)
	^f1($n1 + 1; yts) -> s(^f1($n1; yts))
	^f136(0; xts) -> xts
	^f136($n136 + 1; xts) -> s(^f136($n136; xts))
	^f741(0) -> 0
	^f741($n741 + 1) -> s(^f741($n741))
	^f964(0; xts) -> xts
	^f964($n964 + 1; xts) -> s(^f964($n964; xts))
+++ }
+++ Lemma(s)           = 
	count(x, xts$n .. ^f0($n; yts, xts@)) <= s(^f1($n; yts)) = true
	xts3 == xts2 = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(0) = true
	xts3 == xts2 = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = true => count(s(^f136($n; xts2)), xts1 .. nil) <= s(0) = true
	xts3 == s(xts2) = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(0) = true
	xts2 == 0 = false => count(s(^f136($n; xts2)), xts1 .. nil) <= s(s(0)) = true
	xts3 == s(xts2) = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true
	xts4 == xts3 = true => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts4 == xts3 = false => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts3 == 0 = true => count(s(^f136($n; xts3)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts4 == s(xts3) = true => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts3 == 0 = false => count(s(^f136($n; xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts4 == s(xts3) = false => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	0 == xts2 = true => count(^f741($n), xts1 .. nil) <= s(0) = true
	0 == xts2 = false => count(^f741($n), xts1 .. nil) <= s(s(0)) = true
	s(xts3) == xts2 = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true
	s(xts3) == xts2 = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(s(0))) = true
	0 == xts2 = true => count(^f741($n), xts1 .. nil) <= s(s(0)) = true
	0 == xts2 = false => count(^f741($n), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == xts2 = false => count(s(s(^f964($n; xts3))), xts1 .. nil) <= s(s(s(0))) = true
	xts2 == 0 = true => count(s(s(^f964($n; xts2))), xts1 .. nil) <= s(s(0)) = true
	xts3 == xts2 = true => count(s(s(^f964($n; xts3))), xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = false => count(s(s(^f964($n; xts2))), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == s(xts2) = false => count(s(s(^f964($n; xts3))), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == s(xts2) = true => count(s(s(^f964($n; xts3))), xts1 .. nil) <= s(s(0)) = true
	s(0) == xts2 = true => count(s(^f741($n)), xts1 .. nil) <= s(0) = true
	s(0) == xts2 = false => count(s(^f741($n)), xts1 .. nil) <= s(s(0)) = true
	s(s(xts3)) == xts2 = true => count(s(s(^f136($n; xts3))), xts1 .. nil) <= s(s(0)) = true
	s(s(xts3)) == xts2 = false => count(s(s(^f136($n; xts3))), xts1 .. nil) <= s(s(s(0))) = true

+++ treating clause
	s(0) == xts2 = true => count(s(s(s(0))), xts1 .. nil) <= s(s(0)) = true
+++ inductive narrowing on conjecture
	s(0) == xts2 = true => count(s(s(s(0))), xts1 .. nil) <= s(s(0)) = true
... induction variables of
	s(0) == xts2 = true => count(s(s(s(0))), xts1 .. nil) <= s(s(0)) = true
... are:
	xts2:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	s(0) == xts2 = true => count(s(s(s(0))), xts1 .. nil) <= s(s(0)) = true
... with variable xts2
+++ creating new conjecture
	s(0) == 0 = true => count(s(s(s(0))), xts .. nil) <= s(s(0)) = true
+++ creating new conjecture
	s(0) == s(xts2) = true => count(s(s(s(0))), xts1 .. nil) <= s(s(0)) = true
--- clause
	s(0) == 0 = true => count(s(s(s(0))), xts .. nil) <= s(s(0)) = true
... reduced in 1 step to
	false = true => count(s(s(s(0))), xts .. nil) <= s(s(0)) = true
--- clause
	false = true => count(s(s(s(0))), xts .. nil) <= s(s(0)) = true
... contains a ground negative condition
	false = true
... and is therefore discarded (false => t is always true)
--- clause
	s(0) == s(xts2) = true => count(s(s(s(0))), xts1 .. nil) <= s(s(0)) = true
... reduced in 1 step to
	0 == xts2 = true => count(s(s(s(0))), xts1 .. nil) <= s(s(0)) = true
--- clause
	0 == xts2 = true => count(s(s(s(0))), xts1 .. nil) <= s(s(0)) = true
... subsumed by lemma
	0 == xts2 = true => count(^f741($n), xts1 .. nil) <= s(s(0)) = true
... with substitution
	$n <- 3
+++ inductive narrowing succeeded
--- clause
	s(0) == xts2 = true => count(s(s(s(0))), xts1 .. nil) <= s(s(0)) = true
... oriented to rule
	s(0) == xts = true => count(s(s(s(0))), xts .. nil) <= s(s(0)) -> true
+++ active wrap
	s(0) == xts2 = true => count(s(.), xts1 .. nil) <= s(s(0)) = true
... with sequence
	s(0) == xts2 = true => count(s(0), xts1 .. nil) <= s(s(0)) = true
	s(0) == xts2 = true => count(s(s(0)), xts1 .. nil) <= s(s(0)) = true
	s(0) == xts2 = true => count(s(s(s(0))), xts1 .. nil) <= s(s(0)) = true
+++ primal grammar found for head
	{.., 0, <=, ==, count, nil, s, true}
... and wrap
	s(0) == xts2 = true => count(s(.), xts1 .. nil) <= s(s(0)) = true
+++ Presburger system  = {
	^f741(0) -> 0
	^f741($n741 + 1) -> s(^f741($n741))
+++ }
+++ Lemma(s)           = 
	s(0) == xts2 = true => count(s(^f741($n)), xts1 .. nil) <= s(s(0)) = true

+++ Status of the Inference System
--- Conjectures:
	count(s(s(s(0))), xts .. nil) <= s(s(s(0))) = true
	s(0) == xts2 = false => count(s(s(s(0))), xts1 .. nil) <= s(s(s(0))) = true
	count(s(s(s(0))), xts .. nil) <= s(s(0)) = true
	count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(s(0))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	count(x, xs) <= len(xs) -> true
	count(x, xts .. yts) <= s(len(yts)) -> true
	0 == xts = true => count(0, xts .. nil) <= s(0) -> true
	count(x, xts2 .. xts1 .. yts) <= s(s(len(yts))) -> true
	0 == xts = true => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = true => count(s(0), xts .. nil) <= s(0) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = true => count(s(0), xts .. nil) <= s(s(0)) -> true
	0 == xts = true => count(s(s(0)), xts .. nil) <= s(0) -> true
	s(0) == xts = true => count(s(0), xts .. nil) <= s(0) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(s(0))) -> true
	0 == xts = false => count(s(0), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	0 == xts = true => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	s(0) == xts = true => count(s(0), xts .. nil) <= s(s(0)) -> true
	s(0) == xts = true => count(s(s(0)), xts .. nil) <= s(0) -> true
	0 == xts = false => count(s(0), xts .. nil) <= s(s(s(0))) -> true
	0 == xts = false => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	s(0) == xts = false => count(s(0), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	count(x, xts3 .. xts2 .. xts1 .. yts) <= s(s(s(len(yts)))) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	0 == xts = true => count(0, xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(0) == xts = true => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	s(0) == xts = true => count(s(s(s(0))), xts .. nil) <= s(0) -> true
	s(s(0)) == xts = true => count(s(s(0)), xts .. nil) <= s(0) -> true
	0 == xts = false => count(s(s(0)), xts .. nil) <= s(s(s(0))) -> true
	s(0) == xts = false => count(s(0), xts .. nil) <= s(s(s(0))) -> true
	s(0) == xts = false => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	xts == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	s(0) == xts = true => count(s(s(s(0))), xts .. nil) <= s(s(0)) -> true
	s(s(0)) == xts = true => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	s(s(0)) == xts = true => count(s(s(s(0))), xts .. nil) <= s(0) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	0 == xts = false => count(0, xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(0) == xts = false => count(s(s(0)), xts .. nil) <= s(s(s(0))) -> true
	s(0) == xts = false => count(s(s(s(0))), xts .. nil) <= s(s(0)) -> true
	s(s(0)) == xts = false => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(s(0)) == xts = true => count(s(s(s(0))), xts .. nil) <= s(s(0)) -> true
	s(s(s(0))) == xts = true => count(s(s(s(0))), xts .. nil) <= s(0) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	s(s(0)) == xts = false => count(s(s(0)), xts .. nil) <= s(s(s(0))) -> true
	s(s(0)) == xts = false => count(s(s(s(0))), xts .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	xts2 == s(xts1) = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	s(s(s(0))) == xts = true => count(s(s(s(0))), xts .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	s(s(0)) == xts = false => count(s(s(s(0))), xts .. nil) <= s(s(s(0))) -> true
	s(s(s(0))) == xts = false => count(s(s(s(0))), xts .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(xts2)) == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	s(s(s(0))) == xts = false => count(s(s(s(0))), xts .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(xts2)) == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(xts2)) == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = false => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(s(xts2))) == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	s(s(xts2)) == xts1 = true => count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(xts2)) == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(s(xts2))) == xts1 = true => count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(s(xts2))) == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	s(s(xts2)) == xts1 = false => count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(s(0))) -> true
	s(s(s(s(xts2)))) == xts1 = true => count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(s(xts2))) == xts1 = false => count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(s(0))) -> true
	s(s(s(s(xts2)))) == xts1 = false => count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(s(0))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> yts
	^f0($n0 + 1; yts, xts@) -> xts$n0 .. ^f0($n0; yts, xts@)
	^f1(0; yts) -> len(yts)
	^f1($n1 + 1; yts) -> s(^f1($n1; yts))
	^f136(0; xts) -> xts
	^f136($n136 + 1; xts) -> s(^f136($n136; xts))
	^f741(0) -> 0
	^f741($n741 + 1) -> s(^f741($n741))
	^f964(0; xts) -> xts
	^f964($n964 + 1; xts) -> s(^f964($n964; xts))
+++ }
+++ Lemma(s)           = 
	count(x, xts$n .. ^f0($n; yts, xts@)) <= s(^f1($n; yts)) = true
	xts3 == xts2 = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(0) = true
	xts3 == xts2 = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = true => count(s(^f136($n; xts2)), xts1 .. nil) <= s(0) = true
	xts3 == s(xts2) = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(0) = true
	xts2 == 0 = false => count(s(^f136($n; xts2)), xts1 .. nil) <= s(s(0)) = true
	xts3 == s(xts2) = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true
	xts4 == xts3 = true => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts4 == xts3 = false => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts3 == 0 = true => count(s(^f136($n; xts3)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts4 == s(xts3) = true => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts3 == 0 = false => count(s(^f136($n; xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts4 == s(xts3) = false => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	0 == xts2 = true => count(^f741($n), xts1 .. nil) <= s(0) = true
	0 == xts2 = false => count(^f741($n), xts1 .. nil) <= s(s(0)) = true
	s(xts3) == xts2 = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true
	s(xts3) == xts2 = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(s(0))) = true
	0 == xts2 = true => count(^f741($n), xts1 .. nil) <= s(s(0)) = true
	0 == xts2 = false => count(^f741($n), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == xts2 = false => count(s(s(^f964($n; xts3))), xts1 .. nil) <= s(s(s(0))) = true
	xts2 == 0 = true => count(s(s(^f964($n; xts2))), xts1 .. nil) <= s(s(0)) = true
	xts3 == xts2 = true => count(s(s(^f964($n; xts3))), xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = false => count(s(s(^f964($n; xts2))), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == s(xts2) = false => count(s(s(^f964($n; xts3))), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == s(xts2) = true => count(s(s(^f964($n; xts3))), xts1 .. nil) <= s(s(0)) = true
	s(0) == xts2 = true => count(s(^f741($n)), xts1 .. nil) <= s(0) = true
	s(0) == xts2 = false => count(s(^f741($n)), xts1 .. nil) <= s(s(0)) = true
	s(s(xts3)) == xts2 = true => count(s(s(^f136($n; xts3))), xts1 .. nil) <= s(s(0)) = true
	s(s(xts3)) == xts2 = false => count(s(s(^f136($n; xts3))), xts1 .. nil) <= s(s(s(0))) = true
	s(0) == xts2 = true => count(s(^f741($n)), xts1 .. nil) <= s(s(0)) = true

+++ treating clause
	count(s(s(s(0))), xts .. nil) <= s(s(s(0))) = true
--- no new clauses created
+++ attempting case rewriting
--- case rewriting generated new conjectures
	s(s(s(0))) == xts = true => s(0) <= s(s(s(0))) = true
	s(s(s(0))) == xts = false => 0 <= s(s(s(0))) = true
+++ added new clause(s)
	s(s(s(0))) == xts = true => s(0) <= s(s(s(0))) = true
	s(s(s(0))) == xts = false => 0 <= s(s(s(0))) = true
... to conjectures
--- clause
	s(s(s(0))) == xts = true => s(0) <= s(s(s(0))) = true
... reduced to tautology
	s(s(s(0))) == xts = true => true = true
--- clause
	s(s(s(0))) == xts = false => 0 <= s(s(s(0))) = true
... reduced to tautology
	s(s(s(0))) == xts = false => true = true

+++ Status of the Inference System
--- Conjectures:
	s(0) == xts2 = false => count(s(s(s(0))), xts1 .. nil) <= s(s(s(0))) = true
	count(s(s(s(0))), xts .. nil) <= s(s(0)) = true
	count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(s(0))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	count(x, xs) <= len(xs) -> true
	count(x, xts .. yts) <= s(len(yts)) -> true
	0 == xts = true => count(0, xts .. nil) <= s(0) -> true
	count(x, xts2 .. xts1 .. yts) <= s(s(len(yts))) -> true
	0 == xts = true => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = true => count(s(0), xts .. nil) <= s(0) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = true => count(s(0), xts .. nil) <= s(s(0)) -> true
	0 == xts = true => count(s(s(0)), xts .. nil) <= s(0) -> true
	s(0) == xts = true => count(s(0), xts .. nil) <= s(0) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(s(0))) -> true
	0 == xts = false => count(s(0), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	0 == xts = true => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	s(0) == xts = true => count(s(0), xts .. nil) <= s(s(0)) -> true
	s(0) == xts = true => count(s(s(0)), xts .. nil) <= s(0) -> true
	0 == xts = false => count(s(0), xts .. nil) <= s(s(s(0))) -> true
	0 == xts = false => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	s(0) == xts = false => count(s(0), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	count(x, xts3 .. xts2 .. xts1 .. yts) <= s(s(s(len(yts)))) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	0 == xts = true => count(0, xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(0) == xts = true => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	s(0) == xts = true => count(s(s(s(0))), xts .. nil) <= s(0) -> true
	s(s(0)) == xts = true => count(s(s(0)), xts .. nil) <= s(0) -> true
	0 == xts = false => count(s(s(0)), xts .. nil) <= s(s(s(0))) -> true
	s(0) == xts = false => count(s(0), xts .. nil) <= s(s(s(0))) -> true
	s(0) == xts = false => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	xts == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	s(0) == xts = true => count(s(s(s(0))), xts .. nil) <= s(s(0)) -> true
	s(s(0)) == xts = true => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	s(s(0)) == xts = true => count(s(s(s(0))), xts .. nil) <= s(0) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	0 == xts = false => count(0, xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(0) == xts = false => count(s(s(0)), xts .. nil) <= s(s(s(0))) -> true
	s(0) == xts = false => count(s(s(s(0))), xts .. nil) <= s(s(0)) -> true
	s(s(0)) == xts = false => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(s(0)) == xts = true => count(s(s(s(0))), xts .. nil) <= s(s(0)) -> true
	s(s(s(0))) == xts = true => count(s(s(s(0))), xts .. nil) <= s(0) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	s(s(0)) == xts = false => count(s(s(0)), xts .. nil) <= s(s(s(0))) -> true
	s(s(0)) == xts = false => count(s(s(s(0))), xts .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	xts2 == s(xts1) = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	s(s(s(0))) == xts = true => count(s(s(s(0))), xts .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	s(s(0)) == xts = false => count(s(s(s(0))), xts .. nil) <= s(s(s(0))) -> true
	s(s(s(0))) == xts = false => count(s(s(s(0))), xts .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(xts2)) == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	s(s(s(0))) == xts = false => count(s(s(s(0))), xts .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(xts2)) == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(xts2)) == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = false => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(s(xts2))) == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	s(s(xts2)) == xts1 = true => count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(xts2)) == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(s(xts2))) == xts1 = true => count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(s(xts2))) == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	s(s(xts2)) == xts1 = false => count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(s(0))) -> true
	s(s(s(s(xts2)))) == xts1 = true => count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(s(xts2))) == xts1 = false => count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(s(0))) -> true
	s(s(s(s(xts2)))) == xts1 = false => count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(s(0))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> yts
	^f0($n0 + 1; yts, xts@) -> xts$n0 .. ^f0($n0; yts, xts@)
	^f1(0; yts) -> len(yts)
	^f1($n1 + 1; yts) -> s(^f1($n1; yts))
	^f136(0; xts) -> xts
	^f136($n136 + 1; xts) -> s(^f136($n136; xts))
	^f741(0) -> 0
	^f741($n741 + 1) -> s(^f741($n741))
	^f964(0; xts) -> xts
	^f964($n964 + 1; xts) -> s(^f964($n964; xts))
+++ }
+++ Lemma(s)           = 
	count(x, xts$n .. ^f0($n; yts, xts@)) <= s(^f1($n; yts)) = true
	xts3 == xts2 = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(0) = true
	xts3 == xts2 = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = true => count(s(^f136($n; xts2)), xts1 .. nil) <= s(0) = true
	xts3 == s(xts2) = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(0) = true
	xts2 == 0 = false => count(s(^f136($n; xts2)), xts1 .. nil) <= s(s(0)) = true
	xts3 == s(xts2) = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true
	xts4 == xts3 = true => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts4 == xts3 = false => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts3 == 0 = true => count(s(^f136($n; xts3)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts4 == s(xts3) = true => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts3 == 0 = false => count(s(^f136($n; xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts4 == s(xts3) = false => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	0 == xts2 = true => count(^f741($n), xts1 .. nil) <= s(0) = true
	0 == xts2 = false => count(^f741($n), xts1 .. nil) <= s(s(0)) = true
	s(xts3) == xts2 = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true
	s(xts3) == xts2 = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(s(0))) = true
	0 == xts2 = true => count(^f741($n), xts1 .. nil) <= s(s(0)) = true
	0 == xts2 = false => count(^f741($n), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == xts2 = false => count(s(s(^f964($n; xts3))), xts1 .. nil) <= s(s(s(0))) = true
	xts2 == 0 = true => count(s(s(^f964($n; xts2))), xts1 .. nil) <= s(s(0)) = true
	xts3 == xts2 = true => count(s(s(^f964($n; xts3))), xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = false => count(s(s(^f964($n; xts2))), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == s(xts2) = false => count(s(s(^f964($n; xts3))), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == s(xts2) = true => count(s(s(^f964($n; xts3))), xts1 .. nil) <= s(s(0)) = true
	s(0) == xts2 = true => count(s(^f741($n)), xts1 .. nil) <= s(0) = true
	s(0) == xts2 = false => count(s(^f741($n)), xts1 .. nil) <= s(s(0)) = true
	s(s(xts3)) == xts2 = true => count(s(s(^f136($n; xts3))), xts1 .. nil) <= s(s(0)) = true
	s(s(xts3)) == xts2 = false => count(s(s(^f136($n; xts3))), xts1 .. nil) <= s(s(s(0))) = true
	s(0) == xts2 = true => count(s(^f741($n)), xts1 .. nil) <= s(s(0)) = true

+++ treating clause
	s(0) == xts2 = false => count(s(s(s(0))), xts1 .. nil) <= s(s(s(0))) = true
+++ inductive narrowing on conjecture
	s(0) == xts2 = false => count(s(s(s(0))), xts1 .. nil) <= s(s(s(0))) = true
... induction variables of
	s(0) == xts2 = false => count(s(s(s(0))), xts1 .. nil) <= s(s(s(0))) = true
... are:
	xts2:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	s(0) == xts2 = false => count(s(s(s(0))), xts1 .. nil) <= s(s(s(0))) = true
... with variable xts2
+++ creating new conjecture
	s(0) == 0 = false => count(s(s(s(0))), xts .. nil) <= s(s(s(0))) = true
+++ creating new conjecture
	s(0) == s(xts2) = false => count(s(s(s(0))), xts1 .. nil) <= s(s(s(0))) = true
--- clause
	s(0) == 0 = false => count(s(s(s(0))), xts .. nil) <= s(s(s(0))) = true
... reduced in 1 step to
	count(s(s(s(0))), xts .. nil) <= s(s(s(0))) = true
--- clause
	s(0) == s(xts2) = false => count(s(s(s(0))), xts1 .. nil) <= s(s(s(0))) = true
... reduced in 1 step to
	0 == xts2 = false => count(s(s(s(0))), xts1 .. nil) <= s(s(s(0))) = true
--- clause
	0 == xts2 = false => count(s(s(s(0))), xts1 .. nil) <= s(s(s(0))) = true
... subsumed by lemma
	0 == xts2 = false => count(^f741($n), xts1 .. nil) <= s(s(s(0))) = true
... with substitution
	$n <- 3
+++ inductive narrowing succeeded
--- clause
	s(0) == xts2 = false => count(s(s(s(0))), xts1 .. nil) <= s(s(s(0))) = true
... oriented to rule
	s(0) == xts = false => count(s(s(s(0))), xts .. nil) <= s(s(s(0))) -> true
+++ added new clause(s)
	count(s(s(s(0))), xts .. nil) <= s(s(s(0))) = true
... to conjectures
+++ active wrap
	s(0) == xts2 = false => count(s(.), xts1 .. nil) <= s(s(s(0))) = true
... with sequence
	s(0) == xts2 = false => count(s(0), xts1 .. nil) <= s(s(s(0))) = true
	s(0) == xts2 = false => count(s(s(0)), xts1 .. nil) <= s(s(s(0))) = true
	s(0) == xts2 = false => count(s(s(s(0))), xts1 .. nil) <= s(s(s(0))) = true
+++ primal grammar found for head
	{.., 0, <=, ==, count, false, nil, s, true}
... and wrap
	s(0) == xts2 = false => count(s(.), xts1 .. nil) <= s(s(s(0))) = true
+++ Presburger system  = {
	^f741(0) -> 0
	^f741($n741 + 1) -> s(^f741($n741))
+++ }
+++ Lemma(s)           = 
	s(0) == xts2 = false => count(s(^f741($n)), xts1 .. nil) <= s(s(s(0))) = true

+++ Status of the Inference System
--- Conjectures:
	count(s(s(s(0))), xts .. nil) <= s(s(0)) = true
	count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(s(0))) = true
	count(s(s(s(0))), xts .. nil) <= s(s(s(0))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	count(x, xs) <= len(xs) -> true
	count(x, xts .. yts) <= s(len(yts)) -> true
	0 == xts = true => count(0, xts .. nil) <= s(0) -> true
	count(x, xts2 .. xts1 .. yts) <= s(s(len(yts))) -> true
	0 == xts = true => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = true => count(s(0), xts .. nil) <= s(0) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = true => count(s(0), xts .. nil) <= s(s(0)) -> true
	0 == xts = true => count(s(s(0)), xts .. nil) <= s(0) -> true
	s(0) == xts = true => count(s(0), xts .. nil) <= s(0) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(s(0))) -> true
	0 == xts = false => count(s(0), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	0 == xts = true => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	s(0) == xts = true => count(s(0), xts .. nil) <= s(s(0)) -> true
	s(0) == xts = true => count(s(s(0)), xts .. nil) <= s(0) -> true
	0 == xts = false => count(s(0), xts .. nil) <= s(s(s(0))) -> true
	0 == xts = false => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	s(0) == xts = false => count(s(0), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	count(x, xts3 .. xts2 .. xts1 .. yts) <= s(s(s(len(yts)))) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	0 == xts = true => count(0, xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(0) == xts = true => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	s(0) == xts = true => count(s(s(s(0))), xts .. nil) <= s(0) -> true
	s(s(0)) == xts = true => count(s(s(0)), xts .. nil) <= s(0) -> true
	0 == xts = false => count(s(s(0)), xts .. nil) <= s(s(s(0))) -> true
	s(0) == xts = false => count(s(0), xts .. nil) <= s(s(s(0))) -> true
	s(0) == xts = false => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	xts == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	s(0) == xts = true => count(s(s(s(0))), xts .. nil) <= s(s(0)) -> true
	s(s(0)) == xts = true => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	s(s(0)) == xts = true => count(s(s(s(0))), xts .. nil) <= s(0) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	0 == xts = false => count(0, xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(0) == xts = false => count(s(s(0)), xts .. nil) <= s(s(s(0))) -> true
	s(0) == xts = false => count(s(s(s(0))), xts .. nil) <= s(s(0)) -> true
	s(s(0)) == xts = false => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(s(0)) == xts = true => count(s(s(s(0))), xts .. nil) <= s(s(0)) -> true
	s(s(s(0))) == xts = true => count(s(s(s(0))), xts .. nil) <= s(0) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	s(0) == xts = false => count(s(s(s(0))), xts .. nil) <= s(s(s(0))) -> true
	s(s(0)) == xts = false => count(s(s(0)), xts .. nil) <= s(s(s(0))) -> true
	s(s(0)) == xts = false => count(s(s(s(0))), xts .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	xts2 == s(xts1) = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	s(s(s(0))) == xts = true => count(s(s(s(0))), xts .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	s(s(0)) == xts = false => count(s(s(s(0))), xts .. nil) <= s(s(s(0))) -> true
	s(s(s(0))) == xts = false => count(s(s(s(0))), xts .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(xts2)) == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	s(s(s(0))) == xts = false => count(s(s(s(0))), xts .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(xts2)) == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(xts2)) == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = false => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(s(xts2))) == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	s(s(xts2)) == xts1 = true => count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(xts2)) == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(s(xts2))) == xts1 = true => count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(s(xts2))) == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	s(s(xts2)) == xts1 = false => count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(s(0))) -> true
	s(s(s(s(xts2)))) == xts1 = true => count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(s(xts2))) == xts1 = false => count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(s(0))) -> true
	s(s(s(s(xts2)))) == xts1 = false => count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(s(0))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> yts
	^f0($n0 + 1; yts, xts@) -> xts$n0 .. ^f0($n0; yts, xts@)
	^f1(0; yts) -> len(yts)
	^f1($n1 + 1; yts) -> s(^f1($n1; yts))
	^f136(0; xts) -> xts
	^f136($n136 + 1; xts) -> s(^f136($n136; xts))
	^f741(0) -> 0
	^f741($n741 + 1) -> s(^f741($n741))
	^f964(0; xts) -> xts
	^f964($n964 + 1; xts) -> s(^f964($n964; xts))
+++ }
+++ Lemma(s)           = 
	count(x, xts$n .. ^f0($n; yts, xts@)) <= s(^f1($n; yts)) = true
	xts3 == xts2 = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(0) = true
	xts3 == xts2 = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = true => count(s(^f136($n; xts2)), xts1 .. nil) <= s(0) = true
	xts3 == s(xts2) = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(0) = true
	xts2 == 0 = false => count(s(^f136($n; xts2)), xts1 .. nil) <= s(s(0)) = true
	xts3 == s(xts2) = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true
	xts4 == xts3 = true => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts4 == xts3 = false => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts3 == 0 = true => count(s(^f136($n; xts3)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts4 == s(xts3) = true => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts3 == 0 = false => count(s(^f136($n; xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts4 == s(xts3) = false => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	0 == xts2 = true => count(^f741($n), xts1 .. nil) <= s(0) = true
	0 == xts2 = false => count(^f741($n), xts1 .. nil) <= s(s(0)) = true
	s(xts3) == xts2 = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true
	s(xts3) == xts2 = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(s(0))) = true
	0 == xts2 = true => count(^f741($n), xts1 .. nil) <= s(s(0)) = true
	0 == xts2 = false => count(^f741($n), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == xts2 = false => count(s(s(^f964($n; xts3))), xts1 .. nil) <= s(s(s(0))) = true
	xts2 == 0 = true => count(s(s(^f964($n; xts2))), xts1 .. nil) <= s(s(0)) = true
	xts3 == xts2 = true => count(s(s(^f964($n; xts3))), xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = false => count(s(s(^f964($n; xts2))), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == s(xts2) = false => count(s(s(^f964($n; xts3))), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == s(xts2) = true => count(s(s(^f964($n; xts3))), xts1 .. nil) <= s(s(0)) = true
	s(0) == xts2 = true => count(s(^f741($n)), xts1 .. nil) <= s(0) = true
	s(0) == xts2 = false => count(s(^f741($n)), xts1 .. nil) <= s(s(0)) = true
	s(s(xts3)) == xts2 = true => count(s(s(^f136($n; xts3))), xts1 .. nil) <= s(s(0)) = true
	s(s(xts3)) == xts2 = false => count(s(s(^f136($n; xts3))), xts1 .. nil) <= s(s(s(0))) = true
	s(0) == xts2 = true => count(s(^f741($n)), xts1 .. nil) <= s(s(0)) = true
	s(0) == xts2 = false => count(s(^f741($n)), xts1 .. nil) <= s(s(s(0))) = true

+++ treating clause
	count(s(s(s(0))), xts .. nil) <= s(s(0)) = true
--- no new clauses created
+++ attempting case rewriting
--- case rewriting generated new conjectures
	s(s(s(0))) == xts = true => s(0) <= s(s(0)) = true
	s(s(s(0))) == xts = false => 0 <= s(s(0)) = true
+++ added new clause(s)
	s(s(s(0))) == xts = true => s(0) <= s(s(0)) = true
	s(s(s(0))) == xts = false => 0 <= s(s(0)) = true
... to conjectures
--- clause
	s(s(s(0))) == xts = true => s(0) <= s(s(0)) = true
... reduced to tautology
	s(s(s(0))) == xts = true => true = true
--- clause
	s(s(s(0))) == xts = false => 0 <= s(s(0)) = true
... reduced to tautology
	s(s(s(0))) == xts = false => true = true

+++ Status of the Inference System
--- Conjectures:
	count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(s(0))) = true
	count(s(s(s(0))), xts .. nil) <= s(s(s(0))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	count(x, xs) <= len(xs) -> true
	count(x, xts .. yts) <= s(len(yts)) -> true
	0 == xts = true => count(0, xts .. nil) <= s(0) -> true
	count(x, xts2 .. xts1 .. yts) <= s(s(len(yts))) -> true
	0 == xts = true => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = true => count(s(0), xts .. nil) <= s(0) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = true => count(s(0), xts .. nil) <= s(s(0)) -> true
	0 == xts = true => count(s(s(0)), xts .. nil) <= s(0) -> true
	s(0) == xts = true => count(s(0), xts .. nil) <= s(0) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(s(0))) -> true
	0 == xts = false => count(s(0), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	0 == xts = true => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	s(0) == xts = true => count(s(0), xts .. nil) <= s(s(0)) -> true
	s(0) == xts = true => count(s(s(0)), xts .. nil) <= s(0) -> true
	0 == xts = false => count(s(0), xts .. nil) <= s(s(s(0))) -> true
	0 == xts = false => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	s(0) == xts = false => count(s(0), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	count(x, xts3 .. xts2 .. xts1 .. yts) <= s(s(s(len(yts)))) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	0 == xts = true => count(0, xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(0) == xts = true => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	s(0) == xts = true => count(s(s(s(0))), xts .. nil) <= s(0) -> true
	s(s(0)) == xts = true => count(s(s(0)), xts .. nil) <= s(0) -> true
	0 == xts = false => count(s(s(0)), xts .. nil) <= s(s(s(0))) -> true
	s(0) == xts = false => count(s(0), xts .. nil) <= s(s(s(0))) -> true
	s(0) == xts = false => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	xts == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	s(0) == xts = true => count(s(s(s(0))), xts .. nil) <= s(s(0)) -> true
	s(s(0)) == xts = true => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	s(s(0)) == xts = true => count(s(s(s(0))), xts .. nil) <= s(0) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	0 == xts = false => count(0, xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(0) == xts = false => count(s(s(0)), xts .. nil) <= s(s(s(0))) -> true
	s(0) == xts = false => count(s(s(s(0))), xts .. nil) <= s(s(0)) -> true
	s(s(0)) == xts = false => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(s(0)) == xts = true => count(s(s(s(0))), xts .. nil) <= s(s(0)) -> true
	s(s(s(0))) == xts = true => count(s(s(s(0))), xts .. nil) <= s(0) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	s(0) == xts = false => count(s(s(s(0))), xts .. nil) <= s(s(s(0))) -> true
	s(s(0)) == xts = false => count(s(s(0)), xts .. nil) <= s(s(s(0))) -> true
	s(s(0)) == xts = false => count(s(s(s(0))), xts .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	xts2 == s(xts1) = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	s(s(s(0))) == xts = true => count(s(s(s(0))), xts .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	s(s(0)) == xts = false => count(s(s(s(0))), xts .. nil) <= s(s(s(0))) -> true
	s(s(s(0))) == xts = false => count(s(s(s(0))), xts .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(xts2)) == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	s(s(s(0))) == xts = false => count(s(s(s(0))), xts .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(xts2)) == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(xts2)) == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = false => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(s(xts2))) == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	s(s(xts2)) == xts1 = true => count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(xts2)) == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(s(xts2))) == xts1 = true => count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(s(xts2))) == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	s(s(xts2)) == xts1 = false => count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(s(0))) -> true
	s(s(s(s(xts2)))) == xts1 = true => count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(s(xts2))) == xts1 = false => count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(s(0))) -> true
	s(s(s(s(xts2)))) == xts1 = false => count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(s(0))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> yts
	^f0($n0 + 1; yts, xts@) -> xts$n0 .. ^f0($n0; yts, xts@)
	^f1(0; yts) -> len(yts)
	^f1($n1 + 1; yts) -> s(^f1($n1; yts))
	^f136(0; xts) -> xts
	^f136($n136 + 1; xts) -> s(^f136($n136; xts))
	^f741(0) -> 0
	^f741($n741 + 1) -> s(^f741($n741))
	^f964(0; xts) -> xts
	^f964($n964 + 1; xts) -> s(^f964($n964; xts))
+++ }
+++ Lemma(s)           = 
	count(x, xts$n .. ^f0($n; yts, xts@)) <= s(^f1($n; yts)) = true
	xts3 == xts2 = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(0) = true
	xts3 == xts2 = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = true => count(s(^f136($n; xts2)), xts1 .. nil) <= s(0) = true
	xts3 == s(xts2) = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(0) = true
	xts2 == 0 = false => count(s(^f136($n; xts2)), xts1 .. nil) <= s(s(0)) = true
	xts3 == s(xts2) = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true
	xts4 == xts3 = true => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts4 == xts3 = false => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts3 == 0 = true => count(s(^f136($n; xts3)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts4 == s(xts3) = true => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts3 == 0 = false => count(s(^f136($n; xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts4 == s(xts3) = false => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	0 == xts2 = true => count(^f741($n), xts1 .. nil) <= s(0) = true
	0 == xts2 = false => count(^f741($n), xts1 .. nil) <= s(s(0)) = true
	s(xts3) == xts2 = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true
	s(xts3) == xts2 = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(s(0))) = true
	0 == xts2 = true => count(^f741($n), xts1 .. nil) <= s(s(0)) = true
	0 == xts2 = false => count(^f741($n), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == xts2 = false => count(s(s(^f964($n; xts3))), xts1 .. nil) <= s(s(s(0))) = true
	xts2 == 0 = true => count(s(s(^f964($n; xts2))), xts1 .. nil) <= s(s(0)) = true
	xts3 == xts2 = true => count(s(s(^f964($n; xts3))), xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = false => count(s(s(^f964($n; xts2))), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == s(xts2) = false => count(s(s(^f964($n; xts3))), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == s(xts2) = true => count(s(s(^f964($n; xts3))), xts1 .. nil) <= s(s(0)) = true
	s(0) == xts2 = true => count(s(^f741($n)), xts1 .. nil) <= s(0) = true
	s(0) == xts2 = false => count(s(^f741($n)), xts1 .. nil) <= s(s(0)) = true
	s(s(xts3)) == xts2 = true => count(s(s(^f136($n; xts3))), xts1 .. nil) <= s(s(0)) = true
	s(s(xts3)) == xts2 = false => count(s(s(^f136($n; xts3))), xts1 .. nil) <= s(s(s(0))) = true
	s(0) == xts2 = true => count(s(^f741($n)), xts1 .. nil) <= s(s(0)) = true
	s(0) == xts2 = false => count(s(^f741($n)), xts1 .. nil) <= s(s(s(0))) = true

+++ treating clause
	count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(s(0))) = true
--- no new clauses created
+++ attempting case rewriting
--- case rewriting generated new conjectures
	s(s(s(s(xts2)))) == xts1 = true => s(0) <= s(s(s(0))) = true
	s(s(s(s(xts2)))) == xts1 = false => 0 <= s(s(s(0))) = true
+++ added new clause(s)
	s(s(s(s(xts2)))) == xts1 = true => s(0) <= s(s(s(0))) = true
	s(s(s(s(xts2)))) == xts1 = false => 0 <= s(s(s(0))) = true
... to conjectures
--- clause
	s(s(s(s(xts2)))) == xts1 = true => s(0) <= s(s(s(0))) = true
... reduced to tautology
	s(s(s(s(xts2)))) == xts1 = true => true = true
--- clause
	s(s(s(s(xts2)))) == xts1 = false => 0 <= s(s(s(0))) = true
... reduced to tautology
	s(s(s(s(xts2)))) == xts1 = false => true = true

+++ Status of the Inference System
--- Conjectures:
	count(s(s(s(0))), xts .. nil) <= s(s(s(0))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	count(x, xs) <= len(xs) -> true
	count(x, xts .. yts) <= s(len(yts)) -> true
	0 == xts = true => count(0, xts .. nil) <= s(0) -> true
	count(x, xts2 .. xts1 .. yts) <= s(s(len(yts))) -> true
	0 == xts = true => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = true => count(s(0), xts .. nil) <= s(0) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = true => count(s(0), xts .. nil) <= s(s(0)) -> true
	0 == xts = true => count(s(s(0)), xts .. nil) <= s(0) -> true
	s(0) == xts = true => count(s(0), xts .. nil) <= s(0) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(s(0))) -> true
	0 == xts = false => count(s(0), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	0 == xts = true => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	s(0) == xts = true => count(s(0), xts .. nil) <= s(s(0)) -> true
	s(0) == xts = true => count(s(s(0)), xts .. nil) <= s(0) -> true
	0 == xts = false => count(s(0), xts .. nil) <= s(s(s(0))) -> true
	0 == xts = false => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	s(0) == xts = false => count(s(0), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	count(x, xts3 .. xts2 .. xts1 .. yts) <= s(s(s(len(yts)))) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	0 == xts = true => count(0, xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(0) == xts = true => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	s(0) == xts = true => count(s(s(s(0))), xts .. nil) <= s(0) -> true
	s(s(0)) == xts = true => count(s(s(0)), xts .. nil) <= s(0) -> true
	0 == xts = false => count(s(s(0)), xts .. nil) <= s(s(s(0))) -> true
	s(0) == xts = false => count(s(0), xts .. nil) <= s(s(s(0))) -> true
	s(0) == xts = false => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	xts == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	s(0) == xts = true => count(s(s(s(0))), xts .. nil) <= s(s(0)) -> true
	s(s(0)) == xts = true => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	s(s(0)) == xts = true => count(s(s(s(0))), xts .. nil) <= s(0) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	0 == xts = false => count(0, xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(0) == xts = false => count(s(s(0)), xts .. nil) <= s(s(s(0))) -> true
	s(0) == xts = false => count(s(s(s(0))), xts .. nil) <= s(s(0)) -> true
	s(s(0)) == xts = false => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(s(0)) == xts = true => count(s(s(s(0))), xts .. nil) <= s(s(0)) -> true
	s(s(s(0))) == xts = true => count(s(s(s(0))), xts .. nil) <= s(0) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	s(0) == xts = false => count(s(s(s(0))), xts .. nil) <= s(s(s(0))) -> true
	s(s(0)) == xts = false => count(s(s(0)), xts .. nil) <= s(s(s(0))) -> true
	s(s(0)) == xts = false => count(s(s(s(0))), xts .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	xts2 == s(xts1) = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	s(s(s(0))) == xts = true => count(s(s(s(0))), xts .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	s(s(0)) == xts = false => count(s(s(s(0))), xts .. nil) <= s(s(s(0))) -> true
	s(s(s(0))) == xts = false => count(s(s(s(0))), xts .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(xts2)) == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	s(s(s(0))) == xts = false => count(s(s(s(0))), xts .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(xts2)) == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(xts2)) == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = false => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(s(xts2))) == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	s(s(xts2)) == xts1 = true => count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(xts2)) == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(s(xts2))) == xts1 = true => count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(s(xts2))) == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	s(s(xts2)) == xts1 = false => count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(s(0))) -> true
	s(s(s(s(xts2)))) == xts1 = true => count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(s(xts2))) == xts1 = false => count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(s(0))) -> true
	s(s(s(s(xts2)))) == xts1 = false => count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(s(0))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> yts
	^f0($n0 + 1; yts, xts@) -> xts$n0 .. ^f0($n0; yts, xts@)
	^f1(0; yts) -> len(yts)
	^f1($n1 + 1; yts) -> s(^f1($n1; yts))
	^f136(0; xts) -> xts
	^f136($n136 + 1; xts) -> s(^f136($n136; xts))
	^f741(0) -> 0
	^f741($n741 + 1) -> s(^f741($n741))
	^f964(0; xts) -> xts
	^f964($n964 + 1; xts) -> s(^f964($n964; xts))
+++ }
+++ Lemma(s)           = 
	count(x, xts$n .. ^f0($n; yts, xts@)) <= s(^f1($n; yts)) = true
	xts3 == xts2 = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(0) = true
	xts3 == xts2 = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = true => count(s(^f136($n; xts2)), xts1 .. nil) <= s(0) = true
	xts3 == s(xts2) = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(0) = true
	xts2 == 0 = false => count(s(^f136($n; xts2)), xts1 .. nil) <= s(s(0)) = true
	xts3 == s(xts2) = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true
	xts4 == xts3 = true => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts4 == xts3 = false => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts3 == 0 = true => count(s(^f136($n; xts3)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts4 == s(xts3) = true => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts3 == 0 = false => count(s(^f136($n; xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts4 == s(xts3) = false => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	0 == xts2 = true => count(^f741($n), xts1 .. nil) <= s(0) = true
	0 == xts2 = false => count(^f741($n), xts1 .. nil) <= s(s(0)) = true
	s(xts3) == xts2 = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true
	s(xts3) == xts2 = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(s(0))) = true
	0 == xts2 = true => count(^f741($n), xts1 .. nil) <= s(s(0)) = true
	0 == xts2 = false => count(^f741($n), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == xts2 = false => count(s(s(^f964($n; xts3))), xts1 .. nil) <= s(s(s(0))) = true
	xts2 == 0 = true => count(s(s(^f964($n; xts2))), xts1 .. nil) <= s(s(0)) = true
	xts3 == xts2 = true => count(s(s(^f964($n; xts3))), xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = false => count(s(s(^f964($n; xts2))), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == s(xts2) = false => count(s(s(^f964($n; xts3))), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == s(xts2) = true => count(s(s(^f964($n; xts3))), xts1 .. nil) <= s(s(0)) = true
	s(0) == xts2 = true => count(s(^f741($n)), xts1 .. nil) <= s(0) = true
	s(0) == xts2 = false => count(s(^f741($n)), xts1 .. nil) <= s(s(0)) = true
	s(s(xts3)) == xts2 = true => count(s(s(^f136($n; xts3))), xts1 .. nil) <= s(s(0)) = true
	s(s(xts3)) == xts2 = false => count(s(s(^f136($n; xts3))), xts1 .. nil) <= s(s(s(0))) = true
	s(0) == xts2 = true => count(s(^f741($n)), xts1 .. nil) <= s(s(0)) = true
	s(0) == xts2 = false => count(s(^f741($n)), xts1 .. nil) <= s(s(s(0))) = true

+++ treating clause
	count(s(s(s(0))), xts .. nil) <= s(s(s(0))) = true
--- no new clauses created
+++ attempting case rewriting
--- case rewriting generated new conjectures
	s(s(s(0))) == xts = true => s(0) <= s(s(s(0))) = true
	s(s(s(0))) == xts = false => 0 <= s(s(s(0))) = true
+++ added new clause(s)
	s(s(s(0))) == xts = true => s(0) <= s(s(s(0))) = true
	s(s(s(0))) == xts = false => 0 <= s(s(s(0))) = true
... to conjectures
--- clause
	s(s(s(0))) == xts = true => s(0) <= s(s(s(0))) = true
... reduced to tautology
	s(s(s(0))) == xts = true => true = true
--- clause
	s(s(s(0))) == xts = false => 0 <= s(s(s(0))) = true
... reduced to tautology
	s(s(s(0))) == xts = false => true = true

+++ Status of the Inference System
--- Conjectures:
	<empty>
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	count(x, xs) <= len(xs) -> true
	count(x, xts .. yts) <= s(len(yts)) -> true
	0 == xts = true => count(0, xts .. nil) <= s(0) -> true
	count(x, xts2 .. xts1 .. yts) <= s(s(len(yts))) -> true
	0 == xts = true => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = true => count(s(0), xts .. nil) <= s(0) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(0)) -> true
	0 == xts = true => count(s(0), xts .. nil) <= s(s(0)) -> true
	0 == xts = true => count(s(s(0)), xts .. nil) <= s(0) -> true
	s(0) == xts = true => count(s(0), xts .. nil) <= s(0) -> true
	0 == xts = false => count(0, xts .. nil) <= s(s(s(0))) -> true
	0 == xts = false => count(s(0), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	0 == xts = true => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	s(0) == xts = true => count(s(0), xts .. nil) <= s(s(0)) -> true
	s(0) == xts = true => count(s(s(0)), xts .. nil) <= s(0) -> true
	0 == xts = false => count(s(0), xts .. nil) <= s(s(s(0))) -> true
	0 == xts = false => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	s(0) == xts = false => count(s(0), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts == 0 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	count(x, xts3 .. xts2 .. xts1 .. yts) <= s(s(s(len(yts)))) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	0 == xts = true => count(0, xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(0) == xts = true => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	s(0) == xts = true => count(s(s(s(0))), xts .. nil) <= s(0) -> true
	s(s(0)) == xts = true => count(s(s(0)), xts .. nil) <= s(0) -> true
	0 == xts = false => count(s(s(0)), xts .. nil) <= s(s(s(0))) -> true
	s(0) == xts = false => count(s(0), xts .. nil) <= s(s(s(0))) -> true
	s(0) == xts = false => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	xts == 0 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	s(0) == xts = true => count(s(s(s(0))), xts .. nil) <= s(s(0)) -> true
	s(s(0)) == xts = true => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	s(s(0)) == xts = true => count(s(s(s(0))), xts .. nil) <= s(0) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	0 == xts = false => count(0, xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(0) == xts = false => count(s(s(0)), xts .. nil) <= s(s(s(0))) -> true
	s(0) == xts = false => count(s(s(s(0))), xts .. nil) <= s(s(0)) -> true
	s(s(0)) == xts = false => count(s(s(0)), xts .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(xts2)), xts1 .. nil) <= s(0) -> true
	xts2 == s(xts1) = true => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	xts2 == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(s(0)) == xts = true => count(s(s(s(0))), xts .. nil) <= s(s(0)) -> true
	s(s(s(0))) == xts = true => count(s(s(s(0))), xts .. nil) <= s(0) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	s(0) == xts = false => count(s(s(s(0))), xts .. nil) <= s(s(s(0))) -> true
	s(s(0)) == xts = false => count(s(s(0)), xts .. nil) <= s(s(s(0))) -> true
	s(s(0)) == xts = false => count(s(s(s(0))), xts .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(s(xts2))), xts1 .. nil) <= s(0) -> true
	xts2 == s(xts1) = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	s(s(s(0))) == xts = true => count(s(s(s(0))), xts .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(xts2), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	s(s(0)) == xts = false => count(s(s(s(0))), xts .. nil) <= s(s(s(0))) -> true
	s(s(s(0))) == xts = false => count(s(s(s(0))), xts .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(xts2)) == xts1 = true => count(s(s(xts2)), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	s(s(s(0))) == xts = false => count(s(s(s(0))), xts .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts == 0 = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(xts2)) == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(xts2)) == xts1 = false => count(s(s(xts2)), xts1 .. nil) <= s(s(s(0))) -> true
	s(xts2) == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(s(0))) -> true
	xts == 0 = false => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	xts2 == xts1 = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(s(xts2))) == xts1 = true => count(s(s(s(xts2))), xts1 .. nil) <= s(s(0)) -> true
	s(s(xts2)) == xts1 = true => count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(0)) -> true
	s(xts2) == xts1 = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = false => count(s(xts3), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(xts2)) == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == s(xts1) = true => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(0)) -> true
	s(s(s(xts2))) == xts1 = true => count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	xts2 == xts1 = false => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(s(xts2))) == xts1 = false => count(s(s(s(xts2))), xts1 .. nil) <= s(s(s(0))) -> true
	s(s(xts2)) == xts1 = false => count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(s(0))) -> true
	s(s(s(s(xts2)))) == xts1 = true => count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(0)) -> true
	xts2 == s(xts1) = false => count(s(s(s(xts3))), xts2 .. xts1 .. nil) <= s(s(s(0))) -> true
	s(s(s(xts2))) == xts1 = false => count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(s(0))) -> true
	s(s(s(s(xts2)))) == xts1 = false => count(s(s(s(s(xts2)))), xts1 .. nil) <= s(s(s(0))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> yts
	^f0($n0 + 1; yts, xts@) -> xts$n0 .. ^f0($n0; yts, xts@)
	^f1(0; yts) -> len(yts)
	^f1($n1 + 1; yts) -> s(^f1($n1; yts))
	^f136(0; xts) -> xts
	^f136($n136 + 1; xts) -> s(^f136($n136; xts))
	^f741(0) -> 0
	^f741($n741 + 1) -> s(^f741($n741))
	^f964(0; xts) -> xts
	^f964($n964 + 1; xts) -> s(^f964($n964; xts))
+++ }
+++ Lemma(s)           = 
	count(x, xts$n .. ^f0($n; yts, xts@)) <= s(^f1($n; yts)) = true
	xts3 == xts2 = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(0) = true
	xts3 == xts2 = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = true => count(s(^f136($n; xts2)), xts1 .. nil) <= s(0) = true
	xts3 == s(xts2) = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(0) = true
	xts2 == 0 = false => count(s(^f136($n; xts2)), xts1 .. nil) <= s(s(0)) = true
	xts3 == s(xts2) = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true
	xts4 == xts3 = true => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts4 == xts3 = false => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts3 == 0 = true => count(s(^f136($n; xts3)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts4 == s(xts3) = true => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(0)) = true
	xts3 == 0 = false => count(s(^f136($n; xts3)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	xts4 == s(xts3) = false => count(s(^f136($n; xts4)), xts2 .. xts1 .. nil) <= s(s(s(0))) = true
	0 == xts2 = true => count(^f741($n), xts1 .. nil) <= s(0) = true
	0 == xts2 = false => count(^f741($n), xts1 .. nil) <= s(s(0)) = true
	s(xts3) == xts2 = true => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(0)) = true
	s(xts3) == xts2 = false => count(s(^f136($n; xts3)), xts1 .. nil) <= s(s(s(0))) = true
	0 == xts2 = true => count(^f741($n), xts1 .. nil) <= s(s(0)) = true
	0 == xts2 = false => count(^f741($n), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == xts2 = false => count(s(s(^f964($n; xts3))), xts1 .. nil) <= s(s(s(0))) = true
	xts2 == 0 = true => count(s(s(^f964($n; xts2))), xts1 .. nil) <= s(s(0)) = true
	xts3 == xts2 = true => count(s(s(^f964($n; xts3))), xts1 .. nil) <= s(s(0)) = true
	xts2 == 0 = false => count(s(s(^f964($n; xts2))), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == s(xts2) = false => count(s(s(^f964($n; xts3))), xts1 .. nil) <= s(s(s(0))) = true
	xts3 == s(xts2) = true => count(s(s(^f964($n; xts3))), xts1 .. nil) <= s(s(0)) = true
	s(0) == xts2 = true => count(s(^f741($n)), xts1 .. nil) <= s(0) = true
	s(0) == xts2 = false => count(s(^f741($n)), xts1 .. nil) <= s(s(0)) = true
	s(s(xts3)) == xts2 = true => count(s(s(^f136($n; xts3))), xts1 .. nil) <= s(s(0)) = true
	s(s(xts3)) == xts2 = false => count(s(s(^f136($n; xts3))), xts1 .. nil) <= s(s(s(0))) = true
	s(0) == xts2 = true => count(s(^f741($n)), xts1 .. nil) <= s(s(0)) = true
	s(0) == xts2 = false => count(s(^f741($n)), xts1 .. nil) <= s(s(s(0))) = true

+++ SUCCESS: all conjectures proved
+++ Statistics:
... Number of proof steps          = 190
... Number of induction steps      = 138
... Number of equational steps     = 0
... Number of case rewriting steps = 56
... Number of PG defined symbols   = 5
... Number of PG lemmas            = 31
... Elapsed time (seconds)         = 8.763
