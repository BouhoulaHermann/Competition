+++ SPECIFICATION --- bidirectional branch, version 0.99
+++ Parameters:
    ===========
+++ input       = 02-tutorial-page12-in.txt
+++ output      = 02-tutorial-page12-out.txt
+++ trace       = 3
+++ direction   = first-to-last
+++ drop        = yes
+++ verbose     = 3
+++ split       = 4
+++ loop limit  = 10
+++ stdlib      = /usr/local/lib/indy/stdlib/
-----------------------------------------------------------------------

+++ specification assoc from 02-tutorial-page12-in.txt successfully parsed
+++ Listing
         1: specification assoc
         2: sorts
         3:      list nat
         4: constructors
         5:      0: -> nat
         6:      cons: nat list -> list
         7:      nil: -> list
         8:      s: nat -> nat
         9: defined functions
        10:      app: list list -> list
        11: precedence
        12:      app > cons > nil > s > 0
        13: axioms
        14:      app(nil, y) = y;
        15:      app(cons(x, y), z) = cons(x, app(y, z));
        16: conjectures
        17:      app(app(xs, ys), zs) = app(xs, app(ys, zs));
        18: end
+++ finitary sorts: <empty>
+++ Rewrite System 
	app(nil, y) -> y
	app(cons(x, y), z) -> cons(x, app(y, z))
+++ inductive positions:
... for app: 0
+++ maximal depths of left-hand sides:
... for app: 2
+++ general maximal depth = 2
+++ sort dependence: nat < list
+++ test sets for defined functions and sorts:
... for app
... ... list
		nil
		cons(x, y)

+++ conjecture(s)
	app(app(xs, ys), zs) = app(xs, app(ys, zs))

+++ inference system initiated
+++ treating clause
	app(app(xs, ys), zs) = app(xs, app(ys, zs))
+++ inductive narrowing on conjecture
	app(app(xs, ys), zs) = app(xs, app(ys, zs))
... induction variables of
	app(app(xs, ys), zs) = app(xs, app(ys, zs))
... are:
	xs:list
	ys:list
+++ perform INDUCTIVE NARROWING on conjecture 
	app(app(xs, ys), zs) = app(xs, app(ys, zs))
... with variable xs
+++ creating new conjecture
	app(app(nil, ys), zs) = app(nil, app(ys, zs))
+++ creating new conjecture
	app(app(cons(xts, yts), ys), zs) = app(cons(xts, yts), app(ys, zs))
--- clause
	app(app(nil, ys), zs) = app(nil, app(ys, zs))
... reduced to tautology
	app(ys, zs) = app(ys, zs)
--- clause
	app(app(cons(xts, yts), ys), zs) = app(cons(xts, yts), app(ys, zs))
... reduced in 3 steps to
	cons(xts, app(app(yts, ys), zs)) = cons(xts, app(yts, app(ys, zs)))
... decomposed into new clause(s)
	app(app(yts, ys), zs) = app(yts, app(ys, zs))
+++ inductive narrowing succeeded
--- clause
	app(app(xs, ys), zs) = app(xs, app(ys, zs))
... oriented to rule
	app(app(xs, ys), zs) -> app(xs, app(ys, zs))
+++ added new clause(s)
	app(app(yts, ys), zs) = app(yts, app(ys, zs))
... to conjectures
--- clause
	app(app(yts, ys), zs) = app(yts, app(ys, zs))
... reduced to tautology
	app(yts, app(ys, zs)) = app(yts, app(ys, zs))

+++ Status of the Inference System
--- Conjectures:
	<empty>
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	app(app(xs, ys), zs) -> app(xs, app(ys, zs))
--- Primal Grammar:
	<empty>

+++ SUCCESS: all conjectures proved
+++ Statistics:
... Number of proof steps          = 1
... Number of induction steps      = 1
... Number of equational steps     = 0
... Number of case rewriting steps = 0
... Elapsed time (seconds)         = 0
