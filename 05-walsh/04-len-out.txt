+++ SPECIFICATION --- bidirectional branch, version 0.99
+++ Parameters:
    ===========
+++ input       = 04-len-in.txt
+++ output      = 04-len-out.txt
+++ trace       = 3
+++ direction   = first-to-last
+++ drop        = yes
+++ verbose     = 3
+++ split       = 4
+++ loop limit  = 10
+++ stdlib      = /usr/local/lib/indy/stdlib/
-----------------------------------------------------------------------

+++ specification len from 04-len-in.txt successfully parsed
+++ Listing
         1: specification len
         2: sorts
         3:      list nat
         4: constructors
         5:      ..: nat list -> list
         6:      0: -> nat
         7:      nil: -> list
         8:      s: nat -> nat
         9: defined functions
        10:      +: nat nat -> nat
        11:      @@: list list -> list
        12:      len: list -> nat
        13: precedence
        14:      len > @@ > + > .. > nil > s > 0
        15: axioms
        16:      x + 0 = x;
        17:      len(nil) = 0;
        18:      nil @@ y = y;
        19:      x + s(y) = s(x + y);
        20:      len(x .. y) = s(len(y));
        21:      (x .. y) @@ z = x .. (y @@ z);
        22: conjectures
        23:      len(x) + len(y) = len(x @@ y);
        24: end
+++ finitary sorts: <empty>
+++ Rewrite System 
	x + 0 -> x
	len(nil) -> 0
	nil @@ y -> y
	x + s(y) -> s(x + y)
	len(x .. y) -> s(len(y))
	(x .. y) @@ z -> x .. (y @@ z)
+++ inductive positions:
... for +: 1
... for @@: 0
... for len: 0
+++ maximal depths of left-hand sides:
... for @@: 2
... for len: 2
... for +: 2
+++ general maximal depth = 2
+++ sort dependence: nat < list
+++ test sets for defined functions and sorts:
... for @@
... ... list
		nil
		x .. y
... for len
... ... list
		nil
		x .. y
... for +
... ... nat
		0
		s(x)

+++ conjecture(s)
	len(x) + len(y) = len(x @@ y)

+++ inference system initiated
+++ treating clause
	len(x) + len(y) = len(x @@ y)
+++ inductive narrowing on conjecture
	len(x) + len(y) = len(x @@ y)
... induction variables of
	len(x) + len(y) = len(x @@ y)
... are:
	x:list
	y:list
+++ perform INDUCTIVE NARROWING on conjecture 
	len(x) + len(y) = len(x @@ y)
... with variable x
+++ creating new conjecture
	len(nil) + len(y) = len(nil @@ y)
+++ creating new conjecture
	len(xts .. yts) + len(y) = len((xts .. yts) @@ y)
--- clause
	len(nil) + len(y) = len(nil @@ y)
... reduced in 2 steps to
	0 + len(y) = len(y)
--- clause
	len(xts .. yts) + len(y) = len((xts .. yts) @@ y)
... reduced in 3 steps to
	s(len(yts)) + len(y) = s(len(yts @@ y))
+++ inductive narrowing succeeded
--- clause
	len(x) + len(y) = len(x @@ y)
... oriented to rule
	len(x @@ y) -> len(x) + len(y)
+++ added new clause(s)
	0 + len(y) = len(y)
	s(len(yts)) + len(y) = s(len(yts @@ y))
... to conjectures
--- clause
	s(len(yts)) + len(y) = s(len(yts @@ y))
... reduced in 1 step to
	s(len(yts)) + len(y) = s(len(yts) + len(y))

+++ Status of the Inference System
--- Conjectures:
	0 + len(y) = len(y)
	s(len(yts)) + len(y) = s(len(yts) + len(y))
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	len(x @@ y) -> len(x) + len(y)
--- Primal Grammar:
	<empty>

+++ treating clause
	0 + len(y) = len(y)
+++ inductive narrowing on conjecture
	0 + len(y) = len(y)
... induction variables of
	0 + len(y) = len(y)
... are:
	y:list
+++ perform INDUCTIVE NARROWING on conjecture 
	0 + len(y) = len(y)
... with variable y
+++ creating new conjecture
	0 + len(nil) = len(nil)
+++ creating new conjecture
	0 + len(xts .. yts) = len(xts .. yts)
--- clause
	0 + len(nil) = len(nil)
... reduced to tautology
	0 = 0
--- clause
	0 + len(xts .. yts) = len(xts .. yts)
... reduced in 3 steps to
	s(0 + len(yts)) = s(len(yts))
... decomposed into new clause(s)
	0 + len(yts) = len(yts)
+++ inductive narrowing succeeded
--- clause
	0 + len(y) = len(y)
... oriented to rule
	0 + len(y) -> len(y)
+++ added new clause(s)
	0 + len(yts) = len(yts)
... to conjectures
--- clause
	0 + len(yts) = len(yts)
... reduced to tautology
	len(yts) = len(yts)

+++ Status of the Inference System
--- Conjectures:
	s(len(yts)) + len(y) = s(len(yts) + len(y))
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	0 + len(y) -> len(y)
	len(x @@ y) -> len(x) + len(y)
--- Primal Grammar:
	<empty>

+++ treating clause
	s(len(yts)) + len(y) = s(len(yts) + len(y))
+++ inductive narrowing on conjecture
	s(len(yts)) + len(y) = s(len(yts) + len(y))
... induction variables of
	s(len(yts)) + len(y) = s(len(yts) + len(y))
... are:
	y:list
	yts:list
+++ perform INDUCTIVE NARROWING on conjecture 
	s(len(yts)) + len(y) = s(len(yts) + len(y))
... with variable y
+++ creating new conjecture
	s(len(yts)) + len(nil) = s(len(yts) + len(nil))
+++ creating new conjecture
	s(len(yts2)) + len(xts .. yts1) = s(len(yts2) + len(xts .. yts1))
--- clause
	s(len(yts)) + len(nil) = s(len(yts) + len(nil))
... reduced to tautology
	s(len(yts)) = s(len(yts))
--- clause
	s(len(yts2)) + len(xts .. yts1) = s(len(yts2) + len(xts .. yts1))
... reduced in 4 steps to
	s(s(len(yts2)) + len(yts1)) = s(s(len(yts2) + len(yts1)))
... decomposed into new clause(s)
	s(len(yts2)) + len(yts1) = s(len(yts2) + len(yts1))
+++ inductive narrowing succeeded
--- clause
	s(len(yts)) + len(y) = s(len(yts) + len(y))
... oriented to rule
	s(len(yts)) + len(y) -> s(len(yts) + len(y))
+++ added new clause(s)
	s(len(yts2)) + len(yts1) = s(len(yts2) + len(yts1))
... to conjectures
--- clause
	s(len(yts2)) + len(yts1) = s(len(yts2) + len(yts1))
... reduced to tautology
	s(len(yts2) + len(yts1)) = s(len(yts2) + len(yts1))

+++ Status of the Inference System
--- Conjectures:
	<empty>
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	0 + len(y) -> len(y)
	len(x @@ y) -> len(x) + len(y)
	s(len(yts)) + len(y) -> s(len(yts) + len(y))
--- Primal Grammar:
	<empty>

+++ SUCCESS: all conjectures proved
+++ Statistics:
... Number of proof steps          = 3
... Number of induction steps      = 3
... Number of equational steps     = 0
... Number of case rewriting steps = 0
... Elapsed time (seconds)         = 0.002
