+++ SPECIFICATION --- bidirectional branch, version 0.99
+++ Parameters:
    ===========
+++ input       = 1-in.txt
+++ output      = 1-out.txt
+++ trace       = 3
+++ direction   = last-to-first
+++ drop        = yes
+++ verbose     = 3
+++ split       = 4
+++ loop limit  = 10
+++ stdlib      = /usr/local/lib/indy/stdlib/
-----------------------------------------------------------------------

+++ specification NAT from nat successfully parsed
+++ specification LIST from list successfully parsed
+++ specification APPEND from append successfully parsed
+++ specification TREE from tree successfully parsed
+++ specification FLATTEN from flatten successfully parsed
+++ specification BOOL from bool successfully parsed
+++ specification AND from and successfully parsed
+++ specification EQ from eq successfully parsed
+++ specification MIRROR from mirror successfully parsed
+++ specification REVERSE from reverse successfully parsed
+++ specification CraftedTrees from 1-in.txt successfully parsed
+++ Listing
         1: specification CraftedTrees
         2: sorts
         3:      bool list nat tree
         4: constructors
         5:      0: -> nat
         6:      cons: nat list -> list
         7:      false: -> bool
         8:      leaf: -> tree
         9:      nil: -> list
        10:      node: tree nat tree -> tree
        11:      s: nat -> nat
        12:      true: -> bool
        13: defined functions
        14:      &&: bool bool -> bool
        15:      ==: nat nat -> bool
        16:      app: list list -> list
        17:      flatten: tree -> list
        18:      flatten2: tree list -> list
        19:      mirror: tree tree -> bool
        20:      rev: list -> list
        21: precedence
        22:      rev > mirror > app > flatten = flatten2 > == > && > cons > node > leaf > nil > s > 0 > false = true
        23: axioms
        24:      0 == 0 = true;
        25:      rev(nil) = nil;
        26:      app(nil, y) = y;
        27:      0 == s(x) = false;
        28:      s(x) == 0 = false;
        29:      flatten(leaf) = nil;
        30:      true && true = true;
        31:      false && true = false;
        32:      flatten2(leaf, x) = x;
        33:      s(x) == s(y) = x == y;
        34:      true && false = false;
        35:      false && false = false;
        36:      mirror(leaf, leaf) = true;
        37:      mirror(leaf, node(x, y, z)) = false;
        38:      mirror(node(x, y, z), leaf) = false;
        39:      app(cons(x, y), z) = cons(x, app(y, z));
        40:      rev(cons(x, y)) = app(rev(y), cons(x, nil));
        41:      flatten(node(xl, y, xr)) = app(flatten(xl), cons(y, flatten(xr)));
        42:      flatten2(node(x, y, z), v) = flatten2(x, cons(y, flatten2(z, v)));
        43:      mirror(node(u, v, w), node(x, y, z)) = (v == y) && (mirror(u, z) && mirror(w, x));
        44: conjectures
        45:      mirror(x, y) = true => rev(flatten2(x, nil)) = flatten(y);
        46: end
+++ finitary sorts: bool
+++ Rewrite System 
	0 == 0 -> true
	rev(nil) -> nil
	app(nil, y) -> y
	0 == s(x) -> false
	s(x) == 0 -> false
	flatten(leaf) -> nil
	true && true -> true
	false && true -> false
	flatten2(leaf, x) -> x
	s(x) == s(y) -> x == y
	true && false -> false
	false && false -> false
	mirror(leaf, leaf) -> true
	mirror(leaf, node(x, y, z)) -> false
	mirror(node(x, y, z), leaf) -> false
	app(cons(x, y), z) -> cons(x, app(y, z))
	rev(cons(x, y)) -> app(rev(y), cons(x, nil))
	app(flatten(xl), cons(y, flatten(xr))) -> flatten(node(xl, y, xr))
	flatten2(node(x, y, z), v) -> flatten2(x, cons(y, flatten2(z, v)))
	mirror(node(u, v, w), node(x, y, z)) -> (v == y) && (mirror(u, z) && mirror(w, x))
+++ inductive positions:
... for &&: 0 1
... for ==: 0 1
... for app: 0 1 1.1
... for flatten: 0
... for flatten2: 0
... for mirror: 0 1
... for rev: 0
+++ maximal depths of left-hand sides:
... for flatten2: 2
... for flatten: 1
... for &&: 1
... for app: 3
... for mirror: 2
... for rev: 2
... for ==: 2
+++ general maximal depth = 3
+++ sort dependence: nat < tree < list
+++ test sets for defined functions and sorts:
... for rev
... ... list
		nil
		cons(x, y)
... for mirror
... ... tree
		leaf
		node(x, y, z)
... for flatten2
... ... tree
		leaf
		node(x, y, z)
... for flatten
... ... tree
		x
... for ==
... ... nat
		0
		s(x)
... for app
... ... list
		nil
		cons(0, nil)
		cons(s(x), nil)
		cons(0, cons(x, y))
		cons(s(x), cons(y, z))
... for &&
... ... bool
		x

+++ conjecture(s)
	mirror(x, y) = true => rev(flatten2(x, nil)) = flatten(y)

+++ inference system initiated
+++ treating clause
	mirror(x, y) = true => rev(flatten2(x, nil)) = flatten(y)
+++ inductive narrowing on conjecture
	mirror(x, y) = true => rev(flatten2(x, nil)) = flatten(y)
... induction variables of
	mirror(x, y) = true => rev(flatten2(x, nil)) = flatten(y)
... are:
	y:tree
	x:tree
+++ perform INDUCTIVE NARROWING on conjecture 
	mirror(x, y) = true => rev(flatten2(x, nil)) = flatten(y)
... with variable y
+++ creating new conjecture
	mirror(x, xts) = true => rev(flatten2(x, nil)) = flatten(xts)
+++ inductive narrowing succeeded
--- non-orientable clause
	rev(flatten2(x, nil)) = flatten(y)
+++ moved
	mirror(x, y) = true => rev(flatten2(x, nil)) = flatten(y)
... to non-orientable hypotheses
+++ added new clause(s)
	mirror(x, xts) = true => rev(flatten2(x, nil)) = flatten(xts)
... to conjectures
--- clause
	mirror(x, xts) = true => rev(flatten2(x, nil)) = flatten(xts)
... subsumed by hypothese
	mirror(x, y) = true => rev(flatten2(x, nil)) = flatten(y)

+++ Status of the Inference System
--- Conjectures:
	<empty>
--- Non-orientable hypotheses:
	mirror(x, y) = true => rev(flatten2(x, nil)) = flatten(y)
--- Oriented hypotheses:
	<empty>
--- Primal Grammar:
	<empty>

+++ SUCCESS: all conjectures proved
+++ Statistics:
... Number of proof steps          = 1
... Number of induction steps      = 1
... Number of equational steps     = 0
... Number of case rewriting steps = 0
... Elapsed time (seconds)         = 0.025
