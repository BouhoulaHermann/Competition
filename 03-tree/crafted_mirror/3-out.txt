+++ SPECIFICATION --- bidirectional branch, version 0.99
+++ Parameters:
    ===========
+++ input       = 3-in.txt
+++ output      = 3-out.txt
+++ trace       = 3
+++ direction   = first-to-last
+++ drop        = yes
+++ verbose     = 3
+++ split       = 4
+++ loop limit  = 10
+++ stdlib      = /usr/local/lib/indy/stdlib/
-----------------------------------------------------------------------

+++ specification NAT from nat successfully parsed
+++ specification LIST from list successfully parsed
+++ specification APPEND from append successfully parsed
+++ specification REVERSE from reverse successfully parsed
+++ specification TREE from tree successfully parsed
+++ specification BOOL from bool successfully parsed
+++ specification AND from and successfully parsed
+++ specification EQ from eq successfully parsed
+++ specification MIRROR from mirror successfully parsed
+++ specification CraftedTrees from 3-in.txt successfully parsed
+++ Listing
         1: specification CraftedTrees
         2: sorts
         3:      bool list nat tree
         4: constructors
         5:      0: -> nat
         6:      cons: nat list -> list
         7:      false: -> bool
         8:      leaf: -> tree
         9:      nil: -> list
        10:      node: tree nat tree -> tree
        11:      s: nat -> nat
        12:      true: -> bool
        13: defined functions
        14:      &&: bool bool -> bool
        15:      ==: nat nat -> bool
        16:      app: list list -> list
        17:      flatten2: tree list -> list
        18:      mirror: tree tree -> bool
        19:      rev: list -> list
        20: precedence
        21:      mirror > rev > flatten2 > == > && > app > cons > node > leaf > nil > s > 0 > false = true
        22: axioms
        23:      0 == 0 = true;
        24:      rev(nil) = nil;
        25:      app(nil, y) = y;
        26:      0 == s(x) = false;
        27:      s(x) == 0 = false;
        28:      true && true = true;
        29:      false && true = false;
        30:      flatten2(leaf, x) = x;
        31:      s(x) == s(y) = x == y;
        32:      true && false = false;
        33:      false && false = false;
        34:      mirror(leaf, leaf) = true;
        35:      mirror(leaf, node(x, y, z)) = false;
        36:      mirror(node(x, y, z), leaf) = false;
        37:      app(cons(x, y), z) = cons(x, app(y, z));
        38:      rev(cons(x, y)) = app(rev(y), cons(x, nil));
        39:      flatten2(node(x, y, z), v) = flatten2(x, cons(y, flatten2(z, v)));
        40:      mirror(node(u, v, w), node(x, y, z)) = (v == y) && (mirror(u, z) && mirror(w, x));
        41: conjectures
        42:      mirror(x, y) = true => rev(flatten2(x, nil)) = flatten2(y, nil);
        43: end
+++ finitary sorts: bool
+++ Rewrite System 
	0 == 0 -> true
	rev(nil) -> nil
	app(nil, y) -> y
	0 == s(x) -> false
	s(x) == 0 -> false
	true && true -> true
	false && true -> false
	flatten2(leaf, x) -> x
	s(x) == s(y) -> x == y
	true && false -> false
	false && false -> false
	mirror(leaf, leaf) -> true
	mirror(leaf, node(x, y, z)) -> false
	mirror(node(x, y, z), leaf) -> false
	app(cons(x, y), z) -> cons(x, app(y, z))
	rev(cons(x, y)) -> app(rev(y), cons(x, nil))
	flatten2(node(x, y, z), v) -> flatten2(x, cons(y, flatten2(z, v)))
	mirror(node(u, v, w), node(x, y, z)) -> (v == y) && (mirror(u, z) && mirror(w, x))
+++ inductive positions:
... for &&: 0 1
... for ==: 0 1
... for app: 0
... for flatten2: 0
... for mirror: 0 1
... for rev: 0
+++ maximal depths of left-hand sides:
... for flatten2: 2
... for &&: 1
... for app: 2
... for mirror: 2
... for rev: 2
... for ==: 2
+++ general maximal depth = 2
+++ sort dependence: nat < tree < list
+++ test sets for defined functions and sorts:
... for rev
... ... list
		nil
		cons(x, y)
... for mirror
... ... tree
		leaf
		node(x, y, z)
... for flatten2
... ... tree
		leaf
		node(x, y, z)
... for ==
... ... nat
		0
		s(x)
... for app
... ... list
		nil
		cons(x, y)
... for &&
... ... bool
		true
		false

+++ conjecture(s)
	mirror(x, y) = true => rev(flatten2(x, nil)) = flatten2(y, nil)

+++ inference system initiated
+++ treating clause
	mirror(x, y) = true => rev(flatten2(x, nil)) = flatten2(y, nil)
+++ inductive narrowing on conjecture
	mirror(x, y) = true => rev(flatten2(x, nil)) = flatten2(y, nil)
... induction variables of
	mirror(x, y) = true => rev(flatten2(x, nil)) = flatten2(y, nil)
... are:
	x:tree
	y:tree
+++ perform INDUCTIVE NARROWING on conjecture 
	mirror(x, y) = true => rev(flatten2(x, nil)) = flatten2(y, nil)
... with variable x
+++ creating new conjecture
	mirror(leaf, y) = true => rev(flatten2(leaf, nil)) = flatten2(y, nil)
+++ creating new conjecture
	mirror(node(xts, yts, zts), y) = true => rev(flatten2(node(xts, yts, zts), nil)) = flatten2(y, nil)
--- clause
	mirror(leaf, y) = true => rev(flatten2(leaf, nil)) = flatten2(y, nil)
... reduced in 2 steps to
	mirror(leaf, y) = true => nil = flatten2(y, nil)
--- clause
	mirror(node(xts, yts, zts), y) = true => rev(flatten2(node(xts, yts, zts), nil)) = flatten2(y, nil)
... reduced in 1 step to
	mirror(node(xts, yts, zts), y) = true => rev(flatten2(xts, cons(yts, flatten2(zts, nil)))) = flatten2(y, nil)
+++ inductive narrowing succeeded
--- non-orientable clause
	rev(flatten2(x, nil)) = flatten2(y, nil)
+++ moved
	mirror(x, y) = true => rev(flatten2(x, nil)) = flatten2(y, nil)
... to non-orientable hypotheses
+++ added new clause(s)
	mirror(leaf, y) = true => nil = flatten2(y, nil)
	mirror(node(xts, yts, zts), y) = true => rev(flatten2(xts, cons(yts, flatten2(zts, nil)))) = flatten2(y, nil)
... to conjectures
--- succeeded to apply non-orientable hypothese
	mirror(x, y) = true => rev(flatten2(x, nil)) = flatten2(y, nil)
... to clause
	mirror(leaf, y) = true => nil = flatten2(y, nil)
... modified clause
	rev(flatten2(leaf, nil)) = flatten2(y, nil) => nil = flatten2(y, nil)
--- clause
	rev(flatten2(leaf, nil)) = flatten2(y, nil) => nil = flatten2(y, nil)
... reduced in 2 steps to
	nil = flatten2(y, nil) => nil = flatten2(y, nil)
--- condition
	nil = flatten2(y, nil)
... is equal to consequent
	nil = flatten2(y, nil)
... in clause
	nil = flatten2(y, nil) => nil = flatten2(y, nil)
... and is therefore discared (always true)
--- succeeded to apply non-orientable hypothese
	mirror(x, y) = true => rev(flatten2(x, nil)) = flatten2(y, nil)
... to clause
	mirror(node(xts, yts, zts), y) = true => rev(flatten2(xts, cons(yts, flatten2(zts, nil)))) = flatten2(y, nil)
... modified clause
	rev(flatten2(node(xts, yts, zts), nil)) = flatten2(y, nil) => rev(flatten2(xts, cons(yts, flatten2(zts, nil)))) = flatten2(y, nil)
--- clause
	rev(flatten2(node(xts, yts, zts), nil)) = flatten2(y, nil) => rev(flatten2(xts, cons(yts, flatten2(zts, nil)))) = flatten2(y, nil)
... reduced in 1 step to
	rev(flatten2(xts, cons(yts, flatten2(zts, nil)))) = flatten2(y, nil) => rev(flatten2(xts, cons(yts, flatten2(zts, nil)))) = flatten2(y, nil)
--- condition
	rev(flatten2(xts, cons(yts, flatten2(zts, nil)))) = flatten2(y, nil)
... is equal to consequent
	rev(flatten2(xts, cons(yts, flatten2(zts, nil)))) = flatten2(y, nil)
... in clause
	rev(flatten2(xts, cons(yts, flatten2(zts, nil)))) = flatten2(y, nil) => rev(flatten2(xts, cons(yts, flatten2(zts, nil)))) = flatten2(y, nil)
... and is therefore discared (always true)

+++ Status of the Inference System
--- Conjectures:
	<empty>
--- Non-orientable hypotheses:
	mirror(x, y) = true => rev(flatten2(x, nil)) = flatten2(y, nil)
--- Oriented hypotheses:
	<empty>
--- Primal Grammar:
	<empty>

+++ SUCCESS: all conjectures proved
+++ Statistics:
... Number of proof steps          = 1
... Number of induction steps      = 1
... Number of equational steps     = 2
... Number of case rewriting steps = 0
... Elapsed time (seconds)         = 0.005
