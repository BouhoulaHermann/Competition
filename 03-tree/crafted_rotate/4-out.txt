+++ SPECIFICATION --- bidirectional branch, version 0.99
+++ Parameters:
    ===========
+++ input       = 4-in.txt
+++ output      = 4-out.txt
+++ trace       = 3
+++ direction   = first-to-last
+++ drop        = yes
+++ verbose     = 3
+++ split       = 4
+++ loop limit  = 10
+++ stdlib      = /usr/local/lib/indy/stdlib/
-----------------------------------------------------------------------

+++ specification NAT from nat successfully parsed
+++ specification LIST from list successfully parsed
+++ specification APPEND from append successfully parsed
+++ specification TREE from tree successfully parsed
+++ specification FLATTEN from flatten successfully parsed
+++ specification ROTATEleft from rotateleft successfully parsed
+++ specification CraftedTrees from 4-in.txt successfully parsed
+++ Listing
         1: specification CraftedTrees
         2: sorts
         3:      list nat tree
         4: constructors
         5:      0: -> nat
         6:      cons: nat list -> list
         7:      leaf: -> tree
         8:      nil: -> list
         9:      node: tree nat tree -> tree
        10:      s: nat -> nat
        11: defined functions
        12:      app: list list -> list
        13:      flatten: tree -> list
        14:      flatten2: tree list -> list
        15:      rotL: tree -> tree
        16: precedence
        17:      rotL > flatten = flatten2 > app > cons > node > leaf > nil > s > 0
        18: axioms
        19:      app(nil, y) = y;
        20:      rotL(leaf) = leaf;
        21:      flatten(leaf) = nil;
        22:      flatten2(leaf, x) = x;
        23:      app(cons(x, y), z) = cons(x, app(y, z));
        24:      rotL(node(xl, y, leaf)) = node(xl, y, leaf);
        25:      flatten(node(xl, y, xr)) = app(flatten(xl), cons(y, flatten(xr)));
        26:      flatten2(node(x, y, z), v) = flatten2(x, cons(y, flatten2(z, v)));
        27:      rotL(node(xP, x, node(xQ, y, xR))) = rotL(node(node(xP, x, xQ), y, xR));
        28: conjectures
        29:      flatten(rotL(x)) = flatten2(x, nil);
        30: end
+++ finitary sorts: <empty>
+++ Rewrite System 
	app(nil, y) -> y
	rotL(leaf) -> leaf
	flatten(leaf) -> nil
	flatten2(leaf, x) -> x
	app(cons(x, y), z) -> cons(x, app(y, z))
	rotL(node(xl, y, leaf)) -> node(xl, y, leaf)
	flatten(node(xl, y, xr)) -> app(flatten(xl), cons(y, flatten(xr)))
	flatten2(node(x, y, z), v) -> flatten2(x, cons(y, flatten2(z, v)))
	rotL(node(node(xP, x, xQ), y, xR)) -> rotL(node(xP, x, node(xQ, y, xR)))
+++ inductive positions:
... for app: 0
... for flatten: 0
... for flatten2: 0
... for rotL: 0 0.0 0.2
+++ maximal depths of left-hand sides:
... for flatten2: 2
... for flatten: 2
... for rotL: 3
... for app: 2
+++ general maximal depth = 3
+++ sort dependence: nat < tree < list
+++ test sets for defined functions and sorts:
... for rotL
... ... tree
		leaf
		node(leaf, 0, leaf)
		node(leaf, s(x), leaf)
		node(leaf, 0, node(x, y, z))
		node(node(x, y, z), 0, leaf)
		node(leaf, s(x), node(y, z, u))
		node(node(x, y, z), s(u), leaf)
		node(node(x, y, z), 0, node(u, v, w))
		node(node(x, y, z), s(u), node(v, w, xy))
... for flatten2
... ... tree
		leaf
		node(x, y, z)
... for flatten
... ... tree
		leaf
		node(x, y, z)
... for app
... ... list
		nil
		cons(x, y)

+++ conjecture(s)
	flatten(rotL(x)) = flatten2(x, nil)

+++ inference system initiated
+++ treating clause
	flatten(rotL(x)) = flatten2(x, nil)
+++ inductive narrowing on conjecture
	flatten(rotL(x)) = flatten2(x, nil)
... induction variables of
	flatten(rotL(x)) = flatten2(x, nil)
... are:
	x:tree
+++ perform INDUCTIVE NARROWING on conjecture 
	flatten(rotL(x)) = flatten2(x, nil)
... with variable x
+++ creating new conjecture
	flatten(rotL(leaf)) = flatten2(leaf, nil)
+++ creating new conjecture
	flatten(rotL(node(xts, yts, zts))) = flatten2(node(xts, yts, zts), nil)
--- clause
	flatten(rotL(leaf)) = flatten2(leaf, nil)
... reduced to tautology
	nil = nil
--- clause
	flatten(rotL(node(xts, yts, zts))) = flatten2(node(xts, yts, zts), nil)
... reduced in 1 step to
	flatten(rotL(node(xts, yts, zts))) = flatten2(xts, cons(yts, flatten2(zts, nil)))
+++ inductive narrowing succeeded
--- clause
	flatten(rotL(x)) = flatten2(x, nil)
... oriented to rule
	flatten(rotL(x)) -> flatten2(x, nil)
+++ added new clause(s)
	flatten(rotL(node(xts, yts, zts))) = flatten2(xts, cons(yts, flatten2(zts, nil)))
... to conjectures
--- clause
	flatten(rotL(node(xts, yts, zts))) = flatten2(xts, cons(yts, flatten2(zts, nil)))
... reduced in 1 step to
	flatten2(node(xts, yts, zts), nil) = flatten2(xts, cons(yts, flatten2(zts, nil)))

+++ Status of the Inference System
--- Conjectures:
	flatten2(node(xts, yts, zts), nil) = flatten2(xts, cons(yts, flatten2(zts, nil)))
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	flatten(rotL(x)) -> flatten2(x, nil)
--- Primal Grammar:
	<empty>

--- clause
	flatten2(node(xts, yts, zts), nil) = flatten2(xts, cons(yts, flatten2(zts, nil)))
... reduced to tautology
	flatten2(xts, cons(yts, flatten2(zts, nil))) = flatten2(xts, cons(yts, flatten2(zts, nil)))

+++ Status of the Inference System
--- Conjectures:
	<empty>
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	flatten(rotL(x)) -> flatten2(x, nil)
--- Primal Grammar:
	<empty>

+++ SUCCESS: all conjectures proved
+++ Statistics:
... Number of proof steps          = 2
... Number of induction steps      = 1
... Number of equational steps     = 0
... Number of case rewriting steps = 0
... Elapsed time (seconds)         = 0.028
