+++ SPECIFICATION --- bidirectional branch, version 0.99
+++ Parameters:
    ===========
+++ input       = 0-in.txt
+++ output      = 0-out.txt
+++ trace       = 3
+++ direction   = first-to-last
+++ drop        = yes
+++ verbose     = 3
+++ split       = 4
+++ loop limit  = 10
+++ stdlib      = /usr/local/lib/indy/stdlib/
-----------------------------------------------------------------------

+++ specification NAT from nat successfully parsed
+++ specification LIST from list successfully parsed
+++ specification APPEND from append successfully parsed
+++ specification TREE from tree successfully parsed
+++ specification FLATTEN from flatten successfully parsed
+++ specification CraftedTrees from 0-in.txt successfully parsed
+++ Listing
         1: specification CraftedTrees
         2: sorts
         3:      list nat tree
         4: constructors
         5:      0: -> nat
         6:      cons: nat list -> list
         7:      leaf: -> tree
         8:      nil: -> list
         9:      node: tree nat tree -> tree
        10:      s: nat -> nat
        11: defined functions
        12:      app: list list -> list
        13:      flatten: tree -> list
        14: precedence
        15:      flatten > app > cons > node > leaf > nil > s > 0
        16: axioms
        17:      app(nil, y) = y;
        18:      flatten(leaf) = nil;
        19:      app(cons(x, y), z) = cons(x, app(y, z));
        20:      flatten(node(xl, y, xr)) = app(flatten(xl), cons(y, flatten(xr)));
        21: conjectures
        22:      flatten(node(node(x, u, x), v, x)) = flatten(node(x, u, node(x, v, x)));
        23: end
+++ finitary sorts: <empty>
+++ Rewrite System 
	app(nil, y) -> y
	flatten(leaf) -> nil
	app(cons(x, y), z) -> cons(x, app(y, z))
	flatten(node(xl, y, xr)) -> app(flatten(xl), cons(y, flatten(xr)))
+++ inductive positions:
... for app: 0
... for flatten: 0
+++ maximal depths of left-hand sides:
... for flatten: 2
... for app: 2
+++ general maximal depth = 2
+++ sort dependence: nat < tree < list
+++ test sets for defined functions and sorts:
... for flatten
... ... tree
		leaf
		node(x, y, z)
... for app
... ... list
		nil
		cons(x, y)

+++ conjecture(s)
	flatten(node(node(x, u, x), v, x)) = flatten(node(x, u, node(x, v, x)))

+++ inference system initiated
--- clause
	flatten(node(node(x, u, x), v, x)) = flatten(node(x, u, node(x, v, x)))
... reduced in 4 steps to
	app(app(flatten(x), cons(u, flatten(x))), cons(v, flatten(x))) = app(flatten(x), cons(u, app(flatten(x), cons(v, flatten(x)))))
+++ treating clause
	app(app(flatten(x), cons(u, flatten(x))), cons(v, flatten(x))) = app(flatten(x), cons(u, app(flatten(x), cons(v, flatten(x)))))
+++ inductive narrowing on conjecture
	app(app(flatten(x), cons(u, flatten(x))), cons(v, flatten(x))) = app(flatten(x), cons(u, app(flatten(x), cons(v, flatten(x)))))
... induction variables of
	app(app(flatten(x), cons(u, flatten(x))), cons(v, flatten(x))) = app(flatten(x), cons(u, app(flatten(x), cons(v, flatten(x)))))
... are:
	x:tree
+++ perform INDUCTIVE NARROWING on conjecture 
	app(app(flatten(x), cons(u, flatten(x))), cons(v, flatten(x))) = app(flatten(x), cons(u, app(flatten(x), cons(v, flatten(x)))))
... with variable x
+++ creating new conjecture
	app(app(flatten(leaf), cons(u, flatten(leaf))), cons(v, flatten(leaf))) = app(flatten(leaf), cons(u, app(flatten(leaf), cons(v, flatten(leaf)))))
+++ creating new conjecture
	app(app(flatten(node(xts, yts, zts)), cons(u, flatten(node(xts, yts, zts)))), cons(v, flatten(node(xts, yts, zts)))) = app(flatten(node(xts, yts, zts)), cons(u, app(flatten(node(xts, yts, zts)), cons(v, flatten(node(xts, yts, zts))))))
--- clause
	app(app(flatten(leaf), cons(u, flatten(leaf))), cons(v, flatten(leaf))) = app(flatten(leaf), cons(u, app(flatten(leaf), cons(v, flatten(leaf)))))
... reduced to tautology
	cons(u, cons(v, nil)) = cons(u, cons(v, nil))
--- clause
	app(app(flatten(node(xts, yts, zts)), cons(u, flatten(node(xts, yts, zts)))), cons(v, flatten(node(xts, yts, zts)))) = app(flatten(node(xts, yts, zts)), cons(u, app(flatten(node(xts, yts, zts)), cons(v, flatten(node(xts, yts, zts))))))
... reduced in 6 steps to
	app(app(app(flatten(xts), cons(yts, flatten(zts))), cons(u, app(flatten(xts), cons(yts, flatten(zts))))), cons(v, app(flatten(xts), cons(yts, flatten(zts))))) = app(app(flatten(xts), cons(yts, flatten(zts))), cons(u, app(app(flatten(xts), cons(yts, flatten(zts))), cons(v, app(flatten(xts), cons(yts, flatten(zts)))))))
+++ inductive narrowing succeeded
--- clause
	app(app(flatten(x), cons(u, flatten(x))), cons(v, flatten(x))) = app(flatten(x), cons(u, app(flatten(x), cons(v, flatten(x)))))
... oriented to rule
	app(app(flatten(x), cons(u, flatten(x))), cons(v, flatten(x))) -> app(flatten(x), cons(u, app(flatten(x), cons(v, flatten(x)))))
+++ added new clause(s)
	app(app(app(flatten(xts), cons(yts, flatten(zts))), cons(u, app(flatten(xts), cons(yts, flatten(zts))))), cons(v, app(flatten(xts), cons(yts, flatten(zts))))) = app(app(flatten(xts), cons(yts, flatten(zts))), cons(u, app(app(flatten(xts), cons(yts, flatten(zts))), cons(v, app(flatten(xts), cons(yts, flatten(zts)))))))
... to conjectures

+++ Status of the Inference System
--- Conjectures:
	app(app(app(flatten(xts), cons(yts, flatten(zts))), cons(u, app(flatten(xts), cons(yts, flatten(zts))))), cons(v, app(flatten(xts), cons(yts, flatten(zts))))) = app(app(flatten(xts), cons(yts, flatten(zts))), cons(u, app(app(flatten(xts), cons(yts, flatten(zts))), cons(v, app(flatten(xts), cons(yts, flatten(zts)))))))
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	app(app(flatten(x), cons(u, flatten(x))), cons(v, flatten(x))) -> app(flatten(x), cons(u, app(flatten(x), cons(v, flatten(x)))))
--- Primal Grammar:
	<empty>

+++ treating clause
	app(app(app(flatten(xts), cons(yts, flatten(zts))), cons(u, app(flatten(xts), cons(yts, flatten(zts))))), cons(v, app(flatten(xts), cons(yts, flatten(zts))))) = app(app(flatten(xts), cons(yts, flatten(zts))), cons(u, app(app(flatten(xts), cons(yts, flatten(zts))), cons(v, app(flatten(xts), cons(yts, flatten(zts)))))))
+++ inductive narrowing on conjecture
	app(app(app(flatten(xts), cons(yts, flatten(zts))), cons(u, app(flatten(xts), cons(yts, flatten(zts))))), cons(v, app(flatten(xts), cons(yts, flatten(zts))))) = app(app(flatten(xts), cons(yts, flatten(zts))), cons(u, app(app(flatten(xts), cons(yts, flatten(zts))), cons(v, app(flatten(xts), cons(yts, flatten(zts)))))))
... induction variables of
	app(app(app(flatten(xts), cons(yts, flatten(zts))), cons(u, app(flatten(xts), cons(yts, flatten(zts))))), cons(v, app(flatten(xts), cons(yts, flatten(zts))))) = app(app(flatten(xts), cons(yts, flatten(zts))), cons(u, app(app(flatten(xts), cons(yts, flatten(zts))), cons(v, app(flatten(xts), cons(yts, flatten(zts)))))))
... are:
	xts:tree
	zts:tree
+++ perform INDUCTIVE NARROWING on conjecture 
	app(app(app(flatten(xts), cons(yts, flatten(zts))), cons(u, app(flatten(xts), cons(yts, flatten(zts))))), cons(v, app(flatten(xts), cons(yts, flatten(zts))))) = app(app(flatten(xts), cons(yts, flatten(zts))), cons(u, app(app(flatten(xts), cons(yts, flatten(zts))), cons(v, app(flatten(xts), cons(yts, flatten(zts)))))))
... with variable xts
+++ creating new conjecture
	app(app(app(flatten(leaf), cons(yts, flatten(zts))), cons(u, app(flatten(leaf), cons(yts, flatten(zts))))), cons(v, app(flatten(leaf), cons(yts, flatten(zts))))) = app(app(flatten(leaf), cons(yts, flatten(zts))), cons(u, app(app(flatten(leaf), cons(yts, flatten(zts))), cons(v, app(flatten(leaf), cons(yts, flatten(zts)))))))
+++ creating new conjecture
	app(app(app(flatten(node(xts, yts2, zts2)), cons(yts1, flatten(zts1))), cons(u, app(flatten(node(xts, yts2, zts2)), cons(yts1, flatten(zts1))))), cons(v, app(flatten(node(xts, yts2, zts2)), cons(yts1, flatten(zts1))))) = app(app(flatten(node(xts, yts2, zts2)), cons(yts1, flatten(zts1))), cons(u, app(app(flatten(node(xts, yts2, zts2)), cons(yts1, flatten(zts1))), cons(v, app(flatten(node(xts, yts2, zts2)), cons(yts1, flatten(zts1)))))))
--- clause
	app(app(app(flatten(leaf), cons(yts, flatten(zts))), cons(u, app(flatten(leaf), cons(yts, flatten(zts))))), cons(v, app(flatten(leaf), cons(yts, flatten(zts))))) = app(app(flatten(leaf), cons(yts, flatten(zts))), cons(u, app(app(flatten(leaf), cons(yts, flatten(zts))), cons(v, app(flatten(leaf), cons(yts, flatten(zts)))))))
... reduced in 16 steps to
	cons(yts, app(app(flatten(zts), cons(u, cons(yts, flatten(zts)))), cons(v, cons(yts, flatten(zts))))) = cons(yts, app(flatten(zts), cons(u, cons(yts, app(flatten(zts), cons(v, cons(yts, flatten(zts))))))))
--- clause
	app(app(app(flatten(node(xts, yts2, zts2)), cons(yts1, flatten(zts1))), cons(u, app(flatten(node(xts, yts2, zts2)), cons(yts1, flatten(zts1))))), cons(v, app(flatten(node(xts, yts2, zts2)), cons(yts1, flatten(zts1))))) = app(app(flatten(node(xts, yts2, zts2)), cons(yts1, flatten(zts1))), cons(u, app(app(flatten(node(xts, yts2, zts2)), cons(yts1, flatten(zts1))), cons(v, app(flatten(node(xts, yts2, zts2)), cons(yts1, flatten(zts1)))))))
... reduced in 6 steps to
	app(app(app(app(flatten(xts), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1))), cons(u, app(app(flatten(xts), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1))))), cons(v, app(app(flatten(xts), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1))))) = app(app(app(flatten(xts), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1))), cons(u, app(app(app(flatten(xts), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1))), cons(v, app(app(flatten(xts), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1)))))))
... decomposed into new clause(s)
	app(app(flatten(zts), cons(u, cons(yts, flatten(zts)))), cons(v, cons(yts, flatten(zts)))) = app(flatten(zts), cons(u, cons(yts, app(flatten(zts), cons(v, cons(yts, flatten(zts)))))))
+++ inductive narrowing succeeded
--- clause
	app(app(app(flatten(xts), cons(yts, flatten(zts))), cons(u, app(flatten(xts), cons(yts, flatten(zts))))), cons(v, app(flatten(xts), cons(yts, flatten(zts))))) = app(app(flatten(xts), cons(yts, flatten(zts))), cons(u, app(app(flatten(xts), cons(yts, flatten(zts))), cons(v, app(flatten(xts), cons(yts, flatten(zts)))))))
... oriented to rule
	app(app(app(flatten(xts), cons(yts, flatten(zts))), cons(u, app(flatten(xts), cons(yts, flatten(zts))))), cons(v, app(flatten(xts), cons(yts, flatten(zts))))) -> app(app(flatten(xts), cons(yts, flatten(zts))), cons(u, app(app(flatten(xts), cons(yts, flatten(zts))), cons(v, app(flatten(xts), cons(yts, flatten(zts)))))))
+++ added new clause(s)
	app(app(app(app(flatten(xts), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1))), cons(u, app(app(flatten(xts), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1))))), cons(v, app(app(flatten(xts), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1))))) = app(app(app(flatten(xts), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1))), cons(u, app(app(app(flatten(xts), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1))), cons(v, app(app(flatten(xts), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1)))))))
	app(app(flatten(zts), cons(u, cons(yts, flatten(zts)))), cons(v, cons(yts, flatten(zts)))) = app(flatten(zts), cons(u, cons(yts, app(flatten(zts), cons(v, cons(yts, flatten(zts)))))))
... to conjectures

+++ Status of the Inference System
--- Conjectures:
	app(app(app(app(flatten(xts), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1))), cons(u, app(app(flatten(xts), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1))))), cons(v, app(app(flatten(xts), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1))))) = app(app(app(flatten(xts), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1))), cons(u, app(app(app(flatten(xts), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1))), cons(v, app(app(flatten(xts), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1)))))))
	app(app(flatten(zts), cons(u, cons(yts, flatten(zts)))), cons(v, cons(yts, flatten(zts)))) = app(flatten(zts), cons(u, cons(yts, app(flatten(zts), cons(v, cons(yts, flatten(zts)))))))
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	app(app(flatten(x), cons(u, flatten(x))), cons(v, flatten(x))) -> app(flatten(x), cons(u, app(flatten(x), cons(v, flatten(x)))))
	app(app(app(flatten(xts), cons(yts, flatten(zts))), cons(u, app(flatten(xts), cons(yts, flatten(zts))))), cons(v, app(flatten(xts), cons(yts, flatten(zts))))) -> app(app(flatten(xts), cons(yts, flatten(zts))), cons(u, app(app(flatten(xts), cons(yts, flatten(zts))), cons(v, app(flatten(xts), cons(yts, flatten(zts)))))))
--- Primal Grammar:
	<empty>

+++ treating clause
	app(app(app(app(flatten(xts), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1))), cons(u, app(app(flatten(xts), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1))))), cons(v, app(app(flatten(xts), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1))))) = app(app(app(flatten(xts), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1))), cons(u, app(app(app(flatten(xts), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1))), cons(v, app(app(flatten(xts), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1)))))))
+++ inductive narrowing on conjecture
	app(app(app(app(flatten(xts), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1))), cons(u, app(app(flatten(xts), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1))))), cons(v, app(app(flatten(xts), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1))))) = app(app(app(flatten(xts), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1))), cons(u, app(app(app(flatten(xts), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1))), cons(v, app(app(flatten(xts), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1)))))))
... induction variables of
	app(app(app(app(flatten(xts), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1))), cons(u, app(app(flatten(xts), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1))))), cons(v, app(app(flatten(xts), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1))))) = app(app(app(flatten(xts), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1))), cons(u, app(app(app(flatten(xts), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1))), cons(v, app(app(flatten(xts), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1)))))))
... are:
	xts:tree
	zts1:tree
	zts2:tree
+++ perform INDUCTIVE NARROWING on conjecture 
	app(app(app(app(flatten(xts), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1))), cons(u, app(app(flatten(xts), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1))))), cons(v, app(app(flatten(xts), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1))))) = app(app(app(flatten(xts), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1))), cons(u, app(app(app(flatten(xts), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1))), cons(v, app(app(flatten(xts), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1)))))))
... with variable xts
+++ creating new conjecture
	app(app(app(app(flatten(leaf), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1))), cons(u, app(app(flatten(leaf), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1))))), cons(v, app(app(flatten(leaf), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1))))) = app(app(app(flatten(leaf), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1))), cons(u, app(app(app(flatten(leaf), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1))), cons(v, app(app(flatten(leaf), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1)))))))
+++ creating new conjecture
	app(app(app(app(flatten(node(xts, yts3, zts3)), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1))), cons(u, app(app(flatten(node(xts, yts3, zts3)), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1))))), cons(v, app(app(flatten(node(xts, yts3, zts3)), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1))))) = app(app(app(flatten(node(xts, yts3, zts3)), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1))), cons(u, app(app(app(flatten(node(xts, yts3, zts3)), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1))), cons(v, app(app(flatten(node(xts, yts3, zts3)), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1)))))))
--- clause
	app(app(app(app(flatten(leaf), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1))), cons(u, app(app(flatten(leaf), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1))))), cons(v, app(app(flatten(leaf), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1))))) = app(app(app(flatten(leaf), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1))), cons(u, app(app(app(flatten(leaf), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1))), cons(v, app(app(flatten(leaf), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1)))))))
... reduced in 22 steps to
	cons(yts2, app(app(app(flatten(zts2), cons(yts1, flatten(zts1))), cons(u, cons(yts2, app(flatten(zts2), cons(yts1, flatten(zts1)))))), cons(v, cons(yts2, app(flatten(zts2), cons(yts1, flatten(zts1))))))) = cons(yts2, app(app(flatten(zts2), cons(yts1, flatten(zts1))), cons(u, cons(yts2, app(app(flatten(zts2), cons(yts1, flatten(zts1))), cons(v, cons(yts2, app(flatten(zts2), cons(yts1, flatten(zts1))))))))))
--- clause
	app(app(app(app(flatten(node(xts, yts3, zts3)), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1))), cons(u, app(app(flatten(node(xts, yts3, zts3)), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1))))), cons(v, app(app(flatten(node(xts, yts3, zts3)), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1))))) = app(app(app(flatten(node(xts, yts3, zts3)), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1))), cons(u, app(app(app(flatten(node(xts, yts3, zts3)), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1))), cons(v, app(app(flatten(node(xts, yts3, zts3)), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1)))))))
... reduced in 6 steps to
	app(app(app(app(app(flatten(xts), cons(yts3, flatten(zts3))), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1))), cons(u, app(app(app(flatten(xts), cons(yts3, flatten(zts3))), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1))))), cons(v, app(app(app(flatten(xts), cons(yts3, flatten(zts3))), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1))))) = app(app(app(app(flatten(xts), cons(yts3, flatten(zts3))), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1))), cons(u, app(app(app(app(flatten(xts), cons(yts3, flatten(zts3))), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1))), cons(v, app(app(app(flatten(xts), cons(yts3, flatten(zts3))), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1)))))))
... decomposed into new clause(s)
	app(app(app(flatten(zts2), cons(yts2, flatten(zts1))), cons(u, cons(yts1, app(flatten(zts2), cons(yts2, flatten(zts1)))))), cons(v, cons(yts1, app(flatten(zts2), cons(yts2, flatten(zts1)))))) = app(app(flatten(zts2), cons(yts2, flatten(zts1))), cons(u, cons(yts1, app(app(flatten(zts2), cons(yts2, flatten(zts1))), cons(v, cons(yts1, app(flatten(zts2), cons(yts2, flatten(zts1)))))))))
+++ inductive narrowing succeeded
--- clause
	app(app(app(app(flatten(xts), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1))), cons(u, app(app(flatten(xts), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1))))), cons(v, app(app(flatten(xts), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1))))) = app(app(app(flatten(xts), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1))), cons(u, app(app(app(flatten(xts), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1))), cons(v, app(app(flatten(xts), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1)))))))
... oriented to rule
	app(app(app(app(flatten(xts), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1))), cons(u, app(app(flatten(xts), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1))))), cons(v, app(app(flatten(xts), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1))))) -> app(app(app(flatten(xts), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1))), cons(u, app(app(app(flatten(xts), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1))), cons(v, app(app(flatten(xts), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1)))))))
+++ added new clause(s)
	app(app(app(app(app(flatten(xts), cons(yts3, flatten(zts3))), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1))), cons(u, app(app(app(flatten(xts), cons(yts3, flatten(zts3))), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1))))), cons(v, app(app(app(flatten(xts), cons(yts3, flatten(zts3))), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1))))) = app(app(app(app(flatten(xts), cons(yts3, flatten(zts3))), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1))), cons(u, app(app(app(app(flatten(xts), cons(yts3, flatten(zts3))), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1))), cons(v, app(app(app(flatten(xts), cons(yts3, flatten(zts3))), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1)))))))
	app(app(app(flatten(zts2), cons(yts2, flatten(zts1))), cons(u, cons(yts1, app(flatten(zts2), cons(yts2, flatten(zts1)))))), cons(v, cons(yts1, app(flatten(zts2), cons(yts2, flatten(zts1)))))) = app(app(flatten(zts2), cons(yts2, flatten(zts1))), cons(u, cons(yts1, app(app(flatten(zts2), cons(yts2, flatten(zts1))), cons(v, cons(yts1, app(flatten(zts2), cons(yts2, flatten(zts1)))))))))
... to conjectures

+++ Status of the Inference System
--- Conjectures:
	app(app(flatten(zts), cons(u, cons(yts, flatten(zts)))), cons(v, cons(yts, flatten(zts)))) = app(flatten(zts), cons(u, cons(yts, app(flatten(zts), cons(v, cons(yts, flatten(zts)))))))
	app(app(app(app(app(flatten(xts), cons(yts3, flatten(zts3))), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1))), cons(u, app(app(app(flatten(xts), cons(yts3, flatten(zts3))), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1))))), cons(v, app(app(app(flatten(xts), cons(yts3, flatten(zts3))), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1))))) = app(app(app(app(flatten(xts), cons(yts3, flatten(zts3))), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1))), cons(u, app(app(app(app(flatten(xts), cons(yts3, flatten(zts3))), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1))), cons(v, app(app(app(flatten(xts), cons(yts3, flatten(zts3))), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1)))))))
	app(app(app(flatten(zts2), cons(yts2, flatten(zts1))), cons(u, cons(yts1, app(flatten(zts2), cons(yts2, flatten(zts1)))))), cons(v, cons(yts1, app(flatten(zts2), cons(yts2, flatten(zts1)))))) = app(app(flatten(zts2), cons(yts2, flatten(zts1))), cons(u, cons(yts1, app(app(flatten(zts2), cons(yts2, flatten(zts1))), cons(v, cons(yts1, app(flatten(zts2), cons(yts2, flatten(zts1)))))))))
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	app(app(flatten(x), cons(u, flatten(x))), cons(v, flatten(x))) -> app(flatten(x), cons(u, app(flatten(x), cons(v, flatten(x)))))
	app(app(app(flatten(xts), cons(yts, flatten(zts))), cons(u, app(flatten(xts), cons(yts, flatten(zts))))), cons(v, app(flatten(xts), cons(yts, flatten(zts))))) -> app(app(flatten(xts), cons(yts, flatten(zts))), cons(u, app(app(flatten(xts), cons(yts, flatten(zts))), cons(v, app(flatten(xts), cons(yts, flatten(zts)))))))
	app(app(app(app(flatten(xts), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1))), cons(u, app(app(flatten(xts), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1))))), cons(v, app(app(flatten(xts), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1))))) -> app(app(app(flatten(xts), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1))), cons(u, app(app(app(flatten(xts), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1))), cons(v, app(app(flatten(xts), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1)))))))
--- Primal Grammar:
	<empty>

+++ treating clause
	app(app(flatten(zts), cons(u, cons(yts, flatten(zts)))), cons(v, cons(yts, flatten(zts)))) = app(flatten(zts), cons(u, cons(yts, app(flatten(zts), cons(v, cons(yts, flatten(zts)))))))
+++ inductive narrowing on conjecture
	app(app(flatten(zts), cons(u, cons(yts, flatten(zts)))), cons(v, cons(yts, flatten(zts)))) = app(flatten(zts), cons(u, cons(yts, app(flatten(zts), cons(v, cons(yts, flatten(zts)))))))
... induction variables of
	app(app(flatten(zts), cons(u, cons(yts, flatten(zts)))), cons(v, cons(yts, flatten(zts)))) = app(flatten(zts), cons(u, cons(yts, app(flatten(zts), cons(v, cons(yts, flatten(zts)))))))
... are:
	zts:tree
+++ perform INDUCTIVE NARROWING on conjecture 
	app(app(flatten(zts), cons(u, cons(yts, flatten(zts)))), cons(v, cons(yts, flatten(zts)))) = app(flatten(zts), cons(u, cons(yts, app(flatten(zts), cons(v, cons(yts, flatten(zts)))))))
... with variable zts
+++ creating new conjecture
	app(app(flatten(leaf), cons(u, cons(yts, flatten(leaf)))), cons(v, cons(yts, flatten(leaf)))) = app(flatten(leaf), cons(u, cons(yts, app(flatten(leaf), cons(v, cons(yts, flatten(leaf)))))))
+++ creating new conjecture
	app(app(flatten(node(xts, yts2, zts)), cons(u, cons(yts1, flatten(node(xts, yts2, zts))))), cons(v, cons(yts1, flatten(node(xts, yts2, zts))))) = app(flatten(node(xts, yts2, zts)), cons(u, cons(yts1, app(flatten(node(xts, yts2, zts)), cons(v, cons(yts1, flatten(node(xts, yts2, zts))))))))
--- clause
	app(app(flatten(leaf), cons(u, cons(yts, flatten(leaf)))), cons(v, cons(yts, flatten(leaf)))) = app(flatten(leaf), cons(u, cons(yts, app(flatten(leaf), cons(v, cons(yts, flatten(leaf)))))))
... reduced to tautology
	cons(u, cons(yts, cons(v, cons(yts, nil)))) = cons(u, cons(yts, cons(v, cons(yts, nil))))
--- clause
	app(app(flatten(node(xts, yts2, zts)), cons(u, cons(yts1, flatten(node(xts, yts2, zts))))), cons(v, cons(yts1, flatten(node(xts, yts2, zts))))) = app(flatten(node(xts, yts2, zts)), cons(u, cons(yts1, app(flatten(node(xts, yts2, zts)), cons(v, cons(yts1, flatten(node(xts, yts2, zts))))))))
... reduced in 6 steps to
	app(app(app(flatten(xts), cons(yts2, flatten(zts))), cons(u, cons(yts1, app(flatten(xts), cons(yts2, flatten(zts)))))), cons(v, cons(yts1, app(flatten(xts), cons(yts2, flatten(zts)))))) = app(app(flatten(xts), cons(yts2, flatten(zts))), cons(u, cons(yts1, app(app(flatten(xts), cons(yts2, flatten(zts))), cons(v, cons(yts1, app(flatten(xts), cons(yts2, flatten(zts)))))))))
--- clause
	app(app(app(flatten(xts), cons(yts2, flatten(zts))), cons(u, cons(yts1, app(flatten(xts), cons(yts2, flatten(zts)))))), cons(v, cons(yts1, app(flatten(xts), cons(yts2, flatten(zts)))))) = app(app(flatten(xts), cons(yts2, flatten(zts))), cons(u, cons(yts1, app(app(flatten(xts), cons(yts2, flatten(zts))), cons(v, cons(yts1, app(flatten(xts), cons(yts2, flatten(zts)))))))))
... subsumed by an existing conjecture
+++ inductive narrowing succeeded
--- clause
	app(app(flatten(zts), cons(u, cons(yts, flatten(zts)))), cons(v, cons(yts, flatten(zts)))) = app(flatten(zts), cons(u, cons(yts, app(flatten(zts), cons(v, cons(yts, flatten(zts)))))))
... oriented to rule
	app(app(flatten(zts), cons(u, cons(yts, flatten(zts)))), cons(v, cons(yts, flatten(zts)))) -> app(flatten(zts), cons(u, cons(yts, app(flatten(zts), cons(v, cons(yts, flatten(zts)))))))

+++ Status of the Inference System
--- Conjectures:
	app(app(app(app(app(flatten(xts), cons(yts3, flatten(zts3))), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1))), cons(u, app(app(app(flatten(xts), cons(yts3, flatten(zts3))), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1))))), cons(v, app(app(app(flatten(xts), cons(yts3, flatten(zts3))), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1))))) = app(app(app(app(flatten(xts), cons(yts3, flatten(zts3))), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1))), cons(u, app(app(app(app(flatten(xts), cons(yts3, flatten(zts3))), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1))), cons(v, app(app(app(flatten(xts), cons(yts3, flatten(zts3))), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1)))))))
	app(app(app(flatten(zts2), cons(yts2, flatten(zts1))), cons(u, cons(yts1, app(flatten(zts2), cons(yts2, flatten(zts1)))))), cons(v, cons(yts1, app(flatten(zts2), cons(yts2, flatten(zts1)))))) = app(app(flatten(zts2), cons(yts2, flatten(zts1))), cons(u, cons(yts1, app(app(flatten(zts2), cons(yts2, flatten(zts1))), cons(v, cons(yts1, app(flatten(zts2), cons(yts2, flatten(zts1)))))))))
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	app(app(flatten(x), cons(u, flatten(x))), cons(v, flatten(x))) -> app(flatten(x), cons(u, app(flatten(x), cons(v, flatten(x)))))
	app(app(flatten(zts), cons(u, cons(yts, flatten(zts)))), cons(v, cons(yts, flatten(zts)))) -> app(flatten(zts), cons(u, cons(yts, app(flatten(zts), cons(v, cons(yts, flatten(zts)))))))
	app(app(app(flatten(xts), cons(yts, flatten(zts))), cons(u, app(flatten(xts), cons(yts, flatten(zts))))), cons(v, app(flatten(xts), cons(yts, flatten(zts))))) -> app(app(flatten(xts), cons(yts, flatten(zts))), cons(u, app(app(flatten(xts), cons(yts, flatten(zts))), cons(v, app(flatten(xts), cons(yts, flatten(zts)))))))
	app(app(app(app(flatten(xts), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1))), cons(u, app(app(flatten(xts), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1))))), cons(v, app(app(flatten(xts), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1))))) -> app(app(app(flatten(xts), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1))), cons(u, app(app(app(flatten(xts), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1))), cons(v, app(app(flatten(xts), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1)))))))
--- Primal Grammar:
	<empty>

+++ treating clause
	app(app(app(app(app(flatten(xts), cons(yts3, flatten(zts3))), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1))), cons(u, app(app(app(flatten(xts), cons(yts3, flatten(zts3))), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1))))), cons(v, app(app(app(flatten(xts), cons(yts3, flatten(zts3))), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1))))) = app(app(app(app(flatten(xts), cons(yts3, flatten(zts3))), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1))), cons(u, app(app(app(app(flatten(xts), cons(yts3, flatten(zts3))), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1))), cons(v, app(app(app(flatten(xts), cons(yts3, flatten(zts3))), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1)))))))
+++ inductive narrowing on conjecture
	app(app(app(app(app(flatten(xts), cons(yts3, flatten(zts3))), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1))), cons(u, app(app(app(flatten(xts), cons(yts3, flatten(zts3))), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1))))), cons(v, app(app(app(flatten(xts), cons(yts3, flatten(zts3))), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1))))) = app(app(app(app(flatten(xts), cons(yts3, flatten(zts3))), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1))), cons(u, app(app(app(app(flatten(xts), cons(yts3, flatten(zts3))), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1))), cons(v, app(app(app(flatten(xts), cons(yts3, flatten(zts3))), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1)))))))
... induction variables of
	app(app(app(app(app(flatten(xts), cons(yts3, flatten(zts3))), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1))), cons(u, app(app(app(flatten(xts), cons(yts3, flatten(zts3))), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1))))), cons(v, app(app(app(flatten(xts), cons(yts3, flatten(zts3))), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1))))) = app(app(app(app(flatten(xts), cons(yts3, flatten(zts3))), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1))), cons(u, app(app(app(app(flatten(xts), cons(yts3, flatten(zts3))), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1))), cons(v, app(app(app(flatten(xts), cons(yts3, flatten(zts3))), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1)))))))
... are:
	xts:tree
	zts1:tree
	zts2:tree
	zts3:tree
+++ perform INDUCTIVE NARROWING on conjecture 
	app(app(app(app(app(flatten(xts), cons(yts3, flatten(zts3))), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1))), cons(u, app(app(app(flatten(xts), cons(yts3, flatten(zts3))), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1))))), cons(v, app(app(app(flatten(xts), cons(yts3, flatten(zts3))), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1))))) = app(app(app(app(flatten(xts), cons(yts3, flatten(zts3))), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1))), cons(u, app(app(app(app(flatten(xts), cons(yts3, flatten(zts3))), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1))), cons(v, app(app(app(flatten(xts), cons(yts3, flatten(zts3))), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1)))))))
... with variable xts
+++ creating new conjecture
	app(app(app(app(app(flatten(leaf), cons(yts3, flatten(zts3))), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1))), cons(u, app(app(app(flatten(leaf), cons(yts3, flatten(zts3))), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1))))), cons(v, app(app(app(flatten(leaf), cons(yts3, flatten(zts3))), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1))))) = app(app(app(app(flatten(leaf), cons(yts3, flatten(zts3))), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1))), cons(u, app(app(app(app(flatten(leaf), cons(yts3, flatten(zts3))), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1))), cons(v, app(app(app(flatten(leaf), cons(yts3, flatten(zts3))), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1)))))))
+++ creating new conjecture
	app(app(app(app(app(flatten(node(xts, yts4, zts4)), cons(yts3, flatten(zts3))), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1))), cons(u, app(app(app(flatten(node(xts, yts4, zts4)), cons(yts3, flatten(zts3))), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1))))), cons(v, app(app(app(flatten(node(xts, yts4, zts4)), cons(yts3, flatten(zts3))), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1))))) = app(app(app(app(flatten(node(xts, yts4, zts4)), cons(yts3, flatten(zts3))), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1))), cons(u, app(app(app(app(flatten(node(xts, yts4, zts4)), cons(yts3, flatten(zts3))), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1))), cons(v, app(app(app(flatten(node(xts, yts4, zts4)), cons(yts3, flatten(zts3))), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1)))))))
--- clause
	app(app(app(app(app(flatten(leaf), cons(yts3, flatten(zts3))), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1))), cons(u, app(app(app(flatten(leaf), cons(yts3, flatten(zts3))), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1))))), cons(v, app(app(app(flatten(leaf), cons(yts3, flatten(zts3))), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1))))) = app(app(app(app(flatten(leaf), cons(yts3, flatten(zts3))), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1))), cons(u, app(app(app(app(flatten(leaf), cons(yts3, flatten(zts3))), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1))), cons(v, app(app(app(flatten(leaf), cons(yts3, flatten(zts3))), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1)))))))
... reduced in 28 steps to
	cons(yts3, app(app(app(app(flatten(zts3), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1))), cons(u, cons(yts3, app(app(flatten(zts3), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1)))))), cons(v, cons(yts3, app(app(flatten(zts3), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1))))))) = cons(yts3, app(app(app(flatten(zts3), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1))), cons(u, cons(yts3, app(app(app(flatten(zts3), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1))), cons(v, cons(yts3, app(app(flatten(zts3), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1))))))))))
--- clause
	app(app(app(app(app(flatten(node(xts, yts4, zts4)), cons(yts3, flatten(zts3))), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1))), cons(u, app(app(app(flatten(node(xts, yts4, zts4)), cons(yts3, flatten(zts3))), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1))))), cons(v, app(app(app(flatten(node(xts, yts4, zts4)), cons(yts3, flatten(zts3))), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1))))) = app(app(app(app(flatten(node(xts, yts4, zts4)), cons(yts3, flatten(zts3))), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1))), cons(u, app(app(app(app(flatten(node(xts, yts4, zts4)), cons(yts3, flatten(zts3))), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1))), cons(v, app(app(app(flatten(node(xts, yts4, zts4)), cons(yts3, flatten(zts3))), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1)))))))
... reduced in 6 steps to
	app(app(app(app(app(app(flatten(xts), cons(yts4, flatten(zts4))), cons(yts3, flatten(zts3))), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1))), cons(u, app(app(app(app(flatten(xts), cons(yts4, flatten(zts4))), cons(yts3, flatten(zts3))), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1))))), cons(v, app(app(app(app(flatten(xts), cons(yts4, flatten(zts4))), cons(yts3, flatten(zts3))), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1))))) = app(app(app(app(app(flatten(xts), cons(yts4, flatten(zts4))), cons(yts3, flatten(zts3))), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1))), cons(u, app(app(app(app(app(flatten(xts), cons(yts4, flatten(zts4))), cons(yts3, flatten(zts3))), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1))), cons(v, app(app(app(app(flatten(xts), cons(yts4, flatten(zts4))), cons(yts3, flatten(zts3))), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1)))))))
... decomposed into new clause(s)
	app(app(app(app(flatten(zts3), cons(yts3, flatten(zts2))), cons(yts2, flatten(zts1))), cons(u, cons(yts1, app(app(flatten(zts3), cons(yts3, flatten(zts2))), cons(yts2, flatten(zts1)))))), cons(v, cons(yts1, app(app(flatten(zts3), cons(yts3, flatten(zts2))), cons(yts2, flatten(zts1)))))) = app(app(app(flatten(zts3), cons(yts3, flatten(zts2))), cons(yts2, flatten(zts1))), cons(u, cons(yts1, app(app(app(flatten(zts3), cons(yts3, flatten(zts2))), cons(yts2, flatten(zts1))), cons(v, cons(yts1, app(app(flatten(zts3), cons(yts3, flatten(zts2))), cons(yts2, flatten(zts1)))))))))
+++ inductive narrowing succeeded
--- clause
	app(app(app(app(app(flatten(xts), cons(yts3, flatten(zts3))), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1))), cons(u, app(app(app(flatten(xts), cons(yts3, flatten(zts3))), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1))))), cons(v, app(app(app(flatten(xts), cons(yts3, flatten(zts3))), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1))))) = app(app(app(app(flatten(xts), cons(yts3, flatten(zts3))), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1))), cons(u, app(app(app(app(flatten(xts), cons(yts3, flatten(zts3))), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1))), cons(v, app(app(app(flatten(xts), cons(yts3, flatten(zts3))), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1)))))))
... oriented to rule
	app(app(app(app(app(flatten(xts), cons(yts3, flatten(zts3))), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1))), cons(u, app(app(app(flatten(xts), cons(yts3, flatten(zts3))), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1))))), cons(v, app(app(app(flatten(xts), cons(yts3, flatten(zts3))), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1))))) -> app(app(app(app(flatten(xts), cons(yts3, flatten(zts3))), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1))), cons(u, app(app(app(app(flatten(xts), cons(yts3, flatten(zts3))), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1))), cons(v, app(app(app(flatten(xts), cons(yts3, flatten(zts3))), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1)))))))
+++ added new clause(s)
	app(app(app(app(app(app(flatten(xts), cons(yts4, flatten(zts4))), cons(yts3, flatten(zts3))), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1))), cons(u, app(app(app(app(flatten(xts), cons(yts4, flatten(zts4))), cons(yts3, flatten(zts3))), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1))))), cons(v, app(app(app(app(flatten(xts), cons(yts4, flatten(zts4))), cons(yts3, flatten(zts3))), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1))))) = app(app(app(app(app(flatten(xts), cons(yts4, flatten(zts4))), cons(yts3, flatten(zts3))), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1))), cons(u, app(app(app(app(app(flatten(xts), cons(yts4, flatten(zts4))), cons(yts3, flatten(zts3))), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1))), cons(v, app(app(app(app(flatten(xts), cons(yts4, flatten(zts4))), cons(yts3, flatten(zts3))), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1)))))))
	app(app(app(app(flatten(zts3), cons(yts3, flatten(zts2))), cons(yts2, flatten(zts1))), cons(u, cons(yts1, app(app(flatten(zts3), cons(yts3, flatten(zts2))), cons(yts2, flatten(zts1)))))), cons(v, cons(yts1, app(app(flatten(zts3), cons(yts3, flatten(zts2))), cons(yts2, flatten(zts1)))))) = app(app(app(flatten(zts3), cons(yts3, flatten(zts2))), cons(yts2, flatten(zts1))), cons(u, cons(yts1, app(app(app(flatten(zts3), cons(yts3, flatten(zts2))), cons(yts2, flatten(zts1))), cons(v, cons(yts1, app(app(flatten(zts3), cons(yts3, flatten(zts2))), cons(yts2, flatten(zts1)))))))))
... to conjectures
+++ active wrap
	app(app(., cons(u, .)), cons(v, .)) = app(., cons(u, app(., cons(v, .))))
... with sequence
	app(app(app(flatten(xts), cons(yts, flatten(zts))), cons(u, app(flatten(xts), cons(yts, flatten(zts))))), cons(v, app(flatten(xts), cons(yts, flatten(zts))))) = app(app(flatten(xts), cons(yts, flatten(zts))), cons(u, app(app(flatten(xts), cons(yts, flatten(zts))), cons(v, app(flatten(xts), cons(yts, flatten(zts)))))))
	app(app(app(app(flatten(xts), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1))), cons(u, app(app(flatten(xts), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1))))), cons(v, app(app(flatten(xts), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1))))) = app(app(app(flatten(xts), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1))), cons(u, app(app(app(flatten(xts), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1))), cons(v, app(app(flatten(xts), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1)))))))
	app(app(app(app(app(flatten(xts), cons(yts3, flatten(zts3))), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1))), cons(u, app(app(app(flatten(xts), cons(yts3, flatten(zts3))), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1))))), cons(v, app(app(app(flatten(xts), cons(yts3, flatten(zts3))), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1))))) = app(app(app(app(flatten(xts), cons(yts3, flatten(zts3))), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1))), cons(u, app(app(app(app(flatten(xts), cons(yts3, flatten(zts3))), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1))), cons(v, app(app(app(flatten(xts), cons(yts3, flatten(zts3))), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1)))))))
+++ primal grammar found for head
	{app, cons, flatten}
... and wrap
	app(app(., cons(u, .)), cons(v, .)) = app(., cons(u, app(., cons(v, .))))
+++ Presburger system  = {
	^f1(0; xts, yts@, zts@) -> flatten(xts)
	^f1($n1 + 1; xts, yts@, zts@) -> app(^f1($n1; xts, yts@, zts@), cons(yts$n1, flatten(zts$n1)))
+++ }
+++ Lemma(s)           = 
	app(app(app(^f1($n; xts, yts@, zts@), cons(yts$n, flatten(zts$n))), cons(u, app(^f1($n; xts, yts, zts), cons(yts$n, flatten(zts$n))))), cons(v, app(^f1($n; xts, yts, zts), cons(yts$n, flatten(zts$n))))) = app(app(^f1($n; xts, yts, zts), cons(yts$n, flatten(zts$n))), cons(u, app(app(^f1($n; xts, yts, zts), cons(yts$n, flatten(zts$n))), cons(v, app(^f1($n; xts, yts, zts), cons(yts$n, flatten(zts$n)))))))
--- clause
	app(app(app(app(app(app(flatten(xts), cons(yts4, flatten(zts4))), cons(yts3, flatten(zts3))), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1))), cons(u, app(app(app(app(flatten(xts), cons(yts4, flatten(zts4))), cons(yts3, flatten(zts3))), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1))))), cons(v, app(app(app(app(flatten(xts), cons(yts4, flatten(zts4))), cons(yts3, flatten(zts3))), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1))))) = app(app(app(app(app(flatten(xts), cons(yts4, flatten(zts4))), cons(yts3, flatten(zts3))), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1))), cons(u, app(app(app(app(app(flatten(xts), cons(yts4, flatten(zts4))), cons(yts3, flatten(zts3))), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1))), cons(v, app(app(app(app(flatten(xts), cons(yts4, flatten(zts4))), cons(yts3, flatten(zts3))), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1)))))))
... subsumed by lemma
	app(app(app(^f1($n; xts, yts@, zts@), cons(yts$n, flatten(zts$n))), cons(u, app(^f1($n; xts, yts, zts), cons(yts$n, flatten(zts$n))))), cons(v, app(^f1($n; xts, yts, zts), cons(yts$n, flatten(zts$n))))) = app(app(^f1($n; xts, yts, zts), cons(yts$n, flatten(zts$n))), cons(u, app(app(^f1($n; xts, yts, zts), cons(yts$n, flatten(zts$n))), cons(v, app(^f1($n; xts, yts, zts), cons(yts$n, flatten(zts$n)))))))
... with substitution
	$n <- 3

+++ Status of the Inference System
--- Conjectures:
	app(app(app(flatten(zts2), cons(yts2, flatten(zts1))), cons(u, cons(yts1, app(flatten(zts2), cons(yts2, flatten(zts1)))))), cons(v, cons(yts1, app(flatten(zts2), cons(yts2, flatten(zts1)))))) = app(app(flatten(zts2), cons(yts2, flatten(zts1))), cons(u, cons(yts1, app(app(flatten(zts2), cons(yts2, flatten(zts1))), cons(v, cons(yts1, app(flatten(zts2), cons(yts2, flatten(zts1)))))))))
	app(app(app(app(flatten(zts3), cons(yts3, flatten(zts2))), cons(yts2, flatten(zts1))), cons(u, cons(yts1, app(app(flatten(zts3), cons(yts3, flatten(zts2))), cons(yts2, flatten(zts1)))))), cons(v, cons(yts1, app(app(flatten(zts3), cons(yts3, flatten(zts2))), cons(yts2, flatten(zts1)))))) = app(app(app(flatten(zts3), cons(yts3, flatten(zts2))), cons(yts2, flatten(zts1))), cons(u, cons(yts1, app(app(app(flatten(zts3), cons(yts3, flatten(zts2))), cons(yts2, flatten(zts1))), cons(v, cons(yts1, app(app(flatten(zts3), cons(yts3, flatten(zts2))), cons(yts2, flatten(zts1)))))))))
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	app(app(flatten(x), cons(u, flatten(x))), cons(v, flatten(x))) -> app(flatten(x), cons(u, app(flatten(x), cons(v, flatten(x)))))
	app(app(flatten(zts), cons(u, cons(yts, flatten(zts)))), cons(v, cons(yts, flatten(zts)))) -> app(flatten(zts), cons(u, cons(yts, app(flatten(zts), cons(v, cons(yts, flatten(zts)))))))
	app(app(app(flatten(xts), cons(yts, flatten(zts))), cons(u, app(flatten(xts), cons(yts, flatten(zts))))), cons(v, app(flatten(xts), cons(yts, flatten(zts))))) -> app(app(flatten(xts), cons(yts, flatten(zts))), cons(u, app(app(flatten(xts), cons(yts, flatten(zts))), cons(v, app(flatten(xts), cons(yts, flatten(zts)))))))
	app(app(app(app(flatten(xts), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1))), cons(u, app(app(flatten(xts), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1))))), cons(v, app(app(flatten(xts), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1))))) -> app(app(app(flatten(xts), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1))), cons(u, app(app(app(flatten(xts), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1))), cons(v, app(app(flatten(xts), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1)))))))
	app(app(app(app(app(flatten(xts), cons(yts3, flatten(zts3))), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1))), cons(u, app(app(app(flatten(xts), cons(yts3, flatten(zts3))), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1))))), cons(v, app(app(app(flatten(xts), cons(yts3, flatten(zts3))), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1))))) -> app(app(app(app(flatten(xts), cons(yts3, flatten(zts3))), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1))), cons(u, app(app(app(app(flatten(xts), cons(yts3, flatten(zts3))), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1))), cons(v, app(app(app(flatten(xts), cons(yts3, flatten(zts3))), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1)))))))
--- Primal Grammar:
+++ Presburger system  = {
	^f1(0; xts, yts@, zts@) -> flatten(xts)
	^f1($n1 + 1; xts, yts@, zts@) -> app(^f1($n1; xts, yts@, zts@), cons(yts$n1, flatten(zts$n1)))
+++ }
+++ Lemma(s)           = 
	app(app(app(^f1($n; xts, yts@, zts@), cons(yts$n, flatten(zts$n))), cons(u, app(^f1($n; xts, yts, zts), cons(yts$n, flatten(zts$n))))), cons(v, app(^f1($n; xts, yts, zts), cons(yts$n, flatten(zts$n))))) = app(app(^f1($n; xts, yts, zts), cons(yts$n, flatten(zts$n))), cons(u, app(app(^f1($n; xts, yts, zts), cons(yts$n, flatten(zts$n))), cons(v, app(^f1($n; xts, yts, zts), cons(yts$n, flatten(zts$n)))))))

+++ treating clause
	app(app(app(flatten(zts2), cons(yts2, flatten(zts1))), cons(u, cons(yts1, app(flatten(zts2), cons(yts2, flatten(zts1)))))), cons(v, cons(yts1, app(flatten(zts2), cons(yts2, flatten(zts1)))))) = app(app(flatten(zts2), cons(yts2, flatten(zts1))), cons(u, cons(yts1, app(app(flatten(zts2), cons(yts2, flatten(zts1))), cons(v, cons(yts1, app(flatten(zts2), cons(yts2, flatten(zts1)))))))))
+++ inductive narrowing on conjecture
	app(app(app(flatten(zts2), cons(yts2, flatten(zts1))), cons(u, cons(yts1, app(flatten(zts2), cons(yts2, flatten(zts1)))))), cons(v, cons(yts1, app(flatten(zts2), cons(yts2, flatten(zts1)))))) = app(app(flatten(zts2), cons(yts2, flatten(zts1))), cons(u, cons(yts1, app(app(flatten(zts2), cons(yts2, flatten(zts1))), cons(v, cons(yts1, app(flatten(zts2), cons(yts2, flatten(zts1)))))))))
... induction variables of
	app(app(app(flatten(zts2), cons(yts2, flatten(zts1))), cons(u, cons(yts1, app(flatten(zts2), cons(yts2, flatten(zts1)))))), cons(v, cons(yts1, app(flatten(zts2), cons(yts2, flatten(zts1)))))) = app(app(flatten(zts2), cons(yts2, flatten(zts1))), cons(u, cons(yts1, app(app(flatten(zts2), cons(yts2, flatten(zts1))), cons(v, cons(yts1, app(flatten(zts2), cons(yts2, flatten(zts1)))))))))
... are:
	zts1:tree
	zts2:tree
+++ perform INDUCTIVE NARROWING on conjecture 
	app(app(app(flatten(zts2), cons(yts2, flatten(zts1))), cons(u, cons(yts1, app(flatten(zts2), cons(yts2, flatten(zts1)))))), cons(v, cons(yts1, app(flatten(zts2), cons(yts2, flatten(zts1)))))) = app(app(flatten(zts2), cons(yts2, flatten(zts1))), cons(u, cons(yts1, app(app(flatten(zts2), cons(yts2, flatten(zts1))), cons(v, cons(yts1, app(flatten(zts2), cons(yts2, flatten(zts1)))))))))
... with variable zts1
+++ creating new conjecture
	app(app(app(flatten(zts), cons(yts2, flatten(leaf))), cons(u, cons(yts1, app(flatten(zts), cons(yts2, flatten(leaf)))))), cons(v, cons(yts1, app(flatten(zts), cons(yts2, flatten(leaf)))))) = app(app(flatten(zts), cons(yts2, flatten(leaf))), cons(u, cons(yts1, app(app(flatten(zts), cons(yts2, flatten(leaf))), cons(v, cons(yts1, app(flatten(zts), cons(yts2, flatten(leaf)))))))))
+++ creating new conjecture
	app(app(app(flatten(zts2), cons(yts3, flatten(node(xts, yts2, zts1)))), cons(u, cons(yts1, app(flatten(zts2), cons(yts3, flatten(node(xts, yts2, zts1))))))), cons(v, cons(yts1, app(flatten(zts2), cons(yts3, flatten(node(xts, yts2, zts1))))))) = app(app(flatten(zts2), cons(yts3, flatten(node(xts, yts2, zts1)))), cons(u, cons(yts1, app(app(flatten(zts2), cons(yts3, flatten(node(xts, yts2, zts1)))), cons(v, cons(yts1, app(flatten(zts2), cons(yts3, flatten(node(xts, yts2, zts1))))))))))
--- clause
	app(app(app(flatten(zts), cons(yts2, flatten(leaf))), cons(u, cons(yts1, app(flatten(zts), cons(yts2, flatten(leaf)))))), cons(v, cons(yts1, app(flatten(zts), cons(yts2, flatten(leaf)))))) = app(app(flatten(zts), cons(yts2, flatten(leaf))), cons(u, cons(yts1, app(app(flatten(zts), cons(yts2, flatten(leaf))), cons(v, cons(yts1, app(flatten(zts), cons(yts2, flatten(leaf)))))))))
... reduced in 6 steps to
	app(app(app(flatten(zts), cons(yts2, nil)), cons(u, cons(yts1, app(flatten(zts), cons(yts2, nil))))), cons(v, cons(yts1, app(flatten(zts), cons(yts2, nil))))) = app(app(flatten(zts), cons(yts2, nil)), cons(u, cons(yts1, app(app(flatten(zts), cons(yts2, nil)), cons(v, cons(yts1, app(flatten(zts), cons(yts2, nil))))))))
--- clause
	app(app(app(flatten(zts2), cons(yts3, flatten(node(xts, yts2, zts1)))), cons(u, cons(yts1, app(flatten(zts2), cons(yts3, flatten(node(xts, yts2, zts1))))))), cons(v, cons(yts1, app(flatten(zts2), cons(yts3, flatten(node(xts, yts2, zts1))))))) = app(app(flatten(zts2), cons(yts3, flatten(node(xts, yts2, zts1)))), cons(u, cons(yts1, app(app(flatten(zts2), cons(yts3, flatten(node(xts, yts2, zts1)))), cons(v, cons(yts1, app(flatten(zts2), cons(yts3, flatten(node(xts, yts2, zts1))))))))))
... reduced in 6 steps to
	app(app(app(flatten(zts2), cons(yts3, app(flatten(xts), cons(yts2, flatten(zts1))))), cons(u, cons(yts1, app(flatten(zts2), cons(yts3, app(flatten(xts), cons(yts2, flatten(zts1)))))))), cons(v, cons(yts1, app(flatten(zts2), cons(yts3, app(flatten(xts), cons(yts2, flatten(zts1)))))))) = app(app(flatten(zts2), cons(yts3, app(flatten(xts), cons(yts2, flatten(zts1))))), cons(u, cons(yts1, app(app(flatten(zts2), cons(yts3, app(flatten(xts), cons(yts2, flatten(zts1))))), cons(v, cons(yts1, app(flatten(zts2), cons(yts3, app(flatten(xts), cons(yts2, flatten(zts1)))))))))))
+++ inductive narrowing succeeded
--- clause
	app(app(app(flatten(zts2), cons(yts2, flatten(zts1))), cons(u, cons(yts1, app(flatten(zts2), cons(yts2, flatten(zts1)))))), cons(v, cons(yts1, app(flatten(zts2), cons(yts2, flatten(zts1)))))) = app(app(flatten(zts2), cons(yts2, flatten(zts1))), cons(u, cons(yts1, app(app(flatten(zts2), cons(yts2, flatten(zts1))), cons(v, cons(yts1, app(flatten(zts2), cons(yts2, flatten(zts1)))))))))
... oriented to rule
	app(app(app(flatten(zts2), cons(yts2, flatten(zts1))), cons(u, cons(yts1, app(flatten(zts2), cons(yts2, flatten(zts1)))))), cons(v, cons(yts1, app(flatten(zts2), cons(yts2, flatten(zts1)))))) -> app(app(flatten(zts2), cons(yts2, flatten(zts1))), cons(u, cons(yts1, app(app(flatten(zts2), cons(yts2, flatten(zts1))), cons(v, cons(yts1, app(flatten(zts2), cons(yts2, flatten(zts1)))))))))
+++ added new clause(s)
	app(app(app(flatten(zts), cons(yts2, nil)), cons(u, cons(yts1, app(flatten(zts), cons(yts2, nil))))), cons(v, cons(yts1, app(flatten(zts), cons(yts2, nil))))) = app(app(flatten(zts), cons(yts2, nil)), cons(u, cons(yts1, app(app(flatten(zts), cons(yts2, nil)), cons(v, cons(yts1, app(flatten(zts), cons(yts2, nil))))))))
	app(app(app(flatten(zts2), cons(yts3, app(flatten(xts), cons(yts2, flatten(zts1))))), cons(u, cons(yts1, app(flatten(zts2), cons(yts3, app(flatten(xts), cons(yts2, flatten(zts1)))))))), cons(v, cons(yts1, app(flatten(zts2), cons(yts3, app(flatten(xts), cons(yts2, flatten(zts1)))))))) = app(app(flatten(zts2), cons(yts3, app(flatten(xts), cons(yts2, flatten(zts1))))), cons(u, cons(yts1, app(app(flatten(zts2), cons(yts3, app(flatten(xts), cons(yts2, flatten(zts1))))), cons(v, cons(yts1, app(flatten(zts2), cons(yts3, app(flatten(xts), cons(yts2, flatten(zts1)))))))))))
... to conjectures

+++ Status of the Inference System
--- Conjectures:
	app(app(app(app(flatten(zts3), cons(yts3, flatten(zts2))), cons(yts2, flatten(zts1))), cons(u, cons(yts1, app(app(flatten(zts3), cons(yts3, flatten(zts2))), cons(yts2, flatten(zts1)))))), cons(v, cons(yts1, app(app(flatten(zts3), cons(yts3, flatten(zts2))), cons(yts2, flatten(zts1)))))) = app(app(app(flatten(zts3), cons(yts3, flatten(zts2))), cons(yts2, flatten(zts1))), cons(u, cons(yts1, app(app(app(flatten(zts3), cons(yts3, flatten(zts2))), cons(yts2, flatten(zts1))), cons(v, cons(yts1, app(app(flatten(zts3), cons(yts3, flatten(zts2))), cons(yts2, flatten(zts1)))))))))
	app(app(app(flatten(zts), cons(yts2, nil)), cons(u, cons(yts1, app(flatten(zts), cons(yts2, nil))))), cons(v, cons(yts1, app(flatten(zts), cons(yts2, nil))))) = app(app(flatten(zts), cons(yts2, nil)), cons(u, cons(yts1, app(app(flatten(zts), cons(yts2, nil)), cons(v, cons(yts1, app(flatten(zts), cons(yts2, nil))))))))
	app(app(app(flatten(zts2), cons(yts3, app(flatten(xts), cons(yts2, flatten(zts1))))), cons(u, cons(yts1, app(flatten(zts2), cons(yts3, app(flatten(xts), cons(yts2, flatten(zts1)))))))), cons(v, cons(yts1, app(flatten(zts2), cons(yts3, app(flatten(xts), cons(yts2, flatten(zts1)))))))) = app(app(flatten(zts2), cons(yts3, app(flatten(xts), cons(yts2, flatten(zts1))))), cons(u, cons(yts1, app(app(flatten(zts2), cons(yts3, app(flatten(xts), cons(yts2, flatten(zts1))))), cons(v, cons(yts1, app(flatten(zts2), cons(yts3, app(flatten(xts), cons(yts2, flatten(zts1)))))))))))
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	app(app(flatten(x), cons(u, flatten(x))), cons(v, flatten(x))) -> app(flatten(x), cons(u, app(flatten(x), cons(v, flatten(x)))))
	app(app(flatten(zts), cons(u, cons(yts, flatten(zts)))), cons(v, cons(yts, flatten(zts)))) -> app(flatten(zts), cons(u, cons(yts, app(flatten(zts), cons(v, cons(yts, flatten(zts)))))))
	app(app(app(flatten(xts), cons(yts, flatten(zts))), cons(u, app(flatten(xts), cons(yts, flatten(zts))))), cons(v, app(flatten(xts), cons(yts, flatten(zts))))) -> app(app(flatten(xts), cons(yts, flatten(zts))), cons(u, app(app(flatten(xts), cons(yts, flatten(zts))), cons(v, app(flatten(xts), cons(yts, flatten(zts)))))))
	app(app(app(flatten(zts2), cons(yts2, flatten(zts1))), cons(u, cons(yts1, app(flatten(zts2), cons(yts2, flatten(zts1)))))), cons(v, cons(yts1, app(flatten(zts2), cons(yts2, flatten(zts1)))))) -> app(app(flatten(zts2), cons(yts2, flatten(zts1))), cons(u, cons(yts1, app(app(flatten(zts2), cons(yts2, flatten(zts1))), cons(v, cons(yts1, app(flatten(zts2), cons(yts2, flatten(zts1)))))))))
	app(app(app(app(flatten(xts), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1))), cons(u, app(app(flatten(xts), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1))))), cons(v, app(app(flatten(xts), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1))))) -> app(app(app(flatten(xts), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1))), cons(u, app(app(app(flatten(xts), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1))), cons(v, app(app(flatten(xts), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1)))))))
	app(app(app(app(app(flatten(xts), cons(yts3, flatten(zts3))), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1))), cons(u, app(app(app(flatten(xts), cons(yts3, flatten(zts3))), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1))))), cons(v, app(app(app(flatten(xts), cons(yts3, flatten(zts3))), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1))))) -> app(app(app(app(flatten(xts), cons(yts3, flatten(zts3))), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1))), cons(u, app(app(app(app(flatten(xts), cons(yts3, flatten(zts3))), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1))), cons(v, app(app(app(flatten(xts), cons(yts3, flatten(zts3))), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1)))))))
--- Primal Grammar:
+++ Presburger system  = {
	^f1(0; xts, yts@, zts@) -> flatten(xts)
	^f1($n1 + 1; xts, yts@, zts@) -> app(^f1($n1; xts, yts@, zts@), cons(yts$n1, flatten(zts$n1)))
+++ }
+++ Lemma(s)           = 
	app(app(app(^f1($n; xts, yts@, zts@), cons(yts$n, flatten(zts$n))), cons(u, app(^f1($n; xts, yts, zts), cons(yts$n, flatten(zts$n))))), cons(v, app(^f1($n; xts, yts, zts), cons(yts$n, flatten(zts$n))))) = app(app(^f1($n; xts, yts, zts), cons(yts$n, flatten(zts$n))), cons(u, app(app(^f1($n; xts, yts, zts), cons(yts$n, flatten(zts$n))), cons(v, app(^f1($n; xts, yts, zts), cons(yts$n, flatten(zts$n)))))))

+++ treating clause
	app(app(app(app(flatten(zts3), cons(yts3, flatten(zts2))), cons(yts2, flatten(zts1))), cons(u, cons(yts1, app(app(flatten(zts3), cons(yts3, flatten(zts2))), cons(yts2, flatten(zts1)))))), cons(v, cons(yts1, app(app(flatten(zts3), cons(yts3, flatten(zts2))), cons(yts2, flatten(zts1)))))) = app(app(app(flatten(zts3), cons(yts3, flatten(zts2))), cons(yts2, flatten(zts1))), cons(u, cons(yts1, app(app(app(flatten(zts3), cons(yts3, flatten(zts2))), cons(yts2, flatten(zts1))), cons(v, cons(yts1, app(app(flatten(zts3), cons(yts3, flatten(zts2))), cons(yts2, flatten(zts1)))))))))
+++ inductive narrowing on conjecture
	app(app(app(app(flatten(zts3), cons(yts3, flatten(zts2))), cons(yts2, flatten(zts1))), cons(u, cons(yts1, app(app(flatten(zts3), cons(yts3, flatten(zts2))), cons(yts2, flatten(zts1)))))), cons(v, cons(yts1, app(app(flatten(zts3), cons(yts3, flatten(zts2))), cons(yts2, flatten(zts1)))))) = app(app(app(flatten(zts3), cons(yts3, flatten(zts2))), cons(yts2, flatten(zts1))), cons(u, cons(yts1, app(app(app(flatten(zts3), cons(yts3, flatten(zts2))), cons(yts2, flatten(zts1))), cons(v, cons(yts1, app(app(flatten(zts3), cons(yts3, flatten(zts2))), cons(yts2, flatten(zts1)))))))))
... induction variables of
	app(app(app(app(flatten(zts3), cons(yts3, flatten(zts2))), cons(yts2, flatten(zts1))), cons(u, cons(yts1, app(app(flatten(zts3), cons(yts3, flatten(zts2))), cons(yts2, flatten(zts1)))))), cons(v, cons(yts1, app(app(flatten(zts3), cons(yts3, flatten(zts2))), cons(yts2, flatten(zts1)))))) = app(app(app(flatten(zts3), cons(yts3, flatten(zts2))), cons(yts2, flatten(zts1))), cons(u, cons(yts1, app(app(app(flatten(zts3), cons(yts3, flatten(zts2))), cons(yts2, flatten(zts1))), cons(v, cons(yts1, app(app(flatten(zts3), cons(yts3, flatten(zts2))), cons(yts2, flatten(zts1)))))))))
... are:
	zts1:tree
	zts2:tree
	zts3:tree
+++ perform INDUCTIVE NARROWING on conjecture 
	app(app(app(app(flatten(zts3), cons(yts3, flatten(zts2))), cons(yts2, flatten(zts1))), cons(u, cons(yts1, app(app(flatten(zts3), cons(yts3, flatten(zts2))), cons(yts2, flatten(zts1)))))), cons(v, cons(yts1, app(app(flatten(zts3), cons(yts3, flatten(zts2))), cons(yts2, flatten(zts1)))))) = app(app(app(flatten(zts3), cons(yts3, flatten(zts2))), cons(yts2, flatten(zts1))), cons(u, cons(yts1, app(app(app(flatten(zts3), cons(yts3, flatten(zts2))), cons(yts2, flatten(zts1))), cons(v, cons(yts1, app(app(flatten(zts3), cons(yts3, flatten(zts2))), cons(yts2, flatten(zts1)))))))))
... with variable zts1
+++ creating new conjecture
	app(app(app(app(flatten(zts2), cons(yts3, flatten(zts1))), cons(yts2, flatten(leaf))), cons(u, cons(yts1, app(app(flatten(zts2), cons(yts3, flatten(zts1))), cons(yts2, flatten(leaf)))))), cons(v, cons(yts1, app(app(flatten(zts2), cons(yts3, flatten(zts1))), cons(yts2, flatten(leaf)))))) = app(app(app(flatten(zts2), cons(yts3, flatten(zts1))), cons(yts2, flatten(leaf))), cons(u, cons(yts1, app(app(app(flatten(zts2), cons(yts3, flatten(zts1))), cons(yts2, flatten(leaf))), cons(v, cons(yts1, app(app(flatten(zts2), cons(yts3, flatten(zts1))), cons(yts2, flatten(leaf)))))))))
+++ creating new conjecture
	app(app(app(app(flatten(zts3), cons(yts4, flatten(zts2))), cons(yts3, flatten(node(xts, yts2, zts1)))), cons(u, cons(yts1, app(app(flatten(zts3), cons(yts4, flatten(zts2))), cons(yts3, flatten(node(xts, yts2, zts1))))))), cons(v, cons(yts1, app(app(flatten(zts3), cons(yts4, flatten(zts2))), cons(yts3, flatten(node(xts, yts2, zts1))))))) = app(app(app(flatten(zts3), cons(yts4, flatten(zts2))), cons(yts3, flatten(node(xts, yts2, zts1)))), cons(u, cons(yts1, app(app(app(flatten(zts3), cons(yts4, flatten(zts2))), cons(yts3, flatten(node(xts, yts2, zts1)))), cons(v, cons(yts1, app(app(flatten(zts3), cons(yts4, flatten(zts2))), cons(yts3, flatten(node(xts, yts2, zts1))))))))))
--- clause
	app(app(app(app(flatten(zts2), cons(yts3, flatten(zts1))), cons(yts2, flatten(leaf))), cons(u, cons(yts1, app(app(flatten(zts2), cons(yts3, flatten(zts1))), cons(yts2, flatten(leaf)))))), cons(v, cons(yts1, app(app(flatten(zts2), cons(yts3, flatten(zts1))), cons(yts2, flatten(leaf)))))) = app(app(app(flatten(zts2), cons(yts3, flatten(zts1))), cons(yts2, flatten(leaf))), cons(u, cons(yts1, app(app(app(flatten(zts2), cons(yts3, flatten(zts1))), cons(yts2, flatten(leaf))), cons(v, cons(yts1, app(app(flatten(zts2), cons(yts3, flatten(zts1))), cons(yts2, flatten(leaf)))))))))
... reduced in 6 steps to
	app(app(app(app(flatten(zts2), cons(yts3, flatten(zts1))), cons(yts2, nil)), cons(u, cons(yts1, app(app(flatten(zts2), cons(yts3, flatten(zts1))), cons(yts2, nil))))), cons(v, cons(yts1, app(app(flatten(zts2), cons(yts3, flatten(zts1))), cons(yts2, nil))))) = app(app(app(flatten(zts2), cons(yts3, flatten(zts1))), cons(yts2, nil)), cons(u, cons(yts1, app(app(app(flatten(zts2), cons(yts3, flatten(zts1))), cons(yts2, nil)), cons(v, cons(yts1, app(app(flatten(zts2), cons(yts3, flatten(zts1))), cons(yts2, nil))))))))
--- clause
	app(app(app(app(flatten(zts3), cons(yts4, flatten(zts2))), cons(yts3, flatten(node(xts, yts2, zts1)))), cons(u, cons(yts1, app(app(flatten(zts3), cons(yts4, flatten(zts2))), cons(yts3, flatten(node(xts, yts2, zts1))))))), cons(v, cons(yts1, app(app(flatten(zts3), cons(yts4, flatten(zts2))), cons(yts3, flatten(node(xts, yts2, zts1))))))) = app(app(app(flatten(zts3), cons(yts4, flatten(zts2))), cons(yts3, flatten(node(xts, yts2, zts1)))), cons(u, cons(yts1, app(app(app(flatten(zts3), cons(yts4, flatten(zts2))), cons(yts3, flatten(node(xts, yts2, zts1)))), cons(v, cons(yts1, app(app(flatten(zts3), cons(yts4, flatten(zts2))), cons(yts3, flatten(node(xts, yts2, zts1))))))))))
... reduced in 6 steps to
	app(app(app(app(flatten(zts3), cons(yts4, flatten(zts2))), cons(yts3, app(flatten(xts), cons(yts2, flatten(zts1))))), cons(u, cons(yts1, app(app(flatten(zts3), cons(yts4, flatten(zts2))), cons(yts3, app(flatten(xts), cons(yts2, flatten(zts1)))))))), cons(v, cons(yts1, app(app(flatten(zts3), cons(yts4, flatten(zts2))), cons(yts3, app(flatten(xts), cons(yts2, flatten(zts1)))))))) = app(app(app(flatten(zts3), cons(yts4, flatten(zts2))), cons(yts3, app(flatten(xts), cons(yts2, flatten(zts1))))), cons(u, cons(yts1, app(app(app(flatten(zts3), cons(yts4, flatten(zts2))), cons(yts3, app(flatten(xts), cons(yts2, flatten(zts1))))), cons(v, cons(yts1, app(app(flatten(zts3), cons(yts4, flatten(zts2))), cons(yts3, app(flatten(xts), cons(yts2, flatten(zts1)))))))))))
+++ inductive narrowing succeeded
--- clause
	app(app(app(app(flatten(zts3), cons(yts3, flatten(zts2))), cons(yts2, flatten(zts1))), cons(u, cons(yts1, app(app(flatten(zts3), cons(yts3, flatten(zts2))), cons(yts2, flatten(zts1)))))), cons(v, cons(yts1, app(app(flatten(zts3), cons(yts3, flatten(zts2))), cons(yts2, flatten(zts1)))))) = app(app(app(flatten(zts3), cons(yts3, flatten(zts2))), cons(yts2, flatten(zts1))), cons(u, cons(yts1, app(app(app(flatten(zts3), cons(yts3, flatten(zts2))), cons(yts2, flatten(zts1))), cons(v, cons(yts1, app(app(flatten(zts3), cons(yts3, flatten(zts2))), cons(yts2, flatten(zts1)))))))))
... oriented to rule
	app(app(app(app(flatten(zts3), cons(yts3, flatten(zts2))), cons(yts2, flatten(zts1))), cons(u, cons(yts1, app(app(flatten(zts3), cons(yts3, flatten(zts2))), cons(yts2, flatten(zts1)))))), cons(v, cons(yts1, app(app(flatten(zts3), cons(yts3, flatten(zts2))), cons(yts2, flatten(zts1)))))) -> app(app(app(flatten(zts3), cons(yts3, flatten(zts2))), cons(yts2, flatten(zts1))), cons(u, cons(yts1, app(app(app(flatten(zts3), cons(yts3, flatten(zts2))), cons(yts2, flatten(zts1))), cons(v, cons(yts1, app(app(flatten(zts3), cons(yts3, flatten(zts2))), cons(yts2, flatten(zts1)))))))))
+++ added new clause(s)
	app(app(app(app(flatten(zts2), cons(yts3, flatten(zts1))), cons(yts2, nil)), cons(u, cons(yts1, app(app(flatten(zts2), cons(yts3, flatten(zts1))), cons(yts2, nil))))), cons(v, cons(yts1, app(app(flatten(zts2), cons(yts3, flatten(zts1))), cons(yts2, nil))))) = app(app(app(flatten(zts2), cons(yts3, flatten(zts1))), cons(yts2, nil)), cons(u, cons(yts1, app(app(app(flatten(zts2), cons(yts3, flatten(zts1))), cons(yts2, nil)), cons(v, cons(yts1, app(app(flatten(zts2), cons(yts3, flatten(zts1))), cons(yts2, nil))))))))
	app(app(app(app(flatten(zts3), cons(yts4, flatten(zts2))), cons(yts3, app(flatten(xts), cons(yts2, flatten(zts1))))), cons(u, cons(yts1, app(app(flatten(zts3), cons(yts4, flatten(zts2))), cons(yts3, app(flatten(xts), cons(yts2, flatten(zts1)))))))), cons(v, cons(yts1, app(app(flatten(zts3), cons(yts4, flatten(zts2))), cons(yts3, app(flatten(xts), cons(yts2, flatten(zts1)))))))) = app(app(app(flatten(zts3), cons(yts4, flatten(zts2))), cons(yts3, app(flatten(xts), cons(yts2, flatten(zts1))))), cons(u, cons(yts1, app(app(app(flatten(zts3), cons(yts4, flatten(zts2))), cons(yts3, app(flatten(xts), cons(yts2, flatten(zts1))))), cons(v, cons(yts1, app(app(flatten(zts3), cons(yts4, flatten(zts2))), cons(yts3, app(flatten(xts), cons(yts2, flatten(zts1)))))))))))
... to conjectures
+++ active wrap
	app(app(., cons(u, cons(yts, .))), cons(v, cons(yts, .))) = app(., cons(u, cons(yts, app(., cons(v, cons(yts, .))))))
... with sequence
	app(app(flatten(zts), cons(u, cons(yts, flatten(zts)))), cons(v, cons(yts, flatten(zts)))) = app(flatten(zts), cons(u, cons(yts, app(flatten(zts), cons(v, cons(yts, flatten(zts)))))))
	app(app(app(flatten(zts2), cons(yts2, flatten(zts1))), cons(u, cons(yts1, app(flatten(zts2), cons(yts2, flatten(zts1)))))), cons(v, cons(yts1, app(flatten(zts2), cons(yts2, flatten(zts1)))))) = app(app(flatten(zts2), cons(yts2, flatten(zts1))), cons(u, cons(yts1, app(app(flatten(zts2), cons(yts2, flatten(zts1))), cons(v, cons(yts1, app(flatten(zts2), cons(yts2, flatten(zts1)))))))))
	app(app(app(app(flatten(zts3), cons(yts3, flatten(zts2))), cons(yts2, flatten(zts1))), cons(u, cons(yts1, app(app(flatten(zts3), cons(yts3, flatten(zts2))), cons(yts2, flatten(zts1)))))), cons(v, cons(yts1, app(app(flatten(zts3), cons(yts3, flatten(zts2))), cons(yts2, flatten(zts1)))))) = app(app(app(flatten(zts3), cons(yts3, flatten(zts2))), cons(yts2, flatten(zts1))), cons(u, cons(yts1, app(app(app(flatten(zts3), cons(yts3, flatten(zts2))), cons(yts2, flatten(zts1))), cons(v, cons(yts1, app(app(flatten(zts3), cons(yts3, flatten(zts2))), cons(yts2, flatten(zts1)))))))))
+++ primal grammar found for head
	{app, cons, flatten}
... and wrap
	app(app(., cons(u, cons(yts, .))), cons(v, cons(yts, .))) = app(., cons(u, cons(yts, app(., cons(v, cons(yts, .))))))
+++ Presburger system  = {
	^f2(0; yts@, zts@) -> flatten(zts0)
	^f2($n2 + 1; yts@, zts@) -> app(^f2($n2; yts@, zts@), cons(yts$n2, flatten(zts$n2)))
+++ }
+++ Lemma(s)           = 
	app(app(^f2($n; yts@, zts@), cons(u, cons(yts$n, ^f2($n; yts, zts)))), cons(v, cons(yts$n, ^f2($n; yts, zts)))) = app(^f2($n; yts, zts), cons(u, cons(yts$n, app(^f2($n; yts, zts), cons(v, cons(yts$n, ^f2($n; yts, zts)))))))

+++ Status of the Inference System
--- Conjectures:
	app(app(app(flatten(zts), cons(yts2, nil)), cons(u, cons(yts1, app(flatten(zts), cons(yts2, nil))))), cons(v, cons(yts1, app(flatten(zts), cons(yts2, nil))))) = app(app(flatten(zts), cons(yts2, nil)), cons(u, cons(yts1, app(app(flatten(zts), cons(yts2, nil)), cons(v, cons(yts1, app(flatten(zts), cons(yts2, nil))))))))
	app(app(app(flatten(zts2), cons(yts3, app(flatten(xts), cons(yts2, flatten(zts1))))), cons(u, cons(yts1, app(flatten(zts2), cons(yts3, app(flatten(xts), cons(yts2, flatten(zts1)))))))), cons(v, cons(yts1, app(flatten(zts2), cons(yts3, app(flatten(xts), cons(yts2, flatten(zts1)))))))) = app(app(flatten(zts2), cons(yts3, app(flatten(xts), cons(yts2, flatten(zts1))))), cons(u, cons(yts1, app(app(flatten(zts2), cons(yts3, app(flatten(xts), cons(yts2, flatten(zts1))))), cons(v, cons(yts1, app(flatten(zts2), cons(yts3, app(flatten(xts), cons(yts2, flatten(zts1)))))))))))
	app(app(app(app(flatten(zts2), cons(yts3, flatten(zts1))), cons(yts2, nil)), cons(u, cons(yts1, app(app(flatten(zts2), cons(yts3, flatten(zts1))), cons(yts2, nil))))), cons(v, cons(yts1, app(app(flatten(zts2), cons(yts3, flatten(zts1))), cons(yts2, nil))))) = app(app(app(flatten(zts2), cons(yts3, flatten(zts1))), cons(yts2, nil)), cons(u, cons(yts1, app(app(app(flatten(zts2), cons(yts3, flatten(zts1))), cons(yts2, nil)), cons(v, cons(yts1, app(app(flatten(zts2), cons(yts3, flatten(zts1))), cons(yts2, nil))))))))
	app(app(app(app(flatten(zts3), cons(yts4, flatten(zts2))), cons(yts3, app(flatten(xts), cons(yts2, flatten(zts1))))), cons(u, cons(yts1, app(app(flatten(zts3), cons(yts4, flatten(zts2))), cons(yts3, app(flatten(xts), cons(yts2, flatten(zts1)))))))), cons(v, cons(yts1, app(app(flatten(zts3), cons(yts4, flatten(zts2))), cons(yts3, app(flatten(xts), cons(yts2, flatten(zts1)))))))) = app(app(app(flatten(zts3), cons(yts4, flatten(zts2))), cons(yts3, app(flatten(xts), cons(yts2, flatten(zts1))))), cons(u, cons(yts1, app(app(app(flatten(zts3), cons(yts4, flatten(zts2))), cons(yts3, app(flatten(xts), cons(yts2, flatten(zts1))))), cons(v, cons(yts1, app(app(flatten(zts3), cons(yts4, flatten(zts2))), cons(yts3, app(flatten(xts), cons(yts2, flatten(zts1)))))))))))
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	app(app(flatten(x), cons(u, flatten(x))), cons(v, flatten(x))) -> app(flatten(x), cons(u, app(flatten(x), cons(v, flatten(x)))))
	app(app(flatten(zts), cons(u, cons(yts, flatten(zts)))), cons(v, cons(yts, flatten(zts)))) -> app(flatten(zts), cons(u, cons(yts, app(flatten(zts), cons(v, cons(yts, flatten(zts)))))))
	app(app(app(flatten(xts), cons(yts, flatten(zts))), cons(u, app(flatten(xts), cons(yts, flatten(zts))))), cons(v, app(flatten(xts), cons(yts, flatten(zts))))) -> app(app(flatten(xts), cons(yts, flatten(zts))), cons(u, app(app(flatten(xts), cons(yts, flatten(zts))), cons(v, app(flatten(xts), cons(yts, flatten(zts)))))))
	app(app(app(flatten(zts2), cons(yts2, flatten(zts1))), cons(u, cons(yts1, app(flatten(zts2), cons(yts2, flatten(zts1)))))), cons(v, cons(yts1, app(flatten(zts2), cons(yts2, flatten(zts1)))))) -> app(app(flatten(zts2), cons(yts2, flatten(zts1))), cons(u, cons(yts1, app(app(flatten(zts2), cons(yts2, flatten(zts1))), cons(v, cons(yts1, app(flatten(zts2), cons(yts2, flatten(zts1)))))))))
	app(app(app(app(flatten(xts), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1))), cons(u, app(app(flatten(xts), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1))))), cons(v, app(app(flatten(xts), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1))))) -> app(app(app(flatten(xts), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1))), cons(u, app(app(app(flatten(xts), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1))), cons(v, app(app(flatten(xts), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1)))))))
	app(app(app(app(flatten(zts3), cons(yts3, flatten(zts2))), cons(yts2, flatten(zts1))), cons(u, cons(yts1, app(app(flatten(zts3), cons(yts3, flatten(zts2))), cons(yts2, flatten(zts1)))))), cons(v, cons(yts1, app(app(flatten(zts3), cons(yts3, flatten(zts2))), cons(yts2, flatten(zts1)))))) -> app(app(app(flatten(zts3), cons(yts3, flatten(zts2))), cons(yts2, flatten(zts1))), cons(u, cons(yts1, app(app(app(flatten(zts3), cons(yts3, flatten(zts2))), cons(yts2, flatten(zts1))), cons(v, cons(yts1, app(app(flatten(zts3), cons(yts3, flatten(zts2))), cons(yts2, flatten(zts1)))))))))
	app(app(app(app(app(flatten(xts), cons(yts3, flatten(zts3))), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1))), cons(u, app(app(app(flatten(xts), cons(yts3, flatten(zts3))), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1))))), cons(v, app(app(app(flatten(xts), cons(yts3, flatten(zts3))), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1))))) -> app(app(app(app(flatten(xts), cons(yts3, flatten(zts3))), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1))), cons(u, app(app(app(app(flatten(xts), cons(yts3, flatten(zts3))), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1))), cons(v, app(app(app(flatten(xts), cons(yts3, flatten(zts3))), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1)))))))
--- Primal Grammar:
+++ Presburger system  = {
	^f1(0; xts, yts@, zts@) -> flatten(xts)
	^f1($n1 + 1; xts, yts@, zts@) -> app(^f1($n1; xts, yts@, zts@), cons(yts$n1, flatten(zts$n1)))
	^f2(0; yts@, zts@) -> flatten(zts0)
	^f2($n2 + 1; yts@, zts@) -> app(^f2($n2; yts@, zts@), cons(yts$n2, flatten(zts$n2)))
+++ }
+++ Lemma(s)           = 
	app(app(app(^f1($n; xts, yts@, zts@), cons(yts$n, flatten(zts$n))), cons(u, app(^f1($n; xts, yts, zts), cons(yts$n, flatten(zts$n))))), cons(v, app(^f1($n; xts, yts, zts), cons(yts$n, flatten(zts$n))))) = app(app(^f1($n; xts, yts, zts), cons(yts$n, flatten(zts$n))), cons(u, app(app(^f1($n; xts, yts, zts), cons(yts$n, flatten(zts$n))), cons(v, app(^f1($n; xts, yts, zts), cons(yts$n, flatten(zts$n)))))))
	app(app(^f2($n; yts@, zts@), cons(u, cons(yts$n, ^f2($n; yts, zts)))), cons(v, cons(yts$n, ^f2($n; yts, zts)))) = app(^f2($n; yts, zts), cons(u, cons(yts$n, app(^f2($n; yts, zts), cons(v, cons(yts$n, ^f2($n; yts, zts)))))))

+++ treating clause
	app(app(app(flatten(zts), cons(yts2, nil)), cons(u, cons(yts1, app(flatten(zts), cons(yts2, nil))))), cons(v, cons(yts1, app(flatten(zts), cons(yts2, nil))))) = app(app(flatten(zts), cons(yts2, nil)), cons(u, cons(yts1, app(app(flatten(zts), cons(yts2, nil)), cons(v, cons(yts1, app(flatten(zts), cons(yts2, nil))))))))
+++ inductive narrowing on conjecture
	app(app(app(flatten(zts), cons(yts2, nil)), cons(u, cons(yts1, app(flatten(zts), cons(yts2, nil))))), cons(v, cons(yts1, app(flatten(zts), cons(yts2, nil))))) = app(app(flatten(zts), cons(yts2, nil)), cons(u, cons(yts1, app(app(flatten(zts), cons(yts2, nil)), cons(v, cons(yts1, app(flatten(zts), cons(yts2, nil))))))))
... induction variables of
	app(app(app(flatten(zts), cons(yts2, nil)), cons(u, cons(yts1, app(flatten(zts), cons(yts2, nil))))), cons(v, cons(yts1, app(flatten(zts), cons(yts2, nil))))) = app(app(flatten(zts), cons(yts2, nil)), cons(u, cons(yts1, app(app(flatten(zts), cons(yts2, nil)), cons(v, cons(yts1, app(flatten(zts), cons(yts2, nil))))))))
... are:
	zts:tree
+++ perform INDUCTIVE NARROWING on conjecture 
	app(app(app(flatten(zts), cons(yts2, nil)), cons(u, cons(yts1, app(flatten(zts), cons(yts2, nil))))), cons(v, cons(yts1, app(flatten(zts), cons(yts2, nil))))) = app(app(flatten(zts), cons(yts2, nil)), cons(u, cons(yts1, app(app(flatten(zts), cons(yts2, nil)), cons(v, cons(yts1, app(flatten(zts), cons(yts2, nil))))))))
... with variable zts
+++ creating new conjecture
	app(app(app(flatten(leaf), cons(yts2, nil)), cons(u, cons(yts1, app(flatten(leaf), cons(yts2, nil))))), cons(v, cons(yts1, app(flatten(leaf), cons(yts2, nil))))) = app(app(flatten(leaf), cons(yts2, nil)), cons(u, cons(yts1, app(app(flatten(leaf), cons(yts2, nil)), cons(v, cons(yts1, app(flatten(leaf), cons(yts2, nil))))))))
+++ creating new conjecture
	app(app(app(flatten(node(xts, yts3, zts)), cons(yts2, nil)), cons(u, cons(yts1, app(flatten(node(xts, yts3, zts)), cons(yts2, nil))))), cons(v, cons(yts1, app(flatten(node(xts, yts3, zts)), cons(yts2, nil))))) = app(app(flatten(node(xts, yts3, zts)), cons(yts2, nil)), cons(u, cons(yts1, app(app(flatten(node(xts, yts3, zts)), cons(yts2, nil)), cons(v, cons(yts1, app(flatten(node(xts, yts3, zts)), cons(yts2, nil))))))))
--- clause
	app(app(app(flatten(leaf), cons(yts2, nil)), cons(u, cons(yts1, app(flatten(leaf), cons(yts2, nil))))), cons(v, cons(yts1, app(flatten(leaf), cons(yts2, nil))))) = app(app(flatten(leaf), cons(yts2, nil)), cons(u, cons(yts1, app(app(flatten(leaf), cons(yts2, nil)), cons(v, cons(yts1, app(flatten(leaf), cons(yts2, nil))))))))
... reduced to tautology
	cons(yts2, cons(u, cons(yts1, cons(yts2, cons(v, cons(yts1, cons(yts2, nil))))))) = cons(yts2, cons(u, cons(yts1, cons(yts2, cons(v, cons(yts1, cons(yts2, nil)))))))
--- clause
	app(app(app(flatten(node(xts, yts3, zts)), cons(yts2, nil)), cons(u, cons(yts1, app(flatten(node(xts, yts3, zts)), cons(yts2, nil))))), cons(v, cons(yts1, app(flatten(node(xts, yts3, zts)), cons(yts2, nil))))) = app(app(flatten(node(xts, yts3, zts)), cons(yts2, nil)), cons(u, cons(yts1, app(app(flatten(node(xts, yts3, zts)), cons(yts2, nil)), cons(v, cons(yts1, app(flatten(node(xts, yts3, zts)), cons(yts2, nil))))))))
... reduced in 6 steps to
	app(app(app(app(flatten(xts), cons(yts3, flatten(zts))), cons(yts2, nil)), cons(u, cons(yts1, app(app(flatten(xts), cons(yts3, flatten(zts))), cons(yts2, nil))))), cons(v, cons(yts1, app(app(flatten(xts), cons(yts3, flatten(zts))), cons(yts2, nil))))) = app(app(app(flatten(xts), cons(yts3, flatten(zts))), cons(yts2, nil)), cons(u, cons(yts1, app(app(app(flatten(xts), cons(yts3, flatten(zts))), cons(yts2, nil)), cons(v, cons(yts1, app(app(flatten(xts), cons(yts3, flatten(zts))), cons(yts2, nil))))))))
--- clause
	app(app(app(app(flatten(xts), cons(yts3, flatten(zts))), cons(yts2, nil)), cons(u, cons(yts1, app(app(flatten(xts), cons(yts3, flatten(zts))), cons(yts2, nil))))), cons(v, cons(yts1, app(app(flatten(xts), cons(yts3, flatten(zts))), cons(yts2, nil))))) = app(app(app(flatten(xts), cons(yts3, flatten(zts))), cons(yts2, nil)), cons(u, cons(yts1, app(app(app(flatten(xts), cons(yts3, flatten(zts))), cons(yts2, nil)), cons(v, cons(yts1, app(app(flatten(xts), cons(yts3, flatten(zts))), cons(yts2, nil))))))))
... subsumed by an existing conjecture
+++ inductive narrowing succeeded
--- clause
	app(app(app(flatten(zts), cons(yts2, nil)), cons(u, cons(yts1, app(flatten(zts), cons(yts2, nil))))), cons(v, cons(yts1, app(flatten(zts), cons(yts2, nil))))) = app(app(flatten(zts), cons(yts2, nil)), cons(u, cons(yts1, app(app(flatten(zts), cons(yts2, nil)), cons(v, cons(yts1, app(flatten(zts), cons(yts2, nil))))))))
... oriented to rule
	app(app(app(flatten(zts), cons(yts2, nil)), cons(u, cons(yts1, app(flatten(zts), cons(yts2, nil))))), cons(v, cons(yts1, app(flatten(zts), cons(yts2, nil))))) -> app(app(flatten(zts), cons(yts2, nil)), cons(u, cons(yts1, app(app(flatten(zts), cons(yts2, nil)), cons(v, cons(yts1, app(flatten(zts), cons(yts2, nil))))))))

+++ Status of the Inference System
--- Conjectures:
	app(app(app(flatten(zts2), cons(yts3, app(flatten(xts), cons(yts2, flatten(zts1))))), cons(u, cons(yts1, app(flatten(zts2), cons(yts3, app(flatten(xts), cons(yts2, flatten(zts1)))))))), cons(v, cons(yts1, app(flatten(zts2), cons(yts3, app(flatten(xts), cons(yts2, flatten(zts1)))))))) = app(app(flatten(zts2), cons(yts3, app(flatten(xts), cons(yts2, flatten(zts1))))), cons(u, cons(yts1, app(app(flatten(zts2), cons(yts3, app(flatten(xts), cons(yts2, flatten(zts1))))), cons(v, cons(yts1, app(flatten(zts2), cons(yts3, app(flatten(xts), cons(yts2, flatten(zts1)))))))))))
	app(app(app(app(flatten(zts2), cons(yts3, flatten(zts1))), cons(yts2, nil)), cons(u, cons(yts1, app(app(flatten(zts2), cons(yts3, flatten(zts1))), cons(yts2, nil))))), cons(v, cons(yts1, app(app(flatten(zts2), cons(yts3, flatten(zts1))), cons(yts2, nil))))) = app(app(app(flatten(zts2), cons(yts3, flatten(zts1))), cons(yts2, nil)), cons(u, cons(yts1, app(app(app(flatten(zts2), cons(yts3, flatten(zts1))), cons(yts2, nil)), cons(v, cons(yts1, app(app(flatten(zts2), cons(yts3, flatten(zts1))), cons(yts2, nil))))))))
	app(app(app(app(flatten(zts3), cons(yts4, flatten(zts2))), cons(yts3, app(flatten(xts), cons(yts2, flatten(zts1))))), cons(u, cons(yts1, app(app(flatten(zts3), cons(yts4, flatten(zts2))), cons(yts3, app(flatten(xts), cons(yts2, flatten(zts1)))))))), cons(v, cons(yts1, app(app(flatten(zts3), cons(yts4, flatten(zts2))), cons(yts3, app(flatten(xts), cons(yts2, flatten(zts1)))))))) = app(app(app(flatten(zts3), cons(yts4, flatten(zts2))), cons(yts3, app(flatten(xts), cons(yts2, flatten(zts1))))), cons(u, cons(yts1, app(app(app(flatten(zts3), cons(yts4, flatten(zts2))), cons(yts3, app(flatten(xts), cons(yts2, flatten(zts1))))), cons(v, cons(yts1, app(app(flatten(zts3), cons(yts4, flatten(zts2))), cons(yts3, app(flatten(xts), cons(yts2, flatten(zts1)))))))))))
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	app(app(flatten(x), cons(u, flatten(x))), cons(v, flatten(x))) -> app(flatten(x), cons(u, app(flatten(x), cons(v, flatten(x)))))
	app(app(flatten(zts), cons(u, cons(yts, flatten(zts)))), cons(v, cons(yts, flatten(zts)))) -> app(flatten(zts), cons(u, cons(yts, app(flatten(zts), cons(v, cons(yts, flatten(zts)))))))
	app(app(app(flatten(xts), cons(yts, flatten(zts))), cons(u, app(flatten(xts), cons(yts, flatten(zts))))), cons(v, app(flatten(xts), cons(yts, flatten(zts))))) -> app(app(flatten(xts), cons(yts, flatten(zts))), cons(u, app(app(flatten(xts), cons(yts, flatten(zts))), cons(v, app(flatten(xts), cons(yts, flatten(zts)))))))
	app(app(app(flatten(zts), cons(yts2, nil)), cons(u, cons(yts1, app(flatten(zts), cons(yts2, nil))))), cons(v, cons(yts1, app(flatten(zts), cons(yts2, nil))))) -> app(app(flatten(zts), cons(yts2, nil)), cons(u, cons(yts1, app(app(flatten(zts), cons(yts2, nil)), cons(v, cons(yts1, app(flatten(zts), cons(yts2, nil))))))))
	app(app(app(flatten(zts2), cons(yts2, flatten(zts1))), cons(u, cons(yts1, app(flatten(zts2), cons(yts2, flatten(zts1)))))), cons(v, cons(yts1, app(flatten(zts2), cons(yts2, flatten(zts1)))))) -> app(app(flatten(zts2), cons(yts2, flatten(zts1))), cons(u, cons(yts1, app(app(flatten(zts2), cons(yts2, flatten(zts1))), cons(v, cons(yts1, app(flatten(zts2), cons(yts2, flatten(zts1)))))))))
	app(app(app(app(flatten(xts), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1))), cons(u, app(app(flatten(xts), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1))))), cons(v, app(app(flatten(xts), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1))))) -> app(app(app(flatten(xts), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1))), cons(u, app(app(app(flatten(xts), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1))), cons(v, app(app(flatten(xts), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1)))))))
	app(app(app(app(flatten(zts3), cons(yts3, flatten(zts2))), cons(yts2, flatten(zts1))), cons(u, cons(yts1, app(app(flatten(zts3), cons(yts3, flatten(zts2))), cons(yts2, flatten(zts1)))))), cons(v, cons(yts1, app(app(flatten(zts3), cons(yts3, flatten(zts2))), cons(yts2, flatten(zts1)))))) -> app(app(app(flatten(zts3), cons(yts3, flatten(zts2))), cons(yts2, flatten(zts1))), cons(u, cons(yts1, app(app(app(flatten(zts3), cons(yts3, flatten(zts2))), cons(yts2, flatten(zts1))), cons(v, cons(yts1, app(app(flatten(zts3), cons(yts3, flatten(zts2))), cons(yts2, flatten(zts1)))))))))
	app(app(app(app(app(flatten(xts), cons(yts3, flatten(zts3))), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1))), cons(u, app(app(app(flatten(xts), cons(yts3, flatten(zts3))), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1))))), cons(v, app(app(app(flatten(xts), cons(yts3, flatten(zts3))), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1))))) -> app(app(app(app(flatten(xts), cons(yts3, flatten(zts3))), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1))), cons(u, app(app(app(app(flatten(xts), cons(yts3, flatten(zts3))), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1))), cons(v, app(app(app(flatten(xts), cons(yts3, flatten(zts3))), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1)))))))
--- Primal Grammar:
+++ Presburger system  = {
	^f1(0; xts, yts@, zts@) -> flatten(xts)
	^f1($n1 + 1; xts, yts@, zts@) -> app(^f1($n1; xts, yts@, zts@), cons(yts$n1, flatten(zts$n1)))
	^f2(0; yts@, zts@) -> flatten(zts0)
	^f2($n2 + 1; yts@, zts@) -> app(^f2($n2; yts@, zts@), cons(yts$n2, flatten(zts$n2)))
+++ }
+++ Lemma(s)           = 
	app(app(app(^f1($n; xts, yts@, zts@), cons(yts$n, flatten(zts$n))), cons(u, app(^f1($n; xts, yts, zts), cons(yts$n, flatten(zts$n))))), cons(v, app(^f1($n; xts, yts, zts), cons(yts$n, flatten(zts$n))))) = app(app(^f1($n; xts, yts, zts), cons(yts$n, flatten(zts$n))), cons(u, app(app(^f1($n; xts, yts, zts), cons(yts$n, flatten(zts$n))), cons(v, app(^f1($n; xts, yts, zts), cons(yts$n, flatten(zts$n)))))))
	app(app(^f2($n; yts@, zts@), cons(u, cons(yts$n, ^f2($n; yts, zts)))), cons(v, cons(yts$n, ^f2($n; yts, zts)))) = app(^f2($n; yts, zts), cons(u, cons(yts$n, app(^f2($n; yts, zts), cons(v, cons(yts$n, ^f2($n; yts, zts)))))))

+++ treating clause
	app(app(app(flatten(zts2), cons(yts3, app(flatten(xts), cons(yts2, flatten(zts1))))), cons(u, cons(yts1, app(flatten(zts2), cons(yts3, app(flatten(xts), cons(yts2, flatten(zts1)))))))), cons(v, cons(yts1, app(flatten(zts2), cons(yts3, app(flatten(xts), cons(yts2, flatten(zts1)))))))) = app(app(flatten(zts2), cons(yts3, app(flatten(xts), cons(yts2, flatten(zts1))))), cons(u, cons(yts1, app(app(flatten(zts2), cons(yts3, app(flatten(xts), cons(yts2, flatten(zts1))))), cons(v, cons(yts1, app(flatten(zts2), cons(yts3, app(flatten(xts), cons(yts2, flatten(zts1)))))))))))
+++ inductive narrowing on conjecture
	app(app(app(flatten(zts2), cons(yts3, app(flatten(xts), cons(yts2, flatten(zts1))))), cons(u, cons(yts1, app(flatten(zts2), cons(yts3, app(flatten(xts), cons(yts2, flatten(zts1)))))))), cons(v, cons(yts1, app(flatten(zts2), cons(yts3, app(flatten(xts), cons(yts2, flatten(zts1)))))))) = app(app(flatten(zts2), cons(yts3, app(flatten(xts), cons(yts2, flatten(zts1))))), cons(u, cons(yts1, app(app(flatten(zts2), cons(yts3, app(flatten(xts), cons(yts2, flatten(zts1))))), cons(v, cons(yts1, app(flatten(zts2), cons(yts3, app(flatten(xts), cons(yts2, flatten(zts1)))))))))))
... induction variables of
	app(app(app(flatten(zts2), cons(yts3, app(flatten(xts), cons(yts2, flatten(zts1))))), cons(u, cons(yts1, app(flatten(zts2), cons(yts3, app(flatten(xts), cons(yts2, flatten(zts1)))))))), cons(v, cons(yts1, app(flatten(zts2), cons(yts3, app(flatten(xts), cons(yts2, flatten(zts1)))))))) = app(app(flatten(zts2), cons(yts3, app(flatten(xts), cons(yts2, flatten(zts1))))), cons(u, cons(yts1, app(app(flatten(zts2), cons(yts3, app(flatten(xts), cons(yts2, flatten(zts1))))), cons(v, cons(yts1, app(flatten(zts2), cons(yts3, app(flatten(xts), cons(yts2, flatten(zts1)))))))))))
... are:
	xts:tree
	zts1:tree
	zts2:tree
+++ perform INDUCTIVE NARROWING on conjecture 
	app(app(app(flatten(zts2), cons(yts3, app(flatten(xts), cons(yts2, flatten(zts1))))), cons(u, cons(yts1, app(flatten(zts2), cons(yts3, app(flatten(xts), cons(yts2, flatten(zts1)))))))), cons(v, cons(yts1, app(flatten(zts2), cons(yts3, app(flatten(xts), cons(yts2, flatten(zts1)))))))) = app(app(flatten(zts2), cons(yts3, app(flatten(xts), cons(yts2, flatten(zts1))))), cons(u, cons(yts1, app(app(flatten(zts2), cons(yts3, app(flatten(xts), cons(yts2, flatten(zts1))))), cons(v, cons(yts1, app(flatten(zts2), cons(yts3, app(flatten(xts), cons(yts2, flatten(zts1)))))))))))
... with variable xts
+++ creating new conjecture
	app(app(app(flatten(zts2), cons(yts3, app(flatten(leaf), cons(yts2, flatten(zts1))))), cons(u, cons(yts1, app(flatten(zts2), cons(yts3, app(flatten(leaf), cons(yts2, flatten(zts1)))))))), cons(v, cons(yts1, app(flatten(zts2), cons(yts3, app(flatten(leaf), cons(yts2, flatten(zts1)))))))) = app(app(flatten(zts2), cons(yts3, app(flatten(leaf), cons(yts2, flatten(zts1))))), cons(u, cons(yts1, app(app(flatten(zts2), cons(yts3, app(flatten(leaf), cons(yts2, flatten(zts1))))), cons(v, cons(yts1, app(flatten(zts2), cons(yts3, app(flatten(leaf), cons(yts2, flatten(zts1)))))))))))
+++ creating new conjecture
	app(app(app(flatten(zts3), cons(yts4, app(flatten(node(xts, yts3, zts2)), cons(yts2, flatten(zts1))))), cons(u, cons(yts1, app(flatten(zts3), cons(yts4, app(flatten(node(xts, yts3, zts2)), cons(yts2, flatten(zts1)))))))), cons(v, cons(yts1, app(flatten(zts3), cons(yts4, app(flatten(node(xts, yts3, zts2)), cons(yts2, flatten(zts1)))))))) = app(app(flatten(zts3), cons(yts4, app(flatten(node(xts, yts3, zts2)), cons(yts2, flatten(zts1))))), cons(u, cons(yts1, app(app(flatten(zts3), cons(yts4, app(flatten(node(xts, yts3, zts2)), cons(yts2, flatten(zts1))))), cons(v, cons(yts1, app(flatten(zts3), cons(yts4, app(flatten(node(xts, yts3, zts2)), cons(yts2, flatten(zts1)))))))))))
--- clause
	app(app(app(flatten(zts2), cons(yts3, app(flatten(leaf), cons(yts2, flatten(zts1))))), cons(u, cons(yts1, app(flatten(zts2), cons(yts3, app(flatten(leaf), cons(yts2, flatten(zts1)))))))), cons(v, cons(yts1, app(flatten(zts2), cons(yts3, app(flatten(leaf), cons(yts2, flatten(zts1)))))))) = app(app(flatten(zts2), cons(yts3, app(flatten(leaf), cons(yts2, flatten(zts1))))), cons(u, cons(yts1, app(app(flatten(zts2), cons(yts3, app(flatten(leaf), cons(yts2, flatten(zts1))))), cons(v, cons(yts1, app(flatten(zts2), cons(yts3, app(flatten(leaf), cons(yts2, flatten(zts1)))))))))))
... reduced in 12 steps to
	app(app(app(flatten(zts2), cons(yts3, cons(yts2, flatten(zts1)))), cons(u, cons(yts1, app(flatten(zts2), cons(yts3, cons(yts2, flatten(zts1))))))), cons(v, cons(yts1, app(flatten(zts2), cons(yts3, cons(yts2, flatten(zts1))))))) = app(app(flatten(zts2), cons(yts3, cons(yts2, flatten(zts1)))), cons(u, cons(yts1, app(app(flatten(zts2), cons(yts3, cons(yts2, flatten(zts1)))), cons(v, cons(yts1, app(flatten(zts2), cons(yts3, cons(yts2, flatten(zts1))))))))))
--- clause
	app(app(app(flatten(zts3), cons(yts4, app(flatten(node(xts, yts3, zts2)), cons(yts2, flatten(zts1))))), cons(u, cons(yts1, app(flatten(zts3), cons(yts4, app(flatten(node(xts, yts3, zts2)), cons(yts2, flatten(zts1)))))))), cons(v, cons(yts1, app(flatten(zts3), cons(yts4, app(flatten(node(xts, yts3, zts2)), cons(yts2, flatten(zts1)))))))) = app(app(flatten(zts3), cons(yts4, app(flatten(node(xts, yts3, zts2)), cons(yts2, flatten(zts1))))), cons(u, cons(yts1, app(app(flatten(zts3), cons(yts4, app(flatten(node(xts, yts3, zts2)), cons(yts2, flatten(zts1))))), cons(v, cons(yts1, app(flatten(zts3), cons(yts4, app(flatten(node(xts, yts3, zts2)), cons(yts2, flatten(zts1)))))))))))
... reduced in 6 steps to
	app(app(app(flatten(zts3), cons(yts4, app(app(flatten(xts), cons(yts3, flatten(zts2))), cons(yts2, flatten(zts1))))), cons(u, cons(yts1, app(flatten(zts3), cons(yts4, app(app(flatten(xts), cons(yts3, flatten(zts2))), cons(yts2, flatten(zts1)))))))), cons(v, cons(yts1, app(flatten(zts3), cons(yts4, app(app(flatten(xts), cons(yts3, flatten(zts2))), cons(yts2, flatten(zts1)))))))) = app(app(flatten(zts3), cons(yts4, app(app(flatten(xts), cons(yts3, flatten(zts2))), cons(yts2, flatten(zts1))))), cons(u, cons(yts1, app(app(flatten(zts3), cons(yts4, app(app(flatten(xts), cons(yts3, flatten(zts2))), cons(yts2, flatten(zts1))))), cons(v, cons(yts1, app(flatten(zts3), cons(yts4, app(app(flatten(xts), cons(yts3, flatten(zts2))), cons(yts2, flatten(zts1)))))))))))
+++ inductive narrowing succeeded
--- clause
	app(app(app(flatten(zts2), cons(yts3, app(flatten(xts), cons(yts2, flatten(zts1))))), cons(u, cons(yts1, app(flatten(zts2), cons(yts3, app(flatten(xts), cons(yts2, flatten(zts1)))))))), cons(v, cons(yts1, app(flatten(zts2), cons(yts3, app(flatten(xts), cons(yts2, flatten(zts1)))))))) = app(app(flatten(zts2), cons(yts3, app(flatten(xts), cons(yts2, flatten(zts1))))), cons(u, cons(yts1, app(app(flatten(zts2), cons(yts3, app(flatten(xts), cons(yts2, flatten(zts1))))), cons(v, cons(yts1, app(flatten(zts2), cons(yts3, app(flatten(xts), cons(yts2, flatten(zts1)))))))))))
... oriented to rule
	app(app(app(flatten(zts2), cons(yts3, app(flatten(xts), cons(yts2, flatten(zts1))))), cons(u, cons(yts1, app(flatten(zts2), cons(yts3, app(flatten(xts), cons(yts2, flatten(zts1)))))))), cons(v, cons(yts1, app(flatten(zts2), cons(yts3, app(flatten(xts), cons(yts2, flatten(zts1)))))))) -> app(app(flatten(zts2), cons(yts3, app(flatten(xts), cons(yts2, flatten(zts1))))), cons(u, cons(yts1, app(app(flatten(zts2), cons(yts3, app(flatten(xts), cons(yts2, flatten(zts1))))), cons(v, cons(yts1, app(flatten(zts2), cons(yts3, app(flatten(xts), cons(yts2, flatten(zts1)))))))))))
+++ added new clause(s)
	app(app(app(flatten(zts2), cons(yts3, cons(yts2, flatten(zts1)))), cons(u, cons(yts1, app(flatten(zts2), cons(yts3, cons(yts2, flatten(zts1))))))), cons(v, cons(yts1, app(flatten(zts2), cons(yts3, cons(yts2, flatten(zts1))))))) = app(app(flatten(zts2), cons(yts3, cons(yts2, flatten(zts1)))), cons(u, cons(yts1, app(app(flatten(zts2), cons(yts3, cons(yts2, flatten(zts1)))), cons(v, cons(yts1, app(flatten(zts2), cons(yts3, cons(yts2, flatten(zts1))))))))))
	app(app(app(flatten(zts3), cons(yts4, app(app(flatten(xts), cons(yts3, flatten(zts2))), cons(yts2, flatten(zts1))))), cons(u, cons(yts1, app(flatten(zts3), cons(yts4, app(app(flatten(xts), cons(yts3, flatten(zts2))), cons(yts2, flatten(zts1)))))))), cons(v, cons(yts1, app(flatten(zts3), cons(yts4, app(app(flatten(xts), cons(yts3, flatten(zts2))), cons(yts2, flatten(zts1)))))))) = app(app(flatten(zts3), cons(yts4, app(app(flatten(xts), cons(yts3, flatten(zts2))), cons(yts2, flatten(zts1))))), cons(u, cons(yts1, app(app(flatten(zts3), cons(yts4, app(app(flatten(xts), cons(yts3, flatten(zts2))), cons(yts2, flatten(zts1))))), cons(v, cons(yts1, app(flatten(zts3), cons(yts4, app(app(flatten(xts), cons(yts3, flatten(zts2))), cons(yts2, flatten(zts1)))))))))))
... to conjectures

+++ Status of the Inference System
--- Conjectures:
	app(app(app(app(flatten(zts2), cons(yts3, flatten(zts1))), cons(yts2, nil)), cons(u, cons(yts1, app(app(flatten(zts2), cons(yts3, flatten(zts1))), cons(yts2, nil))))), cons(v, cons(yts1, app(app(flatten(zts2), cons(yts3, flatten(zts1))), cons(yts2, nil))))) = app(app(app(flatten(zts2), cons(yts3, flatten(zts1))), cons(yts2, nil)), cons(u, cons(yts1, app(app(app(flatten(zts2), cons(yts3, flatten(zts1))), cons(yts2, nil)), cons(v, cons(yts1, app(app(flatten(zts2), cons(yts3, flatten(zts1))), cons(yts2, nil))))))))
	app(app(app(app(flatten(zts3), cons(yts4, flatten(zts2))), cons(yts3, app(flatten(xts), cons(yts2, flatten(zts1))))), cons(u, cons(yts1, app(app(flatten(zts3), cons(yts4, flatten(zts2))), cons(yts3, app(flatten(xts), cons(yts2, flatten(zts1)))))))), cons(v, cons(yts1, app(app(flatten(zts3), cons(yts4, flatten(zts2))), cons(yts3, app(flatten(xts), cons(yts2, flatten(zts1)))))))) = app(app(app(flatten(zts3), cons(yts4, flatten(zts2))), cons(yts3, app(flatten(xts), cons(yts2, flatten(zts1))))), cons(u, cons(yts1, app(app(app(flatten(zts3), cons(yts4, flatten(zts2))), cons(yts3, app(flatten(xts), cons(yts2, flatten(zts1))))), cons(v, cons(yts1, app(app(flatten(zts3), cons(yts4, flatten(zts2))), cons(yts3, app(flatten(xts), cons(yts2, flatten(zts1)))))))))))
	app(app(app(flatten(zts2), cons(yts3, cons(yts2, flatten(zts1)))), cons(u, cons(yts1, app(flatten(zts2), cons(yts3, cons(yts2, flatten(zts1))))))), cons(v, cons(yts1, app(flatten(zts2), cons(yts3, cons(yts2, flatten(zts1))))))) = app(app(flatten(zts2), cons(yts3, cons(yts2, flatten(zts1)))), cons(u, cons(yts1, app(app(flatten(zts2), cons(yts3, cons(yts2, flatten(zts1)))), cons(v, cons(yts1, app(flatten(zts2), cons(yts3, cons(yts2, flatten(zts1))))))))))
	app(app(app(flatten(zts3), cons(yts4, app(app(flatten(xts), cons(yts3, flatten(zts2))), cons(yts2, flatten(zts1))))), cons(u, cons(yts1, app(flatten(zts3), cons(yts4, app(app(flatten(xts), cons(yts3, flatten(zts2))), cons(yts2, flatten(zts1)))))))), cons(v, cons(yts1, app(flatten(zts3), cons(yts4, app(app(flatten(xts), cons(yts3, flatten(zts2))), cons(yts2, flatten(zts1)))))))) = app(app(flatten(zts3), cons(yts4, app(app(flatten(xts), cons(yts3, flatten(zts2))), cons(yts2, flatten(zts1))))), cons(u, cons(yts1, app(app(flatten(zts3), cons(yts4, app(app(flatten(xts), cons(yts3, flatten(zts2))), cons(yts2, flatten(zts1))))), cons(v, cons(yts1, app(flatten(zts3), cons(yts4, app(app(flatten(xts), cons(yts3, flatten(zts2))), cons(yts2, flatten(zts1)))))))))))
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	app(app(flatten(x), cons(u, flatten(x))), cons(v, flatten(x))) -> app(flatten(x), cons(u, app(flatten(x), cons(v, flatten(x)))))
	app(app(flatten(zts), cons(u, cons(yts, flatten(zts)))), cons(v, cons(yts, flatten(zts)))) -> app(flatten(zts), cons(u, cons(yts, app(flatten(zts), cons(v, cons(yts, flatten(zts)))))))
	app(app(app(flatten(xts), cons(yts, flatten(zts))), cons(u, app(flatten(xts), cons(yts, flatten(zts))))), cons(v, app(flatten(xts), cons(yts, flatten(zts))))) -> app(app(flatten(xts), cons(yts, flatten(zts))), cons(u, app(app(flatten(xts), cons(yts, flatten(zts))), cons(v, app(flatten(xts), cons(yts, flatten(zts)))))))
	app(app(app(flatten(zts), cons(yts2, nil)), cons(u, cons(yts1, app(flatten(zts), cons(yts2, nil))))), cons(v, cons(yts1, app(flatten(zts), cons(yts2, nil))))) -> app(app(flatten(zts), cons(yts2, nil)), cons(u, cons(yts1, app(app(flatten(zts), cons(yts2, nil)), cons(v, cons(yts1, app(flatten(zts), cons(yts2, nil))))))))
	app(app(app(flatten(zts2), cons(yts2, flatten(zts1))), cons(u, cons(yts1, app(flatten(zts2), cons(yts2, flatten(zts1)))))), cons(v, cons(yts1, app(flatten(zts2), cons(yts2, flatten(zts1)))))) -> app(app(flatten(zts2), cons(yts2, flatten(zts1))), cons(u, cons(yts1, app(app(flatten(zts2), cons(yts2, flatten(zts1))), cons(v, cons(yts1, app(flatten(zts2), cons(yts2, flatten(zts1)))))))))
	app(app(app(app(flatten(xts), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1))), cons(u, app(app(flatten(xts), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1))))), cons(v, app(app(flatten(xts), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1))))) -> app(app(app(flatten(xts), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1))), cons(u, app(app(app(flatten(xts), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1))), cons(v, app(app(flatten(xts), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1)))))))
	app(app(app(flatten(zts2), cons(yts3, app(flatten(xts), cons(yts2, flatten(zts1))))), cons(u, cons(yts1, app(flatten(zts2), cons(yts3, app(flatten(xts), cons(yts2, flatten(zts1)))))))), cons(v, cons(yts1, app(flatten(zts2), cons(yts3, app(flatten(xts), cons(yts2, flatten(zts1)))))))) -> app(app(flatten(zts2), cons(yts3, app(flatten(xts), cons(yts2, flatten(zts1))))), cons(u, cons(yts1, app(app(flatten(zts2), cons(yts3, app(flatten(xts), cons(yts2, flatten(zts1))))), cons(v, cons(yts1, app(flatten(zts2), cons(yts3, app(flatten(xts), cons(yts2, flatten(zts1)))))))))))
	app(app(app(app(flatten(zts3), cons(yts3, flatten(zts2))), cons(yts2, flatten(zts1))), cons(u, cons(yts1, app(app(flatten(zts3), cons(yts3, flatten(zts2))), cons(yts2, flatten(zts1)))))), cons(v, cons(yts1, app(app(flatten(zts3), cons(yts3, flatten(zts2))), cons(yts2, flatten(zts1)))))) -> app(app(app(flatten(zts3), cons(yts3, flatten(zts2))), cons(yts2, flatten(zts1))), cons(u, cons(yts1, app(app(app(flatten(zts3), cons(yts3, flatten(zts2))), cons(yts2, flatten(zts1))), cons(v, cons(yts1, app(app(flatten(zts3), cons(yts3, flatten(zts2))), cons(yts2, flatten(zts1)))))))))
	app(app(app(app(app(flatten(xts), cons(yts3, flatten(zts3))), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1))), cons(u, app(app(app(flatten(xts), cons(yts3, flatten(zts3))), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1))))), cons(v, app(app(app(flatten(xts), cons(yts3, flatten(zts3))), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1))))) -> app(app(app(app(flatten(xts), cons(yts3, flatten(zts3))), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1))), cons(u, app(app(app(app(flatten(xts), cons(yts3, flatten(zts3))), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1))), cons(v, app(app(app(flatten(xts), cons(yts3, flatten(zts3))), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1)))))))
--- Primal Grammar:
+++ Presburger system  = {
	^f1(0; xts, yts@, zts@) -> flatten(xts)
	^f1($n1 + 1; xts, yts@, zts@) -> app(^f1($n1; xts, yts@, zts@), cons(yts$n1, flatten(zts$n1)))
	^f2(0; yts@, zts@) -> flatten(zts0)
	^f2($n2 + 1; yts@, zts@) -> app(^f2($n2; yts@, zts@), cons(yts$n2, flatten(zts$n2)))
+++ }
+++ Lemma(s)           = 
	app(app(app(^f1($n; xts, yts@, zts@), cons(yts$n, flatten(zts$n))), cons(u, app(^f1($n; xts, yts, zts), cons(yts$n, flatten(zts$n))))), cons(v, app(^f1($n; xts, yts, zts), cons(yts$n, flatten(zts$n))))) = app(app(^f1($n; xts, yts, zts), cons(yts$n, flatten(zts$n))), cons(u, app(app(^f1($n; xts, yts, zts), cons(yts$n, flatten(zts$n))), cons(v, app(^f1($n; xts, yts, zts), cons(yts$n, flatten(zts$n)))))))
	app(app(^f2($n; yts@, zts@), cons(u, cons(yts$n, ^f2($n; yts, zts)))), cons(v, cons(yts$n, ^f2($n; yts, zts)))) = app(^f2($n; yts, zts), cons(u, cons(yts$n, app(^f2($n; yts, zts), cons(v, cons(yts$n, ^f2($n; yts, zts)))))))

+++ treating clause
	app(app(app(app(flatten(zts2), cons(yts3, flatten(zts1))), cons(yts2, nil)), cons(u, cons(yts1, app(app(flatten(zts2), cons(yts3, flatten(zts1))), cons(yts2, nil))))), cons(v, cons(yts1, app(app(flatten(zts2), cons(yts3, flatten(zts1))), cons(yts2, nil))))) = app(app(app(flatten(zts2), cons(yts3, flatten(zts1))), cons(yts2, nil)), cons(u, cons(yts1, app(app(app(flatten(zts2), cons(yts3, flatten(zts1))), cons(yts2, nil)), cons(v, cons(yts1, app(app(flatten(zts2), cons(yts3, flatten(zts1))), cons(yts2, nil))))))))
+++ inductive narrowing on conjecture
	app(app(app(app(flatten(zts2), cons(yts3, flatten(zts1))), cons(yts2, nil)), cons(u, cons(yts1, app(app(flatten(zts2), cons(yts3, flatten(zts1))), cons(yts2, nil))))), cons(v, cons(yts1, app(app(flatten(zts2), cons(yts3, flatten(zts1))), cons(yts2, nil))))) = app(app(app(flatten(zts2), cons(yts3, flatten(zts1))), cons(yts2, nil)), cons(u, cons(yts1, app(app(app(flatten(zts2), cons(yts3, flatten(zts1))), cons(yts2, nil)), cons(v, cons(yts1, app(app(flatten(zts2), cons(yts3, flatten(zts1))), cons(yts2, nil))))))))
... induction variables of
	app(app(app(app(flatten(zts2), cons(yts3, flatten(zts1))), cons(yts2, nil)), cons(u, cons(yts1, app(app(flatten(zts2), cons(yts3, flatten(zts1))), cons(yts2, nil))))), cons(v, cons(yts1, app(app(flatten(zts2), cons(yts3, flatten(zts1))), cons(yts2, nil))))) = app(app(app(flatten(zts2), cons(yts3, flatten(zts1))), cons(yts2, nil)), cons(u, cons(yts1, app(app(app(flatten(zts2), cons(yts3, flatten(zts1))), cons(yts2, nil)), cons(v, cons(yts1, app(app(flatten(zts2), cons(yts3, flatten(zts1))), cons(yts2, nil))))))))
... are:
	zts1:tree
	zts2:tree
+++ perform INDUCTIVE NARROWING on conjecture 
	app(app(app(app(flatten(zts2), cons(yts3, flatten(zts1))), cons(yts2, nil)), cons(u, cons(yts1, app(app(flatten(zts2), cons(yts3, flatten(zts1))), cons(yts2, nil))))), cons(v, cons(yts1, app(app(flatten(zts2), cons(yts3, flatten(zts1))), cons(yts2, nil))))) = app(app(app(flatten(zts2), cons(yts3, flatten(zts1))), cons(yts2, nil)), cons(u, cons(yts1, app(app(app(flatten(zts2), cons(yts3, flatten(zts1))), cons(yts2, nil)), cons(v, cons(yts1, app(app(flatten(zts2), cons(yts3, flatten(zts1))), cons(yts2, nil))))))))
... with variable zts1
+++ creating new conjecture
	app(app(app(app(flatten(zts), cons(yts3, flatten(leaf))), cons(yts2, nil)), cons(u, cons(yts1, app(app(flatten(zts), cons(yts3, flatten(leaf))), cons(yts2, nil))))), cons(v, cons(yts1, app(app(flatten(zts), cons(yts3, flatten(leaf))), cons(yts2, nil))))) = app(app(app(flatten(zts), cons(yts3, flatten(leaf))), cons(yts2, nil)), cons(u, cons(yts1, app(app(app(flatten(zts), cons(yts3, flatten(leaf))), cons(yts2, nil)), cons(v, cons(yts1, app(app(flatten(zts), cons(yts3, flatten(leaf))), cons(yts2, nil))))))))
+++ creating new conjecture
	app(app(app(app(flatten(zts2), cons(yts4, flatten(node(xts, yts3, zts1)))), cons(yts2, nil)), cons(u, cons(yts1, app(app(flatten(zts2), cons(yts4, flatten(node(xts, yts3, zts1)))), cons(yts2, nil))))), cons(v, cons(yts1, app(app(flatten(zts2), cons(yts4, flatten(node(xts, yts3, zts1)))), cons(yts2, nil))))) = app(app(app(flatten(zts2), cons(yts4, flatten(node(xts, yts3, zts1)))), cons(yts2, nil)), cons(u, cons(yts1, app(app(app(flatten(zts2), cons(yts4, flatten(node(xts, yts3, zts1)))), cons(yts2, nil)), cons(v, cons(yts1, app(app(flatten(zts2), cons(yts4, flatten(node(xts, yts3, zts1)))), cons(yts2, nil))))))))
--- clause
	app(app(app(app(flatten(zts), cons(yts3, flatten(leaf))), cons(yts2, nil)), cons(u, cons(yts1, app(app(flatten(zts), cons(yts3, flatten(leaf))), cons(yts2, nil))))), cons(v, cons(yts1, app(app(flatten(zts), cons(yts3, flatten(leaf))), cons(yts2, nil))))) = app(app(app(flatten(zts), cons(yts3, flatten(leaf))), cons(yts2, nil)), cons(u, cons(yts1, app(app(app(flatten(zts), cons(yts3, flatten(leaf))), cons(yts2, nil)), cons(v, cons(yts1, app(app(flatten(zts), cons(yts3, flatten(leaf))), cons(yts2, nil))))))))
... reduced in 6 steps to
	app(app(app(app(flatten(zts), cons(yts3, nil)), cons(yts2, nil)), cons(u, cons(yts1, app(app(flatten(zts), cons(yts3, nil)), cons(yts2, nil))))), cons(v, cons(yts1, app(app(flatten(zts), cons(yts3, nil)), cons(yts2, nil))))) = app(app(app(flatten(zts), cons(yts3, nil)), cons(yts2, nil)), cons(u, cons(yts1, app(app(app(flatten(zts), cons(yts3, nil)), cons(yts2, nil)), cons(v, cons(yts1, app(app(flatten(zts), cons(yts3, nil)), cons(yts2, nil))))))))
--- clause
	app(app(app(app(flatten(zts2), cons(yts4, flatten(node(xts, yts3, zts1)))), cons(yts2, nil)), cons(u, cons(yts1, app(app(flatten(zts2), cons(yts4, flatten(node(xts, yts3, zts1)))), cons(yts2, nil))))), cons(v, cons(yts1, app(app(flatten(zts2), cons(yts4, flatten(node(xts, yts3, zts1)))), cons(yts2, nil))))) = app(app(app(flatten(zts2), cons(yts4, flatten(node(xts, yts3, zts1)))), cons(yts2, nil)), cons(u, cons(yts1, app(app(app(flatten(zts2), cons(yts4, flatten(node(xts, yts3, zts1)))), cons(yts2, nil)), cons(v, cons(yts1, app(app(flatten(zts2), cons(yts4, flatten(node(xts, yts3, zts1)))), cons(yts2, nil))))))))
... reduced in 6 steps to
	app(app(app(app(flatten(zts2), cons(yts4, app(flatten(xts), cons(yts3, flatten(zts1))))), cons(yts2, nil)), cons(u, cons(yts1, app(app(flatten(zts2), cons(yts4, app(flatten(xts), cons(yts3, flatten(zts1))))), cons(yts2, nil))))), cons(v, cons(yts1, app(app(flatten(zts2), cons(yts4, app(flatten(xts), cons(yts3, flatten(zts1))))), cons(yts2, nil))))) = app(app(app(flatten(zts2), cons(yts4, app(flatten(xts), cons(yts3, flatten(zts1))))), cons(yts2, nil)), cons(u, cons(yts1, app(app(app(flatten(zts2), cons(yts4, app(flatten(xts), cons(yts3, flatten(zts1))))), cons(yts2, nil)), cons(v, cons(yts1, app(app(flatten(zts2), cons(yts4, app(flatten(xts), cons(yts3, flatten(zts1))))), cons(yts2, nil))))))))
+++ inductive narrowing succeeded
--- clause
	app(app(app(app(flatten(zts2), cons(yts3, flatten(zts1))), cons(yts2, nil)), cons(u, cons(yts1, app(app(flatten(zts2), cons(yts3, flatten(zts1))), cons(yts2, nil))))), cons(v, cons(yts1, app(app(flatten(zts2), cons(yts3, flatten(zts1))), cons(yts2, nil))))) = app(app(app(flatten(zts2), cons(yts3, flatten(zts1))), cons(yts2, nil)), cons(u, cons(yts1, app(app(app(flatten(zts2), cons(yts3, flatten(zts1))), cons(yts2, nil)), cons(v, cons(yts1, app(app(flatten(zts2), cons(yts3, flatten(zts1))), cons(yts2, nil))))))))
... oriented to rule
	app(app(app(app(flatten(zts2), cons(yts3, flatten(zts1))), cons(yts2, nil)), cons(u, cons(yts1, app(app(flatten(zts2), cons(yts3, flatten(zts1))), cons(yts2, nil))))), cons(v, cons(yts1, app(app(flatten(zts2), cons(yts3, flatten(zts1))), cons(yts2, nil))))) -> app(app(app(flatten(zts2), cons(yts3, flatten(zts1))), cons(yts2, nil)), cons(u, cons(yts1, app(app(app(flatten(zts2), cons(yts3, flatten(zts1))), cons(yts2, nil)), cons(v, cons(yts1, app(app(flatten(zts2), cons(yts3, flatten(zts1))), cons(yts2, nil))))))))
+++ added new clause(s)
	app(app(app(app(flatten(zts), cons(yts3, nil)), cons(yts2, nil)), cons(u, cons(yts1, app(app(flatten(zts), cons(yts3, nil)), cons(yts2, nil))))), cons(v, cons(yts1, app(app(flatten(zts), cons(yts3, nil)), cons(yts2, nil))))) = app(app(app(flatten(zts), cons(yts3, nil)), cons(yts2, nil)), cons(u, cons(yts1, app(app(app(flatten(zts), cons(yts3, nil)), cons(yts2, nil)), cons(v, cons(yts1, app(app(flatten(zts), cons(yts3, nil)), cons(yts2, nil))))))))
	app(app(app(app(flatten(zts2), cons(yts4, app(flatten(xts), cons(yts3, flatten(zts1))))), cons(yts2, nil)), cons(u, cons(yts1, app(app(flatten(zts2), cons(yts4, app(flatten(xts), cons(yts3, flatten(zts1))))), cons(yts2, nil))))), cons(v, cons(yts1, app(app(flatten(zts2), cons(yts4, app(flatten(xts), cons(yts3, flatten(zts1))))), cons(yts2, nil))))) = app(app(app(flatten(zts2), cons(yts4, app(flatten(xts), cons(yts3, flatten(zts1))))), cons(yts2, nil)), cons(u, cons(yts1, app(app(app(flatten(zts2), cons(yts4, app(flatten(xts), cons(yts3, flatten(zts1))))), cons(yts2, nil)), cons(v, cons(yts1, app(app(flatten(zts2), cons(yts4, app(flatten(xts), cons(yts3, flatten(zts1))))), cons(yts2, nil))))))))
... to conjectures

+++ Status of the Inference System
--- Conjectures:
	app(app(app(app(flatten(zts3), cons(yts4, flatten(zts2))), cons(yts3, app(flatten(xts), cons(yts2, flatten(zts1))))), cons(u, cons(yts1, app(app(flatten(zts3), cons(yts4, flatten(zts2))), cons(yts3, app(flatten(xts), cons(yts2, flatten(zts1)))))))), cons(v, cons(yts1, app(app(flatten(zts3), cons(yts4, flatten(zts2))), cons(yts3, app(flatten(xts), cons(yts2, flatten(zts1)))))))) = app(app(app(flatten(zts3), cons(yts4, flatten(zts2))), cons(yts3, app(flatten(xts), cons(yts2, flatten(zts1))))), cons(u, cons(yts1, app(app(app(flatten(zts3), cons(yts4, flatten(zts2))), cons(yts3, app(flatten(xts), cons(yts2, flatten(zts1))))), cons(v, cons(yts1, app(app(flatten(zts3), cons(yts4, flatten(zts2))), cons(yts3, app(flatten(xts), cons(yts2, flatten(zts1)))))))))))
	app(app(app(flatten(zts2), cons(yts3, cons(yts2, flatten(zts1)))), cons(u, cons(yts1, app(flatten(zts2), cons(yts3, cons(yts2, flatten(zts1))))))), cons(v, cons(yts1, app(flatten(zts2), cons(yts3, cons(yts2, flatten(zts1))))))) = app(app(flatten(zts2), cons(yts3, cons(yts2, flatten(zts1)))), cons(u, cons(yts1, app(app(flatten(zts2), cons(yts3, cons(yts2, flatten(zts1)))), cons(v, cons(yts1, app(flatten(zts2), cons(yts3, cons(yts2, flatten(zts1))))))))))
	app(app(app(flatten(zts3), cons(yts4, app(app(flatten(xts), cons(yts3, flatten(zts2))), cons(yts2, flatten(zts1))))), cons(u, cons(yts1, app(flatten(zts3), cons(yts4, app(app(flatten(xts), cons(yts3, flatten(zts2))), cons(yts2, flatten(zts1)))))))), cons(v, cons(yts1, app(flatten(zts3), cons(yts4, app(app(flatten(xts), cons(yts3, flatten(zts2))), cons(yts2, flatten(zts1)))))))) = app(app(flatten(zts3), cons(yts4, app(app(flatten(xts), cons(yts3, flatten(zts2))), cons(yts2, flatten(zts1))))), cons(u, cons(yts1, app(app(flatten(zts3), cons(yts4, app(app(flatten(xts), cons(yts3, flatten(zts2))), cons(yts2, flatten(zts1))))), cons(v, cons(yts1, app(flatten(zts3), cons(yts4, app(app(flatten(xts), cons(yts3, flatten(zts2))), cons(yts2, flatten(zts1)))))))))))
	app(app(app(app(flatten(zts), cons(yts3, nil)), cons(yts2, nil)), cons(u, cons(yts1, app(app(flatten(zts), cons(yts3, nil)), cons(yts2, nil))))), cons(v, cons(yts1, app(app(flatten(zts), cons(yts3, nil)), cons(yts2, nil))))) = app(app(app(flatten(zts), cons(yts3, nil)), cons(yts2, nil)), cons(u, cons(yts1, app(app(app(flatten(zts), cons(yts3, nil)), cons(yts2, nil)), cons(v, cons(yts1, app(app(flatten(zts), cons(yts3, nil)), cons(yts2, nil))))))))
	app(app(app(app(flatten(zts2), cons(yts4, app(flatten(xts), cons(yts3, flatten(zts1))))), cons(yts2, nil)), cons(u, cons(yts1, app(app(flatten(zts2), cons(yts4, app(flatten(xts), cons(yts3, flatten(zts1))))), cons(yts2, nil))))), cons(v, cons(yts1, app(app(flatten(zts2), cons(yts4, app(flatten(xts), cons(yts3, flatten(zts1))))), cons(yts2, nil))))) = app(app(app(flatten(zts2), cons(yts4, app(flatten(xts), cons(yts3, flatten(zts1))))), cons(yts2, nil)), cons(u, cons(yts1, app(app(app(flatten(zts2), cons(yts4, app(flatten(xts), cons(yts3, flatten(zts1))))), cons(yts2, nil)), cons(v, cons(yts1, app(app(flatten(zts2), cons(yts4, app(flatten(xts), cons(yts3, flatten(zts1))))), cons(yts2, nil))))))))
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	app(app(flatten(x), cons(u, flatten(x))), cons(v, flatten(x))) -> app(flatten(x), cons(u, app(flatten(x), cons(v, flatten(x)))))
	app(app(flatten(zts), cons(u, cons(yts, flatten(zts)))), cons(v, cons(yts, flatten(zts)))) -> app(flatten(zts), cons(u, cons(yts, app(flatten(zts), cons(v, cons(yts, flatten(zts)))))))
	app(app(app(flatten(xts), cons(yts, flatten(zts))), cons(u, app(flatten(xts), cons(yts, flatten(zts))))), cons(v, app(flatten(xts), cons(yts, flatten(zts))))) -> app(app(flatten(xts), cons(yts, flatten(zts))), cons(u, app(app(flatten(xts), cons(yts, flatten(zts))), cons(v, app(flatten(xts), cons(yts, flatten(zts)))))))
	app(app(app(flatten(zts), cons(yts2, nil)), cons(u, cons(yts1, app(flatten(zts), cons(yts2, nil))))), cons(v, cons(yts1, app(flatten(zts), cons(yts2, nil))))) -> app(app(flatten(zts), cons(yts2, nil)), cons(u, cons(yts1, app(app(flatten(zts), cons(yts2, nil)), cons(v, cons(yts1, app(flatten(zts), cons(yts2, nil))))))))
	app(app(app(flatten(zts2), cons(yts2, flatten(zts1))), cons(u, cons(yts1, app(flatten(zts2), cons(yts2, flatten(zts1)))))), cons(v, cons(yts1, app(flatten(zts2), cons(yts2, flatten(zts1)))))) -> app(app(flatten(zts2), cons(yts2, flatten(zts1))), cons(u, cons(yts1, app(app(flatten(zts2), cons(yts2, flatten(zts1))), cons(v, cons(yts1, app(flatten(zts2), cons(yts2, flatten(zts1)))))))))
	app(app(app(app(flatten(zts2), cons(yts3, flatten(zts1))), cons(yts2, nil)), cons(u, cons(yts1, app(app(flatten(zts2), cons(yts3, flatten(zts1))), cons(yts2, nil))))), cons(v, cons(yts1, app(app(flatten(zts2), cons(yts3, flatten(zts1))), cons(yts2, nil))))) -> app(app(app(flatten(zts2), cons(yts3, flatten(zts1))), cons(yts2, nil)), cons(u, cons(yts1, app(app(app(flatten(zts2), cons(yts3, flatten(zts1))), cons(yts2, nil)), cons(v, cons(yts1, app(app(flatten(zts2), cons(yts3, flatten(zts1))), cons(yts2, nil))))))))
	app(app(app(app(flatten(xts), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1))), cons(u, app(app(flatten(xts), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1))))), cons(v, app(app(flatten(xts), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1))))) -> app(app(app(flatten(xts), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1))), cons(u, app(app(app(flatten(xts), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1))), cons(v, app(app(flatten(xts), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1)))))))
	app(app(app(flatten(zts2), cons(yts3, app(flatten(xts), cons(yts2, flatten(zts1))))), cons(u, cons(yts1, app(flatten(zts2), cons(yts3, app(flatten(xts), cons(yts2, flatten(zts1)))))))), cons(v, cons(yts1, app(flatten(zts2), cons(yts3, app(flatten(xts), cons(yts2, flatten(zts1)))))))) -> app(app(flatten(zts2), cons(yts3, app(flatten(xts), cons(yts2, flatten(zts1))))), cons(u, cons(yts1, app(app(flatten(zts2), cons(yts3, app(flatten(xts), cons(yts2, flatten(zts1))))), cons(v, cons(yts1, app(flatten(zts2), cons(yts3, app(flatten(xts), cons(yts2, flatten(zts1)))))))))))
	app(app(app(app(flatten(zts3), cons(yts3, flatten(zts2))), cons(yts2, flatten(zts1))), cons(u, cons(yts1, app(app(flatten(zts3), cons(yts3, flatten(zts2))), cons(yts2, flatten(zts1)))))), cons(v, cons(yts1, app(app(flatten(zts3), cons(yts3, flatten(zts2))), cons(yts2, flatten(zts1)))))) -> app(app(app(flatten(zts3), cons(yts3, flatten(zts2))), cons(yts2, flatten(zts1))), cons(u, cons(yts1, app(app(app(flatten(zts3), cons(yts3, flatten(zts2))), cons(yts2, flatten(zts1))), cons(v, cons(yts1, app(app(flatten(zts3), cons(yts3, flatten(zts2))), cons(yts2, flatten(zts1)))))))))
	app(app(app(app(app(flatten(xts), cons(yts3, flatten(zts3))), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1))), cons(u, app(app(app(flatten(xts), cons(yts3, flatten(zts3))), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1))))), cons(v, app(app(app(flatten(xts), cons(yts3, flatten(zts3))), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1))))) -> app(app(app(app(flatten(xts), cons(yts3, flatten(zts3))), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1))), cons(u, app(app(app(app(flatten(xts), cons(yts3, flatten(zts3))), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1))), cons(v, app(app(app(flatten(xts), cons(yts3, flatten(zts3))), cons(yts2, flatten(zts2))), cons(yts1, flatten(zts1)))))))
--- Primal Grammar:
+++ Presburger system  = {
	^f1(0; xts, yts@, zts@) -> flatten(xts)
	^f1($n1 + 1; xts, yts@, zts@) -> app(^f1($n1; xts, yts@, zts@), cons(yts$n1, flatten(zts$n1)))
	^f2(0; yts@, zts@) -> flatten(zts0)
	^f2($n2 + 1; yts@, zts@) -> app(^f2($n2; yts@, zts@), cons(yts$n2, flatten(zts$n2)))
+++ }
+++ Lemma(s)           = 
	app(app(app(^f1($n; xts, yts@, zts@), cons(yts$n, flatten(zts$n))), cons(u, app(^f1($n; xts, yts, zts), cons(yts$n, flatten(zts$n))))), cons(v, app(^f1($n; xts, yts, zts), cons(yts$n, flatten(zts$n))))) = app(app(^f1($n; xts, yts, zts), cons(yts$n, flatten(zts$n))), cons(u, app(app(^f1($n; xts, yts, zts), cons(yts$n, flatten(zts$n))), cons(v, app(^f1($n; xts, yts, zts), cons(yts$n, flatten(zts$n)))))))
	app(app(^f2($n; yts@, zts@), cons(u, cons(yts$n, ^f2($n; yts, zts)))), cons(v, cons(yts$n, ^f2($n; yts, zts)))) = app(^f2($n; yts, zts), cons(u, cons(yts$n, app(^f2($n; yts, zts), cons(v, cons(yts$n, ^f2($n; yts, zts)))))))

+++ loop limit reached
+++ Statistics:
... Number of proof steps          = 10
... Number of induction steps      = 10
... Number of equational steps     = 0
... Number of case rewriting steps = 0
... Number of PG defined symbols   = 2
... Number of PG lemmas            = 2
... Elapsed time (seconds)         = 0.466
