+++ SPECIFICATION --- bidirectional branch, version 0.99
+++ Parameters:
    ===========
+++ input       = 0-in.txt
+++ output      = 0-out.txt
+++ trace       = 3
+++ direction   = first-to-last
+++ drop        = yes
+++ verbose     = 3
+++ split       = 4
+++ loop limit  = 10
+++ stdlib      = /usr/local/lib/indy/stdlib/
-----------------------------------------------------------------------

+++ specification BOOL from bool successfully parsed
+++ specification AND from and successfully parsed
+++ specification NAT from nat successfully parsed
+++ specification ADD from add successfully parsed
+++ specification Crafted from 0-in.txt successfully parsed
+++ Listing
         1: specification Crafted
         2: sorts
         3:      bool nat
         4: constructors
         5:      0: -> nat
         6:      false: -> bool
         7:      s: nat -> nat
         8:      true: -> bool
         9: defined functions
        10:      &&: bool bool -> bool
        11:      +: nat nat -> nat
        12:      even: nat -> bool
        13: precedence
        14:      && > + > even > s > 0 > false = true
        15: axioms
        16:      x + 0 = x;
        17:      even(0) = true;
        18:      even(s(0)) = false;
        19:      true && true = true;
        20:      x + s(y) = s(x + y);
        21:      false && true = false;
        22:      true && false = false;
        23:      false && false = false;
        24:      even(s(s(x))) = even(x);
        25: conjectures
        26:      even(x) && even(y) = even(x + y);
        27: end
+++ finitary sorts: bool
+++ Rewrite System 
	x + 0 -> x
	even(0) -> true
	even(s(0)) -> false
	true && true -> true
	x + s(y) -> s(x + y)
	false && true -> false
	true && false -> false
	false && false -> false
	even(s(s(x))) -> even(x)
+++ inductive positions:
... for &&: 0 1
... for +: 1
... for even: 0 0.0
+++ maximal depths of left-hand sides:
... for &&: 1
... for even: 3
... for +: 2
+++ general maximal depth = 3
+++ sort dependence: <empty>
+++ test sets for defined functions and sorts:
... for even
... ... nat
		0
		s(0)
		s(s(x))
... for +
... ... nat
		0
		s(x)
... for &&
... ... bool
		true
		false

+++ conjecture(s)
	even(x) && even(y) = even(x + y)

+++ inference system initiated
+++ treating clause
	even(x) && even(y) = even(x + y)
+++ inductive narrowing on conjecture
	even(x) && even(y) = even(x + y)
... induction variables of
	even(x) && even(y) = even(x + y)
... are:
	x:nat
	y:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	even(x) && even(y) = even(x + y)
... with variable x
+++ creating new conjecture
	even(0) && even(y) = even(0 + y)
+++ creating new conjecture
	even(s(0)) && even(y) = even(s(0) + y)
+++ creating new conjecture
	even(s(s(xts))) && even(y) = even(s(s(xts)) + y)
--- clause
	even(0) && even(y) = even(0 + y)
... reduced in 1 step to
	true && even(y) = even(0 + y)
--- clause
	even(s(0)) && even(y) = even(s(0) + y)
... reduced in 1 step to
	false && even(y) = even(s(0) + y)
--- clause
	even(s(s(xts))) && even(y) = even(s(s(xts)) + y)
... reduced in 1 step to
	even(xts) && even(y) = even(s(s(xts)) + y)
+++ inductive narrowing succeeded
--- clause
	even(x) && even(y) = even(x + y)
... oriented to rule
	even(x) && even(y) -> even(x + y)
+++ added new clause(s)
	true && even(y) = even(0 + y)
	false && even(y) = even(s(0) + y)
	even(xts) && even(y) = even(s(s(xts)) + y)
... to conjectures
--- clause
	even(xts) && even(y) = even(s(s(xts)) + y)
... reduced in 1 step to
	even(xts + y) = even(s(s(xts)) + y)

+++ Status of the Inference System
--- Conjectures:
	true && even(y) = even(0 + y)
	false && even(y) = even(s(0) + y)
	even(xts + y) = even(s(s(xts)) + y)
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	even(x) && even(y) -> even(x + y)
--- Primal Grammar:
	<empty>

+++ treating clause
	true && even(y) = even(0 + y)
+++ inductive narrowing on conjecture
	true && even(y) = even(0 + y)
... induction variables of
	true && even(y) = even(0 + y)
... are:
	y:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	true && even(y) = even(0 + y)
... with variable y
+++ creating new conjecture
	true && even(0) = even(0 + 0)
+++ creating new conjecture
	true && even(s(xts)) = even(0 + s(xts))
--- clause
	true && even(0) = even(0 + 0)
... reduced to tautology
	true = true
--- clause
	true && even(s(xts)) = even(0 + s(xts))
... reduced in 1 step to
	true && even(s(xts)) = even(s(0 + xts))
+++ inductive narrowing succeeded
--- clause
	true && even(y) = even(0 + y)
... oriented to rule
	true && even(y) -> even(0 + y)
+++ added new clause(s)
	true && even(s(xts)) = even(s(0 + xts))
... to conjectures
--- clause
	true && even(s(xts)) = even(s(0 + xts))
... reduced in 1 step to
	even(0 + s(xts)) = even(s(0 + xts))

+++ Status of the Inference System
--- Conjectures:
	false && even(y) = even(s(0) + y)
	even(xts + y) = even(s(s(xts)) + y)
	even(0 + s(xts)) = even(s(0 + xts))
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	true && even(y) -> even(0 + y)
	even(x) && even(y) -> even(x + y)
--- Primal Grammar:
	<empty>

--- clause
	even(0 + s(xts)) = even(s(0 + xts))
... reduced to tautology
	even(s(0 + xts)) = even(s(0 + xts))
+++ treating clause
	false && even(y) = even(s(0) + y)
+++ inductive narrowing on conjecture
	false && even(y) = even(s(0) + y)
... induction variables of
	false && even(y) = even(s(0) + y)
... are:
	y:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	false && even(y) = even(s(0) + y)
... with variable y
+++ creating new conjecture
	false && even(0) = even(s(0) + 0)
+++ creating new conjecture
	false && even(s(xts)) = even(s(0) + s(xts))
--- clause
	false && even(0) = even(s(0) + 0)
... reduced to tautology
	false = false
--- clause
	false && even(s(xts)) = even(s(0) + s(xts))
... reduced in 1 step to
	false && even(s(xts)) = even(s(s(0) + xts))
+++ inductive narrowing succeeded
--- clause
	false && even(y) = even(s(0) + y)
... oriented to rule
	false && even(y) -> even(s(0) + y)
+++ added new clause(s)
	false && even(s(xts)) = even(s(s(0) + xts))
... to conjectures
--- clause
	false && even(s(xts)) = even(s(s(0) + xts))
... reduced in 1 step to
	even(s(0) + s(xts)) = even(s(s(0) + xts))

+++ Status of the Inference System
--- Conjectures:
	even(xts + y) = even(s(s(xts)) + y)
	even(s(0) + s(xts)) = even(s(s(0) + xts))
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	true && even(y) -> even(0 + y)
	even(x) && even(y) -> even(x + y)
	false && even(y) -> even(s(0) + y)
--- Primal Grammar:
	<empty>

--- clause
	even(s(0) + s(xts)) = even(s(s(0) + xts))
... reduced to tautology
	even(s(s(0) + xts)) = even(s(s(0) + xts))
+++ treating clause
	even(xts + y) = even(s(s(xts)) + y)
+++ inductive narrowing on conjecture
	even(xts + y) = even(s(s(xts)) + y)
... induction variables of
	even(xts + y) = even(s(s(xts)) + y)
... are:
	y:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	even(xts + y) = even(s(s(xts)) + y)
... with variable y
+++ creating new conjecture
	even(xts + 0) = even(s(s(xts)) + 0)
+++ creating new conjecture
	even(xts2 + s(xts1)) = even(s(s(xts2)) + s(xts1))
--- clause
	even(xts + 0) = even(s(s(xts)) + 0)
... reduced to tautology
	even(xts) = even(xts)
--- clause
	even(xts2 + s(xts1)) = even(s(s(xts2)) + s(xts1))
... reduced in 2 steps to
	even(s(xts2 + xts1)) = even(s(s(s(xts2)) + xts1))
+++ inductive narrowing succeeded
--- clause
	even(xts + y) = even(s(s(xts)) + y)
... oriented to rule
	even(s(s(xts)) + y) -> even(xts + y)
+++ added new clause(s)
	even(s(xts2 + xts1)) = even(s(s(s(xts2)) + xts1))
... to conjectures

+++ Status of the Inference System
--- Conjectures:
	even(s(xts2 + xts1)) = even(s(s(s(xts2)) + xts1))
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	true && even(y) -> even(0 + y)
	even(x) && even(y) -> even(x + y)
	false && even(y) -> even(s(0) + y)
	even(s(s(xts)) + y) -> even(xts + y)
--- Primal Grammar:
	<empty>

+++ treating clause
	even(s(xts2 + xts1)) = even(s(s(s(xts2)) + xts1))
+++ inductive narrowing on conjecture
	even(s(xts2 + xts1)) = even(s(s(s(xts2)) + xts1))
... induction variables of
	even(s(xts2 + xts1)) = even(s(s(s(xts2)) + xts1))
... are:
	xts1:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	even(s(xts2 + xts1)) = even(s(s(s(xts2)) + xts1))
... with variable xts1
+++ creating new conjecture
	even(s(xts + 0)) = even(s(s(s(xts)) + 0))
+++ creating new conjecture
	even(s(xts2 + s(xts1))) = even(s(s(s(xts2)) + s(xts1)))
--- clause
	even(s(xts + 0)) = even(s(s(s(xts)) + 0))
... reduced to tautology
	even(s(xts)) = even(s(xts))
--- clause
	even(s(xts2 + s(xts1))) = even(s(s(s(xts2)) + s(xts1)))
... reduced to tautology
	even(xts2 + xts1) = even(xts2 + xts1)
+++ inductive narrowing succeeded
--- clause
	even(s(xts2 + xts1)) = even(s(s(s(xts2)) + xts1))
... oriented to rule
	even(s(s(s(xts2)) + xts1)) -> even(s(xts2 + xts1))

+++ Status of the Inference System
--- Conjectures:
	<empty>
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	true && even(y) -> even(0 + y)
	even(x) && even(y) -> even(x + y)
	false && even(y) -> even(s(0) + y)
	even(s(s(xts)) + y) -> even(xts + y)
	even(s(s(s(xts2)) + xts1)) -> even(s(xts2 + xts1))
--- Primal Grammar:
	<empty>

+++ SUCCESS: all conjectures proved
+++ Statistics:
... Number of proof steps          = 5
... Number of induction steps      = 5
... Number of equational steps     = 0
... Number of case rewriting steps = 0
... Elapsed time (seconds)         = 0.006
